// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/mic/market_identification_code.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MarketIdentificationCode struct {
	MIC                 string `protobuf:"bytes,1,opt,name=MIC,proto3" json:"MIC,omitempty"`
	Name                string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Location            string `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	AssetClass          string `protobuf:"bytes,4,opt,name=assetClass,proto3" json:"assetClass,omitempty"`
	Currency            string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	RegulatoryAuthority string `protobuf:"bytes,6,opt,name=regulatoryAuthority,proto3" json:"regulatoryAuthority,omitempty"`
	Status              string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Creator             string `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MarketIdentificationCode) Reset()         { *m = MarketIdentificationCode{} }
func (m *MarketIdentificationCode) String() string { return proto.CompactTextString(m) }
func (*MarketIdentificationCode) ProtoMessage()    {}
func (*MarketIdentificationCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdccc5d6811e94e3, []int{0}
}
func (m *MarketIdentificationCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketIdentificationCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketIdentificationCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketIdentificationCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketIdentificationCode.Merge(m, src)
}
func (m *MarketIdentificationCode) XXX_Size() int {
	return m.Size()
}
func (m *MarketIdentificationCode) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketIdentificationCode.DiscardUnknown(m)
}

var xxx_messageInfo_MarketIdentificationCode proto.InternalMessageInfo

func (m *MarketIdentificationCode) GetMIC() string {
	if m != nil {
		return m.MIC
	}
	return ""
}

func (m *MarketIdentificationCode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MarketIdentificationCode) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *MarketIdentificationCode) GetAssetClass() string {
	if m != nil {
		return m.AssetClass
	}
	return ""
}

func (m *MarketIdentificationCode) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MarketIdentificationCode) GetRegulatoryAuthority() string {
	if m != nil {
		return m.RegulatoryAuthority
	}
	return ""
}

func (m *MarketIdentificationCode) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MarketIdentificationCode) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*MarketIdentificationCode)(nil), "jim380.re.mic.MarketIdentificationCode")
}

func init() {
	proto.RegisterFile("re/mic/market_identification_code.proto", fileDescriptor_fdccc5d6811e94e3)
}

var fileDescriptor_fdccc5d6811e94e3 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbf, 0x4e, 0xeb, 0x30,
	0x14, 0xc6, 0xe3, 0xdb, 0xde, 0xb4, 0x58, 0x42, 0x42, 0x46, 0x42, 0x16, 0x83, 0x55, 0xb1, 0xc0,
	0x94, 0x54, 0xea, 0x82, 0xd8, 0x20, 0x53, 0x87, 0x2e, 0x1d, 0x59, 0x2a, 0xd7, 0x39, 0xb4, 0x86,
	0x38, 0xae, 0xec, 0x13, 0x89, 0xbc, 0x05, 0x8f, 0xc5, 0xd8, 0x91, 0x11, 0x25, 0xaf, 0xc1, 0x80,
	0xe2, 0x50, 0x04, 0x12, 0xdb, 0xf7, 0xef, 0xb7, 0x7c, 0xf4, 0xd2, 0x41, 0x6a, 0xb4, 0x4a, 0x8d,
	0x74, 0x4f, 0x80, 0x2b, 0x9d, 0x43, 0x89, 0xfa, 0x41, 0x2b, 0x89, 0xda, 0x96, 0x2b, 0x65, 0x73,
	0x48, 0x76, 0xce, 0xa2, 0x65, 0xc7, 0x8f, 0xda, 0xcc, 0xae, 0xa7, 0x89, 0x83, 0xc4, 0x68, 0x75,
	0xf1, 0x41, 0x28, 0x5f, 0x04, 0x66, 0xfe, 0x0b, 0xc9, 0x6c, 0x0e, 0xec, 0x84, 0x0e, 0x16, 0xf3,
	0x8c, 0x93, 0x09, 0xb9, 0x3a, 0x5a, 0x76, 0x92, 0x31, 0x3a, 0x2c, 0xa5, 0x01, 0xfe, 0x2f, 0x44,
	0x41, 0xb3, 0x73, 0x3a, 0x2e, 0x6c, 0x4f, 0xf1, 0x41, 0xc8, 0xbf, 0x3d, 0x13, 0x94, 0x4a, 0xef,
	0x01, 0xb3, 0x42, 0x7a, 0xcf, 0x87, 0xa1, 0xfd, 0x91, 0x74, 0xac, 0xaa, 0x9c, 0x83, 0x52, 0xd5,
	0xfc, 0x7f, 0xcf, 0x1e, 0x3c, 0x9b, 0xd2, 0x53, 0x07, 0x9b, 0xaa, 0x90, 0x68, 0x5d, 0x7d, 0x5b,
	0xe1, 0xd6, 0x3a, 0x8d, 0x35, 0x8f, 0xc3, 0xec, 0xaf, 0x8a, 0x9d, 0xd1, 0xd8, 0xa3, 0xc4, 0xca,
	0xf3, 0x51, 0x18, 0x7d, 0x39, 0xc6, 0xe9, 0x48, 0x39, 0xe8, 0xc6, 0x7c, 0x1c, 0x8a, 0x83, 0xbd,
	0xbb, 0x79, 0x6d, 0x04, 0xd9, 0x37, 0x82, 0xbc, 0x37, 0x82, 0xbc, 0xb4, 0x22, 0xda, 0xb7, 0x22,
	0x7a, 0x6b, 0x45, 0x74, 0x3f, 0xd9, 0x68, 0xdc, 0x56, 0xeb, 0x44, 0x59, 0x93, 0xf6, 0x97, 0xa5,
	0x4b, 0x48, 0x9f, 0xc3, 0xc9, 0x58, 0xef, 0xc0, 0xaf, 0xe3, 0x70, 0xe8, 0xec, 0x33, 0x00, 0x00,
	0xff, 0xff, 0x0e, 0xf7, 0xf1, 0xe3, 0x7b, 0x01, 0x00, 0x00,
}

func (m *MarketIdentificationCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketIdentificationCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketIdentificationCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RegulatoryAuthority) > 0 {
		i -= len(m.RegulatoryAuthority)
		copy(dAtA[i:], m.RegulatoryAuthority)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.RegulatoryAuthority)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AssetClass) > 0 {
		i -= len(m.AssetClass)
		copy(dAtA[i:], m.AssetClass)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.AssetClass)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MIC) > 0 {
		i -= len(m.MIC)
		copy(dAtA[i:], m.MIC)
		i = encodeVarintMarketIdentificationCode(dAtA, i, uint64(len(m.MIC)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarketIdentificationCode(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarketIdentificationCode(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MarketIdentificationCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MIC)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	l = len(m.AssetClass)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	l = len(m.RegulatoryAuthority)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarketIdentificationCode(uint64(l))
	}
	return n
}

func sovMarketIdentificationCode(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarketIdentificationCode(x uint64) (n int) {
	return sovMarketIdentificationCode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MarketIdentificationCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketIdentificationCode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketIdentificationCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketIdentificationCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegulatoryAuthority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegulatoryAuthority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketIdentificationCode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketIdentificationCode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarketIdentificationCode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarketIdentificationCode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketIdentificationCode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarketIdentificationCode
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarketIdentificationCode
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarketIdentificationCode
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarketIdentificationCode        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarketIdentificationCode          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarketIdentificationCode = fmt.Errorf("proto: unexpected end of group")
)
