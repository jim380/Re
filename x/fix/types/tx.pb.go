// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDeleteAccountResponse struct {
}

func (m *MsgDeleteAccountResponse) Reset()         { *m = MsgDeleteAccountResponse{} }
func (m *MsgDeleteAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteAccountResponse) ProtoMessage()    {}
func (*MsgDeleteAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{0}
}
func (m *MsgDeleteAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteAccountResponse.Merge(m, src)
}
func (m *MsgDeleteAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteAccountResponse proto.InternalMessageInfo

type MsgLogonInitiator struct {
	SessionID        string          `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	LogonInitiator   *LogonInitiator `protobuf:"bytes,2,opt,name=logonInitiator,proto3" json:"logonInitiator,omitempty"`
	Status           string          `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	IsAccepted       bool            `protobuf:"varint,4,opt,name=IsAccepted,proto3" json:"IsAccepted,omitempty"`
	InitiatorAddress string          `protobuf:"bytes,5,opt,name=initiatorAddress,proto3" json:"initiatorAddress,omitempty"`
}

func (m *MsgLogonInitiator) Reset()         { *m = MsgLogonInitiator{} }
func (m *MsgLogonInitiator) String() string { return proto.CompactTextString(m) }
func (*MsgLogonInitiator) ProtoMessage()    {}
func (*MsgLogonInitiator) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{1}
}
func (m *MsgLogonInitiator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogonInitiator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogonInitiator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogonInitiator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogonInitiator.Merge(m, src)
}
func (m *MsgLogonInitiator) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogonInitiator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogonInitiator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogonInitiator proto.InternalMessageInfo

func (m *MsgLogonInitiator) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgLogonInitiator) GetLogonInitiator() *LogonInitiator {
	if m != nil {
		return m.LogonInitiator
	}
	return nil
}

func (m *MsgLogonInitiator) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgLogonInitiator) GetIsAccepted() bool {
	if m != nil {
		return m.IsAccepted
	}
	return false
}

func (m *MsgLogonInitiator) GetInitiatorAddress() string {
	if m != nil {
		return m.InitiatorAddress
	}
	return ""
}

type MsgLogonInitiatorResponse struct {
}

func (m *MsgLogonInitiatorResponse) Reset()         { *m = MsgLogonInitiatorResponse{} }
func (m *MsgLogonInitiatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLogonInitiatorResponse) ProtoMessage()    {}
func (*MsgLogonInitiatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{2}
}
func (m *MsgLogonInitiatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogonInitiatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogonInitiatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogonInitiatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogonInitiatorResponse.Merge(m, src)
}
func (m *MsgLogonInitiatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogonInitiatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogonInitiatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogonInitiatorResponse proto.InternalMessageInfo

type MsgLogonAcceptor struct {
	SessionID       string         `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	LogonAcceptor   *LogonAcceptor `protobuf:"bytes,2,opt,name=logonAcceptor,proto3" json:"logonAcceptor,omitempty"`
	Status          string         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	IsAccepted      bool           `protobuf:"varint,4,opt,name=IsAccepted,proto3" json:"IsAccepted,omitempty"`
	AcceptorAddress string         `protobuf:"bytes,5,opt,name=acceptorAddress,proto3" json:"acceptorAddress,omitempty"`
}

func (m *MsgLogonAcceptor) Reset()         { *m = MsgLogonAcceptor{} }
func (m *MsgLogonAcceptor) String() string { return proto.CompactTextString(m) }
func (*MsgLogonAcceptor) ProtoMessage()    {}
func (*MsgLogonAcceptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{3}
}
func (m *MsgLogonAcceptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogonAcceptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogonAcceptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogonAcceptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogonAcceptor.Merge(m, src)
}
func (m *MsgLogonAcceptor) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogonAcceptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogonAcceptor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogonAcceptor proto.InternalMessageInfo

func (m *MsgLogonAcceptor) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgLogonAcceptor) GetLogonAcceptor() *LogonAcceptor {
	if m != nil {
		return m.LogonAcceptor
	}
	return nil
}

func (m *MsgLogonAcceptor) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *MsgLogonAcceptor) GetIsAccepted() bool {
	if m != nil {
		return m.IsAccepted
	}
	return false
}

func (m *MsgLogonAcceptor) GetAcceptorAddress() string {
	if m != nil {
		return m.AcceptorAddress
	}
	return ""
}

type MsgLogonAcceptorResponse struct {
}

func (m *MsgLogonAcceptorResponse) Reset()         { *m = MsgLogonAcceptorResponse{} }
func (m *MsgLogonAcceptorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLogonAcceptorResponse) ProtoMessage()    {}
func (*MsgLogonAcceptorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{4}
}
func (m *MsgLogonAcceptorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogonAcceptorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogonAcceptorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogonAcceptorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogonAcceptorResponse.Merge(m, src)
}
func (m *MsgLogonAcceptorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogonAcceptorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogonAcceptorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogonAcceptorResponse proto.InternalMessageInfo

type MsgTerminateLogon struct {
	InitiatorAddress string `protobuf:"bytes,1,opt,name=initiatorAddress,proto3" json:"initiatorAddress,omitempty"`
	SessionID        string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Address          string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgTerminateLogon) Reset()         { *m = MsgTerminateLogon{} }
func (m *MsgTerminateLogon) String() string { return proto.CompactTextString(m) }
func (*MsgTerminateLogon) ProtoMessage()    {}
func (*MsgTerminateLogon) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{5}
}
func (m *MsgTerminateLogon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminateLogon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminateLogon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminateLogon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminateLogon.Merge(m, src)
}
func (m *MsgTerminateLogon) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminateLogon) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminateLogon.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminateLogon proto.InternalMessageInfo

func (m *MsgTerminateLogon) GetInitiatorAddress() string {
	if m != nil {
		return m.InitiatorAddress
	}
	return ""
}

func (m *MsgTerminateLogon) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgTerminateLogon) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgTerminateLogonResponse struct {
}

func (m *MsgTerminateLogonResponse) Reset()         { *m = MsgTerminateLogonResponse{} }
func (m *MsgTerminateLogonResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTerminateLogonResponse) ProtoMessage()    {}
func (*MsgTerminateLogonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{6}
}
func (m *MsgTerminateLogonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminateLogonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminateLogonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminateLogonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminateLogonResponse.Merge(m, src)
}
func (m *MsgTerminateLogonResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminateLogonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminateLogonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminateLogonResponse proto.InternalMessageInfo

type MsgLogonReject struct {
	AcceptorAddress string   `protobuf:"bytes,1,opt,name=acceptorAddress,proto3" json:"acceptorAddress,omitempty"`
	SessionID       string   `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Header          *Header  `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Text            string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Trailer         *Trailer `protobuf:"bytes,5,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *MsgLogonReject) Reset()         { *m = MsgLogonReject{} }
func (m *MsgLogonReject) String() string { return proto.CompactTextString(m) }
func (*MsgLogonReject) ProtoMessage()    {}
func (*MsgLogonReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{7}
}
func (m *MsgLogonReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogonReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogonReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogonReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogonReject.Merge(m, src)
}
func (m *MsgLogonReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogonReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogonReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogonReject proto.InternalMessageInfo

func (m *MsgLogonReject) GetAcceptorAddress() string {
	if m != nil {
		return m.AcceptorAddress
	}
	return ""
}

func (m *MsgLogonReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgLogonReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MsgLogonReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgLogonReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

type MsgLogonRejectResponse struct {
}

func (m *MsgLogonRejectResponse) Reset()         { *m = MsgLogonRejectResponse{} }
func (m *MsgLogonRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLogonRejectResponse) ProtoMessage()    {}
func (*MsgLogonRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{8}
}
func (m *MsgLogonRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogonRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogonRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogonRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogonRejectResponse.Merge(m, src)
}
func (m *MsgLogonRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogonRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogonRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogonRejectResponse proto.InternalMessageInfo

type MsgLogoutInitiator struct {
	InitiatorAddress       string                  `protobuf:"bytes,1,opt,name=initiatorAddress,proto3" json:"initiatorAddress,omitempty"`
	SessionID              string                  `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SessionLogoutInitiator *SessionLogoutInitiator `protobuf:"bytes,3,opt,name=sessionLogoutInitiator,proto3" json:"sessionLogoutInitiator,omitempty"`
}

func (m *MsgLogoutInitiator) Reset()         { *m = MsgLogoutInitiator{} }
func (m *MsgLogoutInitiator) String() string { return proto.CompactTextString(m) }
func (*MsgLogoutInitiator) ProtoMessage()    {}
func (*MsgLogoutInitiator) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{9}
}
func (m *MsgLogoutInitiator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogoutInitiator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogoutInitiator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogoutInitiator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogoutInitiator.Merge(m, src)
}
func (m *MsgLogoutInitiator) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogoutInitiator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogoutInitiator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogoutInitiator proto.InternalMessageInfo

func (m *MsgLogoutInitiator) GetInitiatorAddress() string {
	if m != nil {
		return m.InitiatorAddress
	}
	return ""
}

func (m *MsgLogoutInitiator) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgLogoutInitiator) GetSessionLogoutInitiator() *SessionLogoutInitiator {
	if m != nil {
		return m.SessionLogoutInitiator
	}
	return nil
}

type MsgLogoutInitiatorResponse struct {
}

func (m *MsgLogoutInitiatorResponse) Reset()         { *m = MsgLogoutInitiatorResponse{} }
func (m *MsgLogoutInitiatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLogoutInitiatorResponse) ProtoMessage()    {}
func (*MsgLogoutInitiatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{10}
}
func (m *MsgLogoutInitiatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogoutInitiatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogoutInitiatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogoutInitiatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogoutInitiatorResponse.Merge(m, src)
}
func (m *MsgLogoutInitiatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogoutInitiatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogoutInitiatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogoutInitiatorResponse proto.InternalMessageInfo

type MsgLogoutAcceptor struct {
	AcceptorAddress       string                 `protobuf:"bytes,1,opt,name=acceptorAddress,proto3" json:"acceptorAddress,omitempty"`
	SessionID             string                 `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SessionLogoutAcceptor *SessionLogoutAcceptor `protobuf:"bytes,3,opt,name=sessionLogoutAcceptor,proto3" json:"sessionLogoutAcceptor,omitempty"`
}

func (m *MsgLogoutAcceptor) Reset()         { *m = MsgLogoutAcceptor{} }
func (m *MsgLogoutAcceptor) String() string { return proto.CompactTextString(m) }
func (*MsgLogoutAcceptor) ProtoMessage()    {}
func (*MsgLogoutAcceptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{11}
}
func (m *MsgLogoutAcceptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogoutAcceptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogoutAcceptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogoutAcceptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogoutAcceptor.Merge(m, src)
}
func (m *MsgLogoutAcceptor) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogoutAcceptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogoutAcceptor.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogoutAcceptor proto.InternalMessageInfo

func (m *MsgLogoutAcceptor) GetAcceptorAddress() string {
	if m != nil {
		return m.AcceptorAddress
	}
	return ""
}

func (m *MsgLogoutAcceptor) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgLogoutAcceptor) GetSessionLogoutAcceptor() *SessionLogoutAcceptor {
	if m != nil {
		return m.SessionLogoutAcceptor
	}
	return nil
}

type MsgLogoutAcceptorResponse struct {
}

func (m *MsgLogoutAcceptorResponse) Reset()         { *m = MsgLogoutAcceptorResponse{} }
func (m *MsgLogoutAcceptorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLogoutAcceptorResponse) ProtoMessage()    {}
func (*MsgLogoutAcceptorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{12}
}
func (m *MsgLogoutAcceptorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLogoutAcceptorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLogoutAcceptorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLogoutAcceptorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLogoutAcceptorResponse.Merge(m, src)
}
func (m *MsgLogoutAcceptorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLogoutAcceptorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLogoutAcceptorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLogoutAcceptorResponse proto.InternalMessageInfo

type MsgNewOrderSingle struct {
	Creator      string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID    string   `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Header       *Header  `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	ClOrdID      string   `protobuf:"bytes,4,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	Symbol       string   `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side         int64    `protobuf:"varint,6,opt,name=side,proto3" json:"side,omitempty"`
	OrderQty     string   `protobuf:"bytes,7,opt,name=orderQty,proto3" json:"orderQty,omitempty"`
	OrdType      int64    `protobuf:"varint,8,opt,name=ordType,proto3" json:"ordType,omitempty"`
	Price        string   `protobuf:"bytes,9,opt,name=price,proto3" json:"price,omitempty"`
	TimeInForce  int64    `protobuf:"varint,10,opt,name=timeInForce,proto3" json:"timeInForce,omitempty"`
	Text         string   `protobuf:"bytes,11,opt,name=text,proto3" json:"text,omitempty"`
	TransactTime string   `protobuf:"bytes,12,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	Trailer      *Trailer `protobuf:"bytes,13,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Status       string   `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgNewOrderSingle) Reset()         { *m = MsgNewOrderSingle{} }
func (m *MsgNewOrderSingle) String() string { return proto.CompactTextString(m) }
func (*MsgNewOrderSingle) ProtoMessage()    {}
func (*MsgNewOrderSingle) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{13}
}
func (m *MsgNewOrderSingle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewOrderSingle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewOrderSingle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewOrderSingle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewOrderSingle.Merge(m, src)
}
func (m *MsgNewOrderSingle) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewOrderSingle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewOrderSingle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewOrderSingle proto.InternalMessageInfo

func (m *MsgNewOrderSingle) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewOrderSingle) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgNewOrderSingle) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MsgNewOrderSingle) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *MsgNewOrderSingle) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgNewOrderSingle) GetSide() int64 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *MsgNewOrderSingle) GetOrderQty() string {
	if m != nil {
		return m.OrderQty
	}
	return ""
}

func (m *MsgNewOrderSingle) GetOrdType() int64 {
	if m != nil {
		return m.OrdType
	}
	return 0
}

func (m *MsgNewOrderSingle) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *MsgNewOrderSingle) GetTimeInForce() int64 {
	if m != nil {
		return m.TimeInForce
	}
	return 0
}

func (m *MsgNewOrderSingle) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgNewOrderSingle) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *MsgNewOrderSingle) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MsgNewOrderSingle) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgNewOrderSingleResponse struct {
}

func (m *MsgNewOrderSingleResponse) Reset()         { *m = MsgNewOrderSingleResponse{} }
func (m *MsgNewOrderSingleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewOrderSingleResponse) ProtoMessage()    {}
func (*MsgNewOrderSingleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{14}
}
func (m *MsgNewOrderSingleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewOrderSingleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewOrderSingleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewOrderSingleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewOrderSingleResponse.Merge(m, src)
}
func (m *MsgNewOrderSingleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewOrderSingleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewOrderSingleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewOrderSingleResponse proto.InternalMessageInfo

type MsgOrderCancelRequest struct {
	SessionID   string   `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Header      *Header  `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	OrigClOrdID string   `protobuf:"bytes,3,opt,name=origClOrdID,proto3" json:"origClOrdID,omitempty"`
	ClOrdID     string   `protobuf:"bytes,4,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	Trailer     *Trailer `protobuf:"bytes,5,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Creator     string   `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgOrderCancelRequest) Reset()         { *m = MsgOrderCancelRequest{} }
func (m *MsgOrderCancelRequest) String() string { return proto.CompactTextString(m) }
func (*MsgOrderCancelRequest) ProtoMessage()    {}
func (*MsgOrderCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{15}
}
func (m *MsgOrderCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderCancelRequest.Merge(m, src)
}
func (m *MsgOrderCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderCancelRequest proto.InternalMessageInfo

func (m *MsgOrderCancelRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgOrderCancelRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MsgOrderCancelRequest) GetOrigClOrdID() string {
	if m != nil {
		return m.OrigClOrdID
	}
	return ""
}

func (m *MsgOrderCancelRequest) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *MsgOrderCancelRequest) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MsgOrderCancelRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgOrderCancelRequestResponse struct {
}

func (m *MsgOrderCancelRequestResponse) Reset()         { *m = MsgOrderCancelRequestResponse{} }
func (m *MsgOrderCancelRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOrderCancelRequestResponse) ProtoMessage()    {}
func (*MsgOrderCancelRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{16}
}
func (m *MsgOrderCancelRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderCancelRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderCancelRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderCancelRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderCancelRequestResponse.Merge(m, src)
}
func (m *MsgOrderCancelRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderCancelRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderCancelRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderCancelRequestResponse proto.InternalMessageInfo

type MsgOrderCancelReject struct {
	SessionID        string   `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Header           *Header  `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	OrderID          string   `protobuf:"bytes,3,opt,name=orderID,proto3" json:"orderID,omitempty"`
	OrigClOrdID      string   `protobuf:"bytes,4,opt,name=origClOrdID,proto3" json:"origClOrdID,omitempty"`
	ClOrdID          string   `protobuf:"bytes,5,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	CxlRejReason     int64    `protobuf:"varint,6,opt,name=cxlRejReason,proto3" json:"cxlRejReason,omitempty"`
	CxlRejResponseTo int64    `protobuf:"varint,7,opt,name=cxlRejResponseTo,proto3" json:"cxlRejResponseTo,omitempty"`
	TransactTime     string   `protobuf:"bytes,8,opt,name=TransactTime,proto3" json:"TransactTime,omitempty"`
	Trailer          *Trailer `protobuf:"bytes,9,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Creator          string   `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgOrderCancelReject) Reset()         { *m = MsgOrderCancelReject{} }
func (m *MsgOrderCancelReject) String() string { return proto.CompactTextString(m) }
func (*MsgOrderCancelReject) ProtoMessage()    {}
func (*MsgOrderCancelReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{17}
}
func (m *MsgOrderCancelReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderCancelReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderCancelReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderCancelReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderCancelReject.Merge(m, src)
}
func (m *MsgOrderCancelReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderCancelReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderCancelReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderCancelReject proto.InternalMessageInfo

func (m *MsgOrderCancelReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgOrderCancelReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MsgOrderCancelReject) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *MsgOrderCancelReject) GetOrigClOrdID() string {
	if m != nil {
		return m.OrigClOrdID
	}
	return ""
}

func (m *MsgOrderCancelReject) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *MsgOrderCancelReject) GetCxlRejReason() int64 {
	if m != nil {
		return m.CxlRejReason
	}
	return 0
}

func (m *MsgOrderCancelReject) GetCxlRejResponseTo() int64 {
	if m != nil {
		return m.CxlRejResponseTo
	}
	return 0
}

func (m *MsgOrderCancelReject) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *MsgOrderCancelReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MsgOrderCancelReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgOrderCancelRejectResponse struct {
}

func (m *MsgOrderCancelRejectResponse) Reset()         { *m = MsgOrderCancelRejectResponse{} }
func (m *MsgOrderCancelRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOrderCancelRejectResponse) ProtoMessage()    {}
func (*MsgOrderCancelRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{18}
}
func (m *MsgOrderCancelRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderCancelRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderCancelRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderCancelRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderCancelRejectResponse.Merge(m, src)
}
func (m *MsgOrderCancelRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderCancelRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderCancelRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderCancelRejectResponse proto.InternalMessageInfo

type MsgOrderExecutionReport struct {
	SessionID    string   `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Header       *Header  `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	ClOrdID      string   `protobuf:"bytes,3,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	OrderID      string   `protobuf:"bytes,4,opt,name=orderID,proto3" json:"orderID,omitempty"`
	ExecID       string   `protobuf:"bytes,5,opt,name=execID,proto3" json:"execID,omitempty"`
	OrdStatus    string   `protobuf:"bytes,6,opt,name=ordStatus,proto3" json:"ordStatus,omitempty"`
	ExecType     string   `protobuf:"bytes,7,opt,name=execType,proto3" json:"execType,omitempty"`
	Symbol       string   `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side         int64    `protobuf:"varint,9,opt,name=side,proto3" json:"side,omitempty"`
	OrderQty     string   `protobuf:"bytes,10,opt,name=orderQty,proto3" json:"orderQty,omitempty"`
	Price        string   `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`
	TimeInForce  int64    `protobuf:"varint,12,opt,name=timeInForce,proto3" json:"timeInForce,omitempty"`
	LastPx       int64    `protobuf:"varint,13,opt,name=lastPx,proto3" json:"lastPx,omitempty"`
	LastQty      int64    `protobuf:"varint,14,opt,name=lastQty,proto3" json:"lastQty,omitempty"`
	LeavesQty    int64    `protobuf:"varint,15,opt,name=leavesQty,proto3" json:"leavesQty,omitempty"`
	CumQty       int64    `protobuf:"varint,16,opt,name=cumQty,proto3" json:"cumQty,omitempty"`
	AvgPx        int64    `protobuf:"varint,17,opt,name=avgPx,proto3" json:"avgPx,omitempty"`
	Text         string   `protobuf:"bytes,18,opt,name=text,proto3" json:"text,omitempty"`
	TransactTime string   `protobuf:"bytes,19,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	Trailer      *Trailer `protobuf:"bytes,20,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Creator      string   `protobuf:"bytes,21,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgOrderExecutionReport) Reset()         { *m = MsgOrderExecutionReport{} }
func (m *MsgOrderExecutionReport) String() string { return proto.CompactTextString(m) }
func (*MsgOrderExecutionReport) ProtoMessage()    {}
func (*MsgOrderExecutionReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{19}
}
func (m *MsgOrderExecutionReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderExecutionReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderExecutionReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderExecutionReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderExecutionReport.Merge(m, src)
}
func (m *MsgOrderExecutionReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderExecutionReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderExecutionReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderExecutionReport proto.InternalMessageInfo

func (m *MsgOrderExecutionReport) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MsgOrderExecutionReport) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetExecID() string {
	if m != nil {
		return m.ExecID
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetOrdStatus() string {
	if m != nil {
		return m.OrdStatus
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetExecType() string {
	if m != nil {
		return m.ExecType
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetSide() int64 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *MsgOrderExecutionReport) GetOrderQty() string {
	if m != nil {
		return m.OrderQty
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetTimeInForce() int64 {
	if m != nil {
		return m.TimeInForce
	}
	return 0
}

func (m *MsgOrderExecutionReport) GetLastPx() int64 {
	if m != nil {
		return m.LastPx
	}
	return 0
}

func (m *MsgOrderExecutionReport) GetLastQty() int64 {
	if m != nil {
		return m.LastQty
	}
	return 0
}

func (m *MsgOrderExecutionReport) GetLeavesQty() int64 {
	if m != nil {
		return m.LeavesQty
	}
	return 0
}

func (m *MsgOrderExecutionReport) GetCumQty() int64 {
	if m != nil {
		return m.CumQty
	}
	return 0
}

func (m *MsgOrderExecutionReport) GetAvgPx() int64 {
	if m != nil {
		return m.AvgPx
	}
	return 0
}

func (m *MsgOrderExecutionReport) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *MsgOrderExecutionReport) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MsgOrderExecutionReport) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgOrderExecutionReportResponse struct {
}

func (m *MsgOrderExecutionReportResponse) Reset()         { *m = MsgOrderExecutionReportResponse{} }
func (m *MsgOrderExecutionReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOrderExecutionReportResponse) ProtoMessage()    {}
func (*MsgOrderExecutionReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{20}
}
func (m *MsgOrderExecutionReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderExecutionReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderExecutionReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderExecutionReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderExecutionReportResponse.Merge(m, src)
}
func (m *MsgOrderExecutionReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderExecutionReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderExecutionReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderExecutionReportResponse proto.InternalMessageInfo

type MsgQuoteRequest struct {
	SessionID    string        `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	QuoteRequest *QuoteRequest `protobuf:"bytes,2,opt,name=quoteRequest,proto3" json:"quoteRequest,omitempty"`
	Creator      string        `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgQuoteRequest) Reset()         { *m = MsgQuoteRequest{} }
func (m *MsgQuoteRequest) String() string { return proto.CompactTextString(m) }
func (*MsgQuoteRequest) ProtoMessage()    {}
func (*MsgQuoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{21}
}
func (m *MsgQuoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQuoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQuoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQuoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQuoteRequest.Merge(m, src)
}
func (m *MsgQuoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgQuoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQuoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQuoteRequest proto.InternalMessageInfo

func (m *MsgQuoteRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgQuoteRequest) GetQuoteRequest() *QuoteRequest {
	if m != nil {
		return m.QuoteRequest
	}
	return nil
}

func (m *MsgQuoteRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgQuoteRequestResponse struct {
}

func (m *MsgQuoteRequestResponse) Reset()         { *m = MsgQuoteRequestResponse{} }
func (m *MsgQuoteRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgQuoteRequestResponse) ProtoMessage()    {}
func (*MsgQuoteRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{22}
}
func (m *MsgQuoteRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQuoteRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQuoteRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQuoteRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQuoteRequestResponse.Merge(m, src)
}
func (m *MsgQuoteRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgQuoteRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQuoteRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQuoteRequestResponse proto.InternalMessageInfo

type MsgQuoteAcknowledgement struct {
	Creator              string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID            string                `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	QuoteAcknowledgement *QuoteAcknowledgement `protobuf:"bytes,3,opt,name=quoteAcknowledgement,proto3" json:"quoteAcknowledgement,omitempty"`
}

func (m *MsgQuoteAcknowledgement) Reset()         { *m = MsgQuoteAcknowledgement{} }
func (m *MsgQuoteAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*MsgQuoteAcknowledgement) ProtoMessage()    {}
func (*MsgQuoteAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{23}
}
func (m *MsgQuoteAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQuoteAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQuoteAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQuoteAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQuoteAcknowledgement.Merge(m, src)
}
func (m *MsgQuoteAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *MsgQuoteAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQuoteAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQuoteAcknowledgement proto.InternalMessageInfo

func (m *MsgQuoteAcknowledgement) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgQuoteAcknowledgement) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgQuoteAcknowledgement) GetQuoteAcknowledgement() *QuoteAcknowledgement {
	if m != nil {
		return m.QuoteAcknowledgement
	}
	return nil
}

type MsgQuoteAcknowledgementResponse struct {
}

func (m *MsgQuoteAcknowledgementResponse) Reset()         { *m = MsgQuoteAcknowledgementResponse{} }
func (m *MsgQuoteAcknowledgementResponse) String() string { return proto.CompactTextString(m) }
func (*MsgQuoteAcknowledgementResponse) ProtoMessage()    {}
func (*MsgQuoteAcknowledgementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{24}
}
func (m *MsgQuoteAcknowledgementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQuoteAcknowledgementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQuoteAcknowledgementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQuoteAcknowledgementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQuoteAcknowledgementResponse.Merge(m, src)
}
func (m *MsgQuoteAcknowledgementResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgQuoteAcknowledgementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQuoteAcknowledgementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQuoteAcknowledgementResponse proto.InternalMessageInfo

type MsgQuoteRequestReject struct {
	Creator            string              `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID          string              `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	QuoteRequestReject *QuoteRequestReject `protobuf:"bytes,3,opt,name=quoteRequestReject,proto3" json:"quoteRequestReject,omitempty"`
}

func (m *MsgQuoteRequestReject) Reset()         { *m = MsgQuoteRequestReject{} }
func (m *MsgQuoteRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgQuoteRequestReject) ProtoMessage()    {}
func (*MsgQuoteRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{25}
}
func (m *MsgQuoteRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQuoteRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQuoteRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQuoteRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQuoteRequestReject.Merge(m, src)
}
func (m *MsgQuoteRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgQuoteRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQuoteRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQuoteRequestReject proto.InternalMessageInfo

func (m *MsgQuoteRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgQuoteRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgQuoteRequestReject) GetQuoteRequestReject() *QuoteRequestReject {
	if m != nil {
		return m.QuoteRequestReject
	}
	return nil
}

type MsgQuoteRequestRejectResponse struct {
}

func (m *MsgQuoteRequestRejectResponse) Reset()         { *m = MsgQuoteRequestRejectResponse{} }
func (m *MsgQuoteRequestRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgQuoteRequestRejectResponse) ProtoMessage()    {}
func (*MsgQuoteRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{26}
}
func (m *MsgQuoteRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgQuoteRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgQuoteRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgQuoteRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgQuoteRequestRejectResponse.Merge(m, src)
}
func (m *MsgQuoteRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgQuoteRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgQuoteRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgQuoteRequestRejectResponse proto.InternalMessageInfo

type MsgTradeCaptureReport struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TradeReportID        string `protobuf:"bytes,2,opt,name=tradeReportID,proto3" json:"tradeReportID,omitempty"`
	TradeReportTransType string `protobuf:"bytes,3,opt,name=tradeReportTransType,proto3" json:"tradeReportTransType,omitempty"`
	TradeReportType      string `protobuf:"bytes,4,opt,name=tradeReportType,proto3" json:"tradeReportType,omitempty"`
	TrdType              string `protobuf:"bytes,5,opt,name=trdType,proto3" json:"trdType,omitempty"`
	TrdSubType           string `protobuf:"bytes,6,opt,name=trdSubType,proto3" json:"trdSubType,omitempty"`
	Side                 string `protobuf:"bytes,7,opt,name=side,proto3" json:"side,omitempty"`
	OrderQty             string `protobuf:"bytes,8,opt,name=orderQty,proto3" json:"orderQty,omitempty"`
	LastQty              string `protobuf:"bytes,9,opt,name=lastQty,proto3" json:"lastQty,omitempty"`
	LastPx               string `protobuf:"bytes,10,opt,name=lastPx,proto3" json:"lastPx,omitempty"`
	GrossTradeAmt        string `protobuf:"bytes,11,opt,name=grossTradeAmt,proto3" json:"grossTradeAmt,omitempty"`
	ExecID               string `protobuf:"bytes,12,opt,name=execID,proto3" json:"execID,omitempty"`
	OrderID              string `protobuf:"bytes,13,opt,name=orderID,proto3" json:"orderID,omitempty"`
	TradeID              string `protobuf:"bytes,14,opt,name=tradeID,proto3" json:"tradeID,omitempty"`
	OrigTradeID          string `protobuf:"bytes,15,opt,name=origTradeID,proto3" json:"origTradeID,omitempty"`
	Symbol               string `protobuf:"bytes,16,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SecurityID           string `protobuf:"bytes,17,opt,name=securityID,proto3" json:"securityID,omitempty"`
	SecurityIDSource     string `protobuf:"bytes,18,opt,name=securityIDSource,proto3" json:"securityIDSource,omitempty"`
	TradeDate            string `protobuf:"bytes,19,opt,name=tradeDate,proto3" json:"tradeDate,omitempty"`
	TransactTime         string `protobuf:"bytes,20,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	SettlType            string `protobuf:"bytes,21,opt,name=settlType,proto3" json:"settlType,omitempty"`
	SettlDate            string `protobuf:"bytes,22,opt,name=settlDate,proto3" json:"settlDate,omitempty"`
	SessionID            string `protobuf:"bytes,23,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgTradeCaptureReport) Reset()         { *m = MsgTradeCaptureReport{} }
func (m *MsgTradeCaptureReport) String() string { return proto.CompactTextString(m) }
func (*MsgTradeCaptureReport) ProtoMessage()    {}
func (*MsgTradeCaptureReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{27}
}
func (m *MsgTradeCaptureReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradeCaptureReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradeCaptureReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradeCaptureReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradeCaptureReport.Merge(m, src)
}
func (m *MsgTradeCaptureReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradeCaptureReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradeCaptureReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradeCaptureReport proto.InternalMessageInfo

func (m *MsgTradeCaptureReport) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTradeReportID() string {
	if m != nil {
		return m.TradeReportID
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTradeReportTransType() string {
	if m != nil {
		return m.TradeReportTransType
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTradeReportType() string {
	if m != nil {
		return m.TradeReportType
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTrdType() string {
	if m != nil {
		return m.TrdType
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTrdSubType() string {
	if m != nil {
		return m.TrdSubType
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetOrderQty() string {
	if m != nil {
		return m.OrderQty
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetLastQty() string {
	if m != nil {
		return m.LastQty
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetLastPx() string {
	if m != nil {
		return m.LastPx
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetGrossTradeAmt() string {
	if m != nil {
		return m.GrossTradeAmt
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetExecID() string {
	if m != nil {
		return m.ExecID
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTradeID() string {
	if m != nil {
		return m.TradeID
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetOrigTradeID() string {
	if m != nil {
		return m.OrigTradeID
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetSecurityIDSource() string {
	if m != nil {
		return m.SecurityIDSource
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTradeDate() string {
	if m != nil {
		return m.TradeDate
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetSettlType() string {
	if m != nil {
		return m.SettlType
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetSettlDate() string {
	if m != nil {
		return m.SettlDate
	}
	return ""
}

func (m *MsgTradeCaptureReport) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgTradeCaptureReportResponse struct {
}

func (m *MsgTradeCaptureReportResponse) Reset()         { *m = MsgTradeCaptureReportResponse{} }
func (m *MsgTradeCaptureReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTradeCaptureReportResponse) ProtoMessage()    {}
func (*MsgTradeCaptureReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{28}
}
func (m *MsgTradeCaptureReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradeCaptureReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradeCaptureReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradeCaptureReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradeCaptureReportResponse.Merge(m, src)
}
func (m *MsgTradeCaptureReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradeCaptureReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradeCaptureReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradeCaptureReportResponse proto.InternalMessageInfo

type MsgTradeCaptureReportAcknowledgement struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TradeReportID           string `protobuf:"bytes,2,opt,name=tradeReportID,proto3" json:"tradeReportID,omitempty"`
	TradeID                 string `protobuf:"bytes,3,opt,name=tradeID,proto3" json:"tradeID,omitempty"`
	SecondaryTradeID        string `protobuf:"bytes,4,opt,name=secondaryTradeID,proto3" json:"secondaryTradeID,omitempty"`
	TradeReportType         string `protobuf:"bytes,5,opt,name=tradeReportType,proto3" json:"tradeReportType,omitempty"`
	TrdType                 string `protobuf:"bytes,6,opt,name=trdType,proto3" json:"trdType,omitempty"`
	TrdSubType              string `protobuf:"bytes,7,opt,name=trdSubType,proto3" json:"trdSubType,omitempty"`
	ExecType                string `protobuf:"bytes,8,opt,name=execType,proto3" json:"execType,omitempty"`
	TradeReportRefID        string `protobuf:"bytes,9,opt,name=tradeReportRefID,proto3" json:"tradeReportRefID,omitempty"`
	SecondaryTradeReportID  string `protobuf:"bytes,10,opt,name=secondaryTradeReportID,proto3" json:"secondaryTradeReportID,omitempty"`
	TradeReportStatus       string `protobuf:"bytes,11,opt,name=tradeReportStatus,proto3" json:"tradeReportStatus,omitempty"`
	TradeTransType          string `protobuf:"bytes,12,opt,name=tradeTransType,proto3" json:"tradeTransType,omitempty"`
	TradeReportRejectReason int64  `protobuf:"varint,13,opt,name=tradeReportRejectReason,proto3" json:"tradeReportRejectReason,omitempty"`
	Text                    string `protobuf:"bytes,14,opt,name=text,proto3" json:"text,omitempty"`
	SessionID               string `protobuf:"bytes,15,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgTradeCaptureReportAcknowledgement) Reset()         { *m = MsgTradeCaptureReportAcknowledgement{} }
func (m *MsgTradeCaptureReportAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*MsgTradeCaptureReportAcknowledgement) ProtoMessage()    {}
func (*MsgTradeCaptureReportAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{29}
}
func (m *MsgTradeCaptureReportAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradeCaptureReportAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradeCaptureReportAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradeCaptureReportAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradeCaptureReportAcknowledgement.Merge(m, src)
}
func (m *MsgTradeCaptureReportAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradeCaptureReportAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradeCaptureReportAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradeCaptureReportAcknowledgement proto.InternalMessageInfo

func (m *MsgTradeCaptureReportAcknowledgement) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTradeReportID() string {
	if m != nil {
		return m.TradeReportID
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTradeID() string {
	if m != nil {
		return m.TradeID
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetSecondaryTradeID() string {
	if m != nil {
		return m.SecondaryTradeID
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTradeReportType() string {
	if m != nil {
		return m.TradeReportType
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTrdType() string {
	if m != nil {
		return m.TrdType
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTrdSubType() string {
	if m != nil {
		return m.TrdSubType
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetExecType() string {
	if m != nil {
		return m.ExecType
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTradeReportRefID() string {
	if m != nil {
		return m.TradeReportRefID
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetSecondaryTradeReportID() string {
	if m != nil {
		return m.SecondaryTradeReportID
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTradeReportStatus() string {
	if m != nil {
		return m.TradeReportStatus
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTradeTransType() string {
	if m != nil {
		return m.TradeTransType
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetTradeReportRejectReason() int64 {
	if m != nil {
		return m.TradeReportRejectReason
	}
	return 0
}

func (m *MsgTradeCaptureReportAcknowledgement) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgTradeCaptureReportAcknowledgement) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgTradeCaptureReportAcknowledgementResponse struct {
}

func (m *MsgTradeCaptureReportAcknowledgementResponse) Reset() {
	*m = MsgTradeCaptureReportAcknowledgementResponse{}
}
func (m *MsgTradeCaptureReportAcknowledgementResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgTradeCaptureReportAcknowledgementResponse) ProtoMessage() {}
func (*MsgTradeCaptureReportAcknowledgementResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{30}
}
func (m *MsgTradeCaptureReportAcknowledgementResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradeCaptureReportAcknowledgementResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradeCaptureReportAcknowledgementResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradeCaptureReportAcknowledgementResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradeCaptureReportAcknowledgementResponse.Merge(m, src)
}
func (m *MsgTradeCaptureReportAcknowledgementResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradeCaptureReportAcknowledgementResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradeCaptureReportAcknowledgementResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradeCaptureReportAcknowledgementResponse proto.InternalMessageInfo

type MsgTradeCaptureReportRejection struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TradeReportID           string `protobuf:"bytes,2,opt,name=tradeReportID,proto3" json:"tradeReportID,omitempty"`
	TradeReportRejectReason int64  `protobuf:"varint,3,opt,name=tradeReportRejectReason,proto3" json:"tradeReportRejectReason,omitempty"`
	TradeReportRejectRefID  string `protobuf:"bytes,4,opt,name=tradeReportRejectRefID,proto3" json:"tradeReportRejectRefID,omitempty"`
	Text                    string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	SessionID               string `protobuf:"bytes,6,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgTradeCaptureReportRejection) Reset()         { *m = MsgTradeCaptureReportRejection{} }
func (m *MsgTradeCaptureReportRejection) String() string { return proto.CompactTextString(m) }
func (*MsgTradeCaptureReportRejection) ProtoMessage()    {}
func (*MsgTradeCaptureReportRejection) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{31}
}
func (m *MsgTradeCaptureReportRejection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradeCaptureReportRejection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradeCaptureReportRejection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradeCaptureReportRejection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradeCaptureReportRejection.Merge(m, src)
}
func (m *MsgTradeCaptureReportRejection) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradeCaptureReportRejection) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradeCaptureReportRejection.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradeCaptureReportRejection proto.InternalMessageInfo

func (m *MsgTradeCaptureReportRejection) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradeCaptureReportRejection) GetTradeReportID() string {
	if m != nil {
		return m.TradeReportID
	}
	return ""
}

func (m *MsgTradeCaptureReportRejection) GetTradeReportRejectReason() int64 {
	if m != nil {
		return m.TradeReportRejectReason
	}
	return 0
}

func (m *MsgTradeCaptureReportRejection) GetTradeReportRejectRefID() string {
	if m != nil {
		return m.TradeReportRejectRefID
	}
	return ""
}

func (m *MsgTradeCaptureReportRejection) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgTradeCaptureReportRejection) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgTradeCaptureReportRejectionResponse struct {
}

func (m *MsgTradeCaptureReportRejectionResponse) Reset() {
	*m = MsgTradeCaptureReportRejectionResponse{}
}
func (m *MsgTradeCaptureReportRejectionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTradeCaptureReportRejectionResponse) ProtoMessage()    {}
func (*MsgTradeCaptureReportRejectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{32}
}
func (m *MsgTradeCaptureReportRejectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradeCaptureReportRejectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradeCaptureReportRejectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradeCaptureReportRejectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradeCaptureReportRejectionResponse.Merge(m, src)
}
func (m *MsgTradeCaptureReportRejectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradeCaptureReportRejectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradeCaptureReportRejectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradeCaptureReportRejectionResponse proto.InternalMessageInfo

type MsgMarketDataRequest struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MdReqID                 string `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	SubscriptionRequestType int64  `protobuf:"varint,3,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
	MarketDepth             int64  `protobuf:"varint,4,opt,name=marketDepth,proto3" json:"marketDepth,omitempty"`
	MdUpdateType            int64  `protobuf:"varint,5,opt,name=mdUpdateType,proto3" json:"mdUpdateType,omitempty"`
	NoRelatedSym            int64  `protobuf:"varint,6,opt,name=noRelatedSym,proto3" json:"noRelatedSym,omitempty"`
	Symbol                  string `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SessionID               string `protobuf:"bytes,8,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgMarketDataRequest) Reset()         { *m = MsgMarketDataRequest{} }
func (m *MsgMarketDataRequest) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataRequest) ProtoMessage()    {}
func (*MsgMarketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{33}
}
func (m *MsgMarketDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataRequest.Merge(m, src)
}
func (m *MsgMarketDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataRequest proto.InternalMessageInfo

func (m *MsgMarketDataRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMarketDataRequest) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MsgMarketDataRequest) GetSubscriptionRequestType() int64 {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return 0
}

func (m *MsgMarketDataRequest) GetMarketDepth() int64 {
	if m != nil {
		return m.MarketDepth
	}
	return 0
}

func (m *MsgMarketDataRequest) GetMdUpdateType() int64 {
	if m != nil {
		return m.MdUpdateType
	}
	return 0
}

func (m *MsgMarketDataRequest) GetNoRelatedSym() int64 {
	if m != nil {
		return m.NoRelatedSym
	}
	return 0
}

func (m *MsgMarketDataRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgMarketDataRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgMarketDataRequestResponse struct {
}

func (m *MsgMarketDataRequestResponse) Reset()         { *m = MsgMarketDataRequestResponse{} }
func (m *MsgMarketDataRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataRequestResponse) ProtoMessage()    {}
func (*MsgMarketDataRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{34}
}
func (m *MsgMarketDataRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataRequestResponse.Merge(m, src)
}
func (m *MsgMarketDataRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataRequestResponse proto.InternalMessageInfo

type MsgMarketDataSnapshotFullRefresh struct {
	Creator     string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MdReqID     string     `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	Symbol      string     `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	NoMDEntries int64      `protobuf:"varint,4,opt,name=noMDEntries,proto3" json:"noMDEntries,omitempty"`
	MdEntries   []*MDEntry `protobuf:"bytes,5,rep,name=mdEntries,proto3" json:"mdEntries,omitempty"`
	SessionID   string     `protobuf:"bytes,6,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgMarketDataSnapshotFullRefresh) Reset()         { *m = MsgMarketDataSnapshotFullRefresh{} }
func (m *MsgMarketDataSnapshotFullRefresh) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataSnapshotFullRefresh) ProtoMessage()    {}
func (*MsgMarketDataSnapshotFullRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{35}
}
func (m *MsgMarketDataSnapshotFullRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataSnapshotFullRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataSnapshotFullRefresh.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataSnapshotFullRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataSnapshotFullRefresh.Merge(m, src)
}
func (m *MsgMarketDataSnapshotFullRefresh) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataSnapshotFullRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataSnapshotFullRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataSnapshotFullRefresh proto.InternalMessageInfo

func (m *MsgMarketDataSnapshotFullRefresh) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMarketDataSnapshotFullRefresh) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MsgMarketDataSnapshotFullRefresh) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgMarketDataSnapshotFullRefresh) GetNoMDEntries() int64 {
	if m != nil {
		return m.NoMDEntries
	}
	return 0
}

func (m *MsgMarketDataSnapshotFullRefresh) GetMdEntries() []*MDEntry {
	if m != nil {
		return m.MdEntries
	}
	return nil
}

func (m *MsgMarketDataSnapshotFullRefresh) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgMarketDataSnapshotFullRefreshResponse struct {
}

func (m *MsgMarketDataSnapshotFullRefreshResponse) Reset() {
	*m = MsgMarketDataSnapshotFullRefreshResponse{}
}
func (m *MsgMarketDataSnapshotFullRefreshResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataSnapshotFullRefreshResponse) ProtoMessage()    {}
func (*MsgMarketDataSnapshotFullRefreshResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{36}
}
func (m *MsgMarketDataSnapshotFullRefreshResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataSnapshotFullRefreshResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataSnapshotFullRefreshResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataSnapshotFullRefreshResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataSnapshotFullRefreshResponse.Merge(m, src)
}
func (m *MsgMarketDataSnapshotFullRefreshResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataSnapshotFullRefreshResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataSnapshotFullRefreshResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataSnapshotFullRefreshResponse proto.InternalMessageInfo

type MsgMarketDataIncremental struct {
	Creator     string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MdReqID     string     `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	NoMDEntries int64      `protobuf:"varint,3,opt,name=noMDEntries,proto3" json:"noMDEntries,omitempty"`
	MdEntries   []*MDEntry `protobuf:"bytes,4,rep,name=mdEntries,proto3" json:"mdEntries,omitempty"`
	SessionID   string     `protobuf:"bytes,5,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgMarketDataIncremental) Reset()         { *m = MsgMarketDataIncremental{} }
func (m *MsgMarketDataIncremental) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataIncremental) ProtoMessage()    {}
func (*MsgMarketDataIncremental) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{37}
}
func (m *MsgMarketDataIncremental) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataIncremental) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataIncremental.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataIncremental) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataIncremental.Merge(m, src)
}
func (m *MsgMarketDataIncremental) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataIncremental) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataIncremental.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataIncremental proto.InternalMessageInfo

func (m *MsgMarketDataIncremental) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMarketDataIncremental) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MsgMarketDataIncremental) GetNoMDEntries() int64 {
	if m != nil {
		return m.NoMDEntries
	}
	return 0
}

func (m *MsgMarketDataIncremental) GetMdEntries() []*MDEntry {
	if m != nil {
		return m.MdEntries
	}
	return nil
}

func (m *MsgMarketDataIncremental) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgMarketDataIncrementalResponse struct {
}

func (m *MsgMarketDataIncrementalResponse) Reset()         { *m = MsgMarketDataIncrementalResponse{} }
func (m *MsgMarketDataIncrementalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataIncrementalResponse) ProtoMessage()    {}
func (*MsgMarketDataIncrementalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{38}
}
func (m *MsgMarketDataIncrementalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataIncrementalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataIncrementalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataIncrementalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataIncrementalResponse.Merge(m, src)
}
func (m *MsgMarketDataIncrementalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataIncrementalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataIncrementalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataIncrementalResponse proto.InternalMessageInfo

type MsgMarketDataRequestReject struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MdReqID        string `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	MdReqRejReason int64  `protobuf:"varint,3,opt,name=mdReqRejReason,proto3" json:"mdReqRejReason,omitempty"`
	Text           string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	SessionID      string `protobuf:"bytes,5,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgMarketDataRequestReject) Reset()         { *m = MsgMarketDataRequestReject{} }
func (m *MsgMarketDataRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataRequestReject) ProtoMessage()    {}
func (*MsgMarketDataRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{39}
}
func (m *MsgMarketDataRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataRequestReject.Merge(m, src)
}
func (m *MsgMarketDataRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataRequestReject proto.InternalMessageInfo

func (m *MsgMarketDataRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMarketDataRequestReject) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MsgMarketDataRequestReject) GetMdReqRejReason() int64 {
	if m != nil {
		return m.MdReqRejReason
	}
	return 0
}

func (m *MsgMarketDataRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgMarketDataRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgMarketDataRequestRejectResponse struct {
}

func (m *MsgMarketDataRequestRejectResponse) Reset()         { *m = MsgMarketDataRequestRejectResponse{} }
func (m *MsgMarketDataRequestRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMarketDataRequestRejectResponse) ProtoMessage()    {}
func (*MsgMarketDataRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{40}
}
func (m *MsgMarketDataRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMarketDataRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMarketDataRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMarketDataRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMarketDataRequestRejectResponse.Merge(m, src)
}
func (m *MsgMarketDataRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMarketDataRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMarketDataRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMarketDataRequestRejectResponse proto.InternalMessageInfo

type MsgSecurityDefinitionRequest struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SecurityReqID       string `protobuf:"bytes,2,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	SecurityRequestType string `protobuf:"bytes,3,opt,name=securityRequestType,proto3" json:"securityRequestType,omitempty"`
	Symbol              string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SecurityExchange    string `protobuf:"bytes,5,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	Issuer              string `protobuf:"bytes,6,opt,name=issuer,proto3" json:"issuer,omitempty"`
	SecurityDesc        string `protobuf:"bytes,7,opt,name=securityDesc,proto3" json:"securityDesc,omitempty"`
	SecurityType        string `protobuf:"bytes,8,opt,name=securityType,proto3" json:"securityType,omitempty"`
	Currency            string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	SessionID           string `protobuf:"bytes,10,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgSecurityDefinitionRequest) Reset()         { *m = MsgSecurityDefinitionRequest{} }
func (m *MsgSecurityDefinitionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityDefinitionRequest) ProtoMessage()    {}
func (*MsgSecurityDefinitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{41}
}
func (m *MsgSecurityDefinitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityDefinitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityDefinitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityDefinitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityDefinitionRequest.Merge(m, src)
}
func (m *MsgSecurityDefinitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityDefinitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityDefinitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityDefinitionRequest proto.InternalMessageInfo

func (m *MsgSecurityDefinitionRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetSecurityRequestType() string {
	if m != nil {
		return m.SecurityRequestType
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetSecurityDesc() string {
	if m != nil {
		return m.SecurityDesc
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MsgSecurityDefinitionRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgSecurityDefinitionRequestResponse struct {
}

func (m *MsgSecurityDefinitionRequestResponse) Reset()         { *m = MsgSecurityDefinitionRequestResponse{} }
func (m *MsgSecurityDefinitionRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityDefinitionRequestResponse) ProtoMessage()    {}
func (*MsgSecurityDefinitionRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{42}
}
func (m *MsgSecurityDefinitionRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityDefinitionRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityDefinitionRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityDefinitionRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityDefinitionRequestResponse.Merge(m, src)
}
func (m *MsgSecurityDefinitionRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityDefinitionRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityDefinitionRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityDefinitionRequestResponse proto.InternalMessageInfo

type MsgSecurityDefinition struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SecurityReqID           string `protobuf:"bytes,2,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	SecurityResponseID      string `protobuf:"bytes,3,opt,name=securityResponseID,proto3" json:"securityResponseID,omitempty"`
	SecurityResponseType    string `protobuf:"bytes,4,opt,name=securityResponseType,proto3" json:"securityResponseType,omitempty"`
	Symbol                  string `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SecurityExchange        string `protobuf:"bytes,6,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	Issuer                  string `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
	SecurityDesc            string `protobuf:"bytes,8,opt,name=securityDesc,proto3" json:"securityDesc,omitempty"`
	SecurityType            string `protobuf:"bytes,9,opt,name=securityType,proto3" json:"securityType,omitempty"`
	Currency                string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	ContractMultiplier      string `protobuf:"bytes,11,opt,name=contractMultiplier,proto3" json:"contractMultiplier,omitempty"`
	MinPriceIncrement       string `protobuf:"bytes,12,opt,name=minPriceIncrement,proto3" json:"minPriceIncrement,omitempty"`
	MinPriceIncrementAmount string `protobuf:"bytes,13,opt,name=minPriceIncrementAmount,proto3" json:"minPriceIncrementAmount,omitempty"`
	UnitOfMeasure           string `protobuf:"bytes,14,opt,name=unitOfMeasure,proto3" json:"unitOfMeasure,omitempty"`
	PriceUnitOfMeasure      string `protobuf:"bytes,15,opt,name=priceUnitOfMeasure,proto3" json:"priceUnitOfMeasure,omitempty"`
	SettlType               string `protobuf:"bytes,16,opt,name=settlType,proto3" json:"settlType,omitempty"`
	SettlDate               string `protobuf:"bytes,17,opt,name=settlDate,proto3" json:"settlDate,omitempty"`
	MaturityMonthYear       string `protobuf:"bytes,18,opt,name=maturityMonthYear,proto3" json:"maturityMonthYear,omitempty"`
	CouponRate              string `protobuf:"bytes,19,opt,name=couponRate,proto3" json:"couponRate,omitempty"`
	Factor                  string `protobuf:"bytes,20,opt,name=factor,proto3" json:"factor,omitempty"`
	CreditRating            string `protobuf:"bytes,21,opt,name=creditRating,proto3" json:"creditRating,omitempty"`
	SecurityExchangeID      string `protobuf:"bytes,22,opt,name=securityExchangeID,proto3" json:"securityExchangeID,omitempty"`
	SessionID               string `protobuf:"bytes,23,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgSecurityDefinition) Reset()         { *m = MsgSecurityDefinition{} }
func (m *MsgSecurityDefinition) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityDefinition) ProtoMessage()    {}
func (*MsgSecurityDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{43}
}
func (m *MsgSecurityDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityDefinition.Merge(m, src)
}
func (m *MsgSecurityDefinition) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityDefinition proto.InternalMessageInfo

func (m *MsgSecurityDefinition) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSecurityResponseID() string {
	if m != nil {
		return m.SecurityResponseID
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSecurityResponseType() string {
	if m != nil {
		return m.SecurityResponseType
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *MsgSecurityDefinition) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSecurityDesc() string {
	if m != nil {
		return m.SecurityDesc
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *MsgSecurityDefinition) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MsgSecurityDefinition) GetContractMultiplier() string {
	if m != nil {
		return m.ContractMultiplier
	}
	return ""
}

func (m *MsgSecurityDefinition) GetMinPriceIncrement() string {
	if m != nil {
		return m.MinPriceIncrement
	}
	return ""
}

func (m *MsgSecurityDefinition) GetMinPriceIncrementAmount() string {
	if m != nil {
		return m.MinPriceIncrementAmount
	}
	return ""
}

func (m *MsgSecurityDefinition) GetUnitOfMeasure() string {
	if m != nil {
		return m.UnitOfMeasure
	}
	return ""
}

func (m *MsgSecurityDefinition) GetPriceUnitOfMeasure() string {
	if m != nil {
		return m.PriceUnitOfMeasure
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSettlType() string {
	if m != nil {
		return m.SettlType
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSettlDate() string {
	if m != nil {
		return m.SettlDate
	}
	return ""
}

func (m *MsgSecurityDefinition) GetMaturityMonthYear() string {
	if m != nil {
		return m.MaturityMonthYear
	}
	return ""
}

func (m *MsgSecurityDefinition) GetCouponRate() string {
	if m != nil {
		return m.CouponRate
	}
	return ""
}

func (m *MsgSecurityDefinition) GetFactor() string {
	if m != nil {
		return m.Factor
	}
	return ""
}

func (m *MsgSecurityDefinition) GetCreditRating() string {
	if m != nil {
		return m.CreditRating
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSecurityExchangeID() string {
	if m != nil {
		return m.SecurityExchangeID
	}
	return ""
}

func (m *MsgSecurityDefinition) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgSecurityDefinitionResponse struct {
}

func (m *MsgSecurityDefinitionResponse) Reset()         { *m = MsgSecurityDefinitionResponse{} }
func (m *MsgSecurityDefinitionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityDefinitionResponse) ProtoMessage()    {}
func (*MsgSecurityDefinitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{44}
}
func (m *MsgSecurityDefinitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityDefinitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityDefinitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityDefinitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityDefinitionResponse.Merge(m, src)
}
func (m *MsgSecurityDefinitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityDefinitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityDefinitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityDefinitionResponse proto.InternalMessageInfo

type MsgSecurityDefinitionRequestReject struct {
	Creator                  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID                string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityReqID            string `protobuf:"bytes,3,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	SecurityRequestResult    string `protobuf:"bytes,4,opt,name=securityRequestResult,proto3" json:"securityRequestResult,omitempty"`
	SecurityRequestError     string `protobuf:"bytes,5,opt,name=securityRequestError,proto3" json:"securityRequestError,omitempty"`
	SecurityRequestErrorCode string `protobuf:"bytes,6,opt,name=securityRequestErrorCode,proto3" json:"securityRequestErrorCode,omitempty"`
	Text                     string `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *MsgSecurityDefinitionRequestReject) Reset()         { *m = MsgSecurityDefinitionRequestReject{} }
func (m *MsgSecurityDefinitionRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityDefinitionRequestReject) ProtoMessage()    {}
func (*MsgSecurityDefinitionRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{45}
}
func (m *MsgSecurityDefinitionRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityDefinitionRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityDefinitionRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityDefinitionRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityDefinitionRequestReject.Merge(m, src)
}
func (m *MsgSecurityDefinitionRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityDefinitionRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityDefinitionRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityDefinitionRequestReject proto.InternalMessageInfo

func (m *MsgSecurityDefinitionRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityDefinitionRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityDefinitionRequestReject) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityDefinitionRequestReject) GetSecurityRequestResult() string {
	if m != nil {
		return m.SecurityRequestResult
	}
	return ""
}

func (m *MsgSecurityDefinitionRequestReject) GetSecurityRequestError() string {
	if m != nil {
		return m.SecurityRequestError
	}
	return ""
}

func (m *MsgSecurityDefinitionRequestReject) GetSecurityRequestErrorCode() string {
	if m != nil {
		return m.SecurityRequestErrorCode
	}
	return ""
}

func (m *MsgSecurityDefinitionRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MsgSecurityDefinitionRequestRejectResponse struct {
}

func (m *MsgSecurityDefinitionRequestRejectResponse) Reset() {
	*m = MsgSecurityDefinitionRequestRejectResponse{}
}
func (m *MsgSecurityDefinitionRequestRejectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSecurityDefinitionRequestRejectResponse) ProtoMessage() {}
func (*MsgSecurityDefinitionRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{46}
}
func (m *MsgSecurityDefinitionRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityDefinitionRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityDefinitionRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityDefinitionRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityDefinitionRequestRejectResponse.Merge(m, src)
}
func (m *MsgSecurityDefinitionRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityDefinitionRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityDefinitionRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityDefinitionRequestRejectResponse proto.InternalMessageInfo

type MsgOrderMassStatusRequest struct {
	Creator           string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID         string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	MassStatusReqID   string `protobuf:"bytes,3,opt,name=massStatusReqID,proto3" json:"massStatusReqID,omitempty"`
	MassStatusReqType string `protobuf:"bytes,4,opt,name=massStatusReqType,proto3" json:"massStatusReqType,omitempty"`
	ClOrdID           string `protobuf:"bytes,5,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	Account           string `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	Symbol            string `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SecurityID        string `protobuf:"bytes,8,opt,name=securityID,proto3" json:"securityID,omitempty"`
	TradingSessionID  string `protobuf:"bytes,9,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
}

func (m *MsgOrderMassStatusRequest) Reset()         { *m = MsgOrderMassStatusRequest{} }
func (m *MsgOrderMassStatusRequest) String() string { return proto.CompactTextString(m) }
func (*MsgOrderMassStatusRequest) ProtoMessage()    {}
func (*MsgOrderMassStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{47}
}
func (m *MsgOrderMassStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderMassStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderMassStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderMassStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderMassStatusRequest.Merge(m, src)
}
func (m *MsgOrderMassStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderMassStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderMassStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderMassStatusRequest proto.InternalMessageInfo

func (m *MsgOrderMassStatusRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetMassStatusReqID() string {
	if m != nil {
		return m.MassStatusReqID
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetMassStatusReqType() string {
	if m != nil {
		return m.MassStatusReqType
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *MsgOrderMassStatusRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

type MsgOrderMassStatusRequestResponse struct {
}

func (m *MsgOrderMassStatusRequestResponse) Reset()         { *m = MsgOrderMassStatusRequestResponse{} }
func (m *MsgOrderMassStatusRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOrderMassStatusRequestResponse) ProtoMessage()    {}
func (*MsgOrderMassStatusRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{48}
}
func (m *MsgOrderMassStatusRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderMassStatusRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderMassStatusRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderMassStatusRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderMassStatusRequestResponse.Merge(m, src)
}
func (m *MsgOrderMassStatusRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderMassStatusRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderMassStatusRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderMassStatusRequestResponse proto.InternalMessageInfo

type MsgOrderMassStatusReport struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID        string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	ClOrdID          string `protobuf:"bytes,3,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	MassStatusReqID  string `protobuf:"bytes,4,opt,name=massStatusReqID,proto3" json:"massStatusReqID,omitempty"`
	Account          string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	Symbol           string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SecurityID       string `protobuf:"bytes,7,opt,name=securityID,proto3" json:"securityID,omitempty"`
	TradingSessionID string `protobuf:"bytes,8,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	OrdStatus        string `protobuf:"bytes,9,opt,name=ordStatus,proto3" json:"ordStatus,omitempty"`
	ExecType         string `protobuf:"bytes,10,opt,name=execType,proto3" json:"execType,omitempty"`
	OrdQty           string `protobuf:"bytes,11,opt,name=ordQty,proto3" json:"ordQty,omitempty"`
	LastPx           string `protobuf:"bytes,12,opt,name=lastPx,proto3" json:"lastPx,omitempty"`
	CumQty           string `protobuf:"bytes,13,opt,name=cumQty,proto3" json:"cumQty,omitempty"`
	AvgPx            string `protobuf:"bytes,14,opt,name=avgPx,proto3" json:"avgPx,omitempty"`
	LeavesQty        string `protobuf:"bytes,15,opt,name=leavesQty,proto3" json:"leavesQty,omitempty"`
}

func (m *MsgOrderMassStatusReport) Reset()         { *m = MsgOrderMassStatusReport{} }
func (m *MsgOrderMassStatusReport) String() string { return proto.CompactTextString(m) }
func (*MsgOrderMassStatusReport) ProtoMessage()    {}
func (*MsgOrderMassStatusReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{49}
}
func (m *MsgOrderMassStatusReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderMassStatusReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderMassStatusReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderMassStatusReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderMassStatusReport.Merge(m, src)
}
func (m *MsgOrderMassStatusReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderMassStatusReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderMassStatusReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderMassStatusReport proto.InternalMessageInfo

func (m *MsgOrderMassStatusReport) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetMassStatusReqID() string {
	if m != nil {
		return m.MassStatusReqID
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetOrdStatus() string {
	if m != nil {
		return m.OrdStatus
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetExecType() string {
	if m != nil {
		return m.ExecType
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetOrdQty() string {
	if m != nil {
		return m.OrdQty
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetLastPx() string {
	if m != nil {
		return m.LastPx
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetCumQty() string {
	if m != nil {
		return m.CumQty
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetAvgPx() string {
	if m != nil {
		return m.AvgPx
	}
	return ""
}

func (m *MsgOrderMassStatusReport) GetLeavesQty() string {
	if m != nil {
		return m.LeavesQty
	}
	return ""
}

type MsgOrderMassStatusReportResponse struct {
}

func (m *MsgOrderMassStatusReportResponse) Reset()         { *m = MsgOrderMassStatusReportResponse{} }
func (m *MsgOrderMassStatusReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOrderMassStatusReportResponse) ProtoMessage()    {}
func (*MsgOrderMassStatusReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{50}
}
func (m *MsgOrderMassStatusReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderMassStatusReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderMassStatusReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderMassStatusReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderMassStatusReportResponse.Merge(m, src)
}
func (m *MsgOrderMassStatusReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderMassStatusReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderMassStatusReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderMassStatusReportResponse proto.InternalMessageInfo

type MsgOrderMassStatusRequestReject struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	RefSeqID  string `protobuf:"bytes,3,opt,name=refSeqID,proto3" json:"refSeqID,omitempty"`
	RejCode   string `protobuf:"bytes,4,opt,name=rejCode,proto3" json:"rejCode,omitempty"`
	Text      string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *MsgOrderMassStatusRequestReject) Reset()         { *m = MsgOrderMassStatusRequestReject{} }
func (m *MsgOrderMassStatusRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgOrderMassStatusRequestReject) ProtoMessage()    {}
func (*MsgOrderMassStatusRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{51}
}
func (m *MsgOrderMassStatusRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderMassStatusRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderMassStatusRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderMassStatusRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderMassStatusRequestReject.Merge(m, src)
}
func (m *MsgOrderMassStatusRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderMassStatusRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderMassStatusRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderMassStatusRequestReject proto.InternalMessageInfo

func (m *MsgOrderMassStatusRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOrderMassStatusRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgOrderMassStatusRequestReject) GetRefSeqID() string {
	if m != nil {
		return m.RefSeqID
	}
	return ""
}

func (m *MsgOrderMassStatusRequestReject) GetRejCode() string {
	if m != nil {
		return m.RejCode
	}
	return ""
}

func (m *MsgOrderMassStatusRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MsgOrderMassStatusRequestRejectResponse struct {
}

func (m *MsgOrderMassStatusRequestRejectResponse) Reset() {
	*m = MsgOrderMassStatusRequestRejectResponse{}
}
func (m *MsgOrderMassStatusRequestRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOrderMassStatusRequestRejectResponse) ProtoMessage()    {}
func (*MsgOrderMassStatusRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{52}
}
func (m *MsgOrderMassStatusRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOrderMassStatusRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOrderMassStatusRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOrderMassStatusRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOrderMassStatusRequestRejectResponse.Merge(m, src)
}
func (m *MsgOrderMassStatusRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOrderMassStatusRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOrderMassStatusRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOrderMassStatusRequestRejectResponse proto.InternalMessageInfo

type MsgTradingSessionStatusRequest struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TradSesReqID          string `protobuf:"bytes,2,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
	TradingSessionID      string `protobuf:"bytes,3,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID   string `protobuf:"bytes,4,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	MarketID              string `protobuf:"bytes,5,opt,name=marketID,proto3" json:"marketID,omitempty"`
	SubscriptionRequest   string `protobuf:"bytes,6,opt,name=subscriptionRequest,proto3" json:"subscriptionRequest,omitempty"`
	SecurityID            string `protobuf:"bytes,7,opt,name=securityID,proto3" json:"securityID,omitempty"`
	SecurityIDSource      string `protobuf:"bytes,8,opt,name=securityIDSource,proto3" json:"securityIDSource,omitempty"`
	Symbol                string `protobuf:"bytes,9,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SecurityExchange      string `protobuf:"bytes,10,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	MarketSegmentID       string `protobuf:"bytes,11,opt,name=marketSegmentID,proto3" json:"marketSegmentID,omitempty"`
	TradSesReqType        int32  `protobuf:"varint,12,opt,name=tradSesReqType,proto3" json:"tradSesReqType,omitempty"`
	TradSesSubReqType     int32  `protobuf:"varint,13,opt,name=tradSesSubReqType,proto3" json:"tradSesSubReqType,omitempty"`
	TradSesMode           int32  `protobuf:"varint,14,opt,name=tradSesMode,proto3" json:"tradSesMode,omitempty"`
	TradingSessionDate    string `protobuf:"bytes,15,opt,name=tradingSessionDate,proto3" json:"tradingSessionDate,omitempty"`
	TradingSessionTime    string `protobuf:"bytes,16,opt,name=tradingSessionTime,proto3" json:"tradingSessionTime,omitempty"`
	TradingSessionSubTime string `protobuf:"bytes,17,opt,name=tradingSessionSubTime,proto3" json:"tradingSessionSubTime,omitempty"`
	ExpirationDate        string `protobuf:"bytes,18,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	SessionID             string `protobuf:"bytes,19,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgTradingSessionStatusRequest) Reset()         { *m = MsgTradingSessionStatusRequest{} }
func (m *MsgTradingSessionStatusRequest) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionStatusRequest) ProtoMessage()    {}
func (*MsgTradingSessionStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{53}
}
func (m *MsgTradingSessionStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionStatusRequest.Merge(m, src)
}
func (m *MsgTradingSessionStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionStatusRequest proto.InternalMessageInfo

func (m *MsgTradingSessionStatusRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetSubscriptionRequest() string {
	if m != nil {
		return m.SubscriptionRequest
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetSecurityIDSource() string {
	if m != nil {
		return m.SecurityIDSource
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetMarketSegmentID() string {
	if m != nil {
		return m.MarketSegmentID
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetTradSesReqType() int32 {
	if m != nil {
		return m.TradSesReqType
	}
	return 0
}

func (m *MsgTradingSessionStatusRequest) GetTradSesSubReqType() int32 {
	if m != nil {
		return m.TradSesSubReqType
	}
	return 0
}

func (m *MsgTradingSessionStatusRequest) GetTradSesMode() int32 {
	if m != nil {
		return m.TradSesMode
	}
	return 0
}

func (m *MsgTradingSessionStatusRequest) GetTradingSessionDate() string {
	if m != nil {
		return m.TradingSessionDate
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetTradingSessionTime() string {
	if m != nil {
		return m.TradingSessionTime
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetTradingSessionSubTime() string {
	if m != nil {
		return m.TradingSessionSubTime
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *MsgTradingSessionStatusRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgTradingSessionStatusRequestResponse struct {
}

func (m *MsgTradingSessionStatusRequestResponse) Reset() {
	*m = MsgTradingSessionStatusRequestResponse{}
}
func (m *MsgTradingSessionStatusRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionStatusRequestResponse) ProtoMessage()    {}
func (*MsgTradingSessionStatusRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{54}
}
func (m *MsgTradingSessionStatusRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionStatusRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionStatusRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionStatusRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionStatusRequestResponse.Merge(m, src)
}
func (m *MsgTradingSessionStatusRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionStatusRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionStatusRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionStatusRequestResponse proto.InternalMessageInfo

type MsgTradingSessionStatus struct {
	Creator                string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	TradSesReqID           string `protobuf:"bytes,2,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
	TradingSessionID       string `protobuf:"bytes,3,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradSesStatus          int32  `protobuf:"varint,4,opt,name=tradSesStatus,proto3" json:"tradSesStatus,omitempty"`
	TradSesStatusRejReason int32  `protobuf:"varint,5,opt,name=tradSesStatusRejReason,proto3" json:"tradSesStatusRejReason,omitempty"`
	TradSesStartTime       string `protobuf:"bytes,6,opt,name=tradSesStartTime,proto3" json:"tradSesStartTime,omitempty"`
	TradSesOpenTime        string `protobuf:"bytes,7,opt,name=tradSesOpenTime,proto3" json:"tradSesOpenTime,omitempty"`
	TradSesPreCloseTime    string `protobuf:"bytes,8,opt,name=tradSesPreCloseTime,proto3" json:"tradSesPreCloseTime,omitempty"`
	TradSesCloseTime       string `protobuf:"bytes,9,opt,name=tradSesCloseTime,proto3" json:"tradSesCloseTime,omitempty"`
	TradSesEndTime         string `protobuf:"bytes,10,opt,name=tradSesEndTime,proto3" json:"tradSesEndTime,omitempty"`
	TotalVolumeTraded      int32  `protobuf:"varint,11,opt,name=totalVolumeTraded,proto3" json:"totalVolumeTraded,omitempty"`
	TradSesHighPx          string `protobuf:"bytes,12,opt,name=tradSesHighPx,proto3" json:"tradSesHighPx,omitempty"`
	TradSesLowPx           string `protobuf:"bytes,13,opt,name=tradSesLowPx,proto3" json:"tradSesLowPx,omitempty"`
	SecurityID             string `protobuf:"bytes,14,opt,name=securityID,proto3" json:"securityID,omitempty"`
	SecurityIDSource       string `protobuf:"bytes,15,opt,name=securityIDSource,proto3" json:"securityIDSource,omitempty"`
	Symbol                 string `protobuf:"bytes,16,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SecurityExchange       string `protobuf:"bytes,17,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	MarketSegmentID        string `protobuf:"bytes,18,opt,name=marketSegmentID,proto3" json:"marketSegmentID,omitempty"`
	MarketID               string `protobuf:"bytes,19,opt,name=marketID,proto3" json:"marketID,omitempty"`
	SessionID              string `protobuf:"bytes,20,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgTradingSessionStatus) Reset()         { *m = MsgTradingSessionStatus{} }
func (m *MsgTradingSessionStatus) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionStatus) ProtoMessage()    {}
func (*MsgTradingSessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{55}
}
func (m *MsgTradingSessionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionStatus.Merge(m, src)
}
func (m *MsgTradingSessionStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionStatus proto.InternalMessageInfo

func (m *MsgTradingSessionStatus) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradSesStatus() int32 {
	if m != nil {
		return m.TradSesStatus
	}
	return 0
}

func (m *MsgTradingSessionStatus) GetTradSesStatusRejReason() int32 {
	if m != nil {
		return m.TradSesStatusRejReason
	}
	return 0
}

func (m *MsgTradingSessionStatus) GetTradSesStartTime() string {
	if m != nil {
		return m.TradSesStartTime
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradSesOpenTime() string {
	if m != nil {
		return m.TradSesOpenTime
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradSesPreCloseTime() string {
	if m != nil {
		return m.TradSesPreCloseTime
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradSesCloseTime() string {
	if m != nil {
		return m.TradSesCloseTime
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradSesEndTime() string {
	if m != nil {
		return m.TradSesEndTime
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTotalVolumeTraded() int32 {
	if m != nil {
		return m.TotalVolumeTraded
	}
	return 0
}

func (m *MsgTradingSessionStatus) GetTradSesHighPx() string {
	if m != nil {
		return m.TradSesHighPx
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetTradSesLowPx() string {
	if m != nil {
		return m.TradSesLowPx
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetSecurityIDSource() string {
	if m != nil {
		return m.SecurityIDSource
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetMarketSegmentID() string {
	if m != nil {
		return m.MarketSegmentID
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *MsgTradingSessionStatus) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgTradingSessionStatusResponse struct {
}

func (m *MsgTradingSessionStatusResponse) Reset()         { *m = MsgTradingSessionStatusResponse{} }
func (m *MsgTradingSessionStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionStatusResponse) ProtoMessage()    {}
func (*MsgTradingSessionStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{56}
}
func (m *MsgTradingSessionStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionStatusResponse.Merge(m, src)
}
func (m *MsgTradingSessionStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionStatusResponse proto.InternalMessageInfo

type MsgTradingSessionStatusRequestReject struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RefSeqNum           string `protobuf:"bytes,2,opt,name=refSeqNum,proto3" json:"refSeqNum,omitempty"`
	RefMsgType          string `protobuf:"bytes,3,opt,name=refMsgType,proto3" json:"refMsgType,omitempty"`
	SessionRejectReason int32  `protobuf:"varint,4,opt,name=sessionRejectReason,proto3" json:"sessionRejectReason,omitempty"`
	Text                string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	SessionID           string `protobuf:"bytes,6,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *MsgTradingSessionStatusRequestReject) Reset()         { *m = MsgTradingSessionStatusRequestReject{} }
func (m *MsgTradingSessionStatusRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionStatusRequestReject) ProtoMessage()    {}
func (*MsgTradingSessionStatusRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{57}
}
func (m *MsgTradingSessionStatusRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionStatusRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionStatusRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionStatusRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionStatusRequestReject.Merge(m, src)
}
func (m *MsgTradingSessionStatusRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionStatusRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionStatusRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionStatusRequestReject proto.InternalMessageInfo

func (m *MsgTradingSessionStatusRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradingSessionStatusRequestReject) GetRefSeqNum() string {
	if m != nil {
		return m.RefSeqNum
	}
	return ""
}

func (m *MsgTradingSessionStatusRequestReject) GetRefMsgType() string {
	if m != nil {
		return m.RefMsgType
	}
	return ""
}

func (m *MsgTradingSessionStatusRequestReject) GetSessionRejectReason() int32 {
	if m != nil {
		return m.SessionRejectReason
	}
	return 0
}

func (m *MsgTradingSessionStatusRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgTradingSessionStatusRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type MsgTradingSessionStatusRequestRejectResponse struct {
}

func (m *MsgTradingSessionStatusRequestRejectResponse) Reset() {
	*m = MsgTradingSessionStatusRequestRejectResponse{}
}
func (m *MsgTradingSessionStatusRequestRejectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgTradingSessionStatusRequestRejectResponse) ProtoMessage() {}
func (*MsgTradingSessionStatusRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{58}
}
func (m *MsgTradingSessionStatusRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionStatusRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionStatusRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionStatusRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionStatusRequestRejectResponse.Merge(m, src)
}
func (m *MsgTradingSessionStatusRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionStatusRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionStatusRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionStatusRequestRejectResponse proto.InternalMessageInfo

type MsgTradingSessionListRequest struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID               string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	TradSesReqID            string `protobuf:"bytes,3,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
	TradingSessionID        string `protobuf:"bytes,4,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID     string `protobuf:"bytes,5,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	SecurityExchange        string `protobuf:"bytes,6,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	TradSesMethod           string `protobuf:"bytes,7,opt,name=tradSesMethod,proto3" json:"tradSesMethod,omitempty"`
	TradSesMode             string `protobuf:"bytes,8,opt,name=tradSesMode,proto3" json:"tradSesMode,omitempty"`
	SubscriptionRequestType string `protobuf:"bytes,9,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
}

func (m *MsgTradingSessionListRequest) Reset()         { *m = MsgTradingSessionListRequest{} }
func (m *MsgTradingSessionListRequest) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionListRequest) ProtoMessage()    {}
func (*MsgTradingSessionListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{59}
}
func (m *MsgTradingSessionListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionListRequest.Merge(m, src)
}
func (m *MsgTradingSessionListRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionListRequest proto.InternalMessageInfo

func (m *MsgTradingSessionListRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetTradSesMethod() string {
	if m != nil {
		return m.TradSesMethod
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetTradSesMode() string {
	if m != nil {
		return m.TradSesMode
	}
	return ""
}

func (m *MsgTradingSessionListRequest) GetSubscriptionRequestType() string {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return ""
}

type MsgTradingSessionListRequestResponse struct {
}

func (m *MsgTradingSessionListRequestResponse) Reset()         { *m = MsgTradingSessionListRequestResponse{} }
func (m *MsgTradingSessionListRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionListRequestResponse) ProtoMessage()    {}
func (*MsgTradingSessionListRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{60}
}
func (m *MsgTradingSessionListRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionListRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionListRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionListRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionListRequestResponse.Merge(m, src)
}
func (m *MsgTradingSessionListRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionListRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionListRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionListRequestResponse proto.InternalMessageInfo

type MsgTradingSessionListResponse struct {
	Creator                string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID              string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	TradSesReqID           string `protobuf:"bytes,3,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
	NoTradingSessions      string `protobuf:"bytes,4,opt,name=noTradingSessions,proto3" json:"noTradingSessions,omitempty"`
	TradingSessionID       string `protobuf:"bytes,5,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID    string `protobuf:"bytes,6,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	SecurityExchange       string `protobuf:"bytes,7,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	TradSesMethod          string `protobuf:"bytes,8,opt,name=tradSesMethod,proto3" json:"tradSesMethod,omitempty"`
	TradSesMode            string `protobuf:"bytes,9,opt,name=tradSesMode,proto3" json:"tradSesMode,omitempty"`
	UnsolicitedIndicator   string `protobuf:"bytes,10,opt,name=unsolicitedIndicator,proto3" json:"unsolicitedIndicator,omitempty"`
	TradSesStatus          string `protobuf:"bytes,11,opt,name=tradSesStatus,proto3" json:"tradSesStatus,omitempty"`
	TradSesStatusRejReason string `protobuf:"bytes,12,opt,name=tradSesStatusRejReason,proto3" json:"tradSesStatusRejReason,omitempty"`
	TradSesStartTime       string `protobuf:"bytes,13,opt,name=tradSesStartTime,proto3" json:"tradSesStartTime,omitempty"`
	TradSesOpenTime        string `protobuf:"bytes,14,opt,name=tradSesOpenTime,proto3" json:"tradSesOpenTime,omitempty"`
	TradSesPreCloseTime    string `protobuf:"bytes,15,opt,name=tradSesPreCloseTime,proto3" json:"tradSesPreCloseTime,omitempty"`
	TradSesCloseTime       string `protobuf:"bytes,16,opt,name=tradSesCloseTime,proto3" json:"tradSesCloseTime,omitempty"`
	TradSesEndTime         string `protobuf:"bytes,17,opt,name=tradSesEndTime,proto3" json:"tradSesEndTime,omitempty"`
}

func (m *MsgTradingSessionListResponse) Reset()         { *m = MsgTradingSessionListResponse{} }
func (m *MsgTradingSessionListResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionListResponse) ProtoMessage()    {}
func (*MsgTradingSessionListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{61}
}
func (m *MsgTradingSessionListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionListResponse.Merge(m, src)
}
func (m *MsgTradingSessionListResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionListResponse proto.InternalMessageInfo

func (m *MsgTradingSessionListResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetNoTradingSessions() string {
	if m != nil {
		return m.NoTradingSessions
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesMethod() string {
	if m != nil {
		return m.TradSesMethod
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesMode() string {
	if m != nil {
		return m.TradSesMode
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetUnsolicitedIndicator() string {
	if m != nil {
		return m.UnsolicitedIndicator
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesStatus() string {
	if m != nil {
		return m.TradSesStatus
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesStatusRejReason() string {
	if m != nil {
		return m.TradSesStatusRejReason
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesStartTime() string {
	if m != nil {
		return m.TradSesStartTime
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesOpenTime() string {
	if m != nil {
		return m.TradSesOpenTime
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesPreCloseTime() string {
	if m != nil {
		return m.TradSesPreCloseTime
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesCloseTime() string {
	if m != nil {
		return m.TradSesCloseTime
	}
	return ""
}

func (m *MsgTradingSessionListResponse) GetTradSesEndTime() string {
	if m != nil {
		return m.TradSesEndTime
	}
	return ""
}

type MsgTradingSessionListResponseResponse struct {
}

func (m *MsgTradingSessionListResponseResponse) Reset()         { *m = MsgTradingSessionListResponseResponse{} }
func (m *MsgTradingSessionListResponseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionListResponseResponse) ProtoMessage()    {}
func (*MsgTradingSessionListResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{62}
}
func (m *MsgTradingSessionListResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionListResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionListResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionListResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionListResponseResponse.Merge(m, src)
}
func (m *MsgTradingSessionListResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionListResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionListResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionListResponseResponse proto.InternalMessageInfo

type MsgTradingSessionListRequestReject struct {
	Creator                string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID              string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	TradSesReqID           string `protobuf:"bytes,3,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
	TradSesStatus          string `protobuf:"bytes,4,opt,name=tradSesStatus,proto3" json:"tradSesStatus,omitempty"`
	TradSesStatusRejReason string `protobuf:"bytes,5,opt,name=tradSesStatusRejReason,proto3" json:"tradSesStatusRejReason,omitempty"`
	Text                   string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *MsgTradingSessionListRequestReject) Reset()         { *m = MsgTradingSessionListRequestReject{} }
func (m *MsgTradingSessionListRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgTradingSessionListRequestReject) ProtoMessage()    {}
func (*MsgTradingSessionListRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{63}
}
func (m *MsgTradingSessionListRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionListRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionListRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionListRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionListRequestReject.Merge(m, src)
}
func (m *MsgTradingSessionListRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionListRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionListRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionListRequestReject proto.InternalMessageInfo

func (m *MsgTradingSessionListRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTradingSessionListRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgTradingSessionListRequestReject) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

func (m *MsgTradingSessionListRequestReject) GetTradSesStatus() string {
	if m != nil {
		return m.TradSesStatus
	}
	return ""
}

func (m *MsgTradingSessionListRequestReject) GetTradSesStatusRejReason() string {
	if m != nil {
		return m.TradSesStatusRejReason
	}
	return ""
}

func (m *MsgTradingSessionListRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MsgTradingSessionListRequestRejectResponse struct {
}

func (m *MsgTradingSessionListRequestRejectResponse) Reset() {
	*m = MsgTradingSessionListRequestRejectResponse{}
}
func (m *MsgTradingSessionListRequestRejectResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgTradingSessionListRequestRejectResponse) ProtoMessage() {}
func (*MsgTradingSessionListRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{64}
}
func (m *MsgTradingSessionListRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTradingSessionListRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTradingSessionListRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTradingSessionListRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTradingSessionListRequestRejectResponse.Merge(m, src)
}
func (m *MsgTradingSessionListRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTradingSessionListRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTradingSessionListRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTradingSessionListRequestRejectResponse proto.InternalMessageInfo

type MsgSecurityListRequest struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID               string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityReqID           string `protobuf:"bytes,3,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	SecurityListRequestType string `protobuf:"bytes,4,opt,name=securityListRequestType,proto3" json:"securityListRequestType,omitempty"`
	NoUnderlyings           string `protobuf:"bytes,5,opt,name=noUnderlyings,proto3" json:"noUnderlyings,omitempty"`
	NoLegs                  string `protobuf:"bytes,6,opt,name=noLegs,proto3" json:"noLegs,omitempty"`
	Currency                string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	Text                    string `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	EncodedTextLen          string `protobuf:"bytes,9,opt,name=encodedTextLen,proto3" json:"encodedTextLen,omitempty"`
	EncodedText             string `protobuf:"bytes,10,opt,name=encodedText,proto3" json:"encodedText,omitempty"`
	TradingSessionID        string `protobuf:"bytes,11,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID     string `protobuf:"bytes,12,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	SubscriptionRequestType string `protobuf:"bytes,13,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
}

func (m *MsgSecurityListRequest) Reset()         { *m = MsgSecurityListRequest{} }
func (m *MsgSecurityListRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityListRequest) ProtoMessage()    {}
func (*MsgSecurityListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{65}
}
func (m *MsgSecurityListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityListRequest.Merge(m, src)
}
func (m *MsgSecurityListRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityListRequest proto.InternalMessageInfo

func (m *MsgSecurityListRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityListRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityListRequest) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityListRequest) GetSecurityListRequestType() string {
	if m != nil {
		return m.SecurityListRequestType
	}
	return ""
}

func (m *MsgSecurityListRequest) GetNoUnderlyings() string {
	if m != nil {
		return m.NoUnderlyings
	}
	return ""
}

func (m *MsgSecurityListRequest) GetNoLegs() string {
	if m != nil {
		return m.NoLegs
	}
	return ""
}

func (m *MsgSecurityListRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MsgSecurityListRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgSecurityListRequest) GetEncodedTextLen() string {
	if m != nil {
		return m.EncodedTextLen
	}
	return ""
}

func (m *MsgSecurityListRequest) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

func (m *MsgSecurityListRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgSecurityListRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgSecurityListRequest) GetSubscriptionRequestType() string {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return ""
}

type MsgSecurityListRequestResponse struct {
}

func (m *MsgSecurityListRequestResponse) Reset()         { *m = MsgSecurityListRequestResponse{} }
func (m *MsgSecurityListRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityListRequestResponse) ProtoMessage()    {}
func (*MsgSecurityListRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{66}
}
func (m *MsgSecurityListRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityListRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityListRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityListRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityListRequestResponse.Merge(m, src)
}
func (m *MsgSecurityListRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityListRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityListRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityListRequestResponse proto.InternalMessageInfo

type MsgSecurityListResponse struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID             string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityReqID         string `protobuf:"bytes,3,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	SecurityResponseID    string `protobuf:"bytes,4,opt,name=securityResponseID,proto3" json:"securityResponseID,omitempty"`
	SecurityRequestResult string `protobuf:"bytes,5,opt,name=securityRequestResult,proto3" json:"securityRequestResult,omitempty"`
	TotNoRelatedSym       string `protobuf:"bytes,6,opt,name=totNoRelatedSym,proto3" json:"totNoRelatedSym,omitempty"`
	LastFragment          string `protobuf:"bytes,7,opt,name=lastFragment,proto3" json:"lastFragment,omitempty"`
	NoRelatedSym          string `protobuf:"bytes,8,opt,name=noRelatedSym,proto3" json:"noRelatedSym,omitempty"`
	NoUnderlyings         string `protobuf:"bytes,9,opt,name=noUnderlyings,proto3" json:"noUnderlyings,omitempty"`
	Currency              string `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	NoLegs                string `protobuf:"bytes,11,opt,name=noLegs,proto3" json:"noLegs,omitempty"`
	RoundLot              string `protobuf:"bytes,12,opt,name=roundLot,proto3" json:"roundLot,omitempty"`
	MinTradeVol           string `protobuf:"bytes,13,opt,name=minTradeVol,proto3" json:"minTradeVol,omitempty"`
	TradingSessionID      string `protobuf:"bytes,14,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID   string `protobuf:"bytes,15,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	ExpirationCycle       string `protobuf:"bytes,16,opt,name=expirationCycle,proto3" json:"expirationCycle,omitempty"`
	Text                  string `protobuf:"bytes,17,opt,name=text,proto3" json:"text,omitempty"`
	EncodedTextLen        string `protobuf:"bytes,18,opt,name=encodedTextLen,proto3" json:"encodedTextLen,omitempty"`
	EncodedText           string `protobuf:"bytes,19,opt,name=encodedText,proto3" json:"encodedText,omitempty"`
}

func (m *MsgSecurityListResponse) Reset()         { *m = MsgSecurityListResponse{} }
func (m *MsgSecurityListResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityListResponse) ProtoMessage()    {}
func (*MsgSecurityListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{67}
}
func (m *MsgSecurityListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityListResponse.Merge(m, src)
}
func (m *MsgSecurityListResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityListResponse proto.InternalMessageInfo

func (m *MsgSecurityListResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityListResponse) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityListResponse) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityListResponse) GetSecurityResponseID() string {
	if m != nil {
		return m.SecurityResponseID
	}
	return ""
}

func (m *MsgSecurityListResponse) GetSecurityRequestResult() string {
	if m != nil {
		return m.SecurityRequestResult
	}
	return ""
}

func (m *MsgSecurityListResponse) GetTotNoRelatedSym() string {
	if m != nil {
		return m.TotNoRelatedSym
	}
	return ""
}

func (m *MsgSecurityListResponse) GetLastFragment() string {
	if m != nil {
		return m.LastFragment
	}
	return ""
}

func (m *MsgSecurityListResponse) GetNoRelatedSym() string {
	if m != nil {
		return m.NoRelatedSym
	}
	return ""
}

func (m *MsgSecurityListResponse) GetNoUnderlyings() string {
	if m != nil {
		return m.NoUnderlyings
	}
	return ""
}

func (m *MsgSecurityListResponse) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MsgSecurityListResponse) GetNoLegs() string {
	if m != nil {
		return m.NoLegs
	}
	return ""
}

func (m *MsgSecurityListResponse) GetRoundLot() string {
	if m != nil {
		return m.RoundLot
	}
	return ""
}

func (m *MsgSecurityListResponse) GetMinTradeVol() string {
	if m != nil {
		return m.MinTradeVol
	}
	return ""
}

func (m *MsgSecurityListResponse) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgSecurityListResponse) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgSecurityListResponse) GetExpirationCycle() string {
	if m != nil {
		return m.ExpirationCycle
	}
	return ""
}

func (m *MsgSecurityListResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgSecurityListResponse) GetEncodedTextLen() string {
	if m != nil {
		return m.EncodedTextLen
	}
	return ""
}

func (m *MsgSecurityListResponse) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

type MsgSecurityListResponseResponse struct {
}

func (m *MsgSecurityListResponseResponse) Reset()         { *m = MsgSecurityListResponseResponse{} }
func (m *MsgSecurityListResponseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityListResponseResponse) ProtoMessage()    {}
func (*MsgSecurityListResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{68}
}
func (m *MsgSecurityListResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityListResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityListResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityListResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityListResponseResponse.Merge(m, src)
}
func (m *MsgSecurityListResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityListResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityListResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityListResponseResponse proto.InternalMessageInfo

type MsgSecurityListRequestReject struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID               string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityReqID           string `protobuf:"bytes,3,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	SecurityListRequestType string `protobuf:"bytes,4,opt,name=securityListRequestType,proto3" json:"securityListRequestType,omitempty"`
	SecurityRequestResult   string `protobuf:"bytes,5,opt,name=securityRequestResult,proto3" json:"securityRequestResult,omitempty"`
	Text                    string `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	EncodedTextLen          string `protobuf:"bytes,7,opt,name=encodedTextLen,proto3" json:"encodedTextLen,omitempty"`
	EncodedText             string `protobuf:"bytes,8,opt,name=encodedText,proto3" json:"encodedText,omitempty"`
}

func (m *MsgSecurityListRequestReject) Reset()         { *m = MsgSecurityListRequestReject{} }
func (m *MsgSecurityListRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityListRequestReject) ProtoMessage()    {}
func (*MsgSecurityListRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{69}
}
func (m *MsgSecurityListRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityListRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityListRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityListRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityListRequestReject.Merge(m, src)
}
func (m *MsgSecurityListRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityListRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityListRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityListRequestReject proto.InternalMessageInfo

func (m *MsgSecurityListRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityListRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityListRequestReject) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityListRequestReject) GetSecurityListRequestType() string {
	if m != nil {
		return m.SecurityListRequestType
	}
	return ""
}

func (m *MsgSecurityListRequestReject) GetSecurityRequestResult() string {
	if m != nil {
		return m.SecurityRequestResult
	}
	return ""
}

func (m *MsgSecurityListRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgSecurityListRequestReject) GetEncodedTextLen() string {
	if m != nil {
		return m.EncodedTextLen
	}
	return ""
}

func (m *MsgSecurityListRequestReject) GetEncodedText() string {
	if m != nil {
		return m.EncodedText
	}
	return ""
}

type MsgSecurityListRequestRejectResponse struct {
}

func (m *MsgSecurityListRequestRejectResponse) Reset()         { *m = MsgSecurityListRequestRejectResponse{} }
func (m *MsgSecurityListRequestRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityListRequestRejectResponse) ProtoMessage()    {}
func (*MsgSecurityListRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{70}
}
func (m *MsgSecurityListRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityListRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityListRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityListRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityListRequestRejectResponse.Merge(m, src)
}
func (m *MsgSecurityListRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityListRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityListRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityListRequestRejectResponse proto.InternalMessageInfo

type MsgSecurityStatusRequest struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID               string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityStatusReqID     string `protobuf:"bytes,3,opt,name=securityStatusReqID,proto3" json:"securityStatusReqID,omitempty"`
	Instrument              string `protobuf:"bytes,4,opt,name=instrument,proto3" json:"instrument,omitempty"`
	NoUnderlyings           string `protobuf:"bytes,5,opt,name=noUnderlyings,proto3" json:"noUnderlyings,omitempty"`
	UnderlyingInstrument    string `protobuf:"bytes,6,opt,name=underlyingInstrument,proto3" json:"underlyingInstrument,omitempty"`
	NoLegs                  string `protobuf:"bytes,7,opt,name=noLegs,proto3" json:"noLegs,omitempty"`
	InstrumentLeg           string `protobuf:"bytes,8,opt,name=instrumentLeg,proto3" json:"instrumentLeg,omitempty"`
	Currency                string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	SubscriptionRequestType string `protobuf:"bytes,10,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
	TradingSessionID        string `protobuf:"bytes,11,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID     string `protobuf:"bytes,12,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
}

func (m *MsgSecurityStatusRequest) Reset()         { *m = MsgSecurityStatusRequest{} }
func (m *MsgSecurityStatusRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityStatusRequest) ProtoMessage()    {}
func (*MsgSecurityStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{71}
}
func (m *MsgSecurityStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityStatusRequest.Merge(m, src)
}
func (m *MsgSecurityStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityStatusRequest proto.InternalMessageInfo

func (m *MsgSecurityStatusRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetSecurityStatusReqID() string {
	if m != nil {
		return m.SecurityStatusReqID
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetInstrument() string {
	if m != nil {
		return m.Instrument
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetNoUnderlyings() string {
	if m != nil {
		return m.NoUnderlyings
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetUnderlyingInstrument() string {
	if m != nil {
		return m.UnderlyingInstrument
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetNoLegs() string {
	if m != nil {
		return m.NoLegs
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetInstrumentLeg() string {
	if m != nil {
		return m.InstrumentLeg
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetSubscriptionRequestType() string {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgSecurityStatusRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

type MsgSecurityStatusRequestResponse struct {
}

func (m *MsgSecurityStatusRequestResponse) Reset()         { *m = MsgSecurityStatusRequestResponse{} }
func (m *MsgSecurityStatusRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityStatusRequestResponse) ProtoMessage()    {}
func (*MsgSecurityStatusRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{72}
}
func (m *MsgSecurityStatusRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityStatusRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityStatusRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityStatusRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityStatusRequestResponse.Merge(m, src)
}
func (m *MsgSecurityStatusRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityStatusRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityStatusRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityStatusRequestResponse proto.InternalMessageInfo

type MsgSecurityStatusResponse struct {
	Creator               string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID             string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityStatusReqID   string `protobuf:"bytes,3,opt,name=securityStatusReqID,proto3" json:"securityStatusReqID,omitempty"`
	NoUnderlyings         string `protobuf:"bytes,4,opt,name=noUnderlyings,proto3" json:"noUnderlyings,omitempty"`
	UnderlyingInstrument  string `protobuf:"bytes,5,opt,name=underlyingInstrument,proto3" json:"underlyingInstrument,omitempty"`
	NoLegs                string `protobuf:"bytes,6,opt,name=noLegs,proto3" json:"noLegs,omitempty"`
	InstrumentLeg         string `protobuf:"bytes,7,opt,name=instrumentLeg,proto3" json:"instrumentLeg,omitempty"`
	Currency              string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	TradingSessionID      string `protobuf:"bytes,9,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID   string `protobuf:"bytes,10,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	UnsolicitedIndicator  string `protobuf:"bytes,11,opt,name=unsolicitedIndicator,proto3" json:"unsolicitedIndicator,omitempty"`
	SecurityTradingStatus string `protobuf:"bytes,12,opt,name=securityTradingStatus,proto3" json:"securityTradingStatus,omitempty"`
	FinancialStatus       string `protobuf:"bytes,13,opt,name=financialStatus,proto3" json:"financialStatus,omitempty"`
	CorporateAction       string `protobuf:"bytes,14,opt,name=corporateAction,proto3" json:"corporateAction,omitempty"`
	HaltReason            string `protobuf:"bytes,15,opt,name=haltReason,proto3" json:"haltReason,omitempty"`
	InViewOfCommon        string `protobuf:"bytes,16,opt,name=inViewOfCommon,proto3" json:"inViewOfCommon,omitempty"`
	DueToRelated          string `protobuf:"bytes,17,opt,name=dueToRelated,proto3" json:"dueToRelated,omitempty"`
	BuyVolume             string `protobuf:"bytes,18,opt,name=buyVolume,proto3" json:"buyVolume,omitempty"`
	SellVolume            string `protobuf:"bytes,19,opt,name=sellVolume,proto3" json:"sellVolume,omitempty"`
	HighPx                string `protobuf:"bytes,20,opt,name=highPx,proto3" json:"highPx,omitempty"`
	LowPx                 string `protobuf:"bytes,21,opt,name=lowPx,proto3" json:"lowPx,omitempty"`
	LastPx                string `protobuf:"bytes,22,opt,name=lastPx,proto3" json:"lastPx,omitempty"`
	TransactTime          string `protobuf:"bytes,23,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	Adjustment            string `protobuf:"bytes,24,opt,name=adjustment,proto3" json:"adjustment,omitempty"`
	Text                  string `protobuf:"bytes,25,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *MsgSecurityStatusResponse) Reset()         { *m = MsgSecurityStatusResponse{} }
func (m *MsgSecurityStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityStatusResponse) ProtoMessage()    {}
func (*MsgSecurityStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{73}
}
func (m *MsgSecurityStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityStatusResponse.Merge(m, src)
}
func (m *MsgSecurityStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityStatusResponse proto.InternalMessageInfo

func (m *MsgSecurityStatusResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetSecurityStatusReqID() string {
	if m != nil {
		return m.SecurityStatusReqID
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetNoUnderlyings() string {
	if m != nil {
		return m.NoUnderlyings
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetUnderlyingInstrument() string {
	if m != nil {
		return m.UnderlyingInstrument
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetNoLegs() string {
	if m != nil {
		return m.NoLegs
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetInstrumentLeg() string {
	if m != nil {
		return m.InstrumentLeg
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetUnsolicitedIndicator() string {
	if m != nil {
		return m.UnsolicitedIndicator
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetSecurityTradingStatus() string {
	if m != nil {
		return m.SecurityTradingStatus
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetFinancialStatus() string {
	if m != nil {
		return m.FinancialStatus
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetCorporateAction() string {
	if m != nil {
		return m.CorporateAction
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetHaltReason() string {
	if m != nil {
		return m.HaltReason
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetInViewOfCommon() string {
	if m != nil {
		return m.InViewOfCommon
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetDueToRelated() string {
	if m != nil {
		return m.DueToRelated
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetBuyVolume() string {
	if m != nil {
		return m.BuyVolume
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetSellVolume() string {
	if m != nil {
		return m.SellVolume
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetHighPx() string {
	if m != nil {
		return m.HighPx
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetLowPx() string {
	if m != nil {
		return m.LowPx
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetLastPx() string {
	if m != nil {
		return m.LastPx
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetAdjustment() string {
	if m != nil {
		return m.Adjustment
	}
	return ""
}

func (m *MsgSecurityStatusResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MsgSecurityStatusResponseResponse struct {
}

func (m *MsgSecurityStatusResponseResponse) Reset()         { *m = MsgSecurityStatusResponseResponse{} }
func (m *MsgSecurityStatusResponseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityStatusResponseResponse) ProtoMessage()    {}
func (*MsgSecurityStatusResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{74}
}
func (m *MsgSecurityStatusResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityStatusResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityStatusResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityStatusResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityStatusResponseResponse.Merge(m, src)
}
func (m *MsgSecurityStatusResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityStatusResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityStatusResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityStatusResponseResponse proto.InternalMessageInfo

type MsgSecurityStatusRequestReject struct {
	Creator              string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID            string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityStatusReqID  string `protobuf:"bytes,3,opt,name=securityStatusReqID,proto3" json:"securityStatusReqID,omitempty"`
	SecurityRejectReason string `protobuf:"bytes,4,opt,name=securityRejectReason,proto3" json:"securityRejectReason,omitempty"`
	Text                 string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *MsgSecurityStatusRequestReject) Reset()         { *m = MsgSecurityStatusRequestReject{} }
func (m *MsgSecurityStatusRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityStatusRequestReject) ProtoMessage()    {}
func (*MsgSecurityStatusRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{75}
}
func (m *MsgSecurityStatusRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityStatusRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityStatusRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityStatusRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityStatusRequestReject.Merge(m, src)
}
func (m *MsgSecurityStatusRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityStatusRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityStatusRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityStatusRequestReject proto.InternalMessageInfo

func (m *MsgSecurityStatusRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityStatusRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityStatusRequestReject) GetSecurityStatusReqID() string {
	if m != nil {
		return m.SecurityStatusReqID
	}
	return ""
}

func (m *MsgSecurityStatusRequestReject) GetSecurityRejectReason() string {
	if m != nil {
		return m.SecurityRejectReason
	}
	return ""
}

func (m *MsgSecurityStatusRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MsgSecurityStatusRequestRejectResponse struct {
}

func (m *MsgSecurityStatusRequestRejectResponse) Reset() {
	*m = MsgSecurityStatusRequestRejectResponse{}
}
func (m *MsgSecurityStatusRequestRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityStatusRequestRejectResponse) ProtoMessage()    {}
func (*MsgSecurityStatusRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{76}
}
func (m *MsgSecurityStatusRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityStatusRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityStatusRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityStatusRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityStatusRequestRejectResponse.Merge(m, src)
}
func (m *MsgSecurityStatusRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityStatusRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityStatusRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityStatusRequestRejectResponse proto.InternalMessageInfo

type MsgSecurityTypesRequest struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID           string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityReqID       string `protobuf:"bytes,3,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	Text                string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	TradingSessionID    string `protobuf:"bytes,5,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID string `protobuf:"bytes,6,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	Product             string `protobuf:"bytes,7,opt,name=product,proto3" json:"product,omitempty"`
	SecurityType        string `protobuf:"bytes,8,opt,name=securityType,proto3" json:"securityType,omitempty"`
	SecuritySubType     string `protobuf:"bytes,9,opt,name=securitySubType,proto3" json:"securitySubType,omitempty"`
}

func (m *MsgSecurityTypesRequest) Reset()         { *m = MsgSecurityTypesRequest{} }
func (m *MsgSecurityTypesRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityTypesRequest) ProtoMessage()    {}
func (*MsgSecurityTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{77}
}
func (m *MsgSecurityTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityTypesRequest.Merge(m, src)
}
func (m *MsgSecurityTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityTypesRequest proto.InternalMessageInfo

func (m *MsgSecurityTypesRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *MsgSecurityTypesRequest) GetSecuritySubType() string {
	if m != nil {
		return m.SecuritySubType
	}
	return ""
}

type MsgSecurityTypesRequestResponse struct {
}

func (m *MsgSecurityTypesRequestResponse) Reset()         { *m = MsgSecurityTypesRequestResponse{} }
func (m *MsgSecurityTypesRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityTypesRequestResponse) ProtoMessage()    {}
func (*MsgSecurityTypesRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{78}
}
func (m *MsgSecurityTypesRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityTypesRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityTypesRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityTypesRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityTypesRequestResponse.Merge(m, src)
}
func (m *MsgSecurityTypesRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityTypesRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityTypesRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityTypesRequestResponse proto.InternalMessageInfo

type MsgSecurityTypesResponse struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID               string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityReqID           string `protobuf:"bytes,3,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	SecurityResponseID      string `protobuf:"bytes,4,opt,name=securityResponseID,proto3" json:"securityResponseID,omitempty"`
	SecurityResponseType    string `protobuf:"bytes,5,opt,name=securityResponseType,proto3" json:"securityResponseType,omitempty"`
	TotNoSecurityTypes      string `protobuf:"bytes,6,opt,name=totNoSecurityTypes,proto3" json:"totNoSecurityTypes,omitempty"`
	LastFragment            string `protobuf:"bytes,7,opt,name=lastFragment,proto3" json:"lastFragment,omitempty"`
	NoSecurityTypes         string `protobuf:"bytes,8,opt,name=noSecurityTypes,proto3" json:"noSecurityTypes,omitempty"`
	SecurityType            string `protobuf:"bytes,9,opt,name=securityType,proto3" json:"securityType,omitempty"`
	SecuritySubType         string `protobuf:"bytes,10,opt,name=securitySubType,proto3" json:"securitySubType,omitempty"`
	Product                 string `protobuf:"bytes,11,opt,name=product,proto3" json:"product,omitempty"`
	CFICode                 string `protobuf:"bytes,12,opt,name=cFICode,proto3" json:"cFICode,omitempty"`
	Text                    string `protobuf:"bytes,13,opt,name=text,proto3" json:"text,omitempty"`
	TradingSessionID        string `protobuf:"bytes,14,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	TradingSessionSubID     string `protobuf:"bytes,15,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	SubscriptionRequestType string `protobuf:"bytes,16,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
}

func (m *MsgSecurityTypesResponse) Reset()         { *m = MsgSecurityTypesResponse{} }
func (m *MsgSecurityTypesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityTypesResponse) ProtoMessage()    {}
func (*MsgSecurityTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{79}
}
func (m *MsgSecurityTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityTypesResponse.Merge(m, src)
}
func (m *MsgSecurityTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityTypesResponse proto.InternalMessageInfo

func (m *MsgSecurityTypesResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetSecurityResponseID() string {
	if m != nil {
		return m.SecurityResponseID
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetSecurityResponseType() string {
	if m != nil {
		return m.SecurityResponseType
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetTotNoSecurityTypes() string {
	if m != nil {
		return m.TotNoSecurityTypes
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetLastFragment() string {
	if m != nil {
		return m.LastFragment
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetNoSecurityTypes() string {
	if m != nil {
		return m.NoSecurityTypes
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetSecuritySubType() string {
	if m != nil {
		return m.SecuritySubType
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetCFICode() string {
	if m != nil {
		return m.CFICode
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *MsgSecurityTypesResponse) GetSubscriptionRequestType() string {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return ""
}

type MsgSecurityTypesResponseResponse struct {
}

func (m *MsgSecurityTypesResponseResponse) Reset()         { *m = MsgSecurityTypesResponseResponse{} }
func (m *MsgSecurityTypesResponseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityTypesResponseResponse) ProtoMessage()    {}
func (*MsgSecurityTypesResponseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{80}
}
func (m *MsgSecurityTypesResponseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityTypesResponseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityTypesResponseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityTypesResponseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityTypesResponseResponse.Merge(m, src)
}
func (m *MsgSecurityTypesResponseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityTypesResponseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityTypesResponseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityTypesResponseResponse proto.InternalMessageInfo

type MsgSecurityTypesRequestReject struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SessionID     string `protobuf:"bytes,2,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityReqID string `protobuf:"bytes,3,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	RejectReason  string `protobuf:"bytes,4,opt,name=rejectReason,proto3" json:"rejectReason,omitempty"`
	Text          string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *MsgSecurityTypesRequestReject) Reset()         { *m = MsgSecurityTypesRequestReject{} }
func (m *MsgSecurityTypesRequestReject) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityTypesRequestReject) ProtoMessage()    {}
func (*MsgSecurityTypesRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{81}
}
func (m *MsgSecurityTypesRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityTypesRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityTypesRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityTypesRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityTypesRequestReject.Merge(m, src)
}
func (m *MsgSecurityTypesRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityTypesRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityTypesRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityTypesRequestReject proto.InternalMessageInfo

func (m *MsgSecurityTypesRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSecurityTypesRequestReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MsgSecurityTypesRequestReject) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *MsgSecurityTypesRequestReject) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *MsgSecurityTypesRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MsgSecurityTypesRequestRejectResponse struct {
}

func (m *MsgSecurityTypesRequestRejectResponse) Reset()         { *m = MsgSecurityTypesRequestRejectResponse{} }
func (m *MsgSecurityTypesRequestRejectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSecurityTypesRequestRejectResponse) ProtoMessage()    {}
func (*MsgSecurityTypesRequestRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11ceb96bb48cdb91, []int{82}
}
func (m *MsgSecurityTypesRequestRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSecurityTypesRequestRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSecurityTypesRequestRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSecurityTypesRequestRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSecurityTypesRequestRejectResponse.Merge(m, src)
}
func (m *MsgSecurityTypesRequestRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSecurityTypesRequestRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSecurityTypesRequestRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSecurityTypesRequestRejectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDeleteAccountResponse)(nil), "jim380.re.fix.MsgDeleteAccountResponse")
	proto.RegisterType((*MsgLogonInitiator)(nil), "jim380.re.fix.MsgLogonInitiator")
	proto.RegisterType((*MsgLogonInitiatorResponse)(nil), "jim380.re.fix.MsgLogonInitiatorResponse")
	proto.RegisterType((*MsgLogonAcceptor)(nil), "jim380.re.fix.MsgLogonAcceptor")
	proto.RegisterType((*MsgLogonAcceptorResponse)(nil), "jim380.re.fix.MsgLogonAcceptorResponse")
	proto.RegisterType((*MsgTerminateLogon)(nil), "jim380.re.fix.MsgTerminateLogon")
	proto.RegisterType((*MsgTerminateLogonResponse)(nil), "jim380.re.fix.MsgTerminateLogonResponse")
	proto.RegisterType((*MsgLogonReject)(nil), "jim380.re.fix.MsgLogonReject")
	proto.RegisterType((*MsgLogonRejectResponse)(nil), "jim380.re.fix.MsgLogonRejectResponse")
	proto.RegisterType((*MsgLogoutInitiator)(nil), "jim380.re.fix.MsgLogoutInitiator")
	proto.RegisterType((*MsgLogoutInitiatorResponse)(nil), "jim380.re.fix.MsgLogoutInitiatorResponse")
	proto.RegisterType((*MsgLogoutAcceptor)(nil), "jim380.re.fix.MsgLogoutAcceptor")
	proto.RegisterType((*MsgLogoutAcceptorResponse)(nil), "jim380.re.fix.MsgLogoutAcceptorResponse")
	proto.RegisterType((*MsgNewOrderSingle)(nil), "jim380.re.fix.MsgNewOrderSingle")
	proto.RegisterType((*MsgNewOrderSingleResponse)(nil), "jim380.re.fix.MsgNewOrderSingleResponse")
	proto.RegisterType((*MsgOrderCancelRequest)(nil), "jim380.re.fix.MsgOrderCancelRequest")
	proto.RegisterType((*MsgOrderCancelRequestResponse)(nil), "jim380.re.fix.MsgOrderCancelRequestResponse")
	proto.RegisterType((*MsgOrderCancelReject)(nil), "jim380.re.fix.MsgOrderCancelReject")
	proto.RegisterType((*MsgOrderCancelRejectResponse)(nil), "jim380.re.fix.MsgOrderCancelRejectResponse")
	proto.RegisterType((*MsgOrderExecutionReport)(nil), "jim380.re.fix.MsgOrderExecutionReport")
	proto.RegisterType((*MsgOrderExecutionReportResponse)(nil), "jim380.re.fix.MsgOrderExecutionReportResponse")
	proto.RegisterType((*MsgQuoteRequest)(nil), "jim380.re.fix.MsgQuoteRequest")
	proto.RegisterType((*MsgQuoteRequestResponse)(nil), "jim380.re.fix.MsgQuoteRequestResponse")
	proto.RegisterType((*MsgQuoteAcknowledgement)(nil), "jim380.re.fix.MsgQuoteAcknowledgement")
	proto.RegisterType((*MsgQuoteAcknowledgementResponse)(nil), "jim380.re.fix.MsgQuoteAcknowledgementResponse")
	proto.RegisterType((*MsgQuoteRequestReject)(nil), "jim380.re.fix.MsgQuoteRequestReject")
	proto.RegisterType((*MsgQuoteRequestRejectResponse)(nil), "jim380.re.fix.MsgQuoteRequestRejectResponse")
	proto.RegisterType((*MsgTradeCaptureReport)(nil), "jim380.re.fix.MsgTradeCaptureReport")
	proto.RegisterType((*MsgTradeCaptureReportResponse)(nil), "jim380.re.fix.MsgTradeCaptureReportResponse")
	proto.RegisterType((*MsgTradeCaptureReportAcknowledgement)(nil), "jim380.re.fix.MsgTradeCaptureReportAcknowledgement")
	proto.RegisterType((*MsgTradeCaptureReportAcknowledgementResponse)(nil), "jim380.re.fix.MsgTradeCaptureReportAcknowledgementResponse")
	proto.RegisterType((*MsgTradeCaptureReportRejection)(nil), "jim380.re.fix.MsgTradeCaptureReportRejection")
	proto.RegisterType((*MsgTradeCaptureReportRejectionResponse)(nil), "jim380.re.fix.MsgTradeCaptureReportRejectionResponse")
	proto.RegisterType((*MsgMarketDataRequest)(nil), "jim380.re.fix.MsgMarketDataRequest")
	proto.RegisterType((*MsgMarketDataRequestResponse)(nil), "jim380.re.fix.MsgMarketDataRequestResponse")
	proto.RegisterType((*MsgMarketDataSnapshotFullRefresh)(nil), "jim380.re.fix.MsgMarketDataSnapshotFullRefresh")
	proto.RegisterType((*MsgMarketDataSnapshotFullRefreshResponse)(nil), "jim380.re.fix.MsgMarketDataSnapshotFullRefreshResponse")
	proto.RegisterType((*MsgMarketDataIncremental)(nil), "jim380.re.fix.MsgMarketDataIncremental")
	proto.RegisterType((*MsgMarketDataIncrementalResponse)(nil), "jim380.re.fix.MsgMarketDataIncrementalResponse")
	proto.RegisterType((*MsgMarketDataRequestReject)(nil), "jim380.re.fix.MsgMarketDataRequestReject")
	proto.RegisterType((*MsgMarketDataRequestRejectResponse)(nil), "jim380.re.fix.MsgMarketDataRequestRejectResponse")
	proto.RegisterType((*MsgSecurityDefinitionRequest)(nil), "jim380.re.fix.MsgSecurityDefinitionRequest")
	proto.RegisterType((*MsgSecurityDefinitionRequestResponse)(nil), "jim380.re.fix.MsgSecurityDefinitionRequestResponse")
	proto.RegisterType((*MsgSecurityDefinition)(nil), "jim380.re.fix.MsgSecurityDefinition")
	proto.RegisterType((*MsgSecurityDefinitionResponse)(nil), "jim380.re.fix.MsgSecurityDefinitionResponse")
	proto.RegisterType((*MsgSecurityDefinitionRequestReject)(nil), "jim380.re.fix.MsgSecurityDefinitionRequestReject")
	proto.RegisterType((*MsgSecurityDefinitionRequestRejectResponse)(nil), "jim380.re.fix.MsgSecurityDefinitionRequestRejectResponse")
	proto.RegisterType((*MsgOrderMassStatusRequest)(nil), "jim380.re.fix.MsgOrderMassStatusRequest")
	proto.RegisterType((*MsgOrderMassStatusRequestResponse)(nil), "jim380.re.fix.MsgOrderMassStatusRequestResponse")
	proto.RegisterType((*MsgOrderMassStatusReport)(nil), "jim380.re.fix.MsgOrderMassStatusReport")
	proto.RegisterType((*MsgOrderMassStatusReportResponse)(nil), "jim380.re.fix.MsgOrderMassStatusReportResponse")
	proto.RegisterType((*MsgOrderMassStatusRequestReject)(nil), "jim380.re.fix.MsgOrderMassStatusRequestReject")
	proto.RegisterType((*MsgOrderMassStatusRequestRejectResponse)(nil), "jim380.re.fix.MsgOrderMassStatusRequestRejectResponse")
	proto.RegisterType((*MsgTradingSessionStatusRequest)(nil), "jim380.re.fix.MsgTradingSessionStatusRequest")
	proto.RegisterType((*MsgTradingSessionStatusRequestResponse)(nil), "jim380.re.fix.MsgTradingSessionStatusRequestResponse")
	proto.RegisterType((*MsgTradingSessionStatus)(nil), "jim380.re.fix.MsgTradingSessionStatus")
	proto.RegisterType((*MsgTradingSessionStatusResponse)(nil), "jim380.re.fix.MsgTradingSessionStatusResponse")
	proto.RegisterType((*MsgTradingSessionStatusRequestReject)(nil), "jim380.re.fix.MsgTradingSessionStatusRequestReject")
	proto.RegisterType((*MsgTradingSessionStatusRequestRejectResponse)(nil), "jim380.re.fix.MsgTradingSessionStatusRequestRejectResponse")
	proto.RegisterType((*MsgTradingSessionListRequest)(nil), "jim380.re.fix.MsgTradingSessionListRequest")
	proto.RegisterType((*MsgTradingSessionListRequestResponse)(nil), "jim380.re.fix.MsgTradingSessionListRequestResponse")
	proto.RegisterType((*MsgTradingSessionListResponse)(nil), "jim380.re.fix.MsgTradingSessionListResponse")
	proto.RegisterType((*MsgTradingSessionListResponseResponse)(nil), "jim380.re.fix.MsgTradingSessionListResponseResponse")
	proto.RegisterType((*MsgTradingSessionListRequestReject)(nil), "jim380.re.fix.MsgTradingSessionListRequestReject")
	proto.RegisterType((*MsgTradingSessionListRequestRejectResponse)(nil), "jim380.re.fix.MsgTradingSessionListRequestRejectResponse")
	proto.RegisterType((*MsgSecurityListRequest)(nil), "jim380.re.fix.MsgSecurityListRequest")
	proto.RegisterType((*MsgSecurityListRequestResponse)(nil), "jim380.re.fix.MsgSecurityListRequestResponse")
	proto.RegisterType((*MsgSecurityListResponse)(nil), "jim380.re.fix.MsgSecurityListResponse")
	proto.RegisterType((*MsgSecurityListResponseResponse)(nil), "jim380.re.fix.MsgSecurityListResponseResponse")
	proto.RegisterType((*MsgSecurityListRequestReject)(nil), "jim380.re.fix.MsgSecurityListRequestReject")
	proto.RegisterType((*MsgSecurityListRequestRejectResponse)(nil), "jim380.re.fix.MsgSecurityListRequestRejectResponse")
	proto.RegisterType((*MsgSecurityStatusRequest)(nil), "jim380.re.fix.MsgSecurityStatusRequest")
	proto.RegisterType((*MsgSecurityStatusRequestResponse)(nil), "jim380.re.fix.MsgSecurityStatusRequestResponse")
	proto.RegisterType((*MsgSecurityStatusResponse)(nil), "jim380.re.fix.MsgSecurityStatusResponse")
	proto.RegisterType((*MsgSecurityStatusResponseResponse)(nil), "jim380.re.fix.MsgSecurityStatusResponseResponse")
	proto.RegisterType((*MsgSecurityStatusRequestReject)(nil), "jim380.re.fix.MsgSecurityStatusRequestReject")
	proto.RegisterType((*MsgSecurityStatusRequestRejectResponse)(nil), "jim380.re.fix.MsgSecurityStatusRequestRejectResponse")
	proto.RegisterType((*MsgSecurityTypesRequest)(nil), "jim380.re.fix.MsgSecurityTypesRequest")
	proto.RegisterType((*MsgSecurityTypesRequestResponse)(nil), "jim380.re.fix.MsgSecurityTypesRequestResponse")
	proto.RegisterType((*MsgSecurityTypesResponse)(nil), "jim380.re.fix.MsgSecurityTypesResponse")
	proto.RegisterType((*MsgSecurityTypesResponseResponse)(nil), "jim380.re.fix.MsgSecurityTypesResponseResponse")
	proto.RegisterType((*MsgSecurityTypesRequestReject)(nil), "jim380.re.fix.MsgSecurityTypesRequestReject")
	proto.RegisterType((*MsgSecurityTypesRequestRejectResponse)(nil), "jim380.re.fix.MsgSecurityTypesRequestRejectResponse")
}

func init() { proto.RegisterFile("re/fix/tx.proto", fileDescriptor_11ceb96bb48cdb91) }

var fileDescriptor_11ceb96bb48cdb91 = []byte{
	// 4462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3c, 0x4d, 0x6c, 0x25, 0x47,
	0x5a, 0x79, 0x7e, 0x7e, 0x7f, 0xe5, 0xff, 0x1e, 0xdb, 0xf3, 0xf2, 0x32, 0x71, 0x3c, 0x8e, 0x67,
	0xc6, 0x49, 0x1c, 0x7b, 0x32, 0x33, 0x1b, 0x96, 0xdd, 0x03, 0x9a, 0x1d, 0x4f, 0xb4, 0x96, 0xc6,
	0x99, 0xe4, 0x3d, 0x27, 0x68, 0x57, 0x8b, 0xa2, 0x76, 0x77, 0xf9, 0xb9, 0x93, 0xf7, 0xba, 0xdf,
	0x74, 0x57, 0xef, 0xd8, 0x07, 0xa4, 0x95, 0x40, 0x2b, 0xe0, 0x02, 0x17, 0x24, 0x2e, 0x5c, 0x80,
	0x03, 0x70, 0xe2, 0x82, 0xb8, 0xc0, 0x09, 0x0e, 0x08, 0x09, 0x69, 0xe1, 0x80, 0x38, 0x70, 0x40,
	0x09, 0x1c, 0x90, 0x10, 0x42, 0xdc, 0x38, 0x20, 0xa1, 0xfa, 0xed, 0xaa, 0xea, 0xaa, 0xee, 0x7e,
	0xb6, 0x13, 0xed, 0xed, 0xd5, 0xf7, 0x7d, 0x5d, 0x5d, 0xdf, 0xff, 0x57, 0x5f, 0x55, 0x3f, 0xb0,
	0x14, 0xc3, 0xfd, 0xd3, 0xe0, 0x7c, 0x1f, 0x9d, 0xef, 0x4d, 0xe2, 0x08, 0x45, 0xce, 0xc2, 0xe7,
	0xc1, 0xf8, 0xe1, 0xb7, 0xef, 0xef, 0xc5, 0x70, 0xef, 0x34, 0x38, 0xef, 0xad, 0x31, 0x7c, 0x02,
	0x93, 0x24, 0x88, 0xc2, 0x84, 0x52, 0xf5, 0x5e, 0xe7, 0x60, 0xe4, 0x86, 0xbe, 0x1b, 0xfb, 0x9f,
	0x8d, 0x61, 0x92, 0xb8, 0x43, 0xc8, 0xd0, 0xaf, 0xa9, 0x4f, 0x7d, 0x36, 0x8a, 0x86, 0x51, 0x8a,
	0x18, 0xd2, 0x61, 0xc8, 0x17, 0x69, 0x84, 0xf8, 0x03, 0x5d, 0x06, 0x1b, 0xbb, 0xf1, 0x17, 0x10,
	0x7d, 0xe6, 0xbb, 0xc8, 0xa5, 0x98, 0xad, 0x1e, 0xe8, 0x1e, 0x25, 0xc3, 0x03, 0x38, 0x82, 0x08,
	0x3e, 0xf6, 0xbc, 0x28, 0x0d, 0x51, 0x1f, 0x26, 0x93, 0x28, 0x4c, 0xe0, 0xd6, 0xbf, 0xd4, 0xc0,
	0xca, 0x51, 0x32, 0x7c, 0x16, 0x0d, 0xa3, 0xf0, 0x30, 0x0c, 0x50, 0xe0, 0xa2, 0x28, 0x76, 0x6e,
	0x81, 0x0e, 0x7b, 0xef, 0xe1, 0x41, 0xb7, 0xb6, 0x59, 0xdb, 0xe9, 0xf4, 0x33, 0x80, 0xf3, 0x14,
	0x2c, 0x8e, 0x14, 0xfa, 0xee, 0xcc, 0x66, 0x6d, 0x67, 0xee, 0xc1, 0xeb, 0x7b, 0x0a, 0xe3, 0x7b,
	0xea, 0xa4, 0x7d, 0xed, 0x21, 0x67, 0x1d, 0x34, 0x13, 0xe4, 0xa2, 0x34, 0xe9, 0xd6, 0xc9, 0x1b,
	0xd8, 0xc8, 0xd9, 0x00, 0xe0, 0x30, 0x79, 0xec, 0x79, 0x70, 0x82, 0xa0, 0xdf, 0x9d, 0xdd, 0xac,
	0xed, 0xb4, 0xfb, 0x12, 0xc4, 0x79, 0x1b, 0x2c, 0x07, 0x7c, 0x92, 0xc7, 0xbe, 0x1f, 0xc3, 0x24,
	0xe9, 0x36, 0xc8, 0x0c, 0x39, 0xf8, 0xd6, 0x6b, 0xe0, 0xd5, 0x1c, 0x77, 0x82, 0xf7, 0x7f, 0xaa,
	0x81, 0x65, 0x8e, 0xa5, 0xb3, 0x97, 0xb2, 0xfe, 0x3d, 0xb0, 0x30, 0x92, 0xc9, 0x19, 0xe7, 0xb7,
	0x4c, 0x9c, 0x73, 0x9a, 0xbe, 0xfa, 0xc8, 0xa5, 0xf9, 0xde, 0x01, 0x4b, 0x2e, 0x9b, 0x43, 0x65,
	0x5b, 0x07, 0x33, 0x85, 0xab, 0x8b, 0xe0, 0x4c, 0xbf, 0x24, 0xfa, 0x3e, 0x86, 0xf1, 0x38, 0x08,
	0x5d, 0x04, 0x09, 0x91, 0x51, 0xa4, 0x35, 0xb3, 0x48, 0x55, 0x01, 0xcd, 0xe8, 0x02, 0xea, 0x82,
	0x96, 0xcb, 0x26, 0xa0, 0xdc, 0xf1, 0x21, 0x53, 0x85, 0xfa, 0x62, 0xb1, 0xaa, 0xbf, 0xaf, 0x81,
	0x45, 0xbe, 0xe4, 0x3e, 0xfc, 0x1c, 0x7a, 0xc8, 0xc4, 0x6e, 0xcd, 0xc8, 0x6e, 0xc9, 0x8a, 0xde,
	0x05, 0xcd, 0x33, 0xe8, 0xfa, 0x30, 0x26, 0x0b, 0x9a, 0x7b, 0xb0, 0xa6, 0xe9, 0xea, 0xfb, 0x04,
	0xd9, 0x67, 0x44, 0x8e, 0x03, 0x66, 0x11, 0x3c, 0x47, 0x44, 0xfe, 0x9d, 0x3e, 0xf9, 0xed, 0xdc,
	0x07, 0x2d, 0x14, 0xbb, 0xc1, 0x08, 0xc6, 0x44, 0xe2, 0x73, 0x0f, 0xd6, 0xb5, 0x39, 0x8e, 0x29,
	0xb6, 0xcf, 0xc9, 0xb6, 0xba, 0x60, 0x5d, 0x65, 0x47, 0x70, 0xfa, 0x57, 0x35, 0xe0, 0x30, 0x54,
	0x8a, 0x32, 0x67, 0xb8, 0x3e, 0x0d, 0xfc, 0x0a, 0x58, 0x67, 0x03, 0xed, 0x1d, 0x8c, 0xff, 0x3b,
	0xda, 0xda, 0x07, 0x46, 0xe2, 0xbe, 0x65, 0x92, 0xad, 0x5b, 0xa0, 0x97, 0x5f, 0xbe, 0xe0, 0xee,
	0x2f, 0xb2, 0x70, 0x92, 0x22, 0x61, 0xf1, 0xd7, 0xa5, 0xca, 0x1f, 0x82, 0x35, 0x65, 0x55, 0xc2,
	0x0b, 0x29, 0x67, 0xdb, 0x45, 0x9c, 0x09, 0x47, 0x30, 0x4f, 0x21, 0x45, 0x0a, 0x89, 0x96, 0xb3,
	0xf5, 0x67, 0x75, 0xc2, 0xd6, 0x87, 0xf0, 0xe5, 0xf3, 0xd8, 0x87, 0xf1, 0x20, 0x08, 0x87, 0x23,
	0x88, 0x6d, 0xdd, 0x8b, 0x21, 0x11, 0x2d, 0x65, 0x87, 0x0f, 0xaf, 0xd7, 0x22, 0xf1, 0x6b, 0x46,
	0xcf, 0x63, 0xff, 0xf0, 0x80, 0x19, 0x25, 0x1f, 0x92, 0x48, 0x72, 0x31, 0x3e, 0x89, 0x46, 0x2c,
	0x10, 0xb0, 0x11, 0xb6, 0xe1, 0x24, 0xf0, 0x61, 0xb7, 0xb9, 0x59, 0xdb, 0xa9, 0xf7, 0xc9, 0x6f,
	0xa7, 0x07, 0xda, 0x11, 0x5e, 0xfb, 0xc7, 0xe8, 0xa2, 0xdb, 0x22, 0xd4, 0x62, 0x8c, 0xdf, 0x10,
	0xc5, 0xfe, 0xf1, 0xc5, 0x04, 0x76, 0xdb, 0xe4, 0x11, 0x3e, 0x74, 0x56, 0x41, 0x63, 0x12, 0x07,
	0x1e, 0xec, 0x76, 0xc8, 0x23, 0x74, 0xe0, 0x6c, 0x82, 0x39, 0x14, 0x8c, 0xe1, 0x61, 0xf8, 0x41,
	0x14, 0x7b, 0xb0, 0x0b, 0xc8, 0x33, 0x32, 0x48, 0x78, 0xd1, 0x9c, 0xe4, 0x45, 0x5b, 0x60, 0x1e,
	0xc5, 0x6e, 0x98, 0xb8, 0x1e, 0x3a, 0x0e, 0xc6, 0xb0, 0x3b, 0x4f, 0x70, 0x0a, 0x4c, 0xf6, 0xb4,
	0x85, 0x4a, 0x9e, 0x26, 0x45, 0xd3, 0x45, 0x39, 0x9a, 0x32, 0x7d, 0xaa, 0x1a, 0x13, 0xfa, 0xfc,
	0xcf, 0x1a, 0x58, 0x3b, 0x4a, 0x86, 0x04, 0xf5, 0xc4, 0x0d, 0x3d, 0x38, 0xea, 0xc3, 0x17, 0x29,
	0x4c, 0x50, 0x49, 0xf8, 0xcf, 0x34, 0x37, 0x53, 0x45, 0x73, 0x9b, 0x60, 0x2e, 0x8a, 0x83, 0xe1,
	0x13, 0xa6, 0x3d, 0x1a, 0x10, 0x65, 0x50, 0x81, 0x6e, 0xa7, 0x8e, 0x39, 0xb2, 0x39, 0x36, 0x15,
	0x73, 0xdc, 0x7a, 0x03, 0xbc, 0x6e, 0xe4, 0x56, 0xc8, 0xe3, 0x7f, 0x67, 0xc0, 0xaa, 0x4e, 0x41,
	0x82, 0xf0, 0xb5, 0x8a, 0x83, 0x9a, 0x19, 0x8c, 0x85, 0x28, 0xf8, 0x50, 0x17, 0xd4, 0x6c, 0xa1,
	0xa0, 0x1a, 0xaa, 0xa0, 0xb6, 0xc0, 0xbc, 0x77, 0x8e, 0xd7, 0xdb, 0x87, 0x6e, 0x12, 0x85, 0xcc,
	0xe8, 0x15, 0x18, 0x8e, 0xae, 0x7c, 0x4c, 0x39, 0x3e, 0x8e, 0x88, 0x13, 0xd4, 0xfb, 0x39, 0x38,
	0x9e, 0xef, 0x58, 0x36, 0xd3, 0x36, 0x35, 0xd3, 0x63, 0x8b, 0x99, 0x76, 0xa6, 0x56, 0x0e, 0x50,
	0x95, 0xb3, 0x01, 0x6e, 0x99, 0x44, 0x2f, 0x74, 0xf3, 0x5f, 0xb3, 0xe0, 0x26, 0x27, 0x78, 0x7a,
	0x0e, 0xbd, 0x14, 0x05, 0x38, 0xa9, 0x4c, 0xa2, 0xf8, 0xfa, 0xd5, 0xe3, 0x29, 0x96, 0x2a, 0x44,
	0x2c, 0x29, 0x6e, 0x56, 0x55, 0xdc, 0x3a, 0x68, 0xc2, 0x73, 0xe8, 0x09, 0xad, 0xb0, 0x11, 0x5e,
	0x58, 0x14, 0xfb, 0x03, 0xea, 0x98, 0xd4, 0x1a, 0x33, 0x00, 0x8e, 0x45, 0x98, 0x8e, 0x04, 0x1c,
	0x16, 0x8b, 0xf8, 0x58, 0x8a, 0x69, 0x6d, 0x63, 0x4c, 0xeb, 0x58, 0x62, 0x1a, 0xd0, 0x62, 0x9a,
	0x88, 0x5c, 0x73, 0x05, 0x91, 0x6b, 0x3e, 0x1f, 0xb9, 0xd6, 0x41, 0x73, 0xe4, 0x26, 0xe8, 0xa3,
	0x73, 0x12, 0x80, 0xea, 0x7d, 0x36, 0xc2, 0x32, 0xc0, 0xbf, 0xf0, 0xab, 0x16, 0x69, 0x8c, 0x64,
	0x43, 0xcc, 0xeb, 0x08, 0xba, 0x3f, 0x86, 0x09, 0xc6, 0x2d, 0x11, 0x5c, 0x06, 0xc0, 0xf3, 0x79,
	0xe9, 0x18, 0xa3, 0x96, 0xe9, 0x7c, 0x74, 0x84, 0xd7, 0xe7, 0xfe, 0x78, 0xf8, 0xd1, 0x79, 0x77,
	0x85, 0x80, 0xe9, 0x40, 0xc4, 0x4d, 0xa7, 0x20, 0x6e, 0xde, 0x28, 0x8e, 0x9b, 0xab, 0x53, 0x1b,
	0xe4, 0x9a, 0x6a, 0x90, 0xb7, 0xc1, 0x1b, 0x16, 0x7b, 0x13, 0x36, 0xf9, 0x5b, 0x35, 0xb0, 0x74,
	0x94, 0x0c, 0x3f, 0xc6, 0xdb, 0x8f, 0x6a, 0x91, 0xf3, 0x97, 0xc0, 0xfc, 0x0b, 0x89, 0x9a, 0x59,
	0xe4, 0x6b, 0xda, 0x2a, 0xe5, 0x09, 0xfb, 0xca, 0x03, 0xf2, 0x7a, 0xeb, 0xea, 0x7a, 0x5f, 0x25,
	0xfe, 0xa1, 0x3c, 0xca, 0xd7, 0xf9, 0xa7, 0xb5, 0x0c, 0xf7, 0xd8, 0xfb, 0x22, 0x8c, 0x5e, 0x8e,
	0xa0, 0x3f, 0x84, 0x63, 0x18, 0xa2, 0x4b, 0x67, 0xef, 0x5f, 0x06, 0xab, 0x2f, 0x0c, 0xf3, 0xb1,
	0x5c, 0xfe, 0xa6, 0x89, 0x23, 0x8d, 0xb4, 0x6f, 0x9c, 0x80, 0xc9, 0xdd, 0xf8, 0x00, 0xe7, 0xe7,
	0x0f, 0x68, 0xde, 0x52, 0x79, 0x25, 0x81, 0xfa, 0xb2, 0xdc, 0x7c, 0x0c, 0x9c, 0x17, 0xb9, 0xd9,
	0x18, 0x2f, 0xb7, 0x8b, 0xb4, 0x43, 0x83, 0x94, 0xe1, 0x61, 0x96, 0x6d, 0x0c, 0xc4, 0x9c, 0x8b,
	0x7f, 0x6f, 0x10, 0x2e, 0x8e, 0x63, 0xd7, 0x87, 0x4f, 0xdc, 0x09, 0x4a, 0x63, 0xc8, 0xe2, 0x99,
	0x9d, 0x8b, 0x6d, 0xb0, 0x80, 0x30, 0x3d, 0x25, 0x14, 0x9c, 0xa8, 0x40, 0xe7, 0x01, 0x58, 0x95,
	0x00, 0x24, 0x64, 0x93, 0x20, 0x43, 0x2d, 0xc6, 0x88, 0xc3, 0xc5, 0xa9, 0x0c, 0xc7, 0xe4, 0x34,
	0xc8, 0xe9, 0x60, 0xbc, 0x3a, 0xc4, 0xca, 0x24, 0x96, 0x83, 0xd8, 0x10, 0x6f, 0xdd, 0x50, 0xec,
	0x0f, 0xd2, 0x13, 0x82, 0xa4, 0xf1, 0x4e, 0x82, 0x88, 0xe0, 0x45, 0x83, 0x5d, 0x3e, 0x78, 0xb5,
	0xf3, 0x05, 0x19, 0x0f, 0x36, 0xb4, 0xf0, 0x12, 0xc1, 0x26, 0x0b, 0x4f, 0x34, 0xe0, 0xf1, 0xf0,
	0xb4, 0x0d, 0x16, 0x86, 0x71, 0x94, 0x24, 0x44, 0xa8, 0x8f, 0xc7, 0xbc, 0xf2, 0x52, 0x81, 0x52,
	0xb8, 0x9e, 0x57, 0xc2, 0xb5, 0x14, 0xe0, 0x17, 0xd4, 0x00, 0x4f, 0x78, 0x76, 0x7d, 0x78, 0x78,
	0xc0, 0xea, 0x2b, 0x3e, 0xe4, 0x39, 0xfb, 0x98, 0x61, 0x97, 0xb2, 0x9c, 0xcd, 0x40, 0x52, 0x28,
	0x5f, 0x56, 0x42, 0xf9, 0x06, 0x00, 0x09, 0xf4, 0xd2, 0x38, 0x40, 0x17, 0x87, 0x07, 0x24, 0xfe,
	0x75, 0xfa, 0x12, 0x04, 0x67, 0xeb, 0x6c, 0x34, 0x88, 0x52, 0x1c, 0xa9, 0x69, 0x40, 0xcc, 0xc1,
	0xb1, 0x75, 0x93, 0x05, 0x1d, 0xb8, 0x88, 0x47, 0xc6, 0x0c, 0x90, 0x0b, 0x9d, 0xab, 0x86, 0xd0,
	0x49, 0xfc, 0x03, 0xa1, 0x11, 0x51, 0xdd, 0x1a, 0xf7, 0x0f, 0x06, 0x10, 0x58, 0x32, 0xff, 0xba,
	0x84, 0x25, 0xf3, 0x2b, 0xbe, 0x75, 0x53, 0xf3, 0x2d, 0xe6, 0x08, 0x79, 0x33, 0x17, 0x8e, 0xf0,
	0x8f, 0xb3, 0x60, 0xdb, 0x48, 0x51, 0x3d, 0x56, 0x55, 0xf3, 0x0b, 0x49, 0x8b, 0x75, 0x55, 0x8b,
	0x54, 0xd6, 0x51, 0xe8, 0xbb, 0xf1, 0x05, 0x57, 0xe5, 0xac, 0x90, 0xb5, 0x02, 0x37, 0x79, 0x4a,
	0xa3, 0xd4, 0x53, 0x9a, 0x45, 0x9e, 0xd2, 0xca, 0x79, 0x8a, 0x5c, 0x1a, 0xb4, 0xb5, 0xd2, 0xe0,
	0x6d, 0xb0, 0x2c, 0xbd, 0xa8, 0x0f, 0x4f, 0x0f, 0x0f, 0x98, 0x7b, 0xe4, 0xe0, 0xce, 0xfb, 0x78,
	0x17, 0x2c, 0xaf, 0x5f, 0x08, 0x88, 0xfa, 0x8d, 0x05, 0xeb, 0xec, 0x82, 0x15, 0x69, 0x2e, 0x56,
	0xc0, 0x50, 0x5f, 0xca, 0x23, 0x9c, 0xbb, 0x60, 0x91, 0x00, 0xb3, 0x48, 0x43, 0xfd, 0x4a, 0x83,
	0x3a, 0xdf, 0x06, 0x37, 0x95, 0x15, 0xd2, 0x70, 0x48, 0xca, 0x55, 0x5a, 0x65, 0xd8, 0xd0, 0xa2,
	0x20, 0x58, 0x94, 0x0a, 0x02, 0xc5, 0xea, 0x96, 0x74, 0xab, 0xdb, 0x03, 0xbb, 0x55, 0x6c, 0x4a,
	0x18, 0xe1, 0xaf, 0xcf, 0x80, 0x0d, 0x8b, 0x99, 0xe2, 0x75, 0x04, 0x51, 0x78, 0x65, 0xf3, 0x2b,
	0x60, 0xbf, 0x5e, 0xcc, 0xfe, 0xfb, 0x60, 0xdd, 0x80, 0x3a, 0x15, 0x46, 0x6a, 0xc1, 0x0a, 0xb1,
	0x35, 0x6c, 0x62, 0x6b, 0xea, 0x62, 0xdb, 0x01, 0x77, 0x8b, 0xa5, 0x20, 0x04, 0xf6, 0x47, 0x74,
	0xb3, 0x74, 0x44, 0xfa, 0xac, 0x07, 0x2e, 0x72, 0x0d, 0x25, 0x8a, 0x26, 0xa6, 0x2e, 0x68, 0x8d,
	0xfd, 0x3e, 0x7c, 0x21, 0x04, 0xc4, 0x87, 0x58, 0x34, 0x49, 0x7a, 0x92, 0x78, 0x71, 0x30, 0xa1,
	0x2f, 0x21, 0x53, 0x89, 0xa4, 0x55, 0xef, 0xdb, 0xd0, 0x38, 0xfe, 0xd2, 0x56, 0xef, 0x01, 0x9c,
	0xa0, 0x33, 0x22, 0x8f, 0x7a, 0x5f, 0x06, 0xe1, 0xe8, 0x37, 0xf6, 0x3f, 0x99, 0xf8, 0x2e, 0x82,
	0xc2, 0x59, 0xeb, 0x7d, 0x05, 0x86, 0x69, 0xc2, 0xa8, 0x0f, 0x47, 0x2e, 0x82, 0xfe, 0xe0, 0x62,
	0xcc, 0x77, 0x4f, 0x32, 0x4c, 0x8a, 0xe3, 0x2d, 0x25, 0x8e, 0x2b, 0x02, 0x6d, 0xeb, 0x02, 0xa5,
	0xfb, 0x9a, 0x9c, 0x94, 0x84, 0x18, 0xff, 0xad, 0x06, 0x36, 0x15, 0x82, 0x41, 0xe8, 0x4e, 0x92,
	0xb3, 0x08, 0x7d, 0x90, 0x8e, 0x46, 0x7d, 0x78, 0x1a, 0xc3, 0xe4, 0xec, 0x52, 0x22, 0xcd, 0x96,
	0x5b, 0x57, 0x96, 0xbb, 0x09, 0xe6, 0xc2, 0xe8, 0xe8, 0xe0, 0x69, 0x88, 0xe2, 0x00, 0x26, 0x5c,
	0x60, 0x12, 0xc8, 0x79, 0x04, 0x3a, 0x63, 0x9f, 0xe3, 0x1b, 0x9b, 0x75, 0x43, 0x1d, 0x4d, 0x89,
	0x2f, 0xfa, 0x19, 0x61, 0x89, 0x5d, 0xbd, 0x0d, 0x76, 0xca, 0xb8, 0x14, 0x22, 0xf9, 0x9b, 0x1a,
	0x69, 0xdc, 0x66, 0xc4, 0x87, 0xa1, 0x17, 0x13, 0x6f, 0x75, 0x47, 0x97, 0x12, 0x85, 0xc6, 0x72,
	0xbd, 0x84, 0xe5, 0xd9, 0x4b, 0xb1, 0xdc, 0xd0, 0x59, 0xde, 0xd2, 0x14, 0x2b, 0x71, 0x21, 0x57,
	0xe6, 0x3d, 0xb3, 0x79, 0x94, 0x94, 0xb3, 0x76, 0x66, 0xef, 0x82, 0x45, 0xf2, 0x33, 0x6b, 0x05,
	0x50, 0x7e, 0x35, 0xa8, 0xb1, 0xc3, 0x5b, 0xcc, 0xd0, 0x36, 0xd8, 0xb2, 0xaf, 0x35, 0xdb, 0xa8,
	0xcf, 0x10, 0x8b, 0x1f, 0xb0, 0x12, 0xe5, 0x00, 0x9e, 0x92, 0xce, 0xad, 0xf0, 0xda, 0xe2, 0x30,
	0xca, 0x2b, 0x1b, 0x99, 0x35, 0x15, 0xe8, 0xdc, 0x07, 0x37, 0x24, 0x80, 0x12, 0x27, 0x3a, 0x7d,
	0x13, 0x4a, 0x72, 0x85, 0x59, 0xc5, 0x15, 0xa4, 0x0a, 0xeb, 0xe9, 0xb9, 0x77, 0xe6, 0x86, 0x43,
	0x9e, 0xca, 0x73, 0x70, 0x3c, 0x47, 0x90, 0x24, 0x29, 0xe4, 0x5d, 0x25, 0x36, 0xc2, 0x91, 0x23,
	0x11, 0xac, 0x26, 0x1e, 0x8b, 0x0d, 0x0a, 0x4c, 0xa6, 0x91, 0x32, 0xba, 0x02, 0xc3, 0x19, 0xdf,
	0x4b, 0xe3, 0x18, 0x86, 0x1e, 0x2f, 0x76, 0xc5, 0x58, 0x55, 0x0b, 0xd0, 0xd5, 0x72, 0x97, 0x54,
	0x4f, 0x56, 0x79, 0x0b, 0xc5, 0xfc, 0x5f, 0x93, 0xec, 0x37, 0xf2, 0x84, 0x57, 0xd6, 0xc8, 0x1e,
	0x70, 0x32, 0x00, 0x7d, 0x9b, 0x28, 0xb1, 0x0c, 0x18, 0xbc, 0x3f, 0xd1, 0xa1, 0xd2, 0x86, 0xc3,
	0x88, 0xb3, 0x36, 0x79, 0x4d, 0x3a, 0x6c, 0x96, 0xea, 0xb0, 0x55, 0xa8, 0xc3, 0x76, 0x05, 0x1d,
	0x76, 0x4a, 0x74, 0x08, 0x34, 0x1d, 0xee, 0x01, 0xc7, 0x8b, 0x42, 0x14, 0xbb, 0x1e, 0x3a, 0x4a,
	0x47, 0x28, 0x98, 0x8c, 0x02, 0x18, 0xb3, 0x92, 0xca, 0x80, 0xc1, 0x15, 0xd8, 0x38, 0x08, 0x3f,
	0x8a, 0x03, 0x0f, 0x8a, 0xc0, 0xc1, 0xca, 0xaa, 0x3c, 0x02, 0xe7, 0xcf, 0x1c, 0xf0, 0xf1, 0x38,
	0x4a, 0x43, 0xc4, 0x76, 0x32, 0x36, 0x34, 0xd6, 0x70, 0x1a, 0x06, 0xe8, 0xf9, 0xe9, 0x11, 0x74,
	0x93, 0x34, 0x86, 0xac, 0xc4, 0x52, 0x81, 0x78, 0xf5, 0xa4, 0x73, 0xf4, 0x89, 0x42, 0x4a, 0x8b,
	0x2e, 0x03, 0x46, 0xdd, 0x4d, 0x2c, 0x17, 0xee, 0x26, 0x56, 0xf4, 0xdd, 0x04, 0xe6, 0xdc, 0x45,
	0x44, 0xaa, 0x47, 0x51, 0x88, 0xce, 0x7e, 0x00, 0xdd, 0x98, 0x6d, 0x7c, 0xf2, 0x08, 0x5c, 0x49,
	0x7b, 0x51, 0x3a, 0x89, 0xc2, 0x7e, 0xb6, 0xf5, 0x91, 0x20, 0x58, 0xe7, 0xa7, 0xae, 0x87, 0x4d,
	0x9b, 0xee, 0x7a, 0xd8, 0x88, 0xf4, 0x4b, 0x63, 0xe8, 0x07, 0xa8, 0xef, 0xa2, 0x20, 0x1c, 0xb2,
	0x2d, 0x8f, 0x02, 0x93, 0xed, 0x9a, 0xdb, 0xd0, 0xe1, 0x01, 0xdb, 0xfe, 0x18, 0x30, 0x95, 0xf6,
	0x41, 0x26, 0x3f, 0x65, 0x0e, 0xfa, 0x97, 0x33, 0x24, 0xc0, 0x16, 0x78, 0xf2, 0x95, 0x7a, 0x1c,
	0x39, 0x5f, 0xae, 0x9b, 0x7c, 0xf9, 0x11, 0x58, 0xd3, 0x42, 0x68, 0x1f, 0x26, 0xe9, 0x88, 0xe7,
	0x09, 0x33, 0x52, 0xf5, 0x68, 0x82, 0x78, 0x1a, 0xc7, 0x51, 0xcc, 0x7c, 0xd5, 0x88, 0x73, 0xbe,
	0x03, 0xba, 0x26, 0xf8, 0x93, 0xc8, 0xe7, 0x1e, 0x6c, 0xc5, 0x8b, 0xe4, 0xd5, 0xca, 0x92, 0xd7,
	0xd6, 0x2e, 0x78, 0xbb, 0x5c, 0x7a, 0x42, 0xd8, 0x7f, 0x3d, 0x43, 0x4e, 0x46, 0x48, 0x7f, 0xef,
	0xc8, 0x4d, 0x12, 0xba, 0x95, 0x29, 0xcf, 0x51, 0xc5, 0x32, 0xde, 0x01, 0x4b, 0x63, 0x79, 0x32,
	0x21, 0x65, 0x1d, 0x4c, 0xad, 0x5c, 0x02, 0x49, 0x01, 0x30, 0x8f, 0x28, 0xe8, 0xfb, 0x77, 0x41,
	0xcb, 0xa5, 0x97, 0x19, 0xf8, 0x1e, 0x93, 0x0d, 0xad, 0xf5, 0xaa, 0xda, 0x77, 0x68, 0x9b, 0xfa,
	0x0e, 0x78, 0x3b, 0x11, 0x84, 0xc3, 0x81, 0x60, 0x54, 0xda, 0x5f, 0xca, 0xf0, 0xad, 0x37, 0xc1,
	0x6d, 0xab, 0x10, 0x85, 0xa8, 0xff, 0xae, 0x4e, 0xea, 0xb9, 0x1c, 0x55, 0x49, 0xaf, 0xab, 0xf4,
	0x84, 0xdd, 0xd2, 0xa6, 0x37, 0xe8, 0x60, 0xd6, 0xac, 0x03, 0x49, 0x76, 0x0d, 0x9b, 0xec, 0x9a,
	0x05, 0xb2, 0x6b, 0x55, 0x92, 0x5d, 0xdb, 0x2c, 0x3b, 0xf5, 0x70, 0xa0, 0x53, 0x74, 0x38, 0x00,
	0xf2, 0x87, 0x03, 0x51, 0xec, 0x7f, 0x8c, 0x2e, 0x58, 0xfe, 0x60, 0x23, 0xa9, 0x2b, 0x36, 0xaf,
	0x74, 0xc5, 0xb2, 0xe6, 0x3b, 0x4d, 0x06, 0xb9, 0xe6, 0x3b, 0x8d, 0xf9, 0xac, 0xf9, 0x9e, 0x6b,
	0xe4, 0x77, 0xa4, 0x46, 0x3e, 0xab, 0x6a, 0x8d, 0xba, 0x14, 0x0a, 0xff, 0xc3, 0x5a, 0xd6, 0x3b,
	0x37, 0x98, 0xc5, 0x95, 0xa2, 0x58, 0x0f, 0xb4, 0x63, 0x78, 0x3a, 0x90, 0x5c, 0x4b, 0x8c, 0xf1,
	0x9c, 0x31, 0xfc, 0x9c, 0x04, 0x10, 0x76, 0x40, 0xc3, 0x86, 0xa6, 0x8d, 0xf0, 0xd6, 0x5b, 0xe0,
	0x5e, 0xc9, 0x22, 0x05, 0x43, 0xbf, 0xd7, 0x14, 0xcd, 0x81, 0x4c, 0x85, 0x55, 0x23, 0x06, 0xed,
	0xbe, 0xf9, 0x03, 0x98, 0xc8, 0x25, 0x94, 0x02, 0x33, 0xda, 0x4d, 0xdd, 0x62, 0x37, 0xf7, 0xc1,
	0x0d, 0x15, 0x36, 0x48, 0x4f, 0x84, 0x8d, 0x9b, 0x50, 0x58, 0x66, 0x74, 0x43, 0x2c, 0xc2, 0x87,
	0x18, 0x93, 0x6a, 0x3a, 0xbf, 0xb5, 0x66, 0x66, 0x6f, 0x42, 0x55, 0xf1, 0x81, 0x5c, 0xdf, 0xb2,
	0x6d, 0xe9, 0x5b, 0x66, 0x7e, 0xd6, 0x29, 0xad, 0xea, 0x80, 0xa5, 0xaa, 0x23, 0xfe, 0x8e, 0xb9,
	0x19, 0xc0, 0x21, 0x2e, 0x6c, 0x0e, 0x0f, 0x98, 0x5b, 0xe8, 0x60, 0xde, 0xa7, 0xa2, 0x52, 0x17,
	0x7d, 0xaa, 0x46, 0x5f, 0x83, 0xf2, 0xee, 0xd7, 0x00, 0x26, 0x83, 0xf4, 0x84, 0x93, 0x2e, 0x10,
	0xd2, 0x3c, 0x82, 0x1c, 0xa6, 0x51, 0xe0, 0x11, 0xb6, 0xbc, 0x45, 0x42, 0x27, 0x83, 0x70, 0x1d,
	0xa1, 0xaa, 0x85, 0x14, 0x3e, 0xac, 0x7a, 0xca, 0x63, 0xf2, 0xf4, 0xa4, 0x6b, 0xbb, 0x6c, 0xa2,
	0x27, 0xbd, 0xdb, 0x47, 0x60, 0x2d, 0xa7, 0x76, 0xf2, 0x08, 0xad, 0xad, 0xcc, 0x48, 0x2c, 0x0d,
	0x78, 0x3e, 0x09, 0x62, 0x17, 0xf1, 0x15, 0xd1, 0x22, 0x4b, 0x83, 0xaa, 0xfe, 0x78, 0xc3, 0xde,
	0x30, 0xb2, 0x78, 0x86, 0x70, 0xa2, 0x3f, 0x69, 0x92, 0x53, 0x28, 0x13, 0xe9, 0x37, 0xe8, 0x3d,
	0xac, 0x55, 0x87, 0x55, 0x48, 0x23, 0xef, 0x2c, 0xd1, 0x97, 0x0a, 0xe4, 0x0d, 0x37, 0x01, 0xc8,
	0x36, 0xd3, 0x0d, 0x42, 0x6e, 0xc1, 0xf2, 0x95, 0x50, 0x4c, 0x4c, 0xbb, 0xed, 0xcd, 0x6c, 0x25,
	0x32, 0x9c, 0xf7, 0x91, 0x07, 0x30, 0x79, 0x3e, 0x81, 0x54, 0xc5, 0xad, 0xac, 0x8f, 0x2c, 0x81,
	0xb9, 0xc7, 0x0f, 0x60, 0xf2, 0x51, 0x0c, 0x9f, 0x8c, 0xa2, 0x04, 0x4a, 0x47, 0xf2, 0x26, 0x94,
	0xb4, 0x8e, 0x8c, 0xbc, 0xa3, 0xac, 0x23, 0xa3, 0xcd, 0xbc, 0xe2, 0x69, 0xe8, 0x13, 0x4a, 0x90,
	0x75, 0x6f, 0x33, 0x28, 0xf1, 0x8a, 0x08, 0xb9, 0xa3, 0x4f, 0xa3, 0x51, 0x3a, 0x86, 0xa4, 0x45,
	0xe8, 0x13, 0x4f, 0xc3, 0x5e, 0xa1, 0x23, 0x24, 0x39, 0x7f, 0x3f, 0x18, 0x9e, 0x89, 0x94, 0xa4,
	0x02, 0x25, 0xed, 0x3e, 0x8b, 0x5e, 0xb2, 0xc3, 0xe6, 0x4c, 0xbb, 0x04, 0xa6, 0xc5, 0x9b, 0xc5,
	0x4a, 0xf1, 0x66, 0xa9, 0x34, 0xde, 0x2c, 0x97, 0xc6, 0x9b, 0x95, 0xea, 0xf1, 0xc6, 0x31, 0xc7,
	0x1b, 0x39, 0xee, 0xde, 0xd0, 0xe2, 0xae, 0xe2, 0x55, 0xab, 0xba, 0x57, 0xd1, 0x43, 0x50, 0xb3,
	0x57, 0x31, 0x77, 0xfa, 0xb2, 0x26, 0x4e, 0x4d, 0xac, 0x9e, 0x57, 0x9e, 0x69, 0x69, 0xee, 0xfc,
	0x30, 0x1d, 0xf3, 0x4c, 0x2b, 0x00, 0x58, 0xee, 0x31, 0x3c, 0xc5, 0xaf, 0xc8, 0xda, 0x2b, 0x12,
	0x84, 0xf6, 0x61, 0xc8, 0x5b, 0x95, 0x56, 0x36, 0xf5, 0x27, 0x13, 0xea, 0x12, 0xed, 0xe8, 0xac,
	0x8b, 0x5f, 0xc8, 0xa3, 0x10, 0xca, 0x4f, 0xeb, 0xa4, 0xf9, 0xa4, 0x3e, 0xf0, 0x2c, 0xc0, 0x74,
	0x57, 0x2b, 0xec, 0xf5, 0x30, 0x54, 0xaf, 0x18, 0x86, 0x66, 0xa7, 0x4b, 0xe2, 0x0d, 0x7b, 0x12,
	0x9f, 0xa6, 0xd1, 0x91, 0x39, 0xdf, 0x11, 0x44, 0x67, 0x91, 0xcf, 0x02, 0x8b, 0x0a, 0xd4, 0x13,
	0x17, 0x0d, 0x27, 0x4a, 0xe2, 0x2a, 0x68, 0xcb, 0xd3, 0x68, 0x62, 0x43, 0xb3, 0xa6, 0x94, 0x55,
	0x0f, 0x42, 0x61, 0xff, 0xd1, 0x10, 0xa7, 0x83, 0x3a, 0x21, 0xa5, 0xf8, 0x5a, 0x35, 0xb6, 0x0b,
	0x56, 0xc2, 0x48, 0x7d, 0x77, 0xc2, 0x37, 0x61, 0x39, 0x84, 0x51, 0xbf, 0x8d, 0xe9, 0xf4, 0xdb,
	0x9c, 0x4e, 0xbf, 0xad, 0xaa, 0xfa, 0x6d, 0x57, 0xd0, 0x6f, 0x27, 0xaf, 0xdf, 0x07, 0x60, 0x35,
	0x0d, 0x93, 0x68, 0x14, 0x78, 0x01, 0x82, 0xfe, 0x61, 0xe8, 0x07, 0x9e, 0x74, 0x37, 0xcb, 0x88,
	0xcb, 0x27, 0xd0, 0x39, 0xe5, 0xdd, 0xa5, 0x09, 0x74, 0x3e, 0x3b, 0xb1, 0xaa, 0x98, 0x40, 0x17,
	0xaa, 0x27, 0xd0, 0xc5, 0xa9, 0x12, 0xe8, 0xd2, 0x74, 0x09, 0x74, 0xb9, 0x72, 0x02, 0x5d, 0x31,
	0x25, 0xd0, 0xad, 0x7b, 0xe0, 0x4e, 0xa1, 0xa9, 0x0b, 0xa7, 0xf8, 0x9f, 0x1a, 0x69, 0x04, 0x15,
	0x78, 0xcf, 0x95, 0xb6, 0x50, 0x55, 0x3c, 0xc3, 0x58, 0x26, 0x75, 0xa6, 0x2b, 0x93, 0xec, 0x5a,
	0xe6, 0x89, 0xa0, 0x99, 0x6b, 0xdf, 0x94, 0xf0, 0x2c, 0x44, 0xf4, 0x93, 0x59, 0x72, 0xb5, 0x9c,
	0x77, 0x7b, 0xae, 0x23, 0xc4, 0x57, 0xeb, 0x8f, 0xe1, 0x90, 0x98, 0x7f, 0xa9, 0xd4, 0xbd, 0xb1,
	0xa1, 0xf1, 0xfc, 0x61, 0xf4, 0x49, 0xe8, 0xc3, 0x78, 0x74, 0x11, 0x84, 0x43, 0xfe, 0xd9, 0x82,
	0x0a, 0xc4, 0x15, 0x4a, 0x18, 0x3d, 0x83, 0x43, 0x7e, 0x5f, 0x90, 0x8d, 0x94, 0xde, 0x72, 0x4b,
	0xeb, 0x2d, 0x73, 0x71, 0xb6, 0xa5, 0xbc, 0x8a, 0xab, 0xfb, 0xd0, 0x8b, 0x7c, 0xe8, 0x1f, 0xc3,
	0x73, 0xf4, 0x0c, 0x86, 0xcc, 0xff, 0x35, 0x28, 0x0e, 0x12, 0x12, 0x84, 0x79, 0xbe, 0x0c, 0x32,
	0x86, 0xbd, 0xb9, 0xe9, 0xc2, 0xde, 0xbc, 0x3d, 0xec, 0x15, 0xa4, 0x98, 0x85, 0xe2, 0x14, 0xb3,
	0x49, 0xf6, 0xe4, 0x06, 0x0b, 0xc8, 0x3e, 0xa7, 0x68, 0x90, 0x1d, 0x87, 0x4a, 0x72, 0xc5, 0xb4,
	0x52, 0xcd, 0x4a, 0xcc, 0x27, 0x22, 0xb3, 0xd6, 0x13, 0x11, 0x6b, 0xd7, 0xb5, 0x51, 0xd4, 0x75,
	0xc5, 0x01, 0x30, 0x42, 0x1f, 0xea, 0x07, 0xd7, 0x38, 0x00, 0xaa, 0x60, 0xec, 0xf2, 0x23, 0x37,
	0x41, 0x1f, 0xc4, 0x2e, 0xa9, 0x4d, 0xf9, 0x29, 0x95, 0x0c, 0xcb, 0x9d, 0x81, 0xb3, 0x53, 0x10,
	0xe5, 0x0c, 0x3c, 0x67, 0xc3, 0x1d, 0x93, 0x0d, 0x17, 0x9d, 0x83, 0x64, 0xf6, 0x3d, 0xa7, 0xdb,
	0x77, 0x1c, 0xa5, 0xa1, 0xff, 0x2c, 0xe2, 0xc7, 0x1c, 0x62, 0x4c, 0xce, 0xf8, 0x83, 0x90, 0x6c,
	0x2c, 0x3e, 0x8d, 0x46, 0xcc, 0x2e, 0x64, 0x90, 0xd1, 0x46, 0x17, 0xa7, 0xb3, 0xd1, 0x25, 0xbb,
	0x8d, 0xee, 0x80, 0xa5, 0x6c, 0x4f, 0xfc, 0xe4, 0xc2, 0x1b, 0xf1, 0x5c, 0xa0, 0x83, 0x85, 0x27,
	0xae, 0x14, 0x7a, 0xa2, 0x53, 0xc5, 0x13, 0x6f, 0xe4, 0x3c, 0x91, 0xed, 0x0a, 0x4c, 0xe6, 0x9c,
	0xf5, 0x5a, 0xd5, 0xd3, 0xd7, 0xeb, 0x4b, 0x1a, 0x5f, 0x77, 0x74, 0xbc, 0x9c, 0x07, 0x18, 0x12,
	0x89, 0x41, 0xde, 0xad, 0x2a, 0xf2, 0x6e, 0xe7, 0xe5, 0xad, 0x9e, 0xac, 0xda, 0x93, 0xd1, 0x7f,
	0xd3, 0x06, 0x37, 0x27, 0xbc, 0x9e, 0xa3, 0x04, 0xe9, 0x98, 0x3b, 0x7f, 0x9c, 0x60, 0x42, 0xe1,
	0x0d, 0x5b, 0x10, 0x26, 0x28, 0x4e, 0x89, 0x8b, 0x53, 0x79, 0x4b, 0x90, 0x8a, 0x09, 0x88, 0xd4,
	0x84, 0x7c, 0x78, 0x98, 0xcd, 0xd7, 0xe4, 0x35, 0x61, 0x1e, 0x27, 0x39, 0x75, 0x4b, 0x71, 0xea,
	0x6d, 0xb0, 0x90, 0xbd, 0xff, 0x19, 0x1c, 0xf2, 0x3a, 0x55, 0x01, 0x16, 0x1e, 0x7d, 0x17, 0xa4,
	0x07, 0x50, 0x98, 0x1e, 0xbe, 0xde, 0xb4, 0xc5, 0xda, 0xe0, 0x46, 0x8d, 0x0b, 0xb3, 0xf8, 0xfd,
	0x16, 0x39, 0x62, 0xd2, 0x89, 0xae, 0x98, 0x80, 0xa6, 0xb7, 0x8b, 0x9c, 0xde, 0x67, 0xa7, 0xd1,
	0x7b, 0xa3, 0x92, 0xde, 0x9b, 0xc5, 0x7a, 0x6f, 0x95, 0xe9, 0xbd, 0xad, 0xe9, 0x7d, 0x8a, 0x43,
	0x28, 0x9b, 0xf6, 0x80, 0x3d, 0xa0, 0xdb, 0xf6, 0x3d, 0x73, 0x05, 0xfb, 0x1e, 0x29, 0x40, 0xf1,
	0x22, 0x95, 0x56, 0xc6, 0xf3, 0x6a, 0x80, 0x52, 0x90, 0x38, 0x75, 0x9c, 0x06, 0xa1, 0x1b, 0x7a,
	0x81, 0x3b, 0x62, 0xf4, 0x34, 0x7d, 0xe9, 0x60, 0x4c, 0xe9, 0x45, 0xf1, 0x24, 0x8a, 0x5d, 0x04,
	0x1f, 0x93, 0xab, 0x76, 0x7c, 0x37, 0xa3, 0x81, 0xb1, 0x9f, 0x9f, 0xb9, 0x23, 0xde, 0x6f, 0xa1,
	0x79, 0x4b, 0x82, 0xe0, 0x00, 0x18, 0x84, 0x9f, 0x06, 0xf0, 0xe5, 0xf3, 0xd3, 0x27, 0xd1, 0x78,
	0x1c, 0x85, 0x2c, 0x5b, 0x69, 0x50, 0x9c, 0xf0, 0xfd, 0x14, 0x1e, 0xf3, 0xfc, 0xce, 0x92, 0x96,
	0x02, 0xc3, 0xb6, 0x78, 0x92, 0x5e, 0xd0, 0xce, 0x1e, 0xcb, 0x5b, 0x19, 0x80, 0xb6, 0xe6, 0x46,
	0xac, 0xf1, 0xc7, 0x0f, 0xdf, 0x33, 0x08, 0xb6, 0x8f, 0x33, 0xda, 0xfd, 0x63, 0x87, 0xef, 0x74,
	0xe4, 0xac, 0x82, 0xc6, 0x88, 0xf4, 0xfb, 0xe8, 0xa9, 0x3b, 0x1d, 0x48, 0xc7, 0x57, 0xeb, 0xca,
	0xf1, 0x95, 0x7e, 0x7d, 0xf9, 0xa6, 0xe1, 0xfa, 0xf2, 0x06, 0x00, 0xae, 0xff, 0x79, 0x9a, 0x20,
	0x62, 0xb3, 0x5d, 0xba, 0x92, 0x0c, 0x22, 0x12, 0xc5, 0xab, 0xd2, 0x8e, 0x83, 0x1e, 0x5e, 0x9a,
	0xdd, 0x33, 0xbb, 0x9c, 0x5c, 0x53, 0xca, 0xcc, 0xeb, 0x3c, 0xca, 0x9a, 0xde, 0x93, 0x95, 0x63,
	0x76, 0xad, 0xe7, 0xa6, 0x1c, 0xb3, 0x17, 0x37, 0xdd, 0x58, 0xd3, 0xbe, 0x80, 0x27, 0xc1, 0xfe,
	0x3f, 0xcc, 0x28, 0x25, 0x34, 0x8e, 0xac, 0xc9, 0x37, 0xb3, 0xd1, 0x32, 0xdd, 0x4f, 0xfb, 0x7a,
	0x3b, 0x30, 0x5d, 0xd0, 0x9a, 0xc4, 0x91, 0x9f, 0x7a, 0xbc, 0x3e, 0xe6, 0xc3, 0x4a, 0x17, 0xb8,
	0x76, 0xc0, 0x92, 0x50, 0x19, 0xbb, 0xd7, 0x4d, 0x03, 0x96, 0x0e, 0xd6, 0xca, 0x38, 0x59, 0xa4,
	0x42, 0xec, 0xbf, 0xd1, 0x50, 0x2a, 0x0a, 0x46, 0xf3, 0x73, 0xb9, 0x75, 0xb1, 0x5d, 0xe6, 0x6a,
	0x14, 0x5c, 0xe6, 0xda, 0x03, 0x0e, 0xd9, 0xa1, 0x28, 0xfc, 0x31, 0xd5, 0x18, 0x30, 0x95, 0xb6,
	0x2f, 0x3b, 0x60, 0x29, 0xd4, 0x26, 0xa4, 0x6a, 0xd2, 0xc1, 0x95, 0xae, 0x72, 0x19, 0xb4, 0x09,
	0x8c, 0xda, 0x94, 0xad, 0x66, 0x4e, 0xb5, 0x1a, 0xac, 0xa7, 0x0f, 0x0e, 0xc9, 0x71, 0xf4, 0x3c,
	0xd3, 0x13, 0x1d, 0x0a, 0xdb, 0x5e, 0x28, 0xb1, 0xed, 0xeb, 0xdb, 0xc2, 0x14, 0xd4, 0x51, 0xcb,
	0xc5, 0xdb, 0x6c, 0xb5, 0xd2, 0x51, 0x2c, 0x51, 0x98, 0xeb, 0x9f, 0xd7, 0x94, 0xbb, 0x4d, 0xaa,
	0x49, 0x7f, 0x03, 0xdb, 0x8e, 0x2d, 0x30, 0x1f, 0xe7, 0xe3, 0xa1, 0x02, 0x33, 0xc6, 0x41, 0xda,
	0x91, 0xb3, 0x2f, 0x9b, 0x33, 0xf8, 0xe0, 0x8f, 0xef, 0x80, 0xfa, 0x51, 0x32, 0x74, 0x7e, 0x04,
	0x16, 0xb5, 0xff, 0x08, 0xd9, 0xd4, 0xaf, 0x09, 0xeb, 0xff, 0xb3, 0xd1, 0xdb, 0x29, 0xa3, 0x10,
	0x8e, 0xfd, 0x03, 0xb0, 0xa0, 0xfe, 0x0b, 0xc7, 0x1b, 0x96, 0x47, 0x39, 0x41, 0xef, 0x5e, 0x09,
	0x81, 0x98, 0xfa, 0x47, 0x60, 0x51, 0xfb, 0xb3, 0x0b, 0xc3, 0xc2, 0x55, 0x0a, 0xd3, 0xc2, 0xcd,
	0xff, 0x5b, 0xe1, 0x0c, 0xc0, 0x9c, 0xfc, 0x9f, 0x15, 0xaf, 0x5b, 0x56, 0x45, 0xd1, 0xbd, 0x3b,
	0x85, 0x68, 0x31, 0xe9, 0x67, 0x60, 0x49, 0xff, 0x7b, 0x88, 0xdb, 0xe6, 0x27, 0x25, 0x92, 0xde,
	0x5b, 0xa5, 0x24, 0xb2, 0x4c, 0xb4, 0x7f, 0x68, 0xd8, 0xb4, 0x3d, 0x2c, 0x04, 0xbe, 0x53, 0x46,
	0x21, 0xcf, 0xae, 0xfd, 0x51, 0x82, 0x61, 0x76, 0x95, 0xc2, 0x34, 0xbb, 0xf9, 0xd3, 0x7d, 0xe7,
	0x0c, 0x38, 0x86, 0xcf, 0xf6, 0xb7, 0xf3, 0xcf, 0xe7, 0xa9, 0x7a, 0xbb, 0x55, 0xa8, 0xc4, 0x9b,
	0x20, 0x58, 0xc9, 0x7f, 0x10, 0xff, 0x66, 0xc9, 0x14, 0x44, 0xcf, 0xef, 0x54, 0x20, 0x12, 0xaf,
	0x09, 0xc1, 0xaa, 0xf1, 0xdb, 0xee, 0xbb, 0x96, 0x49, 0x34, 0xba, 0xde, 0x5e, 0x35, 0x3a, 0xf1,
	0xbe, 0x4f, 0xc1, 0xbc, 0xf2, 0xdd, 0xee, 0x46, 0xfe, 0x79, 0x19, 0xdf, 0xbb, 0x5b, 0x8c, 0x97,
	0xf9, 0x30, 0x7e, 0x67, 0x6b, 0x7b, 0x5e, 0xa3, 0x33, 0xf1, 0x51, 0xf4, 0x2d, 0x2c, 0x36, 0x04,
	0xc3, 0x77, 0xb0, 0xdb, 0x65, 0xab, 0x25, 0x0a, 0xda, 0xad, 0x42, 0x25, 0xbf, 0xc9, 0xf0, 0xad,
	0xaa, 0xe1, 0x4d, 0x79, 0x2a, 0xd3, 0x9b, 0xec, 0x1f, 0x04, 0x3a, 0xbf, 0x5b, 0x03, 0xb7, 0xcb,
	0xbf, 0x06, 0x7c, 0x58, 0x65, 0x4e, 0x5d, 0xbc, 0xdf, 0xbd, 0xc4, 0x43, 0x62, 0x5d, 0xbf, 0x56,
	0x03, 0xaf, 0x15, 0x7d, 0x20, 0xf6, 0x6e, 0x35, 0x2e, 0x19, 0x79, 0xef, 0x5b, 0x53, 0x91, 0xcb,
	0x0e, 0x99, 0xff, 0xe8, 0xca, 0xe0, 0x90, 0x39, 0x22, 0x93, 0x43, 0x5a, 0x3f, 0x4c, 0x72, 0x7e,
	0x13, 0xe7, 0xf4, 0xc2, 0xaf, 0x92, 0xf6, 0x8b, 0xa6, 0x33, 0x3c, 0xd0, 0xfb, 0x85, 0x29, 0x1f,
	0x10, 0x6b, 0x79, 0x01, 0xd6, 0xcc, 0x5f, 0x03, 0xdd, 0x2b, 0x9a, 0x51, 0x22, 0xec, 0xed, 0x57,
	0x24, 0x14, 0xaf, 0x7c, 0x09, 0x6e, 0xda, 0xbe, 0xca, 0x79, 0xab, 0x92, 0x18, 0x89, 0x87, 0xbd,
	0x57, 0x99, 0x54, 0xbc, 0xf8, 0x57, 0xc1, 0xab, 0xf6, 0x6f, 0x67, 0x0c, 0x1a, 0xb4, 0x12, 0xf7,
	0x1e, 0x4e, 0x41, 0x2c, 0x7b, 0xb9, 0xe1, 0x0b, 0x91, 0xed, 0x2a, 0x53, 0x99, 0xbc, 0xdc, 0x7e,
	0xdd, 0xdd, 0xf9, 0xed, 0x1a, 0x78, 0xa3, 0xec, 0xae, 0xfb, 0x7b, 0x53, 0xb1, 0x40, 0x44, 0xfe,
	0x8b, 0x53, 0x3f, 0x22, 0x56, 0x84, 0xc0, 0xba, 0xe5, 0x3e, 0xf8, 0x8e, 0x25, 0xbb, 0xe4, 0x28,
	0x7b, 0xf7, 0xab, 0x52, 0xca, 0xc6, 0x6d, 0xbe, 0x1a, 0x7d, 0xaf, 0xc2, 0x54, 0x24, 0xba, 0xee,
	0x57, 0x24, 0x14, 0xaf, 0xfc, 0x69, 0x0d, 0xdc, 0x2a, 0xbc, 0x9d, 0xbb, 0x57, 0x9d, 0x0b, 0x22,
	0xf4, 0xf7, 0xa7, 0xa3, 0xcf, 0x45, 0x54, 0xdb, 0xad, 0x5a, 0x4b, 0x44, 0xb5, 0x90, 0xdb, 0x22,
	0x6a, 0xc9, 0xcd, 0x44, 0x9c, 0xb3, 0x8d, 0xb7, 0x12, 0xef, 0x56, 0x9b, 0xce, 0x94, 0xb3, 0x8b,
	0xae, 0x6e, 0x89, 0xfc, 0x56, 0x7c, 0x6f, 0xeb, 0xe1, 0x94, 0xcc, 0x10, 0x45, 0x7c, 0xf7, 0x12,
	0x0f, 0xc9, 0xa1, 0xc7, 0x7e, 0x73, 0xea, 0x9d, 0xb2, 0x99, 0x25, 0xe2, 0xde, 0xc3, 0x29, 0x88,
	0xc5, 0xeb, 0x7f, 0x52, 0x03, 0xbd, 0x82, 0x8b, 0x40, 0xbb, 0xd5, 0xe6, 0xa4, 0xd4, 0xbd, 0x47,
	0xd3, 0x50, 0x2b, 0x31, 0xa9, 0xec, 0xda, 0xc5, 0x7b, 0x53, 0xf1, 0x66, 0x8b, 0x49, 0x15, 0x2f,
	0x3a, 0x38, 0x5f, 0x80, 0x1b, 0xa6, 0x4b, 0x0e, 0x77, 0xec, 0x51, 0x4e, 0xd6, 0xc3, 0xbb, 0x95,
	0xc8, 0x64, 0x47, 0x30, 0x1e, 0x96, 0xdf, 0x2d, 0x9b, 0x86, 0x09, 0x7d, 0xaf, 0x1a, 0x9d, 0x29,
	0xd7, 0xe5, 0xe5, 0xfc, 0x4e, 0xc5, 0xb5, 0x13, 0x09, 0x3f, 0x9c, 0x82, 0x58, 0x8e, 0xbc, 0xe6,
	0x33, 0xbb, 0x7b, 0xf6, 0xd9, 0xd4, 0x80, 0xb3, 0x5f, 0x91, 0x50, 0x4e, 0x31, 0x96, 0xf3, 0xa0,
	0x9d, 0xf2, 0xa9, 0x98, 0x94, 0xef, 0x57, 0xa5, 0x54, 0xc2, 0x6c, 0x51, 0x07, 0xfb, 0xdd, 0xca,
	0x6c, 0x10, 0x61, 0x7f, 0x6b, 0x2a, 0x72, 0x93, 0x75, 0x29, 0x7d, 0xe4, 0x02, 0xeb, 0x92, 0xe9,
	0x8a, 0xac, 0xcb, 0xd4, 0x44, 0x95, 0xd5, 0xab, 0x36, 0x50, 0xef, 0x95, 0x4e, 0xc4, 0x24, 0xbd,
	0x5f, 0x91, 0x50, 0x09, 0x61, 0x05, 0x5d, 0xb0, 0xdd, 0xaa, 0x1c, 0x10, 0x31, 0x3f, 0x9a, 0x86,
	0x9a, 0x2f, 0xe1, 0x7b, 0xdf, 0xf9, 0xdb, 0x2f, 0x37, 0x6a, 0x3f, 0xfb, 0x72, 0xa3, 0xf6, 0xaf,
	0x5f, 0x6e, 0xd4, 0x7e, 0xe7, 0xab, 0x8d, 0x57, 0x7e, 0xf6, 0xd5, 0xc6, 0x2b, 0xff, 0xfc, 0xd5,
	0xc6, 0x2b, 0x3f, 0xdc, 0x1c, 0x06, 0xe8, 0x2c, 0x3d, 0xd9, 0xf3, 0xa2, 0xf1, 0x3e, 0x9d, 0x79,
	0xbf, 0x0f, 0xf7, 0xcf, 0xe9, 0xbf, 0xf6, 0xe2, 0x09, 0x4f, 0x9a, 0xe4, 0x9f, 0x72, 0x1f, 0xfe,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xc1, 0x3f, 0x6f, 0xcc, 0x57, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	LogonInitiator(ctx context.Context, in *MsgLogonInitiator, opts ...grpc.CallOption) (*MsgLogonInitiatorResponse, error)
	LogonAcceptor(ctx context.Context, in *MsgLogonAcceptor, opts ...grpc.CallOption) (*MsgLogonAcceptorResponse, error)
	TerminateLogon(ctx context.Context, in *MsgTerminateLogon, opts ...grpc.CallOption) (*MsgTerminateLogonResponse, error)
	LogonReject(ctx context.Context, in *MsgLogonReject, opts ...grpc.CallOption) (*MsgLogonRejectResponse, error)
	LogoutInitiator(ctx context.Context, in *MsgLogoutInitiator, opts ...grpc.CallOption) (*MsgLogoutInitiatorResponse, error)
	LogoutAcceptor(ctx context.Context, in *MsgLogoutAcceptor, opts ...grpc.CallOption) (*MsgLogoutAcceptorResponse, error)
	NewOrderSingle(ctx context.Context, in *MsgNewOrderSingle, opts ...grpc.CallOption) (*MsgNewOrderSingleResponse, error)
	OrderCancelRequest(ctx context.Context, in *MsgOrderCancelRequest, opts ...grpc.CallOption) (*MsgOrderCancelRequestResponse, error)
	OrderCancelReject(ctx context.Context, in *MsgOrderCancelReject, opts ...grpc.CallOption) (*MsgOrderCancelRejectResponse, error)
	OrderExecutionReport(ctx context.Context, in *MsgOrderExecutionReport, opts ...grpc.CallOption) (*MsgOrderExecutionReportResponse, error)
	QuoteRequest(ctx context.Context, in *MsgQuoteRequest, opts ...grpc.CallOption) (*MsgQuoteRequestResponse, error)
	QuoteAcknowledgement(ctx context.Context, in *MsgQuoteAcknowledgement, opts ...grpc.CallOption) (*MsgQuoteAcknowledgementResponse, error)
	QuoteRequestReject(ctx context.Context, in *MsgQuoteRequestReject, opts ...grpc.CallOption) (*MsgQuoteRequestRejectResponse, error)
	TradeCaptureReport(ctx context.Context, in *MsgTradeCaptureReport, opts ...grpc.CallOption) (*MsgTradeCaptureReportResponse, error)
	TradeCaptureReportAcknowledgement(ctx context.Context, in *MsgTradeCaptureReportAcknowledgement, opts ...grpc.CallOption) (*MsgTradeCaptureReportAcknowledgementResponse, error)
	TradeCaptureReportRejection(ctx context.Context, in *MsgTradeCaptureReportRejection, opts ...grpc.CallOption) (*MsgTradeCaptureReportRejectionResponse, error)
	MarketDataRequest(ctx context.Context, in *MsgMarketDataRequest, opts ...grpc.CallOption) (*MsgMarketDataRequestResponse, error)
	MarketDataSnapshotFullRefresh(ctx context.Context, in *MsgMarketDataSnapshotFullRefresh, opts ...grpc.CallOption) (*MsgMarketDataSnapshotFullRefreshResponse, error)
	MarketDataIncremental(ctx context.Context, in *MsgMarketDataIncremental, opts ...grpc.CallOption) (*MsgMarketDataIncrementalResponse, error)
	MarketDataRequestReject(ctx context.Context, in *MsgMarketDataRequestReject, opts ...grpc.CallOption) (*MsgMarketDataRequestRejectResponse, error)
	SecurityDefinitionRequest(ctx context.Context, in *MsgSecurityDefinitionRequest, opts ...grpc.CallOption) (*MsgSecurityDefinitionRequestResponse, error)
	SecurityDefinition(ctx context.Context, in *MsgSecurityDefinition, opts ...grpc.CallOption) (*MsgSecurityDefinitionResponse, error)
	SecurityDefinitionRequestReject(ctx context.Context, in *MsgSecurityDefinitionRequestReject, opts ...grpc.CallOption) (*MsgSecurityDefinitionRequestRejectResponse, error)
	OrderMassStatusRequest(ctx context.Context, in *MsgOrderMassStatusRequest, opts ...grpc.CallOption) (*MsgOrderMassStatusRequestResponse, error)
	OrderMassStatusReport(ctx context.Context, in *MsgOrderMassStatusReport, opts ...grpc.CallOption) (*MsgOrderMassStatusReportResponse, error)
	OrderMassStatusRequestReject(ctx context.Context, in *MsgOrderMassStatusRequestReject, opts ...grpc.CallOption) (*MsgOrderMassStatusRequestRejectResponse, error)
	TradingSessionStatusRequest(ctx context.Context, in *MsgTradingSessionStatusRequest, opts ...grpc.CallOption) (*MsgTradingSessionStatusRequestResponse, error)
	TradingSessionStatus(ctx context.Context, in *MsgTradingSessionStatus, opts ...grpc.CallOption) (*MsgTradingSessionStatusResponse, error)
	TradingSessionStatusRequestReject(ctx context.Context, in *MsgTradingSessionStatusRequestReject, opts ...grpc.CallOption) (*MsgTradingSessionStatusRequestRejectResponse, error)
	TradingSessionListRequest(ctx context.Context, in *MsgTradingSessionListRequest, opts ...grpc.CallOption) (*MsgTradingSessionListRequestResponse, error)
	TradingSessionListResponse(ctx context.Context, in *MsgTradingSessionListResponse, opts ...grpc.CallOption) (*MsgTradingSessionListResponseResponse, error)
	TradingSessionListRequestReject(ctx context.Context, in *MsgTradingSessionListRequestReject, opts ...grpc.CallOption) (*MsgTradingSessionListRequestRejectResponse, error)
	SecurityListRequest(ctx context.Context, in *MsgSecurityListRequest, opts ...grpc.CallOption) (*MsgSecurityListRequestResponse, error)
	SecurityListResponse(ctx context.Context, in *MsgSecurityListResponse, opts ...grpc.CallOption) (*MsgSecurityListResponseResponse, error)
	SecurityListRequestReject(ctx context.Context, in *MsgSecurityListRequestReject, opts ...grpc.CallOption) (*MsgSecurityListRequestRejectResponse, error)
	SecurityStatusRequest(ctx context.Context, in *MsgSecurityStatusRequest, opts ...grpc.CallOption) (*MsgSecurityStatusRequestResponse, error)
	SecurityStatusResponse(ctx context.Context, in *MsgSecurityStatusResponse, opts ...grpc.CallOption) (*MsgSecurityStatusResponseResponse, error)
	SecurityStatusRequestReject(ctx context.Context, in *MsgSecurityStatusRequestReject, opts ...grpc.CallOption) (*MsgSecurityStatusRequestRejectResponse, error)
	SecurityTypesRequest(ctx context.Context, in *MsgSecurityTypesRequest, opts ...grpc.CallOption) (*MsgSecurityTypesRequestResponse, error)
	SecurityTypesResponse(ctx context.Context, in *MsgSecurityTypesResponse, opts ...grpc.CallOption) (*MsgSecurityTypesResponseResponse, error)
	SecurityTypesRequestReject(ctx context.Context, in *MsgSecurityTypesRequestReject, opts ...grpc.CallOption) (*MsgSecurityTypesRequestRejectResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) LogonInitiator(ctx context.Context, in *MsgLogonInitiator, opts ...grpc.CallOption) (*MsgLogonInitiatorResponse, error) {
	out := new(MsgLogonInitiatorResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/LogonInitiator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LogonAcceptor(ctx context.Context, in *MsgLogonAcceptor, opts ...grpc.CallOption) (*MsgLogonAcceptorResponse, error) {
	out := new(MsgLogonAcceptorResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/LogonAcceptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TerminateLogon(ctx context.Context, in *MsgTerminateLogon, opts ...grpc.CallOption) (*MsgTerminateLogonResponse, error) {
	out := new(MsgTerminateLogonResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TerminateLogon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LogonReject(ctx context.Context, in *MsgLogonReject, opts ...grpc.CallOption) (*MsgLogonRejectResponse, error) {
	out := new(MsgLogonRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/LogonReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LogoutInitiator(ctx context.Context, in *MsgLogoutInitiator, opts ...grpc.CallOption) (*MsgLogoutInitiatorResponse, error) {
	out := new(MsgLogoutInitiatorResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/LogoutInitiator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LogoutAcceptor(ctx context.Context, in *MsgLogoutAcceptor, opts ...grpc.CallOption) (*MsgLogoutAcceptorResponse, error) {
	out := new(MsgLogoutAcceptorResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/LogoutAcceptor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewOrderSingle(ctx context.Context, in *MsgNewOrderSingle, opts ...grpc.CallOption) (*MsgNewOrderSingleResponse, error) {
	out := new(MsgNewOrderSingleResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/NewOrderSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OrderCancelRequest(ctx context.Context, in *MsgOrderCancelRequest, opts ...grpc.CallOption) (*MsgOrderCancelRequestResponse, error) {
	out := new(MsgOrderCancelRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/OrderCancelRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OrderCancelReject(ctx context.Context, in *MsgOrderCancelReject, opts ...grpc.CallOption) (*MsgOrderCancelRejectResponse, error) {
	out := new(MsgOrderCancelRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/OrderCancelReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OrderExecutionReport(ctx context.Context, in *MsgOrderExecutionReport, opts ...grpc.CallOption) (*MsgOrderExecutionReportResponse, error) {
	out := new(MsgOrderExecutionReportResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/OrderExecutionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) QuoteRequest(ctx context.Context, in *MsgQuoteRequest, opts ...grpc.CallOption) (*MsgQuoteRequestResponse, error) {
	out := new(MsgQuoteRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/QuoteRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) QuoteAcknowledgement(ctx context.Context, in *MsgQuoteAcknowledgement, opts ...grpc.CallOption) (*MsgQuoteAcknowledgementResponse, error) {
	out := new(MsgQuoteAcknowledgementResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/QuoteAcknowledgement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) QuoteRequestReject(ctx context.Context, in *MsgQuoteRequestReject, opts ...grpc.CallOption) (*MsgQuoteRequestRejectResponse, error) {
	out := new(MsgQuoteRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/QuoteRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradeCaptureReport(ctx context.Context, in *MsgTradeCaptureReport, opts ...grpc.CallOption) (*MsgTradeCaptureReportResponse, error) {
	out := new(MsgTradeCaptureReportResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradeCaptureReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradeCaptureReportAcknowledgement(ctx context.Context, in *MsgTradeCaptureReportAcknowledgement, opts ...grpc.CallOption) (*MsgTradeCaptureReportAcknowledgementResponse, error) {
	out := new(MsgTradeCaptureReportAcknowledgementResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradeCaptureReportAcknowledgement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradeCaptureReportRejection(ctx context.Context, in *MsgTradeCaptureReportRejection, opts ...grpc.CallOption) (*MsgTradeCaptureReportRejectionResponse, error) {
	out := new(MsgTradeCaptureReportRejectionResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradeCaptureReportRejection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketDataRequest(ctx context.Context, in *MsgMarketDataRequest, opts ...grpc.CallOption) (*MsgMarketDataRequestResponse, error) {
	out := new(MsgMarketDataRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/MarketDataRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketDataSnapshotFullRefresh(ctx context.Context, in *MsgMarketDataSnapshotFullRefresh, opts ...grpc.CallOption) (*MsgMarketDataSnapshotFullRefreshResponse, error) {
	out := new(MsgMarketDataSnapshotFullRefreshResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/MarketDataSnapshotFullRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketDataIncremental(ctx context.Context, in *MsgMarketDataIncremental, opts ...grpc.CallOption) (*MsgMarketDataIncrementalResponse, error) {
	out := new(MsgMarketDataIncrementalResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/MarketDataIncremental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MarketDataRequestReject(ctx context.Context, in *MsgMarketDataRequestReject, opts ...grpc.CallOption) (*MsgMarketDataRequestRejectResponse, error) {
	out := new(MsgMarketDataRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/MarketDataRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityDefinitionRequest(ctx context.Context, in *MsgSecurityDefinitionRequest, opts ...grpc.CallOption) (*MsgSecurityDefinitionRequestResponse, error) {
	out := new(MsgSecurityDefinitionRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityDefinitionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityDefinition(ctx context.Context, in *MsgSecurityDefinition, opts ...grpc.CallOption) (*MsgSecurityDefinitionResponse, error) {
	out := new(MsgSecurityDefinitionResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityDefinitionRequestReject(ctx context.Context, in *MsgSecurityDefinitionRequestReject, opts ...grpc.CallOption) (*MsgSecurityDefinitionRequestRejectResponse, error) {
	out := new(MsgSecurityDefinitionRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityDefinitionRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OrderMassStatusRequest(ctx context.Context, in *MsgOrderMassStatusRequest, opts ...grpc.CallOption) (*MsgOrderMassStatusRequestResponse, error) {
	out := new(MsgOrderMassStatusRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/OrderMassStatusRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OrderMassStatusReport(ctx context.Context, in *MsgOrderMassStatusReport, opts ...grpc.CallOption) (*MsgOrderMassStatusReportResponse, error) {
	out := new(MsgOrderMassStatusReportResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/OrderMassStatusReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OrderMassStatusRequestReject(ctx context.Context, in *MsgOrderMassStatusRequestReject, opts ...grpc.CallOption) (*MsgOrderMassStatusRequestRejectResponse, error) {
	out := new(MsgOrderMassStatusRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/OrderMassStatusRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradingSessionStatusRequest(ctx context.Context, in *MsgTradingSessionStatusRequest, opts ...grpc.CallOption) (*MsgTradingSessionStatusRequestResponse, error) {
	out := new(MsgTradingSessionStatusRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradingSessionStatusRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradingSessionStatus(ctx context.Context, in *MsgTradingSessionStatus, opts ...grpc.CallOption) (*MsgTradingSessionStatusResponse, error) {
	out := new(MsgTradingSessionStatusResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradingSessionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradingSessionStatusRequestReject(ctx context.Context, in *MsgTradingSessionStatusRequestReject, opts ...grpc.CallOption) (*MsgTradingSessionStatusRequestRejectResponse, error) {
	out := new(MsgTradingSessionStatusRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradingSessionStatusRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradingSessionListRequest(ctx context.Context, in *MsgTradingSessionListRequest, opts ...grpc.CallOption) (*MsgTradingSessionListRequestResponse, error) {
	out := new(MsgTradingSessionListRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradingSessionListRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradingSessionListResponse(ctx context.Context, in *MsgTradingSessionListResponse, opts ...grpc.CallOption) (*MsgTradingSessionListResponseResponse, error) {
	out := new(MsgTradingSessionListResponseResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradingSessionListResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TradingSessionListRequestReject(ctx context.Context, in *MsgTradingSessionListRequestReject, opts ...grpc.CallOption) (*MsgTradingSessionListRequestRejectResponse, error) {
	out := new(MsgTradingSessionListRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/TradingSessionListRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityListRequest(ctx context.Context, in *MsgSecurityListRequest, opts ...grpc.CallOption) (*MsgSecurityListRequestResponse, error) {
	out := new(MsgSecurityListRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityListRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityListResponse(ctx context.Context, in *MsgSecurityListResponse, opts ...grpc.CallOption) (*MsgSecurityListResponseResponse, error) {
	out := new(MsgSecurityListResponseResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityListResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityListRequestReject(ctx context.Context, in *MsgSecurityListRequestReject, opts ...grpc.CallOption) (*MsgSecurityListRequestRejectResponse, error) {
	out := new(MsgSecurityListRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityListRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityStatusRequest(ctx context.Context, in *MsgSecurityStatusRequest, opts ...grpc.CallOption) (*MsgSecurityStatusRequestResponse, error) {
	out := new(MsgSecurityStatusRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityStatusRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityStatusResponse(ctx context.Context, in *MsgSecurityStatusResponse, opts ...grpc.CallOption) (*MsgSecurityStatusResponseResponse, error) {
	out := new(MsgSecurityStatusResponseResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityStatusResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityStatusRequestReject(ctx context.Context, in *MsgSecurityStatusRequestReject, opts ...grpc.CallOption) (*MsgSecurityStatusRequestRejectResponse, error) {
	out := new(MsgSecurityStatusRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityStatusRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityTypesRequest(ctx context.Context, in *MsgSecurityTypesRequest, opts ...grpc.CallOption) (*MsgSecurityTypesRequestResponse, error) {
	out := new(MsgSecurityTypesRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityTypesRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityTypesResponse(ctx context.Context, in *MsgSecurityTypesResponse, opts ...grpc.CallOption) (*MsgSecurityTypesResponseResponse, error) {
	out := new(MsgSecurityTypesResponseResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityTypesResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SecurityTypesRequestReject(ctx context.Context, in *MsgSecurityTypesRequestReject, opts ...grpc.CallOption) (*MsgSecurityTypesRequestRejectResponse, error) {
	out := new(MsgSecurityTypesRequestRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Msg/SecurityTypesRequestReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	LogonInitiator(context.Context, *MsgLogonInitiator) (*MsgLogonInitiatorResponse, error)
	LogonAcceptor(context.Context, *MsgLogonAcceptor) (*MsgLogonAcceptorResponse, error)
	TerminateLogon(context.Context, *MsgTerminateLogon) (*MsgTerminateLogonResponse, error)
	LogonReject(context.Context, *MsgLogonReject) (*MsgLogonRejectResponse, error)
	LogoutInitiator(context.Context, *MsgLogoutInitiator) (*MsgLogoutInitiatorResponse, error)
	LogoutAcceptor(context.Context, *MsgLogoutAcceptor) (*MsgLogoutAcceptorResponse, error)
	NewOrderSingle(context.Context, *MsgNewOrderSingle) (*MsgNewOrderSingleResponse, error)
	OrderCancelRequest(context.Context, *MsgOrderCancelRequest) (*MsgOrderCancelRequestResponse, error)
	OrderCancelReject(context.Context, *MsgOrderCancelReject) (*MsgOrderCancelRejectResponse, error)
	OrderExecutionReport(context.Context, *MsgOrderExecutionReport) (*MsgOrderExecutionReportResponse, error)
	QuoteRequest(context.Context, *MsgQuoteRequest) (*MsgQuoteRequestResponse, error)
	QuoteAcknowledgement(context.Context, *MsgQuoteAcknowledgement) (*MsgQuoteAcknowledgementResponse, error)
	QuoteRequestReject(context.Context, *MsgQuoteRequestReject) (*MsgQuoteRequestRejectResponse, error)
	TradeCaptureReport(context.Context, *MsgTradeCaptureReport) (*MsgTradeCaptureReportResponse, error)
	TradeCaptureReportAcknowledgement(context.Context, *MsgTradeCaptureReportAcknowledgement) (*MsgTradeCaptureReportAcknowledgementResponse, error)
	TradeCaptureReportRejection(context.Context, *MsgTradeCaptureReportRejection) (*MsgTradeCaptureReportRejectionResponse, error)
	MarketDataRequest(context.Context, *MsgMarketDataRequest) (*MsgMarketDataRequestResponse, error)
	MarketDataSnapshotFullRefresh(context.Context, *MsgMarketDataSnapshotFullRefresh) (*MsgMarketDataSnapshotFullRefreshResponse, error)
	MarketDataIncremental(context.Context, *MsgMarketDataIncremental) (*MsgMarketDataIncrementalResponse, error)
	MarketDataRequestReject(context.Context, *MsgMarketDataRequestReject) (*MsgMarketDataRequestRejectResponse, error)
	SecurityDefinitionRequest(context.Context, *MsgSecurityDefinitionRequest) (*MsgSecurityDefinitionRequestResponse, error)
	SecurityDefinition(context.Context, *MsgSecurityDefinition) (*MsgSecurityDefinitionResponse, error)
	SecurityDefinitionRequestReject(context.Context, *MsgSecurityDefinitionRequestReject) (*MsgSecurityDefinitionRequestRejectResponse, error)
	OrderMassStatusRequest(context.Context, *MsgOrderMassStatusRequest) (*MsgOrderMassStatusRequestResponse, error)
	OrderMassStatusReport(context.Context, *MsgOrderMassStatusReport) (*MsgOrderMassStatusReportResponse, error)
	OrderMassStatusRequestReject(context.Context, *MsgOrderMassStatusRequestReject) (*MsgOrderMassStatusRequestRejectResponse, error)
	TradingSessionStatusRequest(context.Context, *MsgTradingSessionStatusRequest) (*MsgTradingSessionStatusRequestResponse, error)
	TradingSessionStatus(context.Context, *MsgTradingSessionStatus) (*MsgTradingSessionStatusResponse, error)
	TradingSessionStatusRequestReject(context.Context, *MsgTradingSessionStatusRequestReject) (*MsgTradingSessionStatusRequestRejectResponse, error)
	TradingSessionListRequest(context.Context, *MsgTradingSessionListRequest) (*MsgTradingSessionListRequestResponse, error)
	TradingSessionListResponse(context.Context, *MsgTradingSessionListResponse) (*MsgTradingSessionListResponseResponse, error)
	TradingSessionListRequestReject(context.Context, *MsgTradingSessionListRequestReject) (*MsgTradingSessionListRequestRejectResponse, error)
	SecurityListRequest(context.Context, *MsgSecurityListRequest) (*MsgSecurityListRequestResponse, error)
	SecurityListResponse(context.Context, *MsgSecurityListResponse) (*MsgSecurityListResponseResponse, error)
	SecurityListRequestReject(context.Context, *MsgSecurityListRequestReject) (*MsgSecurityListRequestRejectResponse, error)
	SecurityStatusRequest(context.Context, *MsgSecurityStatusRequest) (*MsgSecurityStatusRequestResponse, error)
	SecurityStatusResponse(context.Context, *MsgSecurityStatusResponse) (*MsgSecurityStatusResponseResponse, error)
	SecurityStatusRequestReject(context.Context, *MsgSecurityStatusRequestReject) (*MsgSecurityStatusRequestRejectResponse, error)
	SecurityTypesRequest(context.Context, *MsgSecurityTypesRequest) (*MsgSecurityTypesRequestResponse, error)
	SecurityTypesResponse(context.Context, *MsgSecurityTypesResponse) (*MsgSecurityTypesResponseResponse, error)
	SecurityTypesRequestReject(context.Context, *MsgSecurityTypesRequestReject) (*MsgSecurityTypesRequestRejectResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) LogonInitiator(ctx context.Context, req *MsgLogonInitiator) (*MsgLogonInitiatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogonInitiator not implemented")
}
func (*UnimplementedMsgServer) LogonAcceptor(ctx context.Context, req *MsgLogonAcceptor) (*MsgLogonAcceptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogonAcceptor not implemented")
}
func (*UnimplementedMsgServer) TerminateLogon(ctx context.Context, req *MsgTerminateLogon) (*MsgTerminateLogonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateLogon not implemented")
}
func (*UnimplementedMsgServer) LogonReject(ctx context.Context, req *MsgLogonReject) (*MsgLogonRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogonReject not implemented")
}
func (*UnimplementedMsgServer) LogoutInitiator(ctx context.Context, req *MsgLogoutInitiator) (*MsgLogoutInitiatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutInitiator not implemented")
}
func (*UnimplementedMsgServer) LogoutAcceptor(ctx context.Context, req *MsgLogoutAcceptor) (*MsgLogoutAcceptorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutAcceptor not implemented")
}
func (*UnimplementedMsgServer) NewOrderSingle(ctx context.Context, req *MsgNewOrderSingle) (*MsgNewOrderSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrderSingle not implemented")
}
func (*UnimplementedMsgServer) OrderCancelRequest(ctx context.Context, req *MsgOrderCancelRequest) (*MsgOrderCancelRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCancelRequest not implemented")
}
func (*UnimplementedMsgServer) OrderCancelReject(ctx context.Context, req *MsgOrderCancelReject) (*MsgOrderCancelRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderCancelReject not implemented")
}
func (*UnimplementedMsgServer) OrderExecutionReport(ctx context.Context, req *MsgOrderExecutionReport) (*MsgOrderExecutionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderExecutionReport not implemented")
}
func (*UnimplementedMsgServer) QuoteRequest(ctx context.Context, req *MsgQuoteRequest) (*MsgQuoteRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteRequest not implemented")
}
func (*UnimplementedMsgServer) QuoteAcknowledgement(ctx context.Context, req *MsgQuoteAcknowledgement) (*MsgQuoteAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteAcknowledgement not implemented")
}
func (*UnimplementedMsgServer) QuoteRequestReject(ctx context.Context, req *MsgQuoteRequestReject) (*MsgQuoteRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteRequestReject not implemented")
}
func (*UnimplementedMsgServer) TradeCaptureReport(ctx context.Context, req *MsgTradeCaptureReport) (*MsgTradeCaptureReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeCaptureReport not implemented")
}
func (*UnimplementedMsgServer) TradeCaptureReportAcknowledgement(ctx context.Context, req *MsgTradeCaptureReportAcknowledgement) (*MsgTradeCaptureReportAcknowledgementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeCaptureReportAcknowledgement not implemented")
}
func (*UnimplementedMsgServer) TradeCaptureReportRejection(ctx context.Context, req *MsgTradeCaptureReportRejection) (*MsgTradeCaptureReportRejectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeCaptureReportRejection not implemented")
}
func (*UnimplementedMsgServer) MarketDataRequest(ctx context.Context, req *MsgMarketDataRequest) (*MsgMarketDataRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataRequest not implemented")
}
func (*UnimplementedMsgServer) MarketDataSnapshotFullRefresh(ctx context.Context, req *MsgMarketDataSnapshotFullRefresh) (*MsgMarketDataSnapshotFullRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataSnapshotFullRefresh not implemented")
}
func (*UnimplementedMsgServer) MarketDataIncremental(ctx context.Context, req *MsgMarketDataIncremental) (*MsgMarketDataIncrementalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataIncremental not implemented")
}
func (*UnimplementedMsgServer) MarketDataRequestReject(ctx context.Context, req *MsgMarketDataRequestReject) (*MsgMarketDataRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataRequestReject not implemented")
}
func (*UnimplementedMsgServer) SecurityDefinitionRequest(ctx context.Context, req *MsgSecurityDefinitionRequest) (*MsgSecurityDefinitionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityDefinitionRequest not implemented")
}
func (*UnimplementedMsgServer) SecurityDefinition(ctx context.Context, req *MsgSecurityDefinition) (*MsgSecurityDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityDefinition not implemented")
}
func (*UnimplementedMsgServer) SecurityDefinitionRequestReject(ctx context.Context, req *MsgSecurityDefinitionRequestReject) (*MsgSecurityDefinitionRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityDefinitionRequestReject not implemented")
}
func (*UnimplementedMsgServer) OrderMassStatusRequest(ctx context.Context, req *MsgOrderMassStatusRequest) (*MsgOrderMassStatusRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderMassStatusRequest not implemented")
}
func (*UnimplementedMsgServer) OrderMassStatusReport(ctx context.Context, req *MsgOrderMassStatusReport) (*MsgOrderMassStatusReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderMassStatusReport not implemented")
}
func (*UnimplementedMsgServer) OrderMassStatusRequestReject(ctx context.Context, req *MsgOrderMassStatusRequestReject) (*MsgOrderMassStatusRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderMassStatusRequestReject not implemented")
}
func (*UnimplementedMsgServer) TradingSessionStatusRequest(ctx context.Context, req *MsgTradingSessionStatusRequest) (*MsgTradingSessionStatusRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSessionStatusRequest not implemented")
}
func (*UnimplementedMsgServer) TradingSessionStatus(ctx context.Context, req *MsgTradingSessionStatus) (*MsgTradingSessionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSessionStatus not implemented")
}
func (*UnimplementedMsgServer) TradingSessionStatusRequestReject(ctx context.Context, req *MsgTradingSessionStatusRequestReject) (*MsgTradingSessionStatusRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSessionStatusRequestReject not implemented")
}
func (*UnimplementedMsgServer) TradingSessionListRequest(ctx context.Context, req *MsgTradingSessionListRequest) (*MsgTradingSessionListRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSessionListRequest not implemented")
}
func (*UnimplementedMsgServer) TradingSessionListResponse(ctx context.Context, req *MsgTradingSessionListResponse) (*MsgTradingSessionListResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSessionListResponse not implemented")
}
func (*UnimplementedMsgServer) TradingSessionListRequestReject(ctx context.Context, req *MsgTradingSessionListRequestReject) (*MsgTradingSessionListRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSessionListRequestReject not implemented")
}
func (*UnimplementedMsgServer) SecurityListRequest(ctx context.Context, req *MsgSecurityListRequest) (*MsgSecurityListRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityListRequest not implemented")
}
func (*UnimplementedMsgServer) SecurityListResponse(ctx context.Context, req *MsgSecurityListResponse) (*MsgSecurityListResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityListResponse not implemented")
}
func (*UnimplementedMsgServer) SecurityListRequestReject(ctx context.Context, req *MsgSecurityListRequestReject) (*MsgSecurityListRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityListRequestReject not implemented")
}
func (*UnimplementedMsgServer) SecurityStatusRequest(ctx context.Context, req *MsgSecurityStatusRequest) (*MsgSecurityStatusRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityStatusRequest not implemented")
}
func (*UnimplementedMsgServer) SecurityStatusResponse(ctx context.Context, req *MsgSecurityStatusResponse) (*MsgSecurityStatusResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityStatusResponse not implemented")
}
func (*UnimplementedMsgServer) SecurityStatusRequestReject(ctx context.Context, req *MsgSecurityStatusRequestReject) (*MsgSecurityStatusRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityStatusRequestReject not implemented")
}
func (*UnimplementedMsgServer) SecurityTypesRequest(ctx context.Context, req *MsgSecurityTypesRequest) (*MsgSecurityTypesRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityTypesRequest not implemented")
}
func (*UnimplementedMsgServer) SecurityTypesResponse(ctx context.Context, req *MsgSecurityTypesResponse) (*MsgSecurityTypesResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityTypesResponse not implemented")
}
func (*UnimplementedMsgServer) SecurityTypesRequestReject(ctx context.Context, req *MsgSecurityTypesRequestReject) (*MsgSecurityTypesRequestRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityTypesRequestReject not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_LogonInitiator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogonInitiator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogonInitiator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/LogonInitiator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogonInitiator(ctx, req.(*MsgLogonInitiator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LogonAcceptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogonAcceptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogonAcceptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/LogonAcceptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogonAcceptor(ctx, req.(*MsgLogonAcceptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TerminateLogon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTerminateLogon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TerminateLogon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TerminateLogon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TerminateLogon(ctx, req.(*MsgTerminateLogon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LogonReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogonReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogonReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/LogonReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogonReject(ctx, req.(*MsgLogonReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LogoutInitiator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogoutInitiator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogoutInitiator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/LogoutInitiator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogoutInitiator(ctx, req.(*MsgLogoutInitiator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LogoutAcceptor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLogoutAcceptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LogoutAcceptor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/LogoutAcceptor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LogoutAcceptor(ctx, req.(*MsgLogoutAcceptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewOrderSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewOrderSingle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewOrderSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/NewOrderSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewOrderSingle(ctx, req.(*MsgNewOrderSingle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OrderCancelRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOrderCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OrderCancelRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/OrderCancelRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OrderCancelRequest(ctx, req.(*MsgOrderCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OrderCancelReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOrderCancelReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OrderCancelReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/OrderCancelReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OrderCancelReject(ctx, req.(*MsgOrderCancelReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OrderExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOrderExecutionReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OrderExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/OrderExecutionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OrderExecutionReport(ctx, req.(*MsgOrderExecutionReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_QuoteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).QuoteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/QuoteRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).QuoteRequest(ctx, req.(*MsgQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_QuoteAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgQuoteAcknowledgement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).QuoteAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/QuoteAcknowledgement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).QuoteAcknowledgement(ctx, req.(*MsgQuoteAcknowledgement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_QuoteRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgQuoteRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).QuoteRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/QuoteRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).QuoteRequestReject(ctx, req.(*MsgQuoteRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradeCaptureReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradeCaptureReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradeCaptureReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradeCaptureReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradeCaptureReport(ctx, req.(*MsgTradeCaptureReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradeCaptureReportAcknowledgement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradeCaptureReportAcknowledgement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradeCaptureReportAcknowledgement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradeCaptureReportAcknowledgement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradeCaptureReportAcknowledgement(ctx, req.(*MsgTradeCaptureReportAcknowledgement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradeCaptureReportRejection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradeCaptureReportRejection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradeCaptureReportRejection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradeCaptureReportRejection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradeCaptureReportRejection(ctx, req.(*MsgTradeCaptureReportRejection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketDataRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketDataRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/MarketDataRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketDataRequest(ctx, req.(*MsgMarketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketDataSnapshotFullRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketDataSnapshotFullRefresh)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketDataSnapshotFullRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/MarketDataSnapshotFullRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketDataSnapshotFullRefresh(ctx, req.(*MsgMarketDataSnapshotFullRefresh))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketDataIncremental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketDataIncremental)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketDataIncremental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/MarketDataIncremental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketDataIncremental(ctx, req.(*MsgMarketDataIncremental))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MarketDataRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMarketDataRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MarketDataRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/MarketDataRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MarketDataRequestReject(ctx, req.(*MsgMarketDataRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityDefinitionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityDefinitionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityDefinitionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityDefinitionRequest(ctx, req.(*MsgSecurityDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityDefinition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityDefinition(ctx, req.(*MsgSecurityDefinition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityDefinitionRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityDefinitionRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityDefinitionRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityDefinitionRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityDefinitionRequestReject(ctx, req.(*MsgSecurityDefinitionRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OrderMassStatusRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOrderMassStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OrderMassStatusRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/OrderMassStatusRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OrderMassStatusRequest(ctx, req.(*MsgOrderMassStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OrderMassStatusReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOrderMassStatusReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OrderMassStatusReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/OrderMassStatusReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OrderMassStatusReport(ctx, req.(*MsgOrderMassStatusReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OrderMassStatusRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOrderMassStatusRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OrderMassStatusRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/OrderMassStatusRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OrderMassStatusRequestReject(ctx, req.(*MsgOrderMassStatusRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradingSessionStatusRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradingSessionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradingSessionStatusRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradingSessionStatusRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradingSessionStatusRequest(ctx, req.(*MsgTradingSessionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradingSessionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradingSessionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradingSessionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradingSessionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradingSessionStatus(ctx, req.(*MsgTradingSessionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradingSessionStatusRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradingSessionStatusRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradingSessionStatusRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradingSessionStatusRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradingSessionStatusRequestReject(ctx, req.(*MsgTradingSessionStatusRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradingSessionListRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradingSessionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradingSessionListRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradingSessionListRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradingSessionListRequest(ctx, req.(*MsgTradingSessionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradingSessionListResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradingSessionListResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradingSessionListResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradingSessionListResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradingSessionListResponse(ctx, req.(*MsgTradingSessionListResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TradingSessionListRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTradingSessionListRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TradingSessionListRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/TradingSessionListRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TradingSessionListRequestReject(ctx, req.(*MsgTradingSessionListRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityListRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityListRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityListRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityListRequest(ctx, req.(*MsgSecurityListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityListResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityListResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityListResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityListResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityListResponse(ctx, req.(*MsgSecurityListResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityListRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityListRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityListRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityListRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityListRequestReject(ctx, req.(*MsgSecurityListRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityStatusRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityStatusRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityStatusRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityStatusRequest(ctx, req.(*MsgSecurityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityStatusResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityStatusResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityStatusResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityStatusResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityStatusResponse(ctx, req.(*MsgSecurityStatusResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityStatusRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityStatusRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityStatusRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityStatusRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityStatusRequestReject(ctx, req.(*MsgSecurityStatusRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityTypesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityTypesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityTypesRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityTypesRequest(ctx, req.(*MsgSecurityTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityTypesResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityTypesResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityTypesResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityTypesResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityTypesResponse(ctx, req.(*MsgSecurityTypesResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SecurityTypesRequestReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSecurityTypesRequestReject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SecurityTypesRequestReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Msg/SecurityTypesRequestReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SecurityTypesRequestReject(ctx, req.(*MsgSecurityTypesRequestReject))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jim380.re.fix.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogonInitiator",
			Handler:    _Msg_LogonInitiator_Handler,
		},
		{
			MethodName: "LogonAcceptor",
			Handler:    _Msg_LogonAcceptor_Handler,
		},
		{
			MethodName: "TerminateLogon",
			Handler:    _Msg_TerminateLogon_Handler,
		},
		{
			MethodName: "LogonReject",
			Handler:    _Msg_LogonReject_Handler,
		},
		{
			MethodName: "LogoutInitiator",
			Handler:    _Msg_LogoutInitiator_Handler,
		},
		{
			MethodName: "LogoutAcceptor",
			Handler:    _Msg_LogoutAcceptor_Handler,
		},
		{
			MethodName: "NewOrderSingle",
			Handler:    _Msg_NewOrderSingle_Handler,
		},
		{
			MethodName: "OrderCancelRequest",
			Handler:    _Msg_OrderCancelRequest_Handler,
		},
		{
			MethodName: "OrderCancelReject",
			Handler:    _Msg_OrderCancelReject_Handler,
		},
		{
			MethodName: "OrderExecutionReport",
			Handler:    _Msg_OrderExecutionReport_Handler,
		},
		{
			MethodName: "QuoteRequest",
			Handler:    _Msg_QuoteRequest_Handler,
		},
		{
			MethodName: "QuoteAcknowledgement",
			Handler:    _Msg_QuoteAcknowledgement_Handler,
		},
		{
			MethodName: "QuoteRequestReject",
			Handler:    _Msg_QuoteRequestReject_Handler,
		},
		{
			MethodName: "TradeCaptureReport",
			Handler:    _Msg_TradeCaptureReport_Handler,
		},
		{
			MethodName: "TradeCaptureReportAcknowledgement",
			Handler:    _Msg_TradeCaptureReportAcknowledgement_Handler,
		},
		{
			MethodName: "TradeCaptureReportRejection",
			Handler:    _Msg_TradeCaptureReportRejection_Handler,
		},
		{
			MethodName: "MarketDataRequest",
			Handler:    _Msg_MarketDataRequest_Handler,
		},
		{
			MethodName: "MarketDataSnapshotFullRefresh",
			Handler:    _Msg_MarketDataSnapshotFullRefresh_Handler,
		},
		{
			MethodName: "MarketDataIncremental",
			Handler:    _Msg_MarketDataIncremental_Handler,
		},
		{
			MethodName: "MarketDataRequestReject",
			Handler:    _Msg_MarketDataRequestReject_Handler,
		},
		{
			MethodName: "SecurityDefinitionRequest",
			Handler:    _Msg_SecurityDefinitionRequest_Handler,
		},
		{
			MethodName: "SecurityDefinition",
			Handler:    _Msg_SecurityDefinition_Handler,
		},
		{
			MethodName: "SecurityDefinitionRequestReject",
			Handler:    _Msg_SecurityDefinitionRequestReject_Handler,
		},
		{
			MethodName: "OrderMassStatusRequest",
			Handler:    _Msg_OrderMassStatusRequest_Handler,
		},
		{
			MethodName: "OrderMassStatusReport",
			Handler:    _Msg_OrderMassStatusReport_Handler,
		},
		{
			MethodName: "OrderMassStatusRequestReject",
			Handler:    _Msg_OrderMassStatusRequestReject_Handler,
		},
		{
			MethodName: "TradingSessionStatusRequest",
			Handler:    _Msg_TradingSessionStatusRequest_Handler,
		},
		{
			MethodName: "TradingSessionStatus",
			Handler:    _Msg_TradingSessionStatus_Handler,
		},
		{
			MethodName: "TradingSessionStatusRequestReject",
			Handler:    _Msg_TradingSessionStatusRequestReject_Handler,
		},
		{
			MethodName: "TradingSessionListRequest",
			Handler:    _Msg_TradingSessionListRequest_Handler,
		},
		{
			MethodName: "TradingSessionListResponse",
			Handler:    _Msg_TradingSessionListResponse_Handler,
		},
		{
			MethodName: "TradingSessionListRequestReject",
			Handler:    _Msg_TradingSessionListRequestReject_Handler,
		},
		{
			MethodName: "SecurityListRequest",
			Handler:    _Msg_SecurityListRequest_Handler,
		},
		{
			MethodName: "SecurityListResponse",
			Handler:    _Msg_SecurityListResponse_Handler,
		},
		{
			MethodName: "SecurityListRequestReject",
			Handler:    _Msg_SecurityListRequestReject_Handler,
		},
		{
			MethodName: "SecurityStatusRequest",
			Handler:    _Msg_SecurityStatusRequest_Handler,
		},
		{
			MethodName: "SecurityStatusResponse",
			Handler:    _Msg_SecurityStatusResponse_Handler,
		},
		{
			MethodName: "SecurityStatusRequestReject",
			Handler:    _Msg_SecurityStatusRequestReject_Handler,
		},
		{
			MethodName: "SecurityTypesRequest",
			Handler:    _Msg_SecurityTypesRequest_Handler,
		},
		{
			MethodName: "SecurityTypesResponse",
			Handler:    _Msg_SecurityTypesResponse_Handler,
		},
		{
			MethodName: "SecurityTypesRequestReject",
			Handler:    _Msg_SecurityTypesRequestReject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "re/fix/tx.proto",
}

func (m *MsgDeleteAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLogonInitiator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogonInitiator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogonInitiator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InitiatorAddress) > 0 {
		i -= len(m.InitiatorAddress)
		copy(dAtA[i:], m.InitiatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitiatorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsAccepted {
		i--
		if m.IsAccepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LogonInitiator != nil {
		{
			size, err := m.LogonInitiator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLogonInitiatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogonInitiatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogonInitiatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLogonAcceptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogonAcceptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogonAcceptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptorAddress) > 0 {
		i -= len(m.AcceptorAddress)
		copy(dAtA[i:], m.AcceptorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AcceptorAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsAccepted {
		i--
		if m.IsAccepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LogonAcceptor != nil {
		{
			size, err := m.LogonAcceptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLogonAcceptorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogonAcceptorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogonAcceptorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTerminateLogon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminateLogon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminateLogon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InitiatorAddress) > 0 {
		i -= len(m.InitiatorAddress)
		copy(dAtA[i:], m.InitiatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitiatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTerminateLogonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminateLogonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminateLogonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLogonReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogonReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogonReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AcceptorAddress) > 0 {
		i -= len(m.AcceptorAddress)
		copy(dAtA[i:], m.AcceptorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AcceptorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLogonRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogonRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogonRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLogoutInitiator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogoutInitiator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogoutInitiator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionLogoutInitiator != nil {
		{
			size, err := m.SessionLogoutInitiator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InitiatorAddress) > 0 {
		i -= len(m.InitiatorAddress)
		copy(dAtA[i:], m.InitiatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InitiatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLogoutInitiatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogoutInitiatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogoutInitiatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLogoutAcceptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogoutAcceptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogoutAcceptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionLogoutAcceptor != nil {
		{
			size, err := m.SessionLogoutAcceptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AcceptorAddress) > 0 {
		i -= len(m.AcceptorAddress)
		copy(dAtA[i:], m.AcceptorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AcceptorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLogoutAcceptorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLogoutAcceptorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLogoutAcceptorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewOrderSingle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewOrderSingle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewOrderSingle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x72
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x4a
	}
	if m.OrdType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrdType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.OrderQty) > 0 {
		i -= len(m.OrderQty)
		copy(dAtA[i:], m.OrderQty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderQty)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Side != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x22
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewOrderSingleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewOrderSingleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewOrderSingleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOrderCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderCancelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrigClOrdID) > 0 {
		i -= len(m.OrigClOrdID)
		copy(dAtA[i:], m.OrigClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrigClOrdID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOrderCancelRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderCancelRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderCancelRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOrderCancelReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderCancelReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderCancelReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x42
	}
	if m.CxlRejResponseTo != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CxlRejResponseTo))
		i--
		dAtA[i] = 0x38
	}
	if m.CxlRejReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CxlRejReason))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrigClOrdID) > 0 {
		i -= len(m.OrigClOrdID)
		copy(dAtA[i:], m.OrigClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrigClOrdID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOrderCancelRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderCancelRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderCancelRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOrderExecutionReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderExecutionReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderExecutionReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.AvgPx != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AvgPx))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.CumQty != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CumQty))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.LeavesQty != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LeavesQty))
		i--
		dAtA[i] = 0x78
	}
	if m.LastQty != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LastQty))
		i--
		dAtA[i] = 0x70
	}
	if m.LastPx != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LastPx))
		i--
		dAtA[i] = 0x68
	}
	if m.TimeInForce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OrderQty) > 0 {
		i -= len(m.OrderQty)
		copy(dAtA[i:], m.OrderQty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderQty)))
		i--
		dAtA[i] = 0x52
	}
	if m.Side != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ExecType) > 0 {
		i -= len(m.ExecType)
		copy(dAtA[i:], m.ExecType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OrdStatus) > 0 {
		i -= len(m.OrdStatus)
		copy(dAtA[i:], m.OrdStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrdStatus)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ExecID) > 0 {
		i -= len(m.ExecID)
		copy(dAtA[i:], m.ExecID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOrderExecutionReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderExecutionReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderExecutionReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgQuoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQuoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQuoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.QuoteRequest != nil {
		{
			size, err := m.QuoteRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgQuoteRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQuoteRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQuoteRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgQuoteAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQuoteAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQuoteAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuoteAcknowledgement != nil {
		{
			size, err := m.QuoteAcknowledgement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgQuoteAcknowledgementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQuoteAcknowledgementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQuoteAcknowledgementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgQuoteRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQuoteRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQuoteRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuoteRequestReject != nil {
		{
			size, err := m.QuoteRequestReject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgQuoteRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgQuoteRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgQuoteRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradeCaptureReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradeCaptureReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradeCaptureReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.SettlDate) > 0 {
		i -= len(m.SettlDate)
		copy(dAtA[i:], m.SettlDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SettlDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.SettlType) > 0 {
		i -= len(m.SettlType)
		copy(dAtA[i:], m.SettlType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SettlType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.TradeDate) > 0 {
		i -= len(m.TradeDate)
		copy(dAtA[i:], m.TradeDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SecurityIDSource) > 0 {
		i -= len(m.SecurityIDSource)
		copy(dAtA[i:], m.SecurityIDSource)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityIDSource)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.OrigTradeID) > 0 {
		i -= len(m.OrigTradeID)
		copy(dAtA[i:], m.OrigTradeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrigTradeID)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TradeID) > 0 {
		i -= len(m.TradeID)
		copy(dAtA[i:], m.TradeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeID)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ExecID) > 0 {
		i -= len(m.ExecID)
		copy(dAtA[i:], m.ExecID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.GrossTradeAmt) > 0 {
		i -= len(m.GrossTradeAmt)
		copy(dAtA[i:], m.GrossTradeAmt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GrossTradeAmt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.LastPx) > 0 {
		i -= len(m.LastPx)
		copy(dAtA[i:], m.LastPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastPx)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.LastQty) > 0 {
		i -= len(m.LastQty)
		copy(dAtA[i:], m.LastQty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastQty)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OrderQty) > 0 {
		i -= len(m.OrderQty)
		copy(dAtA[i:], m.OrderQty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderQty)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Side) > 0 {
		i -= len(m.Side)
		copy(dAtA[i:], m.Side)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Side)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrdSubType) > 0 {
		i -= len(m.TrdSubType)
		copy(dAtA[i:], m.TrdSubType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrdSubType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TrdType) > 0 {
		i -= len(m.TrdType)
		copy(dAtA[i:], m.TrdType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrdType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TradeReportType) > 0 {
		i -= len(m.TradeReportType)
		copy(dAtA[i:], m.TradeReportType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TradeReportTransType) > 0 {
		i -= len(m.TradeReportTransType)
		copy(dAtA[i:], m.TradeReportTransType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportTransType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradeReportID) > 0 {
		i -= len(m.TradeReportID)
		copy(dAtA[i:], m.TradeReportID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradeCaptureReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradeCaptureReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradeCaptureReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradeCaptureReportAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradeCaptureReportAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradeCaptureReportAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x72
	}
	if m.TradeReportRejectReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TradeReportRejectReason))
		i--
		dAtA[i] = 0x68
	}
	if len(m.TradeTransType) > 0 {
		i -= len(m.TradeTransType)
		copy(dAtA[i:], m.TradeTransType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeTransType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TradeReportStatus) > 0 {
		i -= len(m.TradeReportStatus)
		copy(dAtA[i:], m.TradeReportStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportStatus)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SecondaryTradeReportID) > 0 {
		i -= len(m.SecondaryTradeReportID)
		copy(dAtA[i:], m.SecondaryTradeReportID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecondaryTradeReportID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TradeReportRefID) > 0 {
		i -= len(m.TradeReportRefID)
		copy(dAtA[i:], m.TradeReportRefID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportRefID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ExecType) > 0 {
		i -= len(m.ExecType)
		copy(dAtA[i:], m.ExecType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TrdSubType) > 0 {
		i -= len(m.TrdSubType)
		copy(dAtA[i:], m.TrdSubType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrdSubType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TrdType) > 0 {
		i -= len(m.TrdType)
		copy(dAtA[i:], m.TrdType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TrdType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TradeReportType) > 0 {
		i -= len(m.TradeReportType)
		copy(dAtA[i:], m.TradeReportType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecondaryTradeID) > 0 {
		i -= len(m.SecondaryTradeID)
		copy(dAtA[i:], m.SecondaryTradeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecondaryTradeID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TradeID) > 0 {
		i -= len(m.TradeID)
		copy(dAtA[i:], m.TradeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradeReportID) > 0 {
		i -= len(m.TradeReportID)
		copy(dAtA[i:], m.TradeReportID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradeCaptureReportAcknowledgementResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradeCaptureReportAcknowledgementResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradeCaptureReportAcknowledgementResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradeCaptureReportRejection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradeCaptureReportRejection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradeCaptureReportRejection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TradeReportRejectRefID) > 0 {
		i -= len(m.TradeReportRejectRefID)
		copy(dAtA[i:], m.TradeReportRejectRefID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportRejectRefID)))
		i--
		dAtA[i] = 0x22
	}
	if m.TradeReportRejectReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TradeReportRejectReason))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TradeReportID) > 0 {
		i -= len(m.TradeReportID)
		copy(dAtA[i:], m.TradeReportID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradeReportID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradeCaptureReportRejectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradeCaptureReportRejectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradeCaptureReportRejectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NoRelatedSym != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NoRelatedSym))
		i--
		dAtA[i] = 0x30
	}
	if m.MdUpdateType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MdUpdateType))
		i--
		dAtA[i] = 0x28
	}
	if m.MarketDepth != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MarketDepth))
		i--
		dAtA[i] = 0x20
	}
	if m.SubscriptionRequestType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubscriptionRequestType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataSnapshotFullRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataSnapshotFullRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataSnapshotFullRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MdEntries) > 0 {
		for iNdEx := len(m.MdEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MdEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NoMDEntries != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NoMDEntries))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataSnapshotFullRefreshResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataSnapshotFullRefreshResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataSnapshotFullRefreshResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataIncremental) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataIncremental) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataIncremental) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MdEntries) > 0 {
		for iNdEx := len(m.MdEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MdEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NoMDEntries != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NoMDEntries))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataIncrementalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataIncrementalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataIncrementalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if m.MdReqRejReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MdReqRejReason))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMarketDataRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMarketDataRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMarketDataRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityDefinitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityDefinitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityDefinitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityType) > 0 {
		i -= len(m.SecurityType)
		copy(dAtA[i:], m.SecurityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityDesc) > 0 {
		i -= len(m.SecurityDesc)
		copy(dAtA[i:], m.SecurityDesc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityDesc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityRequestType) > 0 {
		i -= len(m.SecurityRequestType)
		copy(dAtA[i:], m.SecurityRequestType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityRequestType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityDefinitionRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityDefinitionRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityDefinitionRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.SecurityExchangeID) > 0 {
		i -= len(m.SecurityExchangeID)
		copy(dAtA[i:], m.SecurityExchangeID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityExchangeID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.CreditRating) > 0 {
		i -= len(m.CreditRating)
		copy(dAtA[i:], m.CreditRating)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreditRating)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Factor) > 0 {
		i -= len(m.Factor)
		copy(dAtA[i:], m.Factor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Factor)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.CouponRate) > 0 {
		i -= len(m.CouponRate)
		copy(dAtA[i:], m.CouponRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CouponRate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.MaturityMonthYear) > 0 {
		i -= len(m.MaturityMonthYear)
		copy(dAtA[i:], m.MaturityMonthYear)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MaturityMonthYear)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.SettlDate) > 0 {
		i -= len(m.SettlDate)
		copy(dAtA[i:], m.SettlDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SettlDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.SettlType) > 0 {
		i -= len(m.SettlType)
		copy(dAtA[i:], m.SettlType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SettlType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PriceUnitOfMeasure) > 0 {
		i -= len(m.PriceUnitOfMeasure)
		copy(dAtA[i:], m.PriceUnitOfMeasure)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PriceUnitOfMeasure)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.UnitOfMeasure) > 0 {
		i -= len(m.UnitOfMeasure)
		copy(dAtA[i:], m.UnitOfMeasure)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnitOfMeasure)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MinPriceIncrementAmount) > 0 {
		i -= len(m.MinPriceIncrementAmount)
		copy(dAtA[i:], m.MinPriceIncrementAmount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinPriceIncrementAmount)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MinPriceIncrement) > 0 {
		i -= len(m.MinPriceIncrement)
		copy(dAtA[i:], m.MinPriceIncrement)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinPriceIncrement)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ContractMultiplier) > 0 {
		i -= len(m.ContractMultiplier)
		copy(dAtA[i:], m.ContractMultiplier)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ContractMultiplier)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SecurityType) > 0 {
		i -= len(m.SecurityType)
		copy(dAtA[i:], m.SecurityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityDesc) > 0 {
		i -= len(m.SecurityDesc)
		copy(dAtA[i:], m.SecurityDesc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityDesc)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityResponseType) > 0 {
		i -= len(m.SecurityResponseType)
		copy(dAtA[i:], m.SecurityResponseType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityResponseType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityResponseID) > 0 {
		i -= len(m.SecurityResponseID)
		copy(dAtA[i:], m.SecurityResponseID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityResponseID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityDefinitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityDefinitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityDefinitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityDefinitionRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityDefinitionRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityDefinitionRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SecurityRequestErrorCode) > 0 {
		i -= len(m.SecurityRequestErrorCode)
		copy(dAtA[i:], m.SecurityRequestErrorCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityRequestErrorCode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityRequestError) > 0 {
		i -= len(m.SecurityRequestError)
		copy(dAtA[i:], m.SecurityRequestError)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityRequestError)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityRequestResult) > 0 {
		i -= len(m.SecurityRequestResult)
		copy(dAtA[i:], m.SecurityRequestResult)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityRequestResult)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityDefinitionRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityDefinitionRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityDefinitionRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOrderMassStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderMassStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderMassStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MassStatusReqType) > 0 {
		i -= len(m.MassStatusReqType)
		copy(dAtA[i:], m.MassStatusReqType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MassStatusReqType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MassStatusReqID) > 0 {
		i -= len(m.MassStatusReqID)
		copy(dAtA[i:], m.MassStatusReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MassStatusReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOrderMassStatusRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderMassStatusRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderMassStatusRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOrderMassStatusReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderMassStatusReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderMassStatusReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeavesQty) > 0 {
		i -= len(m.LeavesQty)
		copy(dAtA[i:], m.LeavesQty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LeavesQty)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.AvgPx) > 0 {
		i -= len(m.AvgPx)
		copy(dAtA[i:], m.AvgPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AvgPx)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CumQty) > 0 {
		i -= len(m.CumQty)
		copy(dAtA[i:], m.CumQty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CumQty)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastPx) > 0 {
		i -= len(m.LastPx)
		copy(dAtA[i:], m.LastPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastPx)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OrdQty) > 0 {
		i -= len(m.OrdQty)
		copy(dAtA[i:], m.OrdQty)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrdQty)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ExecType) > 0 {
		i -= len(m.ExecType)
		copy(dAtA[i:], m.ExecType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExecType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.OrdStatus) > 0 {
		i -= len(m.OrdStatus)
		copy(dAtA[i:], m.OrdStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrdStatus)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MassStatusReqID) > 0 {
		i -= len(m.MassStatusReqID)
		copy(dAtA[i:], m.MassStatusReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MassStatusReqID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOrderMassStatusReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderMassStatusReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderMassStatusReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOrderMassStatusRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderMassStatusRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderMassStatusRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RejCode) > 0 {
		i -= len(m.RejCode)
		copy(dAtA[i:], m.RejCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RejCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RefSeqID) > 0 {
		i -= len(m.RefSeqID)
		copy(dAtA[i:], m.RefSeqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefSeqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOrderMassStatusRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOrderMassStatusRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOrderMassStatusRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ExpirationDate) > 0 {
		i -= len(m.ExpirationDate)
		copy(dAtA[i:], m.ExpirationDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpirationDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.TradingSessionSubTime) > 0 {
		i -= len(m.TradingSessionSubTime)
		copy(dAtA[i:], m.TradingSessionSubTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.TradingSessionTime) > 0 {
		i -= len(m.TradingSessionTime)
		copy(dAtA[i:], m.TradingSessionTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.TradingSessionDate) > 0 {
		i -= len(m.TradingSessionDate)
		copy(dAtA[i:], m.TradingSessionDate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionDate)))
		i--
		dAtA[i] = 0x7a
	}
	if m.TradSesMode != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TradSesMode))
		i--
		dAtA[i] = 0x70
	}
	if m.TradSesSubReqType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TradSesSubReqType))
		i--
		dAtA[i] = 0x68
	}
	if m.TradSesReqType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TradSesReqType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.MarketSegmentID) > 0 {
		i -= len(m.MarketSegmentID)
		copy(dAtA[i:], m.MarketSegmentID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketSegmentID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityIDSource) > 0 {
		i -= len(m.SecurityIDSource)
		copy(dAtA[i:], m.SecurityIDSource)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityIDSource)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SubscriptionRequest) > 0 {
		i -= len(m.SubscriptionRequest)
		copy(dAtA[i:], m.SubscriptionRequest)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequest)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MarketID) > 0 {
		i -= len(m.MarketID)
		copy(dAtA[i:], m.MarketID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionStatusRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionStatusRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionStatusRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.MarketID) > 0 {
		i -= len(m.MarketID)
		copy(dAtA[i:], m.MarketID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.MarketSegmentID) > 0 {
		i -= len(m.MarketSegmentID)
		copy(dAtA[i:], m.MarketSegmentID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketSegmentID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.SecurityIDSource) > 0 {
		i -= len(m.SecurityIDSource)
		copy(dAtA[i:], m.SecurityIDSource)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityIDSource)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TradSesLowPx) > 0 {
		i -= len(m.TradSesLowPx)
		copy(dAtA[i:], m.TradSesLowPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesLowPx)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TradSesHighPx) > 0 {
		i -= len(m.TradSesHighPx)
		copy(dAtA[i:], m.TradSesHighPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesHighPx)))
		i--
		dAtA[i] = 0x62
	}
	if m.TotalVolumeTraded != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalVolumeTraded))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TradSesEndTime) > 0 {
		i -= len(m.TradSesEndTime)
		copy(dAtA[i:], m.TradSesEndTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesEndTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TradSesCloseTime) > 0 {
		i -= len(m.TradSesCloseTime)
		copy(dAtA[i:], m.TradSesCloseTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesCloseTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TradSesPreCloseTime) > 0 {
		i -= len(m.TradSesPreCloseTime)
		copy(dAtA[i:], m.TradSesPreCloseTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesPreCloseTime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TradSesOpenTime) > 0 {
		i -= len(m.TradSesOpenTime)
		copy(dAtA[i:], m.TradSesOpenTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesOpenTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TradSesStartTime) > 0 {
		i -= len(m.TradSesStartTime)
		copy(dAtA[i:], m.TradSesStartTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesStartTime)))
		i--
		dAtA[i] = 0x32
	}
	if m.TradSesStatusRejReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TradSesStatusRejReason))
		i--
		dAtA[i] = 0x28
	}
	if m.TradSesStatus != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TradSesStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionStatusRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionStatusRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionStatusRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SessionRejectReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SessionRejectReason))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefMsgType) > 0 {
		i -= len(m.RefMsgType)
		copy(dAtA[i:], m.RefMsgType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefMsgType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RefSeqNum) > 0 {
		i -= len(m.RefSeqNum)
		copy(dAtA[i:], m.RefSeqNum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RefSeqNum)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionStatusRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionStatusRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionStatusRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionRequestType) > 0 {
		i -= len(m.SubscriptionRequestType)
		copy(dAtA[i:], m.SubscriptionRequestType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TradSesMode) > 0 {
		i -= len(m.TradSesMode)
		copy(dAtA[i:], m.TradSesMode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesMode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TradSesMethod) > 0 {
		i -= len(m.TradSesMethod)
		copy(dAtA[i:], m.TradSesMethod)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesMethod)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionListRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionListRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionListRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradSesEndTime) > 0 {
		i -= len(m.TradSesEndTime)
		copy(dAtA[i:], m.TradSesEndTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesEndTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.TradSesCloseTime) > 0 {
		i -= len(m.TradSesCloseTime)
		copy(dAtA[i:], m.TradSesCloseTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesCloseTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.TradSesPreCloseTime) > 0 {
		i -= len(m.TradSesPreCloseTime)
		copy(dAtA[i:], m.TradSesPreCloseTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesPreCloseTime)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TradSesOpenTime) > 0 {
		i -= len(m.TradSesOpenTime)
		copy(dAtA[i:], m.TradSesOpenTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesOpenTime)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TradSesStartTime) > 0 {
		i -= len(m.TradSesStartTime)
		copy(dAtA[i:], m.TradSesStartTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesStartTime)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TradSesStatusRejReason) > 0 {
		i -= len(m.TradSesStatusRejReason)
		copy(dAtA[i:], m.TradSesStatusRejReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesStatusRejReason)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TradSesStatus) > 0 {
		i -= len(m.TradSesStatus)
		copy(dAtA[i:], m.TradSesStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesStatus)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UnsolicitedIndicator) > 0 {
		i -= len(m.UnsolicitedIndicator)
		copy(dAtA[i:], m.UnsolicitedIndicator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnsolicitedIndicator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TradSesMode) > 0 {
		i -= len(m.TradSesMode)
		copy(dAtA[i:], m.TradSesMode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesMode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TradSesMethod) > 0 {
		i -= len(m.TradSesMethod)
		copy(dAtA[i:], m.TradSesMethod)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesMethod)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoTradingSessions) > 0 {
		i -= len(m.NoTradingSessions)
		copy(dAtA[i:], m.NoTradingSessions)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoTradingSessions)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionListResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionListResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionListResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionListRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionListRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionListRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TradSesStatusRejReason) > 0 {
		i -= len(m.TradSesStatusRejReason)
		copy(dAtA[i:], m.TradSesStatusRejReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesStatusRejReason)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TradSesStatus) > 0 {
		i -= len(m.TradSesStatus)
		copy(dAtA[i:], m.TradSesStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTradingSessionListRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTradingSessionListRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTradingSessionListRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionRequestType) > 0 {
		i -= len(m.SubscriptionRequestType)
		copy(dAtA[i:], m.SubscriptionRequestType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestType)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.EncodedText) > 0 {
		i -= len(m.EncodedText)
		copy(dAtA[i:], m.EncodedText)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncodedText)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EncodedTextLen) > 0 {
		i -= len(m.EncodedTextLen)
		copy(dAtA[i:], m.EncodedTextLen)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncodedTextLen)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NoLegs) > 0 {
		i -= len(m.NoLegs)
		copy(dAtA[i:], m.NoLegs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoLegs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NoUnderlyings) > 0 {
		i -= len(m.NoUnderlyings)
		copy(dAtA[i:], m.NoUnderlyings)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoUnderlyings)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityListRequestType) > 0 {
		i -= len(m.SecurityListRequestType)
		copy(dAtA[i:], m.SecurityListRequestType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityListRequestType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityListRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityListRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityListRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncodedText) > 0 {
		i -= len(m.EncodedText)
		copy(dAtA[i:], m.EncodedText)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncodedText)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.EncodedTextLen) > 0 {
		i -= len(m.EncodedTextLen)
		copy(dAtA[i:], m.EncodedTextLen)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncodedTextLen)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ExpirationCycle) > 0 {
		i -= len(m.ExpirationCycle)
		copy(dAtA[i:], m.ExpirationCycle)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpirationCycle)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.MinTradeVol) > 0 {
		i -= len(m.MinTradeVol)
		copy(dAtA[i:], m.MinTradeVol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MinTradeVol)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.RoundLot) > 0 {
		i -= len(m.RoundLot)
		copy(dAtA[i:], m.RoundLot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RoundLot)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.NoLegs) > 0 {
		i -= len(m.NoLegs)
		copy(dAtA[i:], m.NoLegs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoLegs)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NoUnderlyings) > 0 {
		i -= len(m.NoUnderlyings)
		copy(dAtA[i:], m.NoUnderlyings)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoUnderlyings)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NoRelatedSym) > 0 {
		i -= len(m.NoRelatedSym)
		copy(dAtA[i:], m.NoRelatedSym)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoRelatedSym)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastFragment) > 0 {
		i -= len(m.LastFragment)
		copy(dAtA[i:], m.LastFragment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastFragment)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TotNoRelatedSym) > 0 {
		i -= len(m.TotNoRelatedSym)
		copy(dAtA[i:], m.TotNoRelatedSym)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TotNoRelatedSym)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityRequestResult) > 0 {
		i -= len(m.SecurityRequestResult)
		copy(dAtA[i:], m.SecurityRequestResult)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityRequestResult)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityResponseID) > 0 {
		i -= len(m.SecurityResponseID)
		copy(dAtA[i:], m.SecurityResponseID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityResponseID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityListResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityListResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityListResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityListRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityListRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityListRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncodedText) > 0 {
		i -= len(m.EncodedText)
		copy(dAtA[i:], m.EncodedText)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncodedText)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EncodedTextLen) > 0 {
		i -= len(m.EncodedTextLen)
		copy(dAtA[i:], m.EncodedTextLen)
		i = encodeVarintTx(dAtA, i, uint64(len(m.EncodedTextLen)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityRequestResult) > 0 {
		i -= len(m.SecurityRequestResult)
		copy(dAtA[i:], m.SecurityRequestResult)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityRequestResult)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityListRequestType) > 0 {
		i -= len(m.SecurityListRequestType)
		copy(dAtA[i:], m.SecurityListRequestType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityListRequestType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityListRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityListRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityListRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SubscriptionRequestType) > 0 {
		i -= len(m.SubscriptionRequestType)
		copy(dAtA[i:], m.SubscriptionRequestType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.InstrumentLeg) > 0 {
		i -= len(m.InstrumentLeg)
		copy(dAtA[i:], m.InstrumentLeg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InstrumentLeg)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NoLegs) > 0 {
		i -= len(m.NoLegs)
		copy(dAtA[i:], m.NoLegs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoLegs)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UnderlyingInstrument) > 0 {
		i -= len(m.UnderlyingInstrument)
		copy(dAtA[i:], m.UnderlyingInstrument)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnderlyingInstrument)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NoUnderlyings) > 0 {
		i -= len(m.NoUnderlyings)
		copy(dAtA[i:], m.NoUnderlyings)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoUnderlyings)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Instrument) > 0 {
		i -= len(m.Instrument)
		copy(dAtA[i:], m.Instrument)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Instrument)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityStatusReqID) > 0 {
		i -= len(m.SecurityStatusReqID)
		copy(dAtA[i:], m.SecurityStatusReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityStatusReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityStatusRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityStatusRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityStatusRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Adjustment) > 0 {
		i -= len(m.Adjustment)
		copy(dAtA[i:], m.Adjustment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Adjustment)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.LastPx) > 0 {
		i -= len(m.LastPx)
		copy(dAtA[i:], m.LastPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastPx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.LowPx) > 0 {
		i -= len(m.LowPx)
		copy(dAtA[i:], m.LowPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LowPx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.HighPx) > 0 {
		i -= len(m.HighPx)
		copy(dAtA[i:], m.HighPx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HighPx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.SellVolume) > 0 {
		i -= len(m.SellVolume)
		copy(dAtA[i:], m.SellVolume)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SellVolume)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.BuyVolume) > 0 {
		i -= len(m.BuyVolume)
		copy(dAtA[i:], m.BuyVolume)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BuyVolume)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.DueToRelated) > 0 {
		i -= len(m.DueToRelated)
		copy(dAtA[i:], m.DueToRelated)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DueToRelated)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.InViewOfCommon) > 0 {
		i -= len(m.InViewOfCommon)
		copy(dAtA[i:], m.InViewOfCommon)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InViewOfCommon)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.HaltReason) > 0 {
		i -= len(m.HaltReason)
		copy(dAtA[i:], m.HaltReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HaltReason)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.CorporateAction) > 0 {
		i -= len(m.CorporateAction)
		copy(dAtA[i:], m.CorporateAction)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CorporateAction)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.FinancialStatus) > 0 {
		i -= len(m.FinancialStatus)
		copy(dAtA[i:], m.FinancialStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FinancialStatus)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SecurityTradingStatus) > 0 {
		i -= len(m.SecurityTradingStatus)
		copy(dAtA[i:], m.SecurityTradingStatus)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityTradingStatus)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UnsolicitedIndicator) > 0 {
		i -= len(m.UnsolicitedIndicator)
		copy(dAtA[i:], m.UnsolicitedIndicator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnsolicitedIndicator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InstrumentLeg) > 0 {
		i -= len(m.InstrumentLeg)
		copy(dAtA[i:], m.InstrumentLeg)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InstrumentLeg)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NoLegs) > 0 {
		i -= len(m.NoLegs)
		copy(dAtA[i:], m.NoLegs)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoLegs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UnderlyingInstrument) > 0 {
		i -= len(m.UnderlyingInstrument)
		copy(dAtA[i:], m.UnderlyingInstrument)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UnderlyingInstrument)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoUnderlyings) > 0 {
		i -= len(m.NoUnderlyings)
		copy(dAtA[i:], m.NoUnderlyings)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoUnderlyings)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityStatusReqID) > 0 {
		i -= len(m.SecurityStatusReqID)
		copy(dAtA[i:], m.SecurityStatusReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityStatusReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityStatusResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityStatusResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityStatusResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityStatusRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityStatusRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityStatusRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityRejectReason) > 0 {
		i -= len(m.SecurityRejectReason)
		copy(dAtA[i:], m.SecurityRejectReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityRejectReason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityStatusReqID) > 0 {
		i -= len(m.SecurityStatusReqID)
		copy(dAtA[i:], m.SecurityStatusReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityStatusReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityStatusRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityStatusRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityStatusRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecuritySubType) > 0 {
		i -= len(m.SecuritySubType)
		copy(dAtA[i:], m.SecuritySubType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecuritySubType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityType) > 0 {
		i -= len(m.SecurityType)
		copy(dAtA[i:], m.SecurityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Product) > 0 {
		i -= len(m.Product)
		copy(dAtA[i:], m.Product)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Product)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityTypesRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityTypesRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityTypesRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionRequestType) > 0 {
		i -= len(m.SubscriptionRequestType)
		copy(dAtA[i:], m.SubscriptionRequestType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SubscriptionRequestType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CFICode) > 0 {
		i -= len(m.CFICode)
		copy(dAtA[i:], m.CFICode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CFICode)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Product) > 0 {
		i -= len(m.Product)
		copy(dAtA[i:], m.Product)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Product)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SecuritySubType) > 0 {
		i -= len(m.SecuritySubType)
		copy(dAtA[i:], m.SecuritySubType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecuritySubType)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SecurityType) > 0 {
		i -= len(m.SecurityType)
		copy(dAtA[i:], m.SecurityType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.NoSecurityTypes) > 0 {
		i -= len(m.NoSecurityTypes)
		copy(dAtA[i:], m.NoSecurityTypes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NoSecurityTypes)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LastFragment) > 0 {
		i -= len(m.LastFragment)
		copy(dAtA[i:], m.LastFragment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastFragment)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TotNoSecurityTypes) > 0 {
		i -= len(m.TotNoSecurityTypes)
		copy(dAtA[i:], m.TotNoSecurityTypes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TotNoSecurityTypes)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityResponseType) > 0 {
		i -= len(m.SecurityResponseType)
		copy(dAtA[i:], m.SecurityResponseType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityResponseType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityResponseID) > 0 {
		i -= len(m.SecurityResponseID)
		copy(dAtA[i:], m.SecurityResponseID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityResponseID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityTypesResponseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityTypesResponseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityTypesResponseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSecurityTypesRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityTypesRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityTypesRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RejectReason) > 0 {
		i -= len(m.RejectReason)
		copy(dAtA[i:], m.RejectReason)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RejectReason)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSecurityTypesRequestRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSecurityTypesRequestRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSecurityTypesRequestRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeleteAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLogonInitiator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LogonInitiator != nil {
		l = m.LogonInitiator.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsAccepted {
		n += 2
	}
	l = len(m.InitiatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLogonInitiatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLogonAcceptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LogonAcceptor != nil {
		l = m.LogonAcceptor.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsAccepted {
		n += 2
	}
	l = len(m.AcceptorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLogonAcceptorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTerminateLogon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InitiatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTerminateLogonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLogonReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AcceptorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLogonRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLogoutInitiator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InitiatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SessionLogoutInitiator != nil {
		l = m.SessionLogoutInitiator.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLogoutInitiatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLogoutAcceptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AcceptorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SessionLogoutAcceptor != nil {
		l = m.SessionLogoutAcceptor.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLogoutAcceptorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewOrderSingle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Side != 0 {
		n += 1 + sovTx(uint64(m.Side))
	}
	l = len(m.OrderQty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OrdType != 0 {
		n += 1 + sovTx(uint64(m.OrdType))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewOrderSingleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOrderCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrigClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOrderCancelRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOrderCancelReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrigClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CxlRejReason != 0 {
		n += 1 + sovTx(uint64(m.CxlRejReason))
	}
	if m.CxlRejResponseTo != 0 {
		n += 1 + sovTx(uint64(m.CxlRejResponseTo))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOrderCancelRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOrderExecutionReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrdStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Side != 0 {
		n += 1 + sovTx(uint64(m.Side))
	}
	l = len(m.OrderQty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovTx(uint64(m.TimeInForce))
	}
	if m.LastPx != 0 {
		n += 1 + sovTx(uint64(m.LastPx))
	}
	if m.LastQty != 0 {
		n += 1 + sovTx(uint64(m.LastQty))
	}
	if m.LeavesQty != 0 {
		n += 1 + sovTx(uint64(m.LeavesQty))
	}
	if m.CumQty != 0 {
		n += 2 + sovTx(uint64(m.CumQty))
	}
	if m.AvgPx != 0 {
		n += 2 + sovTx(uint64(m.AvgPx))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOrderExecutionReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgQuoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.QuoteRequest != nil {
		l = m.QuoteRequest.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgQuoteRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgQuoteAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.QuoteAcknowledgement != nil {
		l = m.QuoteAcknowledgement.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgQuoteAcknowledgementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgQuoteRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.QuoteRequestReject != nil {
		l = m.QuoteRequestReject.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgQuoteRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradeCaptureReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportTransType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TrdType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TrdSubType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Side)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderQty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastQty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastPx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GrossTradeAmt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrigTradeID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityIDSource)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.TradeDate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SettlType)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SettlDate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradeCaptureReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradeCaptureReportAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecondaryTradeID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TrdType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TrdSubType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportRefID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecondaryTradeReportID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeTransType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TradeReportRejectReason != 0 {
		n += 1 + sovTx(uint64(m.TradeReportRejectReason))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradeCaptureReportAcknowledgementResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradeCaptureReportRejection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradeReportID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TradeReportRejectReason != 0 {
		n += 1 + sovTx(uint64(m.TradeReportRejectReason))
	}
	l = len(m.TradeReportRejectRefID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradeCaptureReportRejectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubscriptionRequestType != 0 {
		n += 1 + sovTx(uint64(m.SubscriptionRequestType))
	}
	if m.MarketDepth != 0 {
		n += 1 + sovTx(uint64(m.MarketDepth))
	}
	if m.MdUpdateType != 0 {
		n += 1 + sovTx(uint64(m.MdUpdateType))
	}
	if m.NoRelatedSym != 0 {
		n += 1 + sovTx(uint64(m.NoRelatedSym))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketDataRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketDataSnapshotFullRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NoMDEntries != 0 {
		n += 1 + sovTx(uint64(m.NoMDEntries))
	}
	if len(m.MdEntries) > 0 {
		for _, e := range m.MdEntries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketDataSnapshotFullRefreshResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketDataIncremental) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.NoMDEntries != 0 {
		n += 1 + sovTx(uint64(m.NoMDEntries))
	}
	if len(m.MdEntries) > 0 {
		for _, e := range m.MdEntries {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketDataIncrementalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMarketDataRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MdReqRejReason != 0 {
		n += 1 + sovTx(uint64(m.MdReqRejReason))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMarketDataRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityDefinitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityRequestType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityDesc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityDefinitionRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityResponseID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityResponseType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityDesc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ContractMultiplier)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinPriceIncrement)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinPriceIncrementAmount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnitOfMeasure)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PriceUnitOfMeasure)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SettlType)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SettlDate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.MaturityMonthYear)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.CouponRate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Factor)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.CreditRating)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityExchangeID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityDefinitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityDefinitionRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityRequestResult)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityRequestError)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityRequestErrorCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityDefinitionRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOrderMassStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MassStatusReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MassStatusReqType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOrderMassStatusRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOrderMassStatusReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MassStatusReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrdStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExecType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrdQty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastPx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CumQty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AvgPx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LeavesQty)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOrderMassStatusReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOrderMassStatusRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefSeqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RejCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgOrderMassStatusRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradingSessionStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequest)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityIDSource)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketSegmentID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TradSesReqType != 0 {
		n += 1 + sovTx(uint64(m.TradSesReqType))
	}
	if m.TradSesSubReqType != 0 {
		n += 1 + sovTx(uint64(m.TradSesSubReqType))
	}
	if m.TradSesMode != 0 {
		n += 1 + sovTx(uint64(m.TradSesMode))
	}
	l = len(m.TradingSessionDate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionTime)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubTime)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.ExpirationDate)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradingSessionStatusRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradingSessionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TradSesStatus != 0 {
		n += 1 + sovTx(uint64(m.TradSesStatus))
	}
	if m.TradSesStatusRejReason != 0 {
		n += 1 + sovTx(uint64(m.TradSesStatusRejReason))
	}
	l = len(m.TradSesStartTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesOpenTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesPreCloseTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesCloseTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesEndTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TotalVolumeTraded != 0 {
		n += 1 + sovTx(uint64(m.TotalVolumeTraded))
	}
	l = len(m.TradSesHighPx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesLowPx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityIDSource)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.MarketSegmentID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.MarketID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradingSessionStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradingSessionStatusRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefSeqNum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RefMsgType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SessionRejectReason != 0 {
		n += 1 + sovTx(uint64(m.SessionRejectReason))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradingSessionStatusRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradingSessionListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesMethod)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesMode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradingSessionListRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradingSessionListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoTradingSessions)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesMethod)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesMode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnsolicitedIndicator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesStatusRejReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesStartTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesOpenTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesPreCloseTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesCloseTime)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesEndTime)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradingSessionListResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTradingSessionListRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradSesStatusRejReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTradingSessionListRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityListRequestType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoUnderlyings)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoLegs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncodedTextLen)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncodedText)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityListRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityResponseID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityRequestResult)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TotNoRelatedSym)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastFragment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoRelatedSym)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoUnderlyings)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoLegs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RoundLot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MinTradeVol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExpirationCycle)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.EncodedTextLen)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.EncodedText)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityListResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityListRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityListRequestType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityRequestResult)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncodedTextLen)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.EncodedText)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityListRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityStatusReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Instrument)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoUnderlyings)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnderlyingInstrument)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoLegs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InstrumentLeg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityStatusRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityStatusReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoUnderlyings)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnderlyingInstrument)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoLegs)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InstrumentLeg)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UnsolicitedIndicator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityTradingStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FinancialStatus)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CorporateAction)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HaltReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InViewOfCommon)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.DueToRelated)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.BuyVolume)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.SellVolume)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.HighPx)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.LowPx)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.LastPx)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Adjustment)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityStatusResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityStatusRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityStatusReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityRejectReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityStatusRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecuritySubType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityTypesRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityResponseID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityResponseType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TotNoSecurityTypes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastFragment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NoSecurityTypes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecuritySubType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CFICode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SubscriptionRequestType)
	if l > 0 {
		n += 2 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityTypesResponseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSecurityTypesRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSecurityTypesRequestRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeleteAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogonInitiator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogonInitiator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogonInitiator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogonInitiator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogonInitiator == nil {
				m.LogonInitiator = &LogonInitiator{}
			}
			if err := m.LogonInitiator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAccepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAccepted = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogonInitiatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogonInitiatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogonInitiatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogonAcceptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogonAcceptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogonAcceptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogonAcceptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogonAcceptor == nil {
				m.LogonAcceptor = &LogonAcceptor{}
			}
			if err := m.LogonAcceptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAccepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAccepted = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogonAcceptorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogonAcceptorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogonAcceptorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminateLogon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminateLogon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminateLogon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminateLogonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminateLogonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminateLogonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogonReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogonReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogonReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogonRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogonRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogonRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogoutInitiator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogoutInitiator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogoutInitiator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLogoutInitiator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionLogoutInitiator == nil {
				m.SessionLogoutInitiator = &SessionLogoutInitiator{}
			}
			if err := m.SessionLogoutInitiator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogoutInitiatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogoutInitiatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogoutInitiatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogoutAcceptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogoutAcceptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogoutAcceptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLogoutAcceptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionLogoutAcceptor == nil {
				m.SessionLogoutAcceptor = &SessionLogoutAcceptor{}
			}
			if err := m.SessionLogoutAcceptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLogoutAcceptorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLogoutAcceptorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLogoutAcceptorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewOrderSingle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewOrderSingle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewOrderSingle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdType", wireType)
			}
			m.OrdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrdType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewOrderSingleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewOrderSingleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewOrderSingleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderCancelRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderCancelRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderCancelRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderCancelReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderCancelReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderCancelReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CxlRejReason", wireType)
			}
			m.CxlRejReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CxlRejReason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CxlRejResponseTo", wireType)
			}
			m.CxlRejResponseTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CxlRejResponseTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderCancelRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderCancelRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderCancelRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderExecutionReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderExecutionReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderExecutionReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrdStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPx", wireType)
			}
			m.LastPx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastQty", wireType)
			}
			m.LastQty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastQty |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeavesQty", wireType)
			}
			m.LeavesQty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeavesQty |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumQty", wireType)
			}
			m.CumQty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CumQty |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgPx", wireType)
			}
			m.AvgPx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgPx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderExecutionReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderExecutionReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderExecutionReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQuoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQuoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQuoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteRequest == nil {
				m.QuoteRequest = &QuoteRequest{}
			}
			if err := m.QuoteRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQuoteRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQuoteRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQuoteRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQuoteAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQuoteAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQuoteAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAcknowledgement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteAcknowledgement == nil {
				m.QuoteAcknowledgement = &QuoteAcknowledgement{}
			}
			if err := m.QuoteAcknowledgement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQuoteAcknowledgementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQuoteAcknowledgementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQuoteAcknowledgementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQuoteRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQuoteRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQuoteRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteRequestReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteRequestReject == nil {
				m.QuoteRequestReject = &QuoteRequestReject{}
			}
			if err := m.QuoteRequestReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgQuoteRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgQuoteRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgQuoteRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradeCaptureReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradeCaptureReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradeCaptureReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportTransType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportTransType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrdType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdSubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrdSubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Side = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrossTradeAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrossTradeAmt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigTradeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigTradeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradeCaptureReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradeCaptureReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradeCaptureReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradeCaptureReportAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradeCaptureReportAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradeCaptureReportAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryTradeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryTradeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrdType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrdSubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrdSubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportRefID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportRefID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryTradeReportID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondaryTradeReportID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeTransType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeTransType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportRejectReason", wireType)
			}
			m.TradeReportRejectReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeReportRejectReason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradeCaptureReportAcknowledgementResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradeCaptureReportAcknowledgementResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradeCaptureReportAcknowledgementResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradeCaptureReportRejection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradeCaptureReportRejection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradeCaptureReportRejection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportRejectReason", wireType)
			}
			m.TradeReportRejectReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeReportRejectReason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportRejectRefID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportRejectRefID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradeCaptureReportRejectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradeCaptureReportRejectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradeCaptureReportRejectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			m.SubscriptionRequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionRequestType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDepth", wireType)
			}
			m.MarketDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketDepth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdUpdateType", wireType)
			}
			m.MdUpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdUpdateType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRelatedSym", wireType)
			}
			m.NoRelatedSym = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRelatedSym |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataSnapshotFullRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataSnapshotFullRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataSnapshotFullRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMDEntries", wireType)
			}
			m.NoMDEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoMDEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdEntries = append(m.MdEntries, &MDEntry{})
			if err := m.MdEntries[len(m.MdEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataSnapshotFullRefreshResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataSnapshotFullRefreshResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataSnapshotFullRefreshResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataIncremental) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataIncremental: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataIncremental: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMDEntries", wireType)
			}
			m.NoMDEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoMDEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdEntries = append(m.MdEntries, &MDEntry{})
			if err := m.MdEntries[len(m.MdEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataIncrementalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataIncrementalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataIncrementalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqRejReason", wireType)
			}
			m.MdReqRejReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdReqRejReason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMarketDataRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMarketDataRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMarketDataRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityDefinitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityDefinitionRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityResponseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityResponseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityResponseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityResponseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractMultiplier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPriceIncrement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinPriceIncrement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPriceIncrementAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinPriceIncrementAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitOfMeasure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnitOfMeasure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceUnitOfMeasure", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceUnitOfMeasure = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaturityMonthYear", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaturityMonthYear = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CouponRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CouponRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditRating", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditRating = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchangeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchangeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityDefinitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityDefinitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityDefinitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityDefinitionRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRequestResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRequestResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRequestError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRequestError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRequestErrorCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRequestErrorCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityDefinitionRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityDefinitionRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderMassStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MassStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MassStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MassStatusReqType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MassStatusReqType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderMassStatusRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderMassStatusReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderMassStatusReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderMassStatusReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MassStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MassStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrdStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrdQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeavesQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeavesQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderMassStatusReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderMassStatusReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderMassStatusReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderMassStatusRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefSeqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefSeqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOrderMassStatusRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOrderMassStatusRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketSegmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketSegmentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqType", wireType)
			}
			m.TradSesReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesReqType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesSubReqType", wireType)
			}
			m.TradSesSubReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesSubReqType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesMode", wireType)
			}
			m.TradSesMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionStatusRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatus", wireType)
			}
			m.TradSesStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatusRejReason", wireType)
			}
			m.TradSesStatusRejReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesStatusRejReason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesOpenTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesOpenTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesPreCloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesPreCloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesCloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesCloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVolumeTraded", wireType)
			}
			m.TotalVolumeTraded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVolumeTraded |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesHighPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesHighPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesLowPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesLowPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketSegmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketSegmentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionStatusRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefSeqNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefSeqNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefMsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefMsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionRejectReason", wireType)
			}
			m.SessionRejectReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionRejectReason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionStatusRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionStatusRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionListRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionListRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionListRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoTradingSessions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoTradingSessions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsolicitedIndicator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsolicitedIndicator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatusRejReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesStatusRejReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesOpenTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesOpenTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesPreCloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesPreCloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesCloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesCloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionListResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionListResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionListResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionListRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionListRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionListRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatusRejReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesStatusRejReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTradingSessionListRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTradingSessionListRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTradingSessionListRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityListRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityListRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnderlyings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoUnderlyings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLegs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoLegs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTextLen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTextLen = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityListRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityListRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityListRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityResponseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityResponseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRequestResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRequestResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotNoRelatedSym", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotNoRelatedSym = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFragment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFragment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRelatedSym", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoRelatedSym = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnderlyings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoUnderlyings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLegs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoLegs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundLot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundLot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTradeVol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinTradeVol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationCycle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationCycle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTextLen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTextLen = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityListResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityListResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityListResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityListRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityListRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityListRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityListRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityListRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRequestResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRequestResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedTextLen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedTextLen = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityListRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityListRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityListRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnderlyings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoUnderlyings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingInstrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingInstrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLegs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoLegs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstrumentLeg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstrumentLeg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityStatusRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityStatusRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityStatusRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnderlyings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoUnderlyings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingInstrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingInstrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLegs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoLegs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstrumentLeg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstrumentLeg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsolicitedIndicator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsolicitedIndicator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityTradingStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityTradingStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinancialStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinancialStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorporateAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorporateAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaltReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HaltReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InViewOfCommon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InViewOfCommon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueToRelated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueToRelated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adjustment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adjustment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityStatusResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityStatusResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityStatusResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityStatusRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityStatusRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityStatusRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityStatusRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityStatusRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityStatusRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecuritySubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecuritySubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityTypesRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityTypesRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityTypesRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityResponseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityResponseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityResponseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityResponseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotNoSecurityTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotNoSecurityTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFragment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFragment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSecurityTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoSecurityTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecuritySubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecuritySubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFICode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CFICode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityTypesResponseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityTypesResponseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityTypesResponseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityTypesRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityTypesRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityTypesRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSecurityTypesRequestRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSecurityTypesRequestRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSecurityTypesRequestRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
