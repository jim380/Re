// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/orders_cancel_reject.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrdersCancelReject struct {
	SessionID        string   `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Header           *Header  `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	OrderID          string   `protobuf:"bytes,3,opt,name=orderID,proto3" json:"orderID,omitempty"`
	OrigClOrdID      string   `protobuf:"bytes,4,opt,name=origClOrdID,proto3" json:"origClOrdID,omitempty"`
	ClOrdID          string   `protobuf:"bytes,5,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	CxlRejReason     int64    `protobuf:"varint,6,opt,name=cxlRejReason,proto3" json:"cxlRejReason,omitempty"`
	CxlRejResponseTo int64    `protobuf:"varint,7,opt,name=cxlRejResponseTo,proto3" json:"cxlRejResponseTo,omitempty"`
	TransactTime     string   `protobuf:"bytes,8,opt,name=TransactTime,proto3" json:"TransactTime,omitempty"`
	Trailer          *Trailer `protobuf:"bytes,9,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Creator          string   `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *OrdersCancelReject) Reset()         { *m = OrdersCancelReject{} }
func (m *OrdersCancelReject) String() string { return proto.CompactTextString(m) }
func (*OrdersCancelReject) ProtoMessage()    {}
func (*OrdersCancelReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_5581ec5cd57438b0, []int{0}
}
func (m *OrdersCancelReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrdersCancelReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrdersCancelReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrdersCancelReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersCancelReject.Merge(m, src)
}
func (m *OrdersCancelReject) XXX_Size() int {
	return m.Size()
}
func (m *OrdersCancelReject) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersCancelReject.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersCancelReject proto.InternalMessageInfo

func (m *OrdersCancelReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *OrdersCancelReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *OrdersCancelReject) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrdersCancelReject) GetOrigClOrdID() string {
	if m != nil {
		return m.OrigClOrdID
	}
	return ""
}

func (m *OrdersCancelReject) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *OrdersCancelReject) GetCxlRejReason() int64 {
	if m != nil {
		return m.CxlRejReason
	}
	return 0
}

func (m *OrdersCancelReject) GetCxlRejResponseTo() int64 {
	if m != nil {
		return m.CxlRejResponseTo
	}
	return 0
}

func (m *OrdersCancelReject) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *OrdersCancelReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *OrdersCancelReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*OrdersCancelReject)(nil), "jim380.re.fix.OrdersCancelReject")
}

func init() { proto.RegisterFile("re/fix/orders_cancel_reject.proto", fileDescriptor_5581ec5cd57438b0) }

var fileDescriptor_5581ec5cd57438b0 = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xbd, 0x4e, 0x2a, 0x41,
	0x14, 0x66, 0xe1, 0x5e, 0xb8, 0x0c, 0xd7, 0xc4, 0x4c, 0xa2, 0x99, 0x18, 0xdd, 0xac, 0x54, 0xc4,
	0xc4, 0x5d, 0x22, 0x8d, 0xb1, 0x14, 0x0a, 0xa9, 0x48, 0x26, 0x5b, 0xd9, 0x90, 0x61, 0xf6, 0x00,
	0x43, 0xd8, 0x1d, 0x72, 0x66, 0x4c, 0xd6, 0xb7, 0xf0, 0xb1, 0x2c, 0x29, 0x2d, 0x0d, 0x3c, 0x84,
	0xad, 0x61, 0x76, 0x89, 0xa2, 0xe5, 0xf7, 0x73, 0xbe, 0xf3, 0x9d, 0x1c, 0x72, 0x89, 0x10, 0x4d,
	0x55, 0x1e, 0x69, 0x4c, 0x00, 0xcd, 0x58, 0x8a, 0x4c, 0xc2, 0x72, 0x8c, 0xb0, 0x00, 0x69, 0xc3,
	0x15, 0x6a, 0xab, 0xe9, 0xd1, 0x42, 0xa5, 0xbd, 0xdb, 0x6e, 0x88, 0x10, 0x4e, 0x55, 0x7e, 0x76,
	0x51, 0x4e, 0x18, 0x2b, 0xb2, 0x44, 0x60, 0x32, 0x4e, 0xc1, 0x18, 0x31, 0x83, 0xc2, 0xdd, 0xfe,
	0xa8, 0x12, 0x3a, 0x72, 0x61, 0x7d, 0x97, 0xc5, 0x5d, 0x14, 0x3d, 0x27, 0x4d, 0x03, 0xc6, 0x28,
	0x9d, 0x0d, 0x07, 0xcc, 0x0b, 0xbc, 0x4e, 0x93, 0x7f, 0x11, 0xf4, 0x9a, 0xd4, 0xe7, 0x20, 0x12,
	0x40, 0x56, 0x0d, 0xbc, 0x4e, 0xeb, 0xe6, 0x24, 0x3c, 0xd8, 0x19, 0x3e, 0x38, 0x91, 0x97, 0x26,
	0xca, 0x48, 0xc3, 0xf5, 0x1d, 0x0e, 0x58, 0xcd, 0x45, 0xed, 0x21, 0x0d, 0x48, 0x4b, 0xa3, 0x9a,
	0xf5, 0x97, 0x23, 0x4c, 0x86, 0x03, 0xf6, 0xc7, 0xa9, 0xdf, 0xa9, 0xdd, 0xac, 0x2c, 0xd5, 0xbf,
	0xc5, 0x6c, 0x09, 0x69, 0x9b, 0xfc, 0x97, 0xf9, 0xae, 0x2f, 0x07, 0x61, 0x74, 0xc6, 0xea, 0x81,
	0xd7, 0xa9, 0xf1, 0x03, 0x8e, 0x5e, 0x91, 0xe3, 0x3d, 0x36, 0x2b, 0x9d, 0x19, 0x88, 0x35, 0x6b,
	0x38, 0xdf, 0x2f, 0x7e, 0x97, 0x17, 0xa3, 0xc8, 0x8c, 0x90, 0x36, 0x56, 0x29, 0xb0, 0x7f, 0x6e,
	0xdd, 0x01, 0x47, 0xbb, 0xa4, 0x61, 0x51, 0xa8, 0x25, 0x20, 0x6b, 0xba, 0xcb, 0x4f, 0x7f, 0x5c,
	0x1e, 0x17, 0x2a, 0xdf, 0xdb, 0x5c, 0x7f, 0x04, 0x61, 0x35, 0x32, 0x52, 0xf6, 0x2f, 0xe0, 0xfd,
	0xdd, 0xeb, 0xc6, 0xf7, 0xd6, 0x1b, 0xdf, 0x7b, 0xdf, 0xf8, 0xde, 0xcb, 0xd6, 0xaf, 0xac, 0xb7,
	0x7e, 0xe5, 0x6d, 0xeb, 0x57, 0x1e, 0x83, 0x99, 0xb2, 0xf3, 0xa7, 0x49, 0x28, 0x75, 0x1a, 0x15,
	0xf1, 0x11, 0x87, 0x28, 0x77, 0x6f, 0xb4, 0xcf, 0x2b, 0x30, 0x93, 0xba, 0x7b, 0x5e, 0xef, 0x33,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0x8d, 0xe1, 0x75, 0x0f, 0x02, 0x00, 0x00,
}

func (m *OrdersCancelReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrdersCancelReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrdersCancelReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrdersCancelReject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x42
	}
	if m.CxlRejResponseTo != 0 {
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(m.CxlRejResponseTo))
		i--
		dAtA[i] = 0x38
	}
	if m.CxlRejReason != 0 {
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(m.CxlRejReason))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrigClOrdID) > 0 {
		i -= len(m.OrigClOrdID)
		copy(dAtA[i:], m.OrigClOrdID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.OrigClOrdID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrdersCancelReject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrdersCancelReject(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrdersCancelReject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrdersCancelReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	l = len(m.OrigClOrdID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	if m.CxlRejReason != 0 {
		n += 1 + sovOrdersCancelReject(uint64(m.CxlRejReason))
	}
	if m.CxlRejResponseTo != 0 {
		n += 1 + sovOrdersCancelReject(uint64(m.CxlRejResponseTo))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	return n
}

func sovOrdersCancelReject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrdersCancelReject(x uint64) (n int) {
	return sovOrdersCancelReject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrdersCancelReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrdersCancelReject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrdersCancelReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrdersCancelReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CxlRejReason", wireType)
			}
			m.CxlRejReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CxlRejReason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CxlRejResponseTo", wireType)
			}
			m.CxlRejResponseTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CxlRejResponseTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrdersCancelReject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrdersCancelReject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrdersCancelReject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrdersCancelReject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrdersCancelReject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrdersCancelReject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrdersCancelReject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrdersCancelReject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrdersCancelReject = fmt.Errorf("proto: unexpected end of group")
)
