// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/v1beta1/orders_cancel_reject.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrdersCancelReject struct {
	// A string field that specifies the FIX session ID for the message.
	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	// A Header field that contains standard header information for the message,
	// such as the message type, sender and receiver identification, and sequence
	// number.
	Header *Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// A string field that contains the ID of the order that was rejected. When an
	// order is submitted to a trading venue or OMS, it assigns a unique orderID
	// to that order to track and identify it within its system. If the order is
	// subsequently rejected, the trading venue or OMS would typically provide the
	// orderID associated with the rejected order in the OrdersCancelReject
	// message
	OrderID string `protobuf:"bytes,3,opt,name=orderID,proto3" json:"orderID,omitempty"`
	// A string field that contains the original client order ID for the order
	// that was cancelled.
	OrigClOrdID string `protobuf:"bytes,4,opt,name=origClOrdID,proto3" json:"origClOrdID,omitempty"`
	// A string field that contains the client order ID for the order that was
	// cancelled or modified.
	ClOrdID string `protobuf:"bytes,5,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	// An integer field that specifies the reason for the order cancellation
	// rejection, using a standard set of values defined in the FIX protocol.
	// Typically, the cxlRejReason field provides a numerical code or value that
	// represents a specific reason for the order cancellation rejection. Examples
	// of common cxlRejReason values in the FIX protocol include:
	//  0: Too Late to Cancel
	//  1: Unknown Order
	//  2: Broker/Exchange Option
	//  3: Order Already in Pending Cancel or Pending Replace Status
	//  4: Unable to Process Request
	//  5: Duplicate ClOrdID
	//  6: Unsupported Order Characteristic
	//  7: Other
	CxlRejReason int64 `protobuf:"varint,6,opt,name=cxlRejReason,proto3" json:"cxlRejReason,omitempty"`
	// An integer field that specifies the message sequence number of the order
	// cancellation request to which this message is responding. When an order
	// cancellation request is submitted, it is assigned a unique message sequence
	// number by the FIX engine or the trading system. This sequence number is
	// used to track and identify specific messages within the order flow. The
	// cxlRejResponseTo field in the OrdersCancelReject message is populated with
	// the sequence number of the original order cancellation request message that
	// resulted in the rejection.
	CxlRejResponseTo int64 `protobuf:"varint,7,opt,name=cxlRejResponseTo,proto3" json:"cxlRejResponseTo,omitempty"`
	// A string field that specifies the time of the transaction.
	TransactTime string `protobuf:"bytes,8,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	// A Trailer field that contains standard trailer information for the message,
	// such as the message checksum.
	Trailer *Trailer `protobuf:"bytes,9,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *OrdersCancelReject) Reset()         { *m = OrdersCancelReject{} }
func (m *OrdersCancelReject) String() string { return proto.CompactTextString(m) }
func (*OrdersCancelReject) ProtoMessage()    {}
func (*OrdersCancelReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_2e894450d8159f15, []int{0}
}
func (m *OrdersCancelReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrdersCancelReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrdersCancelReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrdersCancelReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrdersCancelReject.Merge(m, src)
}
func (m *OrdersCancelReject) XXX_Size() int {
	return m.Size()
}
func (m *OrdersCancelReject) XXX_DiscardUnknown() {
	xxx_messageInfo_OrdersCancelReject.DiscardUnknown(m)
}

var xxx_messageInfo_OrdersCancelReject proto.InternalMessageInfo

func (m *OrdersCancelReject) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *OrdersCancelReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *OrdersCancelReject) GetOrderID() string {
	if m != nil {
		return m.OrderID
	}
	return ""
}

func (m *OrdersCancelReject) GetOrigClOrdID() string {
	if m != nil {
		return m.OrigClOrdID
	}
	return ""
}

func (m *OrdersCancelReject) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *OrdersCancelReject) GetCxlRejReason() int64 {
	if m != nil {
		return m.CxlRejReason
	}
	return 0
}

func (m *OrdersCancelReject) GetCxlRejResponseTo() int64 {
	if m != nil {
		return m.CxlRejResponseTo
	}
	return 0
}

func (m *OrdersCancelReject) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *OrdersCancelReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func init() {
	proto.RegisterType((*OrdersCancelReject)(nil), "re.fix.OrdersCancelReject")
}

func init() {
	proto.RegisterFile("re/fix/v1beta1/orders_cancel_reject.proto", fileDescriptor_2e894450d8159f15)
}

var fileDescriptor_2e894450d8159f15 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4e, 0x02, 0x31,
	0x10, 0x86, 0x29, 0xe8, 0x22, 0xc5, 0xa8, 0xe9, 0xa9, 0x31, 0x66, 0xb3, 0x21, 0xd1, 0x80, 0x87,
	0x5d, 0x91, 0x8b, 0xf1, 0x28, 0x1c, 0xe4, 0x44, 0xd2, 0x70, 0xf2, 0x42, 0x4a, 0x77, 0x80, 0x12,
	0x76, 0x4b, 0xda, 0x6a, 0xd6, 0xb7, 0xf0, 0xb1, 0xbc, 0xc9, 0xd1, 0xa3, 0x81, 0x17, 0x31, 0x74,
	0xd9, 0x28, 0x7a, 0x9c, 0xef, 0x9f, 0xff, 0x9f, 0x99, 0x0c, 0x6e, 0x69, 0x88, 0x26, 0x32, 0x8b,
	0x5e, 0xda, 0x63, 0xb0, 0xbc, 0x1d, 0x29, 0x1d, 0x83, 0x36, 0x23, 0xc1, 0x53, 0x01, 0x8b, 0x91,
	0x86, 0x39, 0x08, 0x1b, 0x2e, 0xb5, 0xb2, 0x8a, 0x78, 0x1a, 0xc2, 0x89, 0xcc, 0xce, 0x2f, 0xff,
	0x58, 0x8c, 0xe5, 0x69, 0xcc, 0x75, 0x3c, 0x4a, 0xc0, 0x18, 0x3e, 0x85, 0xbc, 0xbd, 0xf1, 0x51,
	0xc6, 0x64, 0xe0, 0xd2, 0xba, 0x2e, 0x8c, 0xb9, 0x2c, 0x72, 0x81, 0x6b, 0x06, 0x8c, 0x91, 0x2a,
	0xed, 0xf7, 0x28, 0x0a, 0x50, 0xb3, 0xc6, 0x7e, 0x00, 0xb9, 0xc2, 0xde, 0x0c, 0x78, 0x0c, 0x9a,
	0x96, 0x03, 0xd4, 0xac, 0xdf, 0x9e, 0x84, 0xf9, 0xd0, 0xf0, 0xd1, 0x51, 0xb6, 0x53, 0x09, 0xc5,
	0x55, 0xb7, 0x69, 0xbf, 0x47, 0x2b, 0x2e, 0xa3, 0x28, 0x49, 0x80, 0xeb, 0x4a, 0xcb, 0x69, 0x77,
	0x31, 0xd0, 0x71, 0xbf, 0x47, 0x0f, 0x9c, 0xfa, 0x1b, 0x6d, 0xbd, 0x62, 0xa7, 0x1e, 0xe6, 0xde,
	0x5d, 0x49, 0x1a, 0xf8, 0x58, 0x64, 0xdb, 0x45, 0x19, 0x70, 0xa3, 0x52, 0xea, 0x05, 0xa8, 0x59,
	0x61, 0x7b, 0x8c, 0x5c, 0xe3, 0xb3, 0xa2, 0x36, 0x4b, 0x95, 0x1a, 0x18, 0x2a, 0x5a, 0x75, 0x7d,
	0xff, 0xf8, 0x36, 0xcf, 0x6a, 0x9e, 0x1a, 0x2e, 0xec, 0x50, 0x26, 0x40, 0x8f, 0xdc, 0xb8, 0x3d,
	0x46, 0x5a, 0xb8, 0x6a, 0x35, 0x97, 0x0b, 0xd0, 0xb4, 0xe6, 0x4e, 0x3e, 0x2d, 0x4e, 0x1e, 0xe6,
	0x98, 0x15, 0xfa, 0xc3, 0xfd, 0xfb, 0xda, 0x47, 0xab, 0xb5, 0x8f, 0xbe, 0xd6, 0x3e, 0x7a, 0xdb,
	0xf8, 0xa5, 0xd5, 0xc6, 0x2f, 0x7d, 0x6e, 0xfc, 0xd2, 0x53, 0x30, 0x95, 0x76, 0xf6, 0x3c, 0x0e,
	0x85, 0x4a, 0xa2, 0xb9, 0x4c, 0x3a, 0x77, 0x37, 0x11, 0x83, 0x28, 0x73, 0x6f, 0xb2, 0xaf, 0x4b,
	0x30, 0x63, 0xcf, 0x3d, 0xa5, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xe2, 0x35, 0x34, 0xf0,
	0x01, 0x00, 0x00,
}

func (m *OrdersCancelReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrdersCancelReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrdersCancelReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrdersCancelReject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x42
	}
	if m.CxlRejResponseTo != 0 {
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(m.CxlRejResponseTo))
		i--
		dAtA[i] = 0x38
	}
	if m.CxlRejReason != 0 {
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(m.CxlRejReason))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrigClOrdID) > 0 {
		i -= len(m.OrigClOrdID)
		copy(dAtA[i:], m.OrigClOrdID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.OrigClOrdID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderID) > 0 {
		i -= len(m.OrderID)
		copy(dAtA[i:], m.OrderID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.OrderID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrdersCancelReject(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintOrdersCancelReject(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrdersCancelReject(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrdersCancelReject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrdersCancelReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	l = len(m.OrderID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	l = len(m.OrigClOrdID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	if m.CxlRejReason != 0 {
		n += 1 + sovOrdersCancelReject(uint64(m.CxlRejReason))
	}
	if m.CxlRejResponseTo != 0 {
		n += 1 + sovOrdersCancelReject(uint64(m.CxlRejResponseTo))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovOrdersCancelReject(uint64(l))
	}
	return n
}

func sovOrdersCancelReject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrdersCancelReject(x uint64) (n int) {
	return sovOrdersCancelReject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrdersCancelReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrdersCancelReject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrdersCancelReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrdersCancelReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CxlRejReason", wireType)
			}
			m.CxlRejReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CxlRejReason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CxlRejResponseTo", wireType)
			}
			m.CxlRejResponseTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CxlRejResponseTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrdersCancelReject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrdersCancelReject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrdersCancelReject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrdersCancelReject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrdersCancelReject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrdersCancelReject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrdersCancelReject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrdersCancelReject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrdersCancelReject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrdersCancelReject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrdersCancelReject = fmt.Errorf("proto: unexpected end of group")
)
