// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/trading_session.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TradingSession struct {
	SessionID                         string                             `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	TradingSessionStatusRequest       *TradingSessionStatusRequest       `protobuf:"bytes,2,opt,name=tradingSessionStatusRequest,proto3" json:"tradingSessionStatusRequest,omitempty"`
	TradingSessionStatus              *TradingSessionStatus              `protobuf:"bytes,3,opt,name=tradingSessionStatus,proto3" json:"tradingSessionStatus,omitempty"`
	TradingSessionStatusRequestReject *TradingSessionStatusRequestReject `protobuf:"bytes,4,opt,name=tradingSessionStatusRequestReject,proto3" json:"tradingSessionStatusRequestReject,omitempty"`
}

func (m *TradingSession) Reset()         { *m = TradingSession{} }
func (m *TradingSession) String() string { return proto.CompactTextString(m) }
func (*TradingSession) ProtoMessage()    {}
func (*TradingSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0d8ceb9122a9133, []int{0}
}
func (m *TradingSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSession.Merge(m, src)
}
func (m *TradingSession) XXX_Size() int {
	return m.Size()
}
func (m *TradingSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSession.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSession proto.InternalMessageInfo

func (m *TradingSession) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *TradingSession) GetTradingSessionStatusRequest() *TradingSessionStatusRequest {
	if m != nil {
		return m.TradingSessionStatusRequest
	}
	return nil
}

func (m *TradingSession) GetTradingSessionStatus() *TradingSessionStatus {
	if m != nil {
		return m.TradingSessionStatus
	}
	return nil
}

func (m *TradingSession) GetTradingSessionStatusRequestReject() *TradingSessionStatusRequestReject {
	if m != nil {
		return m.TradingSessionStatusRequestReject
	}
	return nil
}

// Trading Session Status Request with fields, tags and descriptions.
type TradingSessionStatusRequest struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (336)	Identifies the specific trading session for which status is
	// requested
	TradingSessionID string `protobuf:"bytes,2,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	// (625)	Identifies a specific sub-session or sub-segment within a
	// trading session
	TradingSessionSubID string `protobuf:"bytes,3,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	// (335)	Unique identifier assigned by the party generating the request
	TradSesReqID string `protobuf:"bytes,4,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
	// (1301)	Identifies the market or exchange for which the trading session
	// status is requested
	MarketID string `protobuf:"bytes,5,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// (263) Indicates whether the request is for a one-time snapshot or
	// subscription for updates
	SubscriptionRequest string `protobuf:"bytes,6,opt,name=subscriptionRequest,proto3" json:"subscriptionRequest,omitempty"`
	// (48)	Identifier for the security being traded in the session
	SecurityID string `protobuf:"bytes,7,opt,name=securityID,proto3" json:"securityID,omitempty"`
	// (22)	Identifies the source of the security identifier
	SecurityIDSource string `protobuf:"bytes,8,opt,name=securityIDSource,proto3" json:"securityIDSource,omitempty"`
	// (55)	Symbol representing the security being traded in the session
	Symbol string `protobuf:"bytes,9,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// 207	Exchange where the security is listed
	SecurityExchange string `protobuf:"bytes,10,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	// (1300)	Identifies the specific market segment or sector within the
	// trading session
	MarketSegmentID string `protobuf:"bytes,11,opt,name=marketSegmentID,proto3" json:"marketSegmentID,omitempty"`
	// (263) Type of trading session status request
	TradSesReqType int32 `protobuf:"varint,12,opt,name=tradSesReqType,proto3" json:"tradSesReqType,omitempty"`
	// (123)	Sub-type of trading session status request
	TradSesSubReqType int32 `protobuf:"varint,13,opt,name=tradSesSubReqType,proto3" json:"tradSesSubReqType,omitempty"`
	// (338)	Method used to determine the trading session
	TradSesMode int32 `protobuf:"varint,14,opt,name=tradSesMode,proto3" json:"tradSesMode,omitempty"`
	// (336) Date of the trading session for which status is requested
	TradingSessionDate string `protobuf:"bytes,15,opt,name=tradingSessionDate,proto3" json:"tradingSessionDate,omitempty"`
	// (338)Time of the trading session for which status is requested
	TradingSessionTime string `protobuf:"bytes,16,opt,name=tradingSessionTime,proto3" json:"tradingSessionTime,omitempty"`
	// (1147) Time of the sub-session or sub-segment within a trading session
	TradingSessionSubTime string `protobuf:"bytes,17,opt,name=tradingSessionSubTime,proto3" json:"tradingSessionSubTime,omitempty"`
	// (432) Date and time when the trading session status request is no longer
	// valid and should be disregarded
	ExpirationDate string `protobuf:"bytes,18,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,19,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *TradingSessionStatusRequest) Reset()         { *m = TradingSessionStatusRequest{} }
func (m *TradingSessionStatusRequest) String() string { return proto.CompactTextString(m) }
func (*TradingSessionStatusRequest) ProtoMessage()    {}
func (*TradingSessionStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0d8ceb9122a9133, []int{1}
}
func (m *TradingSessionStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingSessionStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingSessionStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingSessionStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSessionStatusRequest.Merge(m, src)
}
func (m *TradingSessionStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *TradingSessionStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSessionStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSessionStatusRequest proto.InternalMessageInfo

func (m *TradingSessionStatusRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TradingSessionStatusRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetSubscriptionRequest() string {
	if m != nil {
		return m.SubscriptionRequest
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetSecurityIDSource() string {
	if m != nil {
		return m.SecurityIDSource
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetMarketSegmentID() string {
	if m != nil {
		return m.MarketSegmentID
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetTradSesReqType() int32 {
	if m != nil {
		return m.TradSesReqType
	}
	return 0
}

func (m *TradingSessionStatusRequest) GetTradSesSubReqType() int32 {
	if m != nil {
		return m.TradSesSubReqType
	}
	return 0
}

func (m *TradingSessionStatusRequest) GetTradSesMode() int32 {
	if m != nil {
		return m.TradSesMode
	}
	return 0
}

func (m *TradingSessionStatusRequest) GetTradingSessionDate() string {
	if m != nil {
		return m.TradingSessionDate
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetTradingSessionTime() string {
	if m != nil {
		return m.TradingSessionTime
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetTradingSessionSubTime() string {
	if m != nil {
		return m.TradingSessionSubTime
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *TradingSessionStatusRequest) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

// Trading Session Status with fields, tags and descriptions.
type TradingSessionStatus struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (335)	Unique identifier assigned by the party generating the request
	TradSesReqID string `protobuf:"bytes,2,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
	// (336) Identifies the specific trading session
	TradingSessionID string `protobuf:"bytes,3,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	// (340) Indicates the current status of the trading session
	TradSesStatus int32 `protobuf:"varint,4,opt,name=tradSesStatus,proto3" json:"tradSesStatus,omitempty"`
	// (567) Provides a reason for rejecting or invalidating a trading session
	// status
	TradSesStatusRejReason int32 `protobuf:"varint,5,opt,name=tradSesStatusRejReason,proto3" json:"tradSesStatusRejReason,omitempty"`
	// (341) Time at which the trading session is scheduled to start
	TradSesStartTime string `protobuf:"bytes,6,opt,name=tradSesStartTime,proto3" json:"tradSesStartTime,omitempty"`
	// (342) Time at which the trading session opens
	TradSesOpenTime string `protobuf:"bytes,7,opt,name=tradSesOpenTime,proto3" json:"tradSesOpenTime,omitempty"`
	// (343)	Time at which the trading session pre-closes
	TradSesPreCloseTime string `protobuf:"bytes,8,opt,name=tradSesPreCloseTime,proto3" json:"tradSesPreCloseTime,omitempty"`
	// (344)	Time at which the trading session closes
	TradSesCloseTime string `protobuf:"bytes,9,opt,name=tradSesCloseTime,proto3" json:"tradSesCloseTime,omitempty"`
	// (345) Time at which the trading session is scheduled to end
	TradSesEndTime string `protobuf:"bytes,10,opt,name=tradSesEndTime,proto3" json:"tradSesEndTime,omitempty"`
	// (387) Total quantity of contracts or shares traded during the trading
	// session
	TotalVolumeTraded int32 `protobuf:"varint,11,opt,name=totalVolumeTraded,proto3" json:"totalVolumeTraded,omitempty"`
	// (1149)	Highest price traded during the trading session
	TradSesHighPx string `protobuf:"bytes,12,opt,name=tradSesHighPx,proto3" json:"tradSesHighPx,omitempty"`
	// (1148)	Lowest price traded during the trading session
	TradSesLowPx string `protobuf:"bytes,13,opt,name=tradSesLowPx,proto3" json:"tradSesLowPx,omitempty"`
	// (48)	Identifier for the security being traded in the session
	SecurityID string `protobuf:"bytes,14,opt,name=securityID,proto3" json:"securityID,omitempty"`
	// (22)	Identifies the source of the security identifier
	SecurityIDSource string `protobuf:"bytes,15,opt,name=securityIDSource,proto3" json:"securityIDSource,omitempty"`
	// (55) Symbol representing the security being traded in the session
	Symbol string `protobuf:"bytes,16,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// (207)	Exchange where the security is listed
	SecurityExchange string `protobuf:"bytes,17,opt,name=securityExchange,proto3" json:"securityExchange,omitempty"`
	// 1300	Identifies the specific market segment or sector within the
	// trading session
	MarketSegmentID string `protobuf:"bytes,18,opt,name=marketSegmentID,proto3" json:"marketSegmentID,omitempty"`
	// 1301	Identifies the market or exchange for the trading session
	MarketID string `protobuf:"bytes,19,opt,name=marketID,proto3" json:"marketID,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,20,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *TradingSessionStatus) Reset()         { *m = TradingSessionStatus{} }
func (m *TradingSessionStatus) String() string { return proto.CompactTextString(m) }
func (*TradingSessionStatus) ProtoMessage()    {}
func (*TradingSessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0d8ceb9122a9133, []int{2}
}
func (m *TradingSessionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingSessionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingSessionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingSessionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSessionStatus.Merge(m, src)
}
func (m *TradingSessionStatus) XXX_Size() int {
	return m.Size()
}
func (m *TradingSessionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSessionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSessionStatus proto.InternalMessageInfo

func (m *TradingSessionStatus) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TradingSessionStatus) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

func (m *TradingSessionStatus) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *TradingSessionStatus) GetTradSesStatus() int32 {
	if m != nil {
		return m.TradSesStatus
	}
	return 0
}

func (m *TradingSessionStatus) GetTradSesStatusRejReason() int32 {
	if m != nil {
		return m.TradSesStatusRejReason
	}
	return 0
}

func (m *TradingSessionStatus) GetTradSesStartTime() string {
	if m != nil {
		return m.TradSesStartTime
	}
	return ""
}

func (m *TradingSessionStatus) GetTradSesOpenTime() string {
	if m != nil {
		return m.TradSesOpenTime
	}
	return ""
}

func (m *TradingSessionStatus) GetTradSesPreCloseTime() string {
	if m != nil {
		return m.TradSesPreCloseTime
	}
	return ""
}

func (m *TradingSessionStatus) GetTradSesCloseTime() string {
	if m != nil {
		return m.TradSesCloseTime
	}
	return ""
}

func (m *TradingSessionStatus) GetTradSesEndTime() string {
	if m != nil {
		return m.TradSesEndTime
	}
	return ""
}

func (m *TradingSessionStatus) GetTotalVolumeTraded() int32 {
	if m != nil {
		return m.TotalVolumeTraded
	}
	return 0
}

func (m *TradingSessionStatus) GetTradSesHighPx() string {
	if m != nil {
		return m.TradSesHighPx
	}
	return ""
}

func (m *TradingSessionStatus) GetTradSesLowPx() string {
	if m != nil {
		return m.TradSesLowPx
	}
	return ""
}

func (m *TradingSessionStatus) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *TradingSessionStatus) GetSecurityIDSource() string {
	if m != nil {
		return m.SecurityIDSource
	}
	return ""
}

func (m *TradingSessionStatus) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TradingSessionStatus) GetSecurityExchange() string {
	if m != nil {
		return m.SecurityExchange
	}
	return ""
}

func (m *TradingSessionStatus) GetMarketSegmentID() string {
	if m != nil {
		return m.MarketSegmentID
	}
	return ""
}

func (m *TradingSessionStatus) GetMarketID() string {
	if m != nil {
		return m.MarketID
	}
	return ""
}

func (m *TradingSessionStatus) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

// Trading Session Status Request Reject with fields, tags and descriptions.
type TradingSessionStatusRequestReject struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (45)	Reference id of the rejected request message
	RefSeqNum string `protobuf:"bytes,2,opt,name=refSeqNum,proto3" json:"refSeqNum,omitempty"`
	// (372)	Message type of the rejected request
	RefMsgType string `protobuf:"bytes,3,opt,name=refMsgType,proto3" json:"refMsgType,omitempty"`
	// (373)	Code indicating the reason for rejecting the trading session
	// status request
	SessionRejectReason int32 `protobuf:"varint,4,opt,name=sessionRejectReason,proto3" json:"sessionRejectReason,omitempty"`
	// 58	Free-form text providing additional information about the rejection
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,6,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *TradingSessionStatusRequestReject) Reset()         { *m = TradingSessionStatusRequestReject{} }
func (m *TradingSessionStatusRequestReject) String() string { return proto.CompactTextString(m) }
func (*TradingSessionStatusRequestReject) ProtoMessage()    {}
func (*TradingSessionStatusRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0d8ceb9122a9133, []int{3}
}
func (m *TradingSessionStatusRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingSessionStatusRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingSessionStatusRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingSessionStatusRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingSessionStatusRequestReject.Merge(m, src)
}
func (m *TradingSessionStatusRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *TradingSessionStatusRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingSessionStatusRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_TradingSessionStatusRequestReject proto.InternalMessageInfo

func (m *TradingSessionStatusRequestReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TradingSessionStatusRequestReject) GetRefSeqNum() string {
	if m != nil {
		return m.RefSeqNum
	}
	return ""
}

func (m *TradingSessionStatusRequestReject) GetRefMsgType() string {
	if m != nil {
		return m.RefMsgType
	}
	return ""
}

func (m *TradingSessionStatusRequestReject) GetSessionRejectReason() int32 {
	if m != nil {
		return m.SessionRejectReason
	}
	return 0
}

func (m *TradingSessionStatusRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TradingSessionStatusRequestReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func init() {
	proto.RegisterType((*TradingSession)(nil), "jim380.re.fix.TradingSession")
	proto.RegisterType((*TradingSessionStatusRequest)(nil), "jim380.re.fix.TradingSessionStatusRequest")
	proto.RegisterType((*TradingSessionStatus)(nil), "jim380.re.fix.TradingSessionStatus")
	proto.RegisterType((*TradingSessionStatusRequestReject)(nil), "jim380.re.fix.TradingSessionStatusRequestReject")
}

func init() { proto.RegisterFile("re/fix/trading_session.proto", fileDescriptor_e0d8ceb9122a9133) }

var fileDescriptor_e0d8ceb9122a9133 = []byte{
	// 827 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x6e, 0xb2, 0xad, 0xb7, 0x9e, 0x6c, 0xd3, 0x76, 0xda, 0xad, 0xac, 0xdd, 0x12, 0x65, 0x03,
	0x42, 0x51, 0x05, 0x49, 0xd4, 0x22, 0x84, 0x38, 0x42, 0x2a, 0x35, 0x12, 0x85, 0x6a, 0x1c, 0x81,
	0xc4, 0xa5, 0x72, 0x92, 0x97, 0xc4, 0x25, 0xb6, 0xd3, 0x99, 0xb1, 0x70, 0x2e, 0x9c, 0x39, 0xf2,
	0x17, 0x71, 0xe6, 0x46, 0x8f, 0x1c, 0x51, 0xfb, 0x37, 0x70, 0x47, 0x7e, 0x63, 0xd7, 0x3f, 0xe2,
	0x36, 0xe9, 0x2d, 0xfe, 0xbe, 0x6f, 0xde, 0xbc, 0x79, 0x6f, 0xbe, 0x37, 0x21, 0xc7, 0x1c, 0xda,
	0x63, 0x3b, 0x68, 0x4b, 0x6e, 0x8d, 0x6c, 0x77, 0x72, 0x2d, 0x40, 0x08, 0xdb, 0x73, 0x5b, 0x73,
	0xee, 0x49, 0x8f, 0xee, 0xdc, 0xd8, 0xce, 0xd9, 0x57, 0x9d, 0x16, 0x87, 0xd6, 0xd8, 0x0e, 0xde,
	0x7d, 0x14, 0x89, 0x85, 0xb4, 0xdc, 0x91, 0xc5, 0x47, 0xd7, 0x0e, 0x08, 0x61, 0x4d, 0x40, 0xa9,
	0x1b, 0xff, 0x95, 0x49, 0xb5, 0xaf, 0xe2, 0x98, 0x2a, 0x0c, 0x3d, 0x26, 0x7a, 0x14, 0xb1, 0xd7,
	0x35, 0x4a, 0xf5, 0x52, 0x53, 0x67, 0x09, 0x40, 0x67, 0xe4, 0xbd, 0xcc, 0xe8, 0x4d, 0x69, 0x49,
	0x5f, 0x30, 0xb8, 0xf5, 0x41, 0x48, 0xa3, 0x5c, 0x2f, 0x35, 0x2b, 0xa7, 0x27, 0xad, 0x4c, 0x12,
	0xad, 0xfe, 0xd3, 0x2b, 0xd8, 0x73, 0xe1, 0xe8, 0x4f, 0xe4, 0xb0, 0x88, 0x36, 0x5e, 0xe1, 0x36,
	0x1f, 0xaf, 0xb3, 0x4d, 0x61, 0x00, 0xfa, 0x1b, 0xf9, 0xf0, 0xcc, 0xbe, 0x0c, 0x6e, 0x60, 0x28,
	0x8d, 0x4d, 0xdc, 0xa5, 0xf3, 0x82, 0xc3, 0xe0, 0x3a, 0xb6, 0x3a, 0x74, 0xe3, 0x4f, 0x8d, 0xbc,
	0x7f, 0x26, 0x10, 0xfd, 0x9c, 0x68, 0x53, 0xb0, 0x46, 0xc0, 0xb1, 0x03, 0x95, 0xd3, 0xb7, 0xb9,
	0x24, 0x2e, 0x90, 0x64, 0x91, 0x88, 0x9e, 0x90, 0xbd, 0xec, 0x9e, 0xbd, 0x2e, 0xb6, 0x42, 0x67,
	0x4b, 0x38, 0xed, 0x90, 0x83, 0x5c, 0x7e, 0xfe, 0xa0, 0xd7, 0xc5, 0x92, 0xea, 0xac, 0x88, 0xa2,
	0x0d, 0xf2, 0x26, 0x84, 0x4d, 0x08, 0xd3, 0xeb, 0x75, 0xb1, 0x2e, 0x3a, 0xcb, 0x60, 0xf4, 0x1d,
	0xd9, 0x76, 0x2c, 0xfe, 0x0b, 0xc8, 0x5e, 0xd7, 0xd8, 0x42, 0xfe, 0xf1, 0x3b, 0xdc, 0x51, 0xf8,
	0x03, 0x31, 0xe4, 0xf6, 0x5c, 0xda, 0x9e, 0x1b, 0xdf, 0x15, 0x4d, 0xed, 0x58, 0x40, 0xd1, 0x1a,
	0x21, 0x02, 0x86, 0x3e, 0xb7, 0xe5, 0xa2, 0xd7, 0x35, 0x5e, 0xa3, 0x30, 0x85, 0x84, 0xe7, 0x4d,
	0xbe, 0x4c, 0xcf, 0xe7, 0x43, 0x30, 0xb6, 0xd5, 0x79, 0xf3, 0x38, 0x3d, 0x22, 0x9a, 0x58, 0x38,
	0x03, 0x6f, 0x66, 0xe8, 0xa8, 0x88, 0xbe, 0xd2, 0x31, 0xce, 0x83, 0xe1, 0xd4, 0x72, 0x27, 0x60,
	0x90, 0x6c, 0x8c, 0x18, 0xa7, 0x4d, 0xb2, 0xab, 0x4e, 0x63, 0xc2, 0xc4, 0x01, 0x37, 0x3c, 0x64,
	0x05, 0xa5, 0x79, 0x98, 0x7e, 0x4a, 0xaa, 0x49, 0x5d, 0xfa, 0x8b, 0x39, 0x18, 0x6f, 0xea, 0xa5,
	0xe6, 0x16, 0xcb, 0xa1, 0xf4, 0x33, 0xb2, 0x1f, 0x21, 0xa6, 0x3f, 0x88, 0xa5, 0x3b, 0x28, 0x5d,
	0x26, 0x68, 0x9d, 0x54, 0x22, 0xf0, 0xd2, 0x1b, 0x81, 0x51, 0x45, 0x5d, 0x1a, 0xa2, 0x2d, 0x42,
	0xb3, 0xad, 0xeb, 0x5a, 0x12, 0x8c, 0x5d, 0x4c, 0xb2, 0x80, 0x59, 0xd6, 0xf7, 0x6d, 0x07, 0x8c,
	0xbd, 0x22, 0x7d, 0xc8, 0xd0, 0x2f, 0xc8, 0xdb, 0xa5, 0xab, 0x81, 0x4b, 0xf6, 0x71, 0x49, 0x31,
	0x19, 0x56, 0x03, 0x82, 0xb9, 0xcd, 0x2d, 0x19, 0x67, 0x44, 0x51, 0x9e, 0x43, 0x69, 0x87, 0xbc,
	0x96, 0xdc, 0xb2, 0x67, 0xc0, 0x8d, 0x03, 0xbc, 0xef, 0x47, 0xcb, 0xa6, 0x0b, 0x59, 0x16, 0xcb,
	0x1a, 0x7f, 0x6b, 0xe4, 0xb0, 0xc8, 0x40, 0x2f, 0x75, 0x4e, 0xfe, 0x6e, 0x97, 0x0b, 0xee, 0x76,
	0x91, 0xbb, 0x5e, 0x3d, 0xe1, 0xae, 0x4f, 0xc8, 0x4e, 0xdc, 0x3e, 0x35, 0xaa, 0x36, 0xb1, 0x57,
	0x59, 0x90, 0x7e, 0x49, 0x8e, 0x32, 0x00, 0x83, 0x1b, 0x06, 0x96, 0xf0, 0x5c, 0xf4, 0xce, 0x16,
	0x7b, 0x82, 0x8d, 0x33, 0x51, 0x0c, 0x97, 0xd8, 0x00, 0x2d, 0xc9, 0x24, 0x8d, 0x87, 0x77, 0x36,
	0xc2, 0x7e, 0x98, 0x83, 0x6a, 0xaf, 0x32, 0x52, 0x1e, 0x8e, 0x27, 0x82, 0x09, 0xe2, 0x8a, 0xc3,
	0xb7, 0x33, 0x4f, 0x00, 0xaa, 0xb7, 0x93, 0x89, 0x90, 0xa3, 0x52, 0x79, 0x24, 0x72, 0x3d, 0x93,
	0x47, 0xa2, 0x4d, 0x1c, 0x71, 0xee, 0x8e, 0x50, 0xa9, 0x5c, 0x96, 0x43, 0xd1, 0x11, 0x9e, 0xb4,
	0x66, 0x3f, 0x7a, 0x33, 0xdf, 0x81, 0xb0, 0xb7, 0x30, 0x42, 0x97, 0x85, 0x8e, 0xc8, 0x13, 0xa9,
	0x3a, 0x5f, 0xd8, 0x93, 0xe9, 0x55, 0x80, 0x36, 0xd3, 0x59, 0x16, 0x4c, 0x75, 0xf7, 0x3b, 0xef,
	0xd7, 0xab, 0x00, 0x0d, 0x96, 0x74, 0x17, 0xb1, 0xdc, 0xac, 0xa9, 0xae, 0x35, 0x6b, 0x76, 0x57,
	0xce, 0x9a, 0xbd, 0x95, 0xb3, 0x66, 0x7f, 0xfd, 0x59, 0x43, 0x8b, 0x67, 0x4d, 0x7a, 0xe6, 0x1e,
	0x2c, 0xcd, 0xdc, 0x47, 0x47, 0x1d, 0xae, 0xe7, 0xa8, 0xdf, 0xcb, 0xe4, 0xc3, 0xca, 0xb7, 0xed,
	0xa5, 0xf6, 0x3a, 0x26, 0x3a, 0x87, 0xb1, 0x09, 0xb7, 0xdf, 0xfb, 0x4e, 0xe4, 0xad, 0x04, 0x08,
	0x4b, 0xcf, 0x61, 0x7c, 0x29, 0x26, 0x38, 0xfd, 0x94, 0xa5, 0x52, 0x08, 0x3e, 0x1c, 0x2a, 0x95,
	0xe8, 0x65, 0x55, 0x1e, 0x51, 0x96, 0x2a, 0xa2, 0x28, 0x25, 0x9b, 0x12, 0x02, 0x19, 0x3d, 0x41,
	0xf8, 0x3b, 0x5d, 0x0a, 0x6d, 0xad, 0x52, 0x7c, 0xf3, 0xf5, 0x5f, 0xf7, 0xb5, 0xd2, 0xdd, 0x7d,
	0xad, 0xf4, 0xef, 0x7d, 0xad, 0xf4, 0xc7, 0x43, 0x6d, 0xe3, 0xee, 0xa1, 0xb6, 0xf1, 0xcf, 0x43,
	0x6d, 0xe3, 0xe7, 0xfa, 0xc4, 0x96, 0x53, 0x7f, 0xd0, 0x1a, 0x7a, 0x4e, 0x5b, 0x05, 0x69, 0x33,
	0x68, 0x07, 0xea, 0xff, 0xd8, 0x62, 0x0e, 0x62, 0xa0, 0xe1, 0x1f, 0xab, 0xb3, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xc4, 0x75, 0x71, 0xaf, 0xa6, 0x09, 0x00, 0x00,
}

func (m *TradingSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradingSessionStatusRequestReject != nil {
		{
			size, err := m.TradingSessionStatusRequestReject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.TradingSessionStatus != nil {
		{
			size, err := m.TradingSessionStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TradingSessionStatusRequest != nil {
		{
			size, err := m.TradingSessionStatusRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingSessionStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingSessionStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingSessionStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ExpirationDate) > 0 {
		i -= len(m.ExpirationDate)
		copy(dAtA[i:], m.ExpirationDate)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.ExpirationDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.TradingSessionSubTime) > 0 {
		i -= len(m.TradingSessionSubTime)
		copy(dAtA[i:], m.TradingSessionSubTime)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradingSessionSubTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.TradingSessionTime) > 0 {
		i -= len(m.TradingSessionTime)
		copy(dAtA[i:], m.TradingSessionTime)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradingSessionTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.TradingSessionDate) > 0 {
		i -= len(m.TradingSessionDate)
		copy(dAtA[i:], m.TradingSessionDate)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradingSessionDate)))
		i--
		dAtA[i] = 0x7a
	}
	if m.TradSesMode != 0 {
		i = encodeVarintTradingSession(dAtA, i, uint64(m.TradSesMode))
		i--
		dAtA[i] = 0x70
	}
	if m.TradSesSubReqType != 0 {
		i = encodeVarintTradingSession(dAtA, i, uint64(m.TradSesSubReqType))
		i--
		dAtA[i] = 0x68
	}
	if m.TradSesReqType != 0 {
		i = encodeVarintTradingSession(dAtA, i, uint64(m.TradSesReqType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.MarketSegmentID) > 0 {
		i -= len(m.MarketSegmentID)
		copy(dAtA[i:], m.MarketSegmentID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.MarketSegmentID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityIDSource) > 0 {
		i -= len(m.SecurityIDSource)
		copy(dAtA[i:], m.SecurityIDSource)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SecurityIDSource)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SubscriptionRequest) > 0 {
		i -= len(m.SubscriptionRequest)
		copy(dAtA[i:], m.SubscriptionRequest)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SubscriptionRequest)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MarketID) > 0 {
		i -= len(m.MarketID)
		copy(dAtA[i:], m.MarketID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.MarketID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingSessionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingSessionStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingSessionStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.MarketID) > 0 {
		i -= len(m.MarketID)
		copy(dAtA[i:], m.MarketID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.MarketID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.MarketSegmentID) > 0 {
		i -= len(m.MarketSegmentID)
		copy(dAtA[i:], m.MarketSegmentID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.MarketSegmentID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.SecurityExchange) > 0 {
		i -= len(m.SecurityExchange)
		copy(dAtA[i:], m.SecurityExchange)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SecurityExchange)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.SecurityIDSource) > 0 {
		i -= len(m.SecurityIDSource)
		copy(dAtA[i:], m.SecurityIDSource)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SecurityIDSource)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TradSesLowPx) > 0 {
		i -= len(m.TradSesLowPx)
		copy(dAtA[i:], m.TradSesLowPx)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesLowPx)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TradSesHighPx) > 0 {
		i -= len(m.TradSesHighPx)
		copy(dAtA[i:], m.TradSesHighPx)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesHighPx)))
		i--
		dAtA[i] = 0x62
	}
	if m.TotalVolumeTraded != 0 {
		i = encodeVarintTradingSession(dAtA, i, uint64(m.TotalVolumeTraded))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TradSesEndTime) > 0 {
		i -= len(m.TradSesEndTime)
		copy(dAtA[i:], m.TradSesEndTime)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesEndTime)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TradSesCloseTime) > 0 {
		i -= len(m.TradSesCloseTime)
		copy(dAtA[i:], m.TradSesCloseTime)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesCloseTime)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TradSesPreCloseTime) > 0 {
		i -= len(m.TradSesPreCloseTime)
		copy(dAtA[i:], m.TradSesPreCloseTime)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesPreCloseTime)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TradSesOpenTime) > 0 {
		i -= len(m.TradSesOpenTime)
		copy(dAtA[i:], m.TradSesOpenTime)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesOpenTime)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TradSesStartTime) > 0 {
		i -= len(m.TradSesStartTime)
		copy(dAtA[i:], m.TradSesStartTime)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesStartTime)))
		i--
		dAtA[i] = 0x32
	}
	if m.TradSesStatusRejReason != 0 {
		i = encodeVarintTradingSession(dAtA, i, uint64(m.TradSesStatusRejReason))
		i--
		dAtA[i] = 0x28
	}
	if m.TradSesStatus != 0 {
		i = encodeVarintTradingSession(dAtA, i, uint64(m.TradSesStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingSessionStatusRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingSessionStatusRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingSessionStatusRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SessionRejectReason != 0 {
		i = encodeVarintTradingSession(dAtA, i, uint64(m.SessionRejectReason))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefMsgType) > 0 {
		i -= len(m.RefMsgType)
		copy(dAtA[i:], m.RefMsgType)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.RefMsgType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RefSeqNum) > 0 {
		i -= len(m.RefSeqNum)
		copy(dAtA[i:], m.RefSeqNum)
		i = encodeVarintTradingSession(dAtA, i, uint64(len(m.RefSeqNum)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTradingSession(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTradingSession(dAtA []byte, offset int, v uint64) int {
	offset -= sovTradingSession(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TradingSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.TradingSessionStatusRequest != nil {
		l = m.TradingSessionStatusRequest.Size()
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.TradingSessionStatus != nil {
		l = m.TradingSessionStatus.Size()
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.TradingSessionStatusRequestReject != nil {
		l = m.TradingSessionStatusRequestReject.Size()
		n += 1 + l + sovTradingSession(uint64(l))
	}
	return n
}

func (m *TradingSessionStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.MarketID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.SubscriptionRequest)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.SecurityIDSource)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.MarketSegmentID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.TradSesReqType != 0 {
		n += 1 + sovTradingSession(uint64(m.TradSesReqType))
	}
	if m.TradSesSubReqType != 0 {
		n += 1 + sovTradingSession(uint64(m.TradSesSubReqType))
	}
	if m.TradSesMode != 0 {
		n += 1 + sovTradingSession(uint64(m.TradSesMode))
	}
	l = len(m.TradingSessionDate)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradingSessionTime)
	if l > 0 {
		n += 2 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradingSessionSubTime)
	if l > 0 {
		n += 2 + l + sovTradingSession(uint64(l))
	}
	l = len(m.ExpirationDate)
	if l > 0 {
		n += 2 + l + sovTradingSession(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 2 + l + sovTradingSession(uint64(l))
	}
	return n
}

func (m *TradingSessionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.TradSesStatus != 0 {
		n += 1 + sovTradingSession(uint64(m.TradSesStatus))
	}
	if m.TradSesStatusRejReason != 0 {
		n += 1 + sovTradingSession(uint64(m.TradSesStatusRejReason))
	}
	l = len(m.TradSesStartTime)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradSesOpenTime)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradSesPreCloseTime)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradSesCloseTime)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradSesEndTime)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.TotalVolumeTraded != 0 {
		n += 1 + sovTradingSession(uint64(m.TotalVolumeTraded))
	}
	l = len(m.TradSesHighPx)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.TradSesLowPx)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.SecurityIDSource)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 2 + l + sovTradingSession(uint64(l))
	}
	l = len(m.SecurityExchange)
	if l > 0 {
		n += 2 + l + sovTradingSession(uint64(l))
	}
	l = len(m.MarketSegmentID)
	if l > 0 {
		n += 2 + l + sovTradingSession(uint64(l))
	}
	l = len(m.MarketID)
	if l > 0 {
		n += 2 + l + sovTradingSession(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 2 + l + sovTradingSession(uint64(l))
	}
	return n
}

func (m *TradingSessionStatusRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.RefSeqNum)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	l = len(m.RefMsgType)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.SessionRejectReason != 0 {
		n += 1 + sovTradingSession(uint64(m.SessionRejectReason))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTradingSession(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovTradingSession(uint64(l))
	}
	return n
}

func sovTradingSession(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTradingSession(x uint64) (n int) {
	return sovTradingSession(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TradingSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionStatusRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingSessionStatusRequest == nil {
				m.TradingSessionStatusRequest = &TradingSessionStatusRequest{}
			}
			if err := m.TradingSessionStatusRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingSessionStatus == nil {
				m.TradingSessionStatus = &TradingSessionStatus{}
			}
			if err := m.TradingSessionStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionStatusRequestReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingSessionStatusRequestReject == nil {
				m.TradingSessionStatusRequestReject = &TradingSessionStatusRequestReject{}
			}
			if err := m.TradingSessionStatusRequestReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradingSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingSessionStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingSessionStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingSessionStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketSegmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketSegmentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqType", wireType)
			}
			m.TradSesReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesReqType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesSubReqType", wireType)
			}
			m.TradSesSubReqType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesSubReqType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesMode", wireType)
			}
			m.TradSesMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesMode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradingSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingSessionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingSessionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingSessionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatus", wireType)
			}
			m.TradSesStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStatusRejReason", wireType)
			}
			m.TradSesStatusRejReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradSesStatusRejReason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesOpenTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesOpenTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesPreCloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesPreCloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesCloseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesCloseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVolumeTraded", wireType)
			}
			m.TotalVolumeTraded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalVolumeTraded |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesHighPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesHighPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesLowPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesLowPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityExchange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityExchange = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketSegmentID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketSegmentID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradingSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingSessionStatusRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTradingSession
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingSessionStatusRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingSessionStatusRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefSeqNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefSeqNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefMsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefMsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionRejectReason", wireType)
			}
			m.SessionRejectReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionRejectReason |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTradingSession
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTradingSession
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTradingSession(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTradingSession
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTradingSession(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTradingSession
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTradingSession
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTradingSession
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTradingSession
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTradingSession
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTradingSession        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTradingSession          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTradingSession = fmt.Errorf("proto: unexpected end of group")
)
