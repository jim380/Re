// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/standard_message.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Header struct {
	BeginString string `protobuf:"bytes,1,opt,name=beginString,proto3" json:"beginString,omitempty"`
	// example, "FIX.4.4" indicates version 4.4 of the protocol.
	BodyLength int64  `protobuf:"varint,2,opt,name=bodyLength,proto3" json:"bodyLength,omitempty"`
	MsgType    string `protobuf:"bytes,3,opt,name=msgType,proto3" json:"msgType,omitempty"`
	// For example, "D" indicates a New Order Single message
	SenderCompID string `protobuf:"bytes,4,opt,name=senderCompID,proto3" json:"senderCompID,omitempty"`
	// unique identifier assigned to each party that uses the FIX protocol
	TargetCompID string `protobuf:"bytes,5,opt,name=targetCompID,proto3" json:"targetCompID,omitempty"`
	MsgSeqNum    int64  `protobuf:"varint,6,opt,name=msgSeqNum,proto3" json:"msgSeqNum,omitempty"`
	// a unique sequence number to each message
	SendingTime string `protobuf:"bytes,7,opt,name=sendingTime,proto3" json:"sendingTime,omitempty"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_03513ff73b7169d5, []int{0}
}
func (m *Header) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Header.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return m.Size()
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetBeginString() string {
	if m != nil {
		return m.BeginString
	}
	return ""
}

func (m *Header) GetBodyLength() int64 {
	if m != nil {
		return m.BodyLength
	}
	return 0
}

func (m *Header) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *Header) GetSenderCompID() string {
	if m != nil {
		return m.SenderCompID
	}
	return ""
}

func (m *Header) GetTargetCompID() string {
	if m != nil {
		return m.TargetCompID
	}
	return ""
}

func (m *Header) GetMsgSeqNum() int64 {
	if m != nil {
		return m.MsgSeqNum
	}
	return 0
}

func (m *Header) GetSendingTime() string {
	if m != nil {
		return m.SendingTime
	}
	return ""
}

type Trailer struct {
	CheckSum int64 `protobuf:"varint,1,opt,name=checkSum,proto3" json:"checkSum,omitempty"`
}

func (m *Trailer) Reset()         { *m = Trailer{} }
func (m *Trailer) String() string { return proto.CompactTextString(m) }
func (*Trailer) ProtoMessage()    {}
func (*Trailer) Descriptor() ([]byte, []int) {
	return fileDescriptor_03513ff73b7169d5, []int{1}
}
func (m *Trailer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trailer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trailer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trailer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trailer.Merge(m, src)
}
func (m *Trailer) XXX_Size() int {
	return m.Size()
}
func (m *Trailer) XXX_DiscardUnknown() {
	xxx_messageInfo_Trailer.DiscardUnknown(m)
}

var xxx_messageInfo_Trailer proto.InternalMessageInfo

func (m *Trailer) GetCheckSum() int64 {
	if m != nil {
		return m.CheckSum
	}
	return 0
}

func init() {
	proto.RegisterType((*Header)(nil), "jim380.re.fix.Header")
	proto.RegisterType((*Trailer)(nil), "jim380.re.fix.Trailer")
}

func init() { proto.RegisterFile("re/fix/standard_message.proto", fileDescriptor_03513ff73b7169d5) }

var fileDescriptor_03513ff73b7169d5 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x6b, 0x0a, 0x2d, 0x35, 0xb0, 0x78, 0xb2, 0x10, 0x58, 0x51, 0x25, 0xa4, 0x4e, 0x09,
	0x52, 0x17, 0xc4, 0x08, 0x0c, 0x20, 0x21, 0x86, 0xb4, 0x13, 0x0b, 0x72, 0x9a, 0xab, 0x6b, 0xc0,
	0x4e, 0xb0, 0x5d, 0x29, 0xf9, 0x16, 0x7c, 0x2c, 0xc6, 0x8e, 0x8c, 0x28, 0x59, 0xf9, 0x10, 0x28,
	0x0e, 0x7f, 0xc2, 0xf8, 0x7e, 0xf7, 0xee, 0x74, 0xef, 0xe1, 0x63, 0x03, 0xd1, 0x52, 0x16, 0x91,
	0x75, 0x5c, 0xa7, 0xdc, 0xa4, 0x0f, 0x0a, 0xac, 0xe5, 0x02, 0xc2, 0xdc, 0x64, 0x2e, 0x23, 0x07,
	0x8f, 0x52, 0x4d, 0xcf, 0x4e, 0x43, 0x03, 0xe1, 0x52, 0x16, 0xe3, 0x4f, 0x84, 0x07, 0xd7, 0xc0,
	0x53, 0x30, 0x24, 0xc0, 0x7b, 0x09, 0x08, 0xa9, 0x67, 0xce, 0x48, 0x2d, 0x28, 0x0a, 0xd0, 0x64,
	0x14, 0x77, 0x11, 0x61, 0x18, 0x27, 0x59, 0x5a, 0xde, 0x82, 0x16, 0x6e, 0x45, 0xb7, 0x02, 0x34,
	0xe9, 0xc7, 0x1d, 0x42, 0x28, 0x1e, 0x2a, 0x2b, 0xe6, 0x65, 0x0e, 0xb4, 0xef, 0xb7, 0x7f, 0x24,
	0x19, 0xe3, 0x7d, 0x0b, 0x3a, 0x05, 0x73, 0x99, 0xa9, 0xfc, 0xe6, 0x8a, 0x6e, 0xfb, 0xf1, 0x3f,
	0xd6, 0x78, 0x1c, 0x37, 0x02, 0xdc, 0xb7, 0x67, 0xa7, 0xf5, 0x74, 0x19, 0x39, 0xc2, 0x23, 0x65,
	0xc5, 0x0c, 0x5e, 0xee, 0xd6, 0x8a, 0x0e, 0xfc, 0x03, 0x7f, 0xa0, 0x49, 0xd0, 0x5c, 0x94, 0x5a,
	0xcc, 0xa5, 0x02, 0x3a, 0x6c, 0x13, 0x74, 0xd0, 0xf8, 0x04, 0x0f, 0xe7, 0x86, 0xcb, 0x67, 0x30,
	0xe4, 0x10, 0xef, 0x2e, 0x56, 0xb0, 0x78, 0x9a, 0xad, 0x95, 0xcf, 0xda, 0x8f, 0x7f, 0xf5, 0xc5,
	0xf9, 0x5b, 0xc5, 0xd0, 0xa6, 0x62, 0xe8, 0xa3, 0x62, 0xe8, 0xb5, 0x66, 0xbd, 0x4d, 0xcd, 0x7a,
	0xef, 0x35, 0xeb, 0xdd, 0x07, 0x42, 0xba, 0xd5, 0x3a, 0x09, 0x17, 0x99, 0x8a, 0xda, 0x26, 0xa3,
	0x18, 0xa2, 0xc2, 0x37, 0xee, 0xca, 0x1c, 0x6c, 0x32, 0xf0, 0x3d, 0x4f, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xb0, 0x14, 0xa1, 0xab, 0x88, 0x01, 0x00, 0x00,
}

func (m *Header) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Header) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Header) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SendingTime) > 0 {
		i -= len(m.SendingTime)
		copy(dAtA[i:], m.SendingTime)
		i = encodeVarintStandardMessage(dAtA, i, uint64(len(m.SendingTime)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MsgSeqNum != 0 {
		i = encodeVarintStandardMessage(dAtA, i, uint64(m.MsgSeqNum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TargetCompID) > 0 {
		i -= len(m.TargetCompID)
		copy(dAtA[i:], m.TargetCompID)
		i = encodeVarintStandardMessage(dAtA, i, uint64(len(m.TargetCompID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderCompID) > 0 {
		i -= len(m.SenderCompID)
		copy(dAtA[i:], m.SenderCompID)
		i = encodeVarintStandardMessage(dAtA, i, uint64(len(m.SenderCompID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintStandardMessage(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BodyLength != 0 {
		i = encodeVarintStandardMessage(dAtA, i, uint64(m.BodyLength))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BeginString) > 0 {
		i -= len(m.BeginString)
		copy(dAtA[i:], m.BeginString)
		i = encodeVarintStandardMessage(dAtA, i, uint64(len(m.BeginString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Trailer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trailer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trailer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckSum != 0 {
		i = encodeVarintStandardMessage(dAtA, i, uint64(m.CheckSum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStandardMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStandardMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BeginString)
	if l > 0 {
		n += 1 + l + sovStandardMessage(uint64(l))
	}
	if m.BodyLength != 0 {
		n += 1 + sovStandardMessage(uint64(m.BodyLength))
	}
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovStandardMessage(uint64(l))
	}
	l = len(m.SenderCompID)
	if l > 0 {
		n += 1 + l + sovStandardMessage(uint64(l))
	}
	l = len(m.TargetCompID)
	if l > 0 {
		n += 1 + l + sovStandardMessage(uint64(l))
	}
	if m.MsgSeqNum != 0 {
		n += 1 + sovStandardMessage(uint64(m.MsgSeqNum))
	}
	l = len(m.SendingTime)
	if l > 0 {
		n += 1 + l + sovStandardMessage(uint64(l))
	}
	return n
}

func (m *Trailer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CheckSum != 0 {
		n += 1 + sovStandardMessage(uint64(m.CheckSum))
	}
	return n
}

func sovStandardMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStandardMessage(x uint64) (n int) {
	return sovStandardMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Header) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStandardMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStandardMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStandardMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeginString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyLength", wireType)
			}
			m.BodyLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodyLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStandardMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStandardMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderCompID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStandardMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStandardMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderCompID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCompID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStandardMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStandardMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetCompID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSeqNum", wireType)
			}
			m.MsgSeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSeqNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendingTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStandardMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStandardMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendingTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStandardMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStandardMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Trailer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStandardMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trailer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trailer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSum", wireType)
			}
			m.CheckSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckSum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStandardMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStandardMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStandardMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStandardMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStandardMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStandardMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStandardMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStandardMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStandardMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStandardMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStandardMessage = fmt.Errorf("proto: unexpected end of group")
)
