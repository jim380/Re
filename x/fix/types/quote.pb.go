// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/quote.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Quote struct {
	SessionID            string                `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	QuoteRequest         *QuoteRequest         `protobuf:"bytes,2,opt,name=quoteRequest,proto3" json:"quoteRequest,omitempty"`
	QuoteAcknowledgement *QuoteAcknowledgement `protobuf:"bytes,3,opt,name=quoteAcknowledgement,proto3" json:"quoteAcknowledgement,omitempty"`
	QuoteRequestReject   *QuoteRequestReject   `protobuf:"bytes,4,opt,name=quoteRequestReject,proto3" json:"quoteRequestReject,omitempty"`
}

func (m *Quote) Reset()         { *m = Quote{} }
func (m *Quote) String() string { return proto.CompactTextString(m) }
func (*Quote) ProtoMessage()    {}
func (*Quote) Descriptor() ([]byte, []int) {
	return fileDescriptor_514bbb019fde7c91, []int{0}
}
func (m *Quote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quote.Merge(m, src)
}
func (m *Quote) XXX_Size() int {
	return m.Size()
}
func (m *Quote) XXX_DiscardUnknown() {
	xxx_messageInfo_Quote.DiscardUnknown(m)
}

var xxx_messageInfo_Quote proto.InternalMessageInfo

func (m *Quote) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *Quote) GetQuoteRequest() *QuoteRequest {
	if m != nil {
		return m.QuoteRequest
	}
	return nil
}

func (m *Quote) GetQuoteAcknowledgement() *QuoteAcknowledgement {
	if m != nil {
		return m.QuoteAcknowledgement
	}
	return nil
}

func (m *Quote) GetQuoteRequestReject() *QuoteRequestReject {
	if m != nil {
		return m.QuoteRequestReject
	}
	return nil
}

type QuoteRequest struct {
	// Standard header for the message
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier for the Quote Request message
	QuoteReqID string `protobuf:"bytes,2,opt,name=quoteReqID,proto3" json:"quoteReqID,omitempty"`
	// Ticker symbol or instrument code for the security being quoted
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Identifier for the security being quoted
	SecurityID string `protobuf:"bytes,4,opt,name=securityID,proto3" json:"securityID,omitempty"`
	// Specifies the source of the security identifier
	SecurityIDSource string `protobuf:"bytes,5,opt,name=securityIDSource,proto3" json:"securityIDSource,omitempty"`
	// Indicates whether the quote is for a buy or sell order
	Side string `protobuf:"bytes,6,opt,name=side,proto3" json:"side,omitempty"`
	// Quantity of the security being quoted
	OrderQty string `protobuf:"bytes,7,opt,name=orderQty,proto3" json:"orderQty,omitempty"`
	// Date of the future settlement
	FutSettDate string `protobuf:"bytes,8,opt,name=futSettDate,proto3" json:"futSettDate,omitempty"`
	// Secondary settlement date for the security
	SettlDate2 string `protobuf:"bytes,9,opt,name=settlDate2,proto3" json:"settlDate2,omitempty"`
	// Account number for the order
	Account string `protobuf:"bytes,10,opt,name=account,proto3" json:"account,omitempty"`
	// Price at which the buyer is willing to buy the security
	BidPx string `protobuf:"bytes,11,opt,name=bidPx,proto3" json:"bidPx,omitempty"`
	// Price at which the seller is willing to sell the security
	OfferPx string `protobuf:"bytes,12,opt,name=offerPx,proto3" json:"offerPx,omitempty"`
	// Currency of the quoted price
	Currency string `protobuf:"bytes,13,opt,name=currency,proto3" json:"currency,omitempty"`
	// Time after which the quote is no longer valid
	ValidUntilTime string `protobuf:"bytes,14,opt,name=validUntilTime,proto3" json:"validUntilTime,omitempty"`
	// Time at which the quote will expire
	ExpireTime string `protobuf:"bytes,15,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	// Type of quote being requested (e.g. Indicative, Firm)
	QuoteType string `protobuf:"bytes,16,opt,name=quoteType,proto3" json:"quoteType,omitempty"`
	// Quantity of securities offered at the bid price
	BidSize string `protobuf:"bytes,17,opt,name=bidSize,proto3" json:"bidSize,omitempty"`
	// Quantity of securities offered at the offer price
	OfferSize string `protobuf:"bytes,18,opt,name=offerSize,proto3" json:"offerSize,omitempty"`
	// Market identification code
	Mic string `protobuf:"bytes,19,opt,name=mic,proto3" json:"mic,omitempty"`
	// Additional information or comments about the quote request.
	Text string `protobuf:"bytes,20,opt,name=text,proto3" json:"text,omitempty"`
	// Standard trailer for the message
	Trailer *Trailer `protobuf:"bytes,21,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *QuoteRequest) Reset()         { *m = QuoteRequest{} }
func (m *QuoteRequest) String() string { return proto.CompactTextString(m) }
func (*QuoteRequest) ProtoMessage()    {}
func (*QuoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_514bbb019fde7c91, []int{1}
}
func (m *QuoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteRequest.Merge(m, src)
}
func (m *QuoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteRequest proto.InternalMessageInfo

func (m *QuoteRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QuoteRequest) GetQuoteReqID() string {
	if m != nil {
		return m.QuoteReqID
	}
	return ""
}

func (m *QuoteRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *QuoteRequest) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *QuoteRequest) GetSecurityIDSource() string {
	if m != nil {
		return m.SecurityIDSource
	}
	return ""
}

func (m *QuoteRequest) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *QuoteRequest) GetOrderQty() string {
	if m != nil {
		return m.OrderQty
	}
	return ""
}

func (m *QuoteRequest) GetFutSettDate() string {
	if m != nil {
		return m.FutSettDate
	}
	return ""
}

func (m *QuoteRequest) GetSettlDate2() string {
	if m != nil {
		return m.SettlDate2
	}
	return ""
}

func (m *QuoteRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *QuoteRequest) GetBidPx() string {
	if m != nil {
		return m.BidPx
	}
	return ""
}

func (m *QuoteRequest) GetOfferPx() string {
	if m != nil {
		return m.OfferPx
	}
	return ""
}

func (m *QuoteRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *QuoteRequest) GetValidUntilTime() string {
	if m != nil {
		return m.ValidUntilTime
	}
	return ""
}

func (m *QuoteRequest) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *QuoteRequest) GetQuoteType() string {
	if m != nil {
		return m.QuoteType
	}
	return ""
}

func (m *QuoteRequest) GetBidSize() string {
	if m != nil {
		return m.BidSize
	}
	return ""
}

func (m *QuoteRequest) GetOfferSize() string {
	if m != nil {
		return m.OfferSize
	}
	return ""
}

func (m *QuoteRequest) GetMic() string {
	if m != nil {
		return m.Mic
	}
	return ""
}

func (m *QuoteRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *QuoteRequest) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

type QuoteAcknowledgement struct {
	// standard Header
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier for the original Quote Request message
	QuoteReqID string `protobuf:"bytes,2,opt,name=quoteReqID,proto3" json:"quoteReqID,omitempty"`
	// Unique identifier for the Quote
	QuoteID string `protobuf:"bytes,3,opt,name=quoteID,proto3" json:"quoteID,omitempty"`
	// Status of the Quote (e.g. Accepted, Rejected, Expired)
	QuoteStatus string `protobuf:"bytes,4,opt,name=quoteStatus,proto3" json:"quoteStatus,omitempty"`
	// Type of Quote (e.g. Indicative, Firm)
	QuoteType string `protobuf:"bytes,5,opt,name=quoteType,proto3" json:"quoteType,omitempty"`
	// dentifier for the security being quoted
	SecurityID string `protobuf:"bytes,6,opt,name=securityID,proto3" json:"securityID,omitempty"`
	// Specifies the source of the security identifier
	SecurityIDSource string `protobuf:"bytes,7,opt,name=securityIDSource,proto3" json:"securityIDSource,omitempty"`
	// Ticker symbol or instrument code for the security being quoted
	Symbol string `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// indicates whether the quote is for a buy or sell order
	Side string `protobuf:"bytes,9,opt,name=side,proto3" json:"side,omitempty"`
	// Quantity of the security being quoted
	OrderQty string `protobuf:"bytes,10,opt,name=orderQty,proto3" json:"orderQty,omitempty"`
	// Quantity of the last trade
	LastQty string `protobuf:"bytes,11,opt,name=lastQty,proto3" json:"lastQty,omitempty"`
	// Price of the last trade
	LastPx string `protobuf:"bytes,12,opt,name=lastPx,proto3" json:"lastPx,omitempty"`
	// Price at which the buyer is willing to buy the security
	BidPx string `protobuf:"bytes,13,opt,name=bidPx,proto3" json:"bidPx,omitempty"`
	// Price at which the seller is willing to sell the security
	OfferPx string `protobuf:"bytes,14,opt,name=offerPx,proto3" json:"offerPx,omitempty"`
	// Currency of the quoted price
	Currency string `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	// Settlement date for the security
	SettlDate string `protobuf:"bytes,16,opt,name=settlDate,proto3" json:"settlDate,omitempty"`
	// Time after which the quote is no longer valid
	ValidUntilTime string `protobuf:"bytes,17,opt,name=validUntilTime,proto3" json:"validUntilTime,omitempty"`
	// Time at which the quote will expire
	ExpireTime string `protobuf:"bytes,18,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	// Additional information or comments about the quote
	Text string `protobuf:"bytes,19,opt,name=text,proto3" json:"text,omitempty"`
	// Number of Quote Qualifiers
	NoQuoteQualifiers string `protobuf:"bytes,20,opt,name=noQuoteQualifiers,proto3" json:"noQuoteQualifiers,omitempty"`
	// Additional information about the quote (e.g. Yield, Size)
	QuoteQualifier string `protobuf:"bytes,21,opt,name=quoteQualifier,proto3" json:"quoteQualifier,omitempty"`
	// Number of legs in the security (for multi-legged securities)
	NoLegs string `protobuf:"bytes,22,opt,name=noLegs,proto3" json:"noLegs,omitempty"`
	// Ticker symbol or instrument code for each leg of the security
	LegSymbol string `protobuf:"bytes,23,opt,name=legSymbol,proto3" json:"legSymbol,omitempty"`
	// Identifier for each leg of the security
	LegSecurityID string `protobuf:"bytes,24,opt,name=legSecurityID,proto3" json:"legSecurityID,omitempty"`
	// Specifies the source of the identifier for each leg of the security
	LegSecurityIDSource string `protobuf:"bytes,25,opt,name=legSecurityIDSource,proto3" json:"legSecurityIDSource,omitempty"`
	// Ratio of one leg to the other in a multi-legged security
	LegRatioQty string `protobuf:"bytes,26,opt,name=legRatioQty,proto3" json:"legRatioQty,omitempty"`
	// standard Trailer
	Trailer *Trailer `protobuf:"bytes,27,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *QuoteAcknowledgement) Reset()         { *m = QuoteAcknowledgement{} }
func (m *QuoteAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*QuoteAcknowledgement) ProtoMessage()    {}
func (*QuoteAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_514bbb019fde7c91, []int{2}
}
func (m *QuoteAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuoteAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuoteAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteAcknowledgement.Merge(m, src)
}
func (m *QuoteAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *QuoteAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteAcknowledgement proto.InternalMessageInfo

func (m *QuoteAcknowledgement) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QuoteAcknowledgement) GetQuoteReqID() string {
	if m != nil {
		return m.QuoteReqID
	}
	return ""
}

func (m *QuoteAcknowledgement) GetQuoteID() string {
	if m != nil {
		return m.QuoteID
	}
	return ""
}

func (m *QuoteAcknowledgement) GetQuoteStatus() string {
	if m != nil {
		return m.QuoteStatus
	}
	return ""
}

func (m *QuoteAcknowledgement) GetQuoteType() string {
	if m != nil {
		return m.QuoteType
	}
	return ""
}

func (m *QuoteAcknowledgement) GetSecurityID() string {
	if m != nil {
		return m.SecurityID
	}
	return ""
}

func (m *QuoteAcknowledgement) GetSecurityIDSource() string {
	if m != nil {
		return m.SecurityIDSource
	}
	return ""
}

func (m *QuoteAcknowledgement) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *QuoteAcknowledgement) GetSide() string {
	if m != nil {
		return m.Side
	}
	return ""
}

func (m *QuoteAcknowledgement) GetOrderQty() string {
	if m != nil {
		return m.OrderQty
	}
	return ""
}

func (m *QuoteAcknowledgement) GetLastQty() string {
	if m != nil {
		return m.LastQty
	}
	return ""
}

func (m *QuoteAcknowledgement) GetLastPx() string {
	if m != nil {
		return m.LastPx
	}
	return ""
}

func (m *QuoteAcknowledgement) GetBidPx() string {
	if m != nil {
		return m.BidPx
	}
	return ""
}

func (m *QuoteAcknowledgement) GetOfferPx() string {
	if m != nil {
		return m.OfferPx
	}
	return ""
}

func (m *QuoteAcknowledgement) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *QuoteAcknowledgement) GetSettlDate() string {
	if m != nil {
		return m.SettlDate
	}
	return ""
}

func (m *QuoteAcknowledgement) GetValidUntilTime() string {
	if m != nil {
		return m.ValidUntilTime
	}
	return ""
}

func (m *QuoteAcknowledgement) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *QuoteAcknowledgement) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *QuoteAcknowledgement) GetNoQuoteQualifiers() string {
	if m != nil {
		return m.NoQuoteQualifiers
	}
	return ""
}

func (m *QuoteAcknowledgement) GetQuoteQualifier() string {
	if m != nil {
		return m.QuoteQualifier
	}
	return ""
}

func (m *QuoteAcknowledgement) GetNoLegs() string {
	if m != nil {
		return m.NoLegs
	}
	return ""
}

func (m *QuoteAcknowledgement) GetLegSymbol() string {
	if m != nil {
		return m.LegSymbol
	}
	return ""
}

func (m *QuoteAcknowledgement) GetLegSecurityID() string {
	if m != nil {
		return m.LegSecurityID
	}
	return ""
}

func (m *QuoteAcknowledgement) GetLegSecurityIDSource() string {
	if m != nil {
		return m.LegSecurityIDSource
	}
	return ""
}

func (m *QuoteAcknowledgement) GetLegRatioQty() string {
	if m != nil {
		return m.LegRatioQty
	}
	return ""
}

func (m *QuoteAcknowledgement) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

type QuoteRequestReject struct {
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The ID of the original Quote Request message that is being rejected
	QuoteReqID string `protobuf:"bytes,2,opt,name=quoteReqID,proto3" json:"quoteReqID,omitempty"`
	// A code indicating the reason for rejecting the Quote Request, Examples
	// include "Invalid instrument requested", "Unknown instrument", "Unsupported
	// request type", etc.
	QuoteRequestRejectReason string `protobuf:"bytes,3,opt,name=quoteRequestRejectReason,proto3" json:"quoteRequestRejectReason,omitempty"`
	// A human-readable description of the reason for rejecting the Quote Request
	Text    string   `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Trailer *Trailer `protobuf:"bytes,5,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *QuoteRequestReject) Reset()         { *m = QuoteRequestReject{} }
func (m *QuoteRequestReject) String() string { return proto.CompactTextString(m) }
func (*QuoteRequestReject) ProtoMessage()    {}
func (*QuoteRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_514bbb019fde7c91, []int{3}
}
func (m *QuoteRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuoteRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuoteRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuoteRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuoteRequestReject.Merge(m, src)
}
func (m *QuoteRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *QuoteRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_QuoteRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_QuoteRequestReject proto.InternalMessageInfo

func (m *QuoteRequestReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *QuoteRequestReject) GetQuoteReqID() string {
	if m != nil {
		return m.QuoteReqID
	}
	return ""
}

func (m *QuoteRequestReject) GetQuoteRequestRejectReason() string {
	if m != nil {
		return m.QuoteRequestRejectReason
	}
	return ""
}

func (m *QuoteRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *QuoteRequestReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func init() {
	proto.RegisterType((*Quote)(nil), "jim380.re.fix.Quote")
	proto.RegisterType((*QuoteRequest)(nil), "jim380.re.fix.QuoteRequest")
	proto.RegisterType((*QuoteAcknowledgement)(nil), "jim380.re.fix.QuoteAcknowledgement")
	proto.RegisterType((*QuoteRequestReject)(nil), "jim380.re.fix.QuoteRequestReject")
}

func init() { proto.RegisterFile("re/fix/quote.proto", fileDescriptor_514bbb019fde7c91) }

var fileDescriptor_514bbb019fde7c91 = []byte{
	// 816 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6e, 0x2b, 0x35,
	0x14, 0xc6, 0x9b, 0xb6, 0x49, 0x3a, 0x4e, 0xd3, 0x3f, 0x6e, 0x5a, 0x4c, 0x0b, 0x51, 0x28, 0x08,
	0x55, 0x08, 0x92, 0xaa, 0xdd, 0xa0, 0x6e, 0x10, 0x28, 0x0b, 0x22, 0xb1, 0x68, 0x26, 0x45, 0x48,
	0x6c, 0xd0, 0x64, 0xe6, 0x24, 0x75, 0x99, 0xcc, 0xa4, 0xb6, 0x07, 0x12, 0xb6, 0x3c, 0x00, 0x88,
	0xa7, 0x62, 0xd9, 0xe5, 0x5d, 0x5e, 0xb5, 0xba, 0xef, 0x71, 0xe5, 0xe3, 0x99, 0x64, 0x66, 0x92,
	0x5c, 0x65, 0xd1, 0x9d, 0xbf, 0xef, 0x1c, 0xdb, 0xc7, 0xf6, 0xef, 0x24, 0x43, 0xa8, 0x80, 0xd6,
	0x80, 0x4f, 0x5a, 0x8f, 0x51, 0xa8, 0xa0, 0x39, 0x16, 0xa1, 0x0a, 0x69, 0xf5, 0x81, 0x8f, 0xae,
	0xbf, 0xbd, 0x6c, 0x0a, 0x68, 0x0e, 0xf8, 0xe4, 0xf4, 0xd3, 0x38, 0x45, 0x2a, 0x27, 0xf0, 0x1c,
	0xe1, 0xfd, 0x36, 0x02, 0x29, 0x9d, 0x61, 0x9c, 0x7d, 0xfe, 0xdf, 0x26, 0x29, 0x76, 0xf5, 0x6c,
	0xfa, 0x09, 0xb1, 0x24, 0x48, 0xc9, 0xc3, 0xa0, 0xd3, 0x66, 0x85, 0x46, 0xe1, 0xc2, 0xb2, 0xe7,
	0x06, 0xfd, 0x8e, 0xec, 0xe2, 0x26, 0x36, 0x3c, 0x46, 0x20, 0x15, 0xdb, 0x6c, 0x14, 0x2e, 0x2a,
	0x57, 0x67, 0xcd, 0xcc, 0x66, 0xcd, 0x6e, 0x2a, 0xc5, 0xce, 0x4c, 0xa0, 0xbf, 0x90, 0x1a, 0xea,
	0xef, 0xdd, 0xdf, 0x83, 0xf0, 0x4f, 0x1f, 0xbc, 0x21, 0x8c, 0x20, 0x50, 0x6c, 0x0b, 0x17, 0xfa,
	0x7c, 0xd9, 0x42, 0xb9, 0x54, 0x7b, 0xe9, 0x02, 0xb4, 0x4b, 0x68, 0x7a, 0x23, 0x1b, 0x1e, 0xc0,
	0x55, 0x6c, 0x1b, 0x97, 0xfd, 0xec, 0x43, 0xf5, 0x61, 0xa2, 0xbd, 0x64, 0xf2, 0xf9, 0x3f, 0x45,
	0xb2, 0x9b, 0x4e, 0xa5, 0xdf, 0x90, 0xd2, 0x3d, 0x38, 0x1e, 0x08, 0xbc, 0x98, 0xca, 0xd5, 0x71,
	0x6e, 0xdd, 0x1f, 0x31, 0x68, 0xc7, 0x49, 0xb4, 0x4e, 0x48, 0xb2, 0x6a, 0xa7, 0x8d, 0x57, 0x65,
	0xd9, 0x29, 0x87, 0x9e, 0x90, 0x92, 0x9c, 0x8e, 0xfa, 0xa1, 0x8f, 0xa7, 0xb7, 0xec, 0x58, 0xe9,
	0x79, 0x12, 0xdc, 0x48, 0x70, 0x35, 0xed, 0xb4, 0xf1, 0x08, 0x96, 0x9d, 0x72, 0xe8, 0x57, 0xe4,
	0x60, 0xae, 0x7a, 0x61, 0x24, 0x5c, 0x60, 0x45, 0xcc, 0x5a, 0xf0, 0x29, 0x25, 0xdb, 0x92, 0x7b,
	0xc0, 0x4a, 0x18, 0xc7, 0x31, 0x3d, 0x25, 0x3b, 0xa1, 0xf0, 0x40, 0x74, 0xd5, 0x94, 0x95, 0xd1,
	0x9f, 0x69, 0xda, 0x20, 0x95, 0x41, 0xa4, 0x7a, 0xa0, 0x54, 0xdb, 0x51, 0xc0, 0x76, 0x30, 0x9c,
	0xb6, 0x4c, 0x75, 0x4a, 0xf9, 0x5a, 0x5c, 0x31, 0x2b, 0xa9, 0x2e, 0x71, 0x28, 0x23, 0x65, 0xc7,
	0x75, 0xc3, 0x28, 0x50, 0x8c, 0x60, 0x30, 0x91, 0xb4, 0x46, 0x8a, 0x7d, 0xee, 0xdd, 0x4e, 0x58,
	0x05, 0x7d, 0x23, 0x74, 0x7e, 0x38, 0x18, 0x80, 0xb8, 0x9d, 0xb0, 0x5d, 0x93, 0x1f, 0x4b, 0x5d,
	0xa7, 0x1b, 0x09, 0x01, 0x81, 0x3b, 0x65, 0x55, 0x53, 0x67, 0xa2, 0xe9, 0x97, 0x64, 0xef, 0x0f,
	0xc7, 0xe7, 0xde, 0xcf, 0x81, 0xe2, 0xfe, 0x1d, 0x1f, 0x01, 0xdb, 0xc3, 0x8c, 0x9c, 0xab, 0xab,
	0x85, 0xc9, 0x98, 0x0b, 0xc0, 0x9c, 0x7d, 0x53, 0xed, 0xdc, 0xd1, 0xb8, 0xe3, 0x8b, 0xdc, 0x4d,
	0xc7, 0xc0, 0x0e, 0x0c, 0xee, 0x33, 0x43, 0xd7, 0xd6, 0xe7, 0x5e, 0x8f, 0xff, 0x05, 0xec, 0xd0,
	0xd4, 0x16, 0x4b, 0x3d, 0x0f, 0xcb, 0xc4, 0x18, 0x35, 0xf3, 0x66, 0x06, 0x3d, 0x20, 0x5b, 0x23,
	0xee, 0xb2, 0x23, 0xf4, 0xf5, 0x50, 0xbf, 0x83, 0x82, 0x89, 0x62, 0x35, 0xf3, 0x0e, 0x7a, 0x4c,
	0x2f, 0x49, 0x59, 0x09, 0x87, 0xfb, 0x20, 0xd8, 0x31, 0xf2, 0x74, 0x92, 0xe3, 0xe9, 0xce, 0x44,
	0xed, 0x24, 0xed, 0xfc, 0xef, 0x32, 0xa9, 0x2d, 0xeb, 0x89, 0xd7, 0x26, 0x93, 0x91, 0x32, 0xaa,
	0x4e, 0x3b, 0x46, 0x33, 0x91, 0x9a, 0x0f, 0x1c, 0xf6, 0x94, 0xa3, 0x22, 0x19, 0xc3, 0x99, 0xb6,
	0xb2, 0x37, 0x5a, 0xcc, 0xdf, 0x68, 0x96, 0xed, 0xd2, 0x5a, 0x6c, 0x97, 0x57, 0xb0, 0x3d, 0xef,
	0x9f, 0x9d, 0x4c, 0xff, 0x24, 0xcc, 0x5b, 0x2b, 0x98, 0x27, 0x39, 0xe6, 0x19, 0x29, 0xfb, 0x8e,
	0x54, 0x3a, 0x64, 0xc8, 0x4c, 0xa4, 0xde, 0x41, 0x0f, 0x67, 0x68, 0xc6, 0x6a, 0x4e, 0x72, 0x75,
	0x05, 0xc9, 0x7b, 0xab, 0x49, 0xde, 0xcf, 0x91, 0x8c, 0x3f, 0xb8, 0x71, 0xf7, 0x24, 0x04, 0xce,
	0x8c, 0x25, 0x9c, 0x1f, 0xae, 0xc1, 0x39, 0x5d, 0xe0, 0x3c, 0xe1, 0xef, 0x28, 0xc5, 0xdf, 0xd7,
	0xe4, 0x30, 0x08, 0x11, 0xa7, 0x6e, 0xe4, 0xf8, 0x7c, 0xc0, 0x41, 0xc8, 0x18, 0xd0, 0xc5, 0x80,
	0xae, 0xe4, 0x31, 0x63, 0x21, 0xb4, 0x96, 0x9d, 0x73, 0xf5, 0x9d, 0x05, 0xe1, 0x4f, 0x30, 0x94,
	0xec, 0xc4, 0xdc, 0x99, 0x51, 0xfa, 0x9c, 0x3e, 0x0c, 0x7b, 0xe6, 0xc1, 0x3e, 0x32, 0xe7, 0x9c,
	0x19, 0xf4, 0x0b, 0x52, 0xd5, 0x62, 0x8e, 0x06, 0xc3, 0x8c, 0xac, 0x49, 0x2f, 0xc9, 0x51, 0xc6,
	0x88, 0x01, 0xf9, 0x18, 0x73, 0x97, 0x85, 0x34, 0xaf, 0x3e, 0x0c, 0x6d, 0x47, 0xf1, 0x50, 0xbf,
	0xef, 0xa9, 0xe1, 0x35, 0x65, 0xa5, 0xbb, 0xf0, 0x6c, 0xbd, 0x2e, 0x7c, 0x57, 0x20, 0x74, 0xf1,
	0x2f, 0xe4, 0xb5, 0x7b, 0xf0, 0x86, 0xb0, 0xc5, 0xff, 0x24, 0x1b, 0x1c, 0x19, 0x06, 0x71, 0x53,
	0xae, 0x8c, 0xcf, 0x5e, 0x7b, 0x7b, 0xf9, 0xaf, 0x4d, 0x71, 0xad, 0x73, 0xfe, 0x70, 0xf3, 0xff,
	0x73, 0xbd, 0xf0, 0xf4, 0x5c, 0x2f, 0xbc, 0x7d, 0xae, 0x17, 0xfe, 0x7d, 0xa9, 0x6f, 0x3c, 0xbd,
	0xd4, 0x37, 0xde, 0xbc, 0xd4, 0x37, 0x7e, 0x6d, 0x0c, 0xb9, 0xba, 0x8f, 0xfa, 0x4d, 0x37, 0x1c,
	0xb5, 0xcc, 0x22, 0x2d, 0x1b, 0x5a, 0x13, 0xfc, 0xc2, 0x50, 0xd3, 0x31, 0xc8, 0x7e, 0x09, 0xbf,
	0x2b, 0xae, 0xdf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x5e, 0xdd, 0xdf, 0x9b, 0x08, 0x00, 0x00,
}

func (m *Quote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuoteRequestReject != nil {
		{
			size, err := m.QuoteRequestReject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.QuoteAcknowledgement != nil {
		{
			size, err := m.QuoteAcknowledgement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.QuoteRequest != nil {
		{
			size, err := m.QuoteRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Mic) > 0 {
		i -= len(m.Mic)
		copy(dAtA[i:], m.Mic)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Mic)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.OfferSize) > 0 {
		i -= len(m.OfferSize)
		copy(dAtA[i:], m.OfferSize)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.OfferSize)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.BidSize) > 0 {
		i -= len(m.BidSize)
		copy(dAtA[i:], m.BidSize)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.BidSize)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.QuoteType) > 0 {
		i -= len(m.QuoteType)
		copy(dAtA[i:], m.QuoteType)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.ExpireTime) > 0 {
		i -= len(m.ExpireTime)
		copy(dAtA[i:], m.ExpireTime)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.ExpireTime)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.ValidUntilTime) > 0 {
		i -= len(m.ValidUntilTime)
		copy(dAtA[i:], m.ValidUntilTime)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.ValidUntilTime)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.OfferPx) > 0 {
		i -= len(m.OfferPx)
		copy(dAtA[i:], m.OfferPx)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.OfferPx)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.BidPx) > 0 {
		i -= len(m.BidPx)
		copy(dAtA[i:], m.BidPx)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.BidPx)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SettlDate2) > 0 {
		i -= len(m.SettlDate2)
		copy(dAtA[i:], m.SettlDate2)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.SettlDate2)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FutSettDate) > 0 {
		i -= len(m.FutSettDate)
		copy(dAtA[i:], m.FutSettDate)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.FutSettDate)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OrderQty) > 0 {
		i -= len(m.OrderQty)
		copy(dAtA[i:], m.OrderQty)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.OrderQty)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Side) > 0 {
		i -= len(m.Side)
		copy(dAtA[i:], m.Side)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Side)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SecurityIDSource) > 0 {
		i -= len(m.SecurityIDSource)
		copy(dAtA[i:], m.SecurityIDSource)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.SecurityIDSource)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuoteReqID) > 0 {
		i -= len(m.QuoteReqID)
		copy(dAtA[i:], m.QuoteReqID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuoteAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if len(m.LegRatioQty) > 0 {
		i -= len(m.LegRatioQty)
		copy(dAtA[i:], m.LegRatioQty)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.LegRatioQty)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if len(m.LegSecurityIDSource) > 0 {
		i -= len(m.LegSecurityIDSource)
		copy(dAtA[i:], m.LegSecurityIDSource)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.LegSecurityIDSource)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.LegSecurityID) > 0 {
		i -= len(m.LegSecurityID)
		copy(dAtA[i:], m.LegSecurityID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.LegSecurityID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.LegSymbol) > 0 {
		i -= len(m.LegSymbol)
		copy(dAtA[i:], m.LegSymbol)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.LegSymbol)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.NoLegs) > 0 {
		i -= len(m.NoLegs)
		copy(dAtA[i:], m.NoLegs)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.NoLegs)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.QuoteQualifier) > 0 {
		i -= len(m.QuoteQualifier)
		copy(dAtA[i:], m.QuoteQualifier)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteQualifier)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.NoQuoteQualifiers) > 0 {
		i -= len(m.NoQuoteQualifiers)
		copy(dAtA[i:], m.NoQuoteQualifiers)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.NoQuoteQualifiers)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.ExpireTime) > 0 {
		i -= len(m.ExpireTime)
		copy(dAtA[i:], m.ExpireTime)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.ExpireTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.ValidUntilTime) > 0 {
		i -= len(m.ValidUntilTime)
		copy(dAtA[i:], m.ValidUntilTime)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.ValidUntilTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.SettlDate) > 0 {
		i -= len(m.SettlDate)
		copy(dAtA[i:], m.SettlDate)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.SettlDate)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.OfferPx) > 0 {
		i -= len(m.OfferPx)
		copy(dAtA[i:], m.OfferPx)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.OfferPx)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.BidPx) > 0 {
		i -= len(m.BidPx)
		copy(dAtA[i:], m.BidPx)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.BidPx)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastPx) > 0 {
		i -= len(m.LastPx)
		copy(dAtA[i:], m.LastPx)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.LastPx)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.LastQty) > 0 {
		i -= len(m.LastQty)
		copy(dAtA[i:], m.LastQty)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.LastQty)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.OrderQty) > 0 {
		i -= len(m.OrderQty)
		copy(dAtA[i:], m.OrderQty)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.OrderQty)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Side) > 0 {
		i -= len(m.Side)
		copy(dAtA[i:], m.Side)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Side)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityIDSource) > 0 {
		i -= len(m.SecurityIDSource)
		copy(dAtA[i:], m.SecurityIDSource)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.SecurityIDSource)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SecurityID) > 0 {
		i -= len(m.SecurityID)
		copy(dAtA[i:], m.SecurityID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.SecurityID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.QuoteType) > 0 {
		i -= len(m.QuoteType)
		copy(dAtA[i:], m.QuoteType)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.QuoteStatus) > 0 {
		i -= len(m.QuoteStatus)
		copy(dAtA[i:], m.QuoteStatus)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteID) > 0 {
		i -= len(m.QuoteID)
		copy(dAtA[i:], m.QuoteID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuoteReqID) > 0 {
		i -= len(m.QuoteReqID)
		copy(dAtA[i:], m.QuoteReqID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuoteRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuoteRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuoteRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteRequestRejectReason) > 0 {
		i -= len(m.QuoteRequestRejectReason)
		copy(dAtA[i:], m.QuoteRequestRejectReason)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteRequestRejectReason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuoteReqID) > 0 {
		i -= len(m.QuoteReqID)
		copy(dAtA[i:], m.QuoteReqID)
		i = encodeVarintQuote(dAtA, i, uint64(len(m.QuoteReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuote(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Quote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	if m.QuoteRequest != nil {
		l = m.QuoteRequest.Size()
		n += 1 + l + sovQuote(uint64(l))
	}
	if m.QuoteAcknowledgement != nil {
		l = m.QuoteAcknowledgement.Size()
		n += 1 + l + sovQuote(uint64(l))
	}
	if m.QuoteRequestReject != nil {
		l = m.QuoteRequestReject.Size()
		n += 1 + l + sovQuote(uint64(l))
	}
	return n
}

func (m *QuoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteReqID)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.SecurityIDSource)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Side)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.OrderQty)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.FutSettDate)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.SettlDate2)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.BidPx)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.OfferPx)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.ValidUntilTime)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteType)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.BidSize)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.OfferSize)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.Mic)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 2 + l + sovQuote(uint64(l))
	}
	return n
}

func (m *QuoteAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteReqID)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteID)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteStatus)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteType)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.SecurityID)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.SecurityIDSource)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Side)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.OrderQty)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.LastQty)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.LastPx)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.BidPx)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.OfferPx)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.SettlDate)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.ValidUntilTime)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.NoQuoteQualifiers)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteQualifier)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.NoLegs)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.LegSymbol)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.LegSecurityID)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.LegSecurityIDSource)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	l = len(m.LegRatioQty)
	if l > 0 {
		n += 2 + l + sovQuote(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 2 + l + sovQuote(uint64(l))
	}
	return n
}

func (m *QuoteRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteReqID)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.QuoteRequestRejectReason)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovQuote(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovQuote(uint64(l))
	}
	return n
}

func sovQuote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuote(x uint64) (n int) {
	return sovQuote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Quote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteRequest == nil {
				m.QuoteRequest = &QuoteRequest{}
			}
			if err := m.QuoteRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAcknowledgement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteAcknowledgement == nil {
				m.QuoteAcknowledgement = &QuoteAcknowledgement{}
			}
			if err := m.QuoteAcknowledgement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteRequestReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuoteRequestReject == nil {
				m.QuoteRequestReject = &QuoteRequestReject{}
			}
			if err := m.QuoteRequestReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Side = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FutSettDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FutSettDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlDate2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlDate2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntilTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidUntilTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuoteAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Side = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettlDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettlDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidUntilTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidUntilTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoQuoteQualifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoQuoteQualifiers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteQualifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteQualifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLegs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoLegs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegSecurityID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegSecurityID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegSecurityIDSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegSecurityIDSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegRatioQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegRatioQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuoteRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuoteRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuoteRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteRequestRejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteRequestRejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuote = fmt.Errorf("proto: unexpected end of group")
)
