// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/market_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MarketData struct {
	SessionID                     string                         `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	MarketDataRequest             *MarketDataRequest             `protobuf:"bytes,2,opt,name=marketDataRequest,proto3" json:"marketDataRequest,omitempty"`
	MarketDataSnapShotFullRefresh *MarketDataSnapShotFullRefresh `protobuf:"bytes,3,opt,name=marketDataSnapShotFullRefresh,proto3" json:"marketDataSnapShotFullRefresh,omitempty"`
	MarketDataIncremental         *MarketDataIncremental         `protobuf:"bytes,4,opt,name=marketDataIncremental,proto3" json:"marketDataIncremental,omitempty"`
	MarketDataRequestReject       *MarketDataRequestReject       `protobuf:"bytes,5,opt,name=marketDataRequestReject,proto3" json:"marketDataRequestReject,omitempty"`
}

func (m *MarketData) Reset()         { *m = MarketData{} }
func (m *MarketData) String() string { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()    {}
func (*MarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{0}
}
func (m *MarketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketData.Merge(m, src)
}
func (m *MarketData) XXX_Size() int {
	return m.Size()
}
func (m *MarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketData.DiscardUnknown(m)
}

var xxx_messageInfo_MarketData proto.InternalMessageInfo

func (m *MarketData) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MarketData) GetMarketDataRequest() *MarketDataRequest {
	if m != nil {
		return m.MarketDataRequest
	}
	return nil
}

func (m *MarketData) GetMarketDataSnapShotFullRefresh() *MarketDataSnapShotFullRefresh {
	if m != nil {
		return m.MarketDataSnapShotFullRefresh
	}
	return nil
}

func (m *MarketData) GetMarketDataIncremental() *MarketDataIncremental {
	if m != nil {
		return m.MarketDataIncremental
	}
	return nil
}

func (m *MarketData) GetMarketDataRequestReject() *MarketDataRequestReject {
	if m != nil {
		return m.MarketDataRequestReject
	}
	return nil
}

// Market Data Request message
type MarketDataRequest struct {
	// standard Header
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// MDReqID field provides a unique identifier for the market data request
	// message
	MdReqID string `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	// subscriptionRequestType field corresponds to the FIX tag 263, and the
	// values 0 and 1 respectively indicate snapshot and snapshot + incremental
	// updates.
	SubscriptionRequestType int64 `protobuf:"varint,3,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
	// MarketDepth field is used to indicate the level of market data depth that
	// is being requested. Specifically, it specifies how many levels of the order
	// book should be included in the response to the request
	MarketDepth int64 `protobuf:"varint,4,opt,name=marketDepth,proto3" json:"marketDepth,omitempty"`
	// The mdUpdateType field specifies the type of updates that the sender wants
	// to receive in response to their request for market data. The possible
	// values are "0" for full refresh, "1" for incremental refresh, and "2" for
	// removing a single price level
	MdUpdateType int64 `protobuf:"varint,5,opt,name=mdUpdateType,proto3" json:"mdUpdateType,omitempty"`
	// The NoRelatedSym field in a Market Data Request message is used to indicate
	// the number of symbols or instruments for which the market data is being
	// requested
	NoRelatedSym int64 `protobuf:"varint,6,opt,name=noRelatedSym,proto3" json:"noRelatedSym,omitempty"`
	// In the context of a Market Data Request message in the FIX protocol, the
	// Symbol field refers to the security or financial instrument for which
	// market data is being requested
	Symbol string `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// standard Trailer
	Trailer *Trailer `protobuf:"bytes,8,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// owner
	Creator string `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MarketDataRequest) Reset()         { *m = MarketDataRequest{} }
func (m *MarketDataRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDataRequest) ProtoMessage()    {}
func (*MarketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{1}
}
func (m *MarketDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataRequest.Merge(m, src)
}
func (m *MarketDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataRequest proto.InternalMessageInfo

func (m *MarketDataRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MarketDataRequest) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MarketDataRequest) GetSubscriptionRequestType() int64 {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return 0
}

func (m *MarketDataRequest) GetMarketDepth() int64 {
	if m != nil {
		return m.MarketDepth
	}
	return 0
}

func (m *MarketDataRequest) GetMdUpdateType() int64 {
	if m != nil {
		return m.MdUpdateType
	}
	return 0
}

func (m *MarketDataRequest) GetNoRelatedSym() int64 {
	if m != nil {
		return m.NoRelatedSym
	}
	return 0
}

func (m *MarketDataRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MarketDataRequest) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MarketDataRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Market Data Snapshot/Full Refresh message
type MarketDataSnapShotFullRefresh struct {
	// standard Header
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The identifier of an originating market data request (corresponds to the
	// MDReqID field specified in the Market Data Request message)
	MdReqID string `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	// The ticker symbol that is being quoted (such as BTC/USDT)
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The number of market data entries (bids or offers) listed in a request
	NoMDEntries int64 `protobuf:"varint,4,opt,name=noMDEntries,proto3" json:"noMDEntries,omitempty"`
	// The repeated group of MDEntry fields that provide multiple entries
	MdEntries []*MDEntry `protobuf:"bytes,5,rep,name=mdEntries,proto3" json:"mdEntries,omitempty"`
	// standard Trailer
	Trailer *Trailer `protobuf:"bytes,6,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// owner
	Creator string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MarketDataSnapShotFullRefresh) Reset()         { *m = MarketDataSnapShotFullRefresh{} }
func (m *MarketDataSnapShotFullRefresh) String() string { return proto.CompactTextString(m) }
func (*MarketDataSnapShotFullRefresh) ProtoMessage()    {}
func (*MarketDataSnapShotFullRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{2}
}
func (m *MarketDataSnapShotFullRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataSnapShotFullRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataSnapShotFullRefresh.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataSnapShotFullRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataSnapShotFullRefresh.Merge(m, src)
}
func (m *MarketDataSnapShotFullRefresh) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataSnapShotFullRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataSnapShotFullRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataSnapShotFullRefresh proto.InternalMessageInfo

func (m *MarketDataSnapShotFullRefresh) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MarketDataSnapShotFullRefresh) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MarketDataSnapShotFullRefresh) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MarketDataSnapShotFullRefresh) GetNoMDEntries() int64 {
	if m != nil {
		return m.NoMDEntries
	}
	return 0
}

func (m *MarketDataSnapShotFullRefresh) GetMdEntries() []*MDEntry {
	if m != nil {
		return m.MdEntries
	}
	return nil
}

func (m *MarketDataSnapShotFullRefresh) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MarketDataSnapShotFullRefresh) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Market Data Incremental message
type MarketDataIncremental struct {
	// standard Header
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The identifier of an originating market data request (corresponds to the
	// MDReqID field specified in the Market Data Request message)
	MdReqID string `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	// The number of market data entries (bids or offers) listed in a request
	NoMDEntries int64 `protobuf:"varint,3,opt,name=NoMDEntries,proto3" json:"NoMDEntries,omitempty"`
	// The repeated group of MDEntry fields that provide the incremental updates
	// for the market data.
	MdEntries []*MDEntry `protobuf:"bytes,4,rep,name=mdEntries,proto3" json:"mdEntries,omitempty"`
	// standard Trailer
	Trailer *Trailer `protobuf:"bytes,5,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// owner
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MarketDataIncremental) Reset()         { *m = MarketDataIncremental{} }
func (m *MarketDataIncremental) String() string { return proto.CompactTextString(m) }
func (*MarketDataIncremental) ProtoMessage()    {}
func (*MarketDataIncremental) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{3}
}
func (m *MarketDataIncremental) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataIncremental) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataIncremental.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataIncremental) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataIncremental.Merge(m, src)
}
func (m *MarketDataIncremental) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataIncremental) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataIncremental.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataIncremental proto.InternalMessageInfo

func (m *MarketDataIncremental) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MarketDataIncremental) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MarketDataIncremental) GetNoMDEntries() int64 {
	if m != nil {
		return m.NoMDEntries
	}
	return 0
}

func (m *MarketDataIncremental) GetMdEntries() []*MDEntry {
	if m != nil {
		return m.MdEntries
	}
	return nil
}

func (m *MarketDataIncremental) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MarketDataIncremental) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Market Data Entry message
type MDEntry struct {
	// The type of update action that is being reported for the MDEntry.
	// Possible values are "0" for new, "1" for change, and "2" for delete.
	MdUpdateAction int64 `protobuf:"varint,1,opt,name=mdUpdateAction,proto3" json:"mdUpdateAction,omitempty"`
	// The side of a quote: 0 — bid , 1 — ask
	MdEntryType int64 `protobuf:"varint,2,opt,name=mdEntryType,proto3" json:"mdEntryType,omitempty"`
	// The price for a market data entry
	MdEntryPx string `protobuf:"bytes,3,opt,name=mdEntryPx,proto3" json:"mdEntryPx,omitempty"`
	// The quantity (tradeable volume) of a market data entry.
	MdEntrySize string `protobuf:"bytes,4,opt,name=mdEntrySize,proto3" json:"mdEntrySize,omitempty"`
}

func (m *MDEntry) Reset()         { *m = MDEntry{} }
func (m *MDEntry) String() string { return proto.CompactTextString(m) }
func (*MDEntry) ProtoMessage()    {}
func (*MDEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{4}
}
func (m *MDEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MDEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MDEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MDEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MDEntry.Merge(m, src)
}
func (m *MDEntry) XXX_Size() int {
	return m.Size()
}
func (m *MDEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MDEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MDEntry proto.InternalMessageInfo

func (m *MDEntry) GetMdUpdateAction() int64 {
	if m != nil {
		return m.MdUpdateAction
	}
	return 0
}

func (m *MDEntry) GetMdEntryType() int64 {
	if m != nil {
		return m.MdEntryType
	}
	return 0
}

func (m *MDEntry) GetMdEntryPx() string {
	if m != nil {
		return m.MdEntryPx
	}
	return ""
}

func (m *MDEntry) GetMdEntrySize() string {
	if m != nil {
		return m.MdEntrySize
	}
	return ""
}

// Market Data Request Reject message
type MarketDataRequestReject struct {
	// standard Header
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The identifier of a Market Data Request that has been rejected
	MdReqID string `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	// Indicates the reason why a request has been rejected
	MdReqRejReason int64 `protobuf:"varint,3,opt,name=mdReqRejReason,proto3" json:"mdReqRejReason,omitempty"`
	// The detailed information (if available) on why a request has been rejected
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// standard Trailer
	Trailer *Trailer `protobuf:"bytes,5,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// owner
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MarketDataRequestReject) Reset()         { *m = MarketDataRequestReject{} }
func (m *MarketDataRequestReject) String() string { return proto.CompactTextString(m) }
func (*MarketDataRequestReject) ProtoMessage()    {}
func (*MarketDataRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{5}
}
func (m *MarketDataRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataRequestReject.Merge(m, src)
}
func (m *MarketDataRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataRequestReject proto.InternalMessageInfo

func (m *MarketDataRequestReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MarketDataRequestReject) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MarketDataRequestReject) GetMdReqRejReason() int64 {
	if m != nil {
		return m.MdReqRejReason
	}
	return 0
}

func (m *MarketDataRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MarketDataRequestReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MarketDataRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*MarketData)(nil), "jim380.re.fix.MarketData")
	proto.RegisterType((*MarketDataRequest)(nil), "jim380.re.fix.MarketDataRequest")
	proto.RegisterType((*MarketDataSnapShotFullRefresh)(nil), "jim380.re.fix.MarketDataSnapShotFullRefresh")
	proto.RegisterType((*MarketDataIncremental)(nil), "jim380.re.fix.MarketDataIncremental")
	proto.RegisterType((*MDEntry)(nil), "jim380.re.fix.MDEntry")
	proto.RegisterType((*MarketDataRequestReject)(nil), "jim380.re.fix.MarketDataRequestReject")
}

func init() { proto.RegisterFile("re/fix/market_data.proto", fileDescriptor_774f86e03def608c) }

var fileDescriptor_774f86e03def608c = []byte{
	// 652 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xae, 0xe3, 0x26, 0xf9, 0x65, 0xf2, 0x03, 0xa9, 0x2b, 0xb5, 0xb5, 0x10, 0x8d, 0xac, 0x08,
	0x55, 0x3d, 0x80, 0x53, 0xb5, 0x1c, 0x2a, 0x6e, 0xa0, 0x80, 0xe8, 0xa1, 0x15, 0xda, 0x94, 0x4b,
	0x2f, 0x65, 0x63, 0x4f, 0x1b, 0x17, 0xff, 0xeb, 0xee, 0x46, 0x8a, 0x39, 0xf3, 0x00, 0x48, 0xbc,
	0x02, 0x47, 0x1e, 0x84, 0x63, 0x8f, 0x1c, 0x51, 0xcb, 0x89, 0xa7, 0x40, 0x59, 0x6f, 0xb0, 0x9d,
	0x26, 0x45, 0x45, 0xb9, 0x79, 0xbf, 0xfd, 0xf6, 0x9b, 0x9d, 0x6f, 0x66, 0xbc, 0x60, 0x71, 0xec,
	0x9c, 0xfa, 0xa3, 0x4e, 0xc8, 0xf8, 0x7b, 0x94, 0x27, 0x1e, 0x93, 0xcc, 0x49, 0x78, 0x2c, 0x63,
	0x72, 0xef, 0xdc, 0x0f, 0x77, 0xf7, 0xb6, 0x1d, 0x8e, 0xce, 0xa9, 0x3f, 0x7a, 0xb0, 0xa1, 0x89,
	0x42, 0xb2, 0xc8, 0x63, 0xdc, 0x3b, 0x09, 0x51, 0x08, 0x76, 0x86, 0x19, 0xbb, 0xfd, 0xd5, 0x04,
	0x38, 0x50, 0x1a, 0x5d, 0x26, 0x19, 0x79, 0x08, 0x0d, 0x81, 0x42, 0xf8, 0x71, 0xb4, 0xdf, 0xb5,
	0x0c, 0xdb, 0xd8, 0x6a, 0xd0, 0x1c, 0x20, 0x87, 0xb0, 0x12, 0xfe, 0xe1, 0x52, 0xbc, 0x18, 0xa2,
	0x90, 0x56, 0xc5, 0x36, 0xb6, 0x9a, 0x3b, 0xb6, 0x53, 0x0a, 0xeb, 0x1c, 0x4c, 0xf3, 0xe8, 0xcd,
	0xa3, 0x84, 0xc3, 0x46, 0x0e, 0xf6, 0x22, 0x96, 0xf4, 0x06, 0xb1, 0x7c, 0x35, 0x0c, 0x02, 0x8a,
	0xa7, 0x1c, 0xc5, 0xc0, 0x32, 0x95, 0xf6, 0xe3, 0xb9, 0xda, 0x33, 0xce, 0xd0, 0xdb, 0x25, 0xc9,
	0x31, 0xac, 0xe6, 0x84, 0xfd, 0xc8, 0xe5, 0x18, 0x62, 0x24, 0x59, 0x60, 0x2d, 0xab, 0x58, 0x8f,
	0xe6, 0xc6, 0x2a, 0x70, 0xe9, 0x6c, 0x09, 0xf2, 0x0e, 0xd6, 0x6f, 0x24, 0x49, 0xf1, 0x1c, 0x5d,
	0x69, 0x55, 0x95, 0xfa, 0xe6, 0x5f, 0x5d, 0x52, 0x6c, 0x3a, 0x4f, 0xa6, 0xfd, 0xb3, 0x02, 0x2b,
	0x37, 0x0e, 0x91, 0x27, 0x50, 0x1b, 0x20, 0xf3, 0x90, 0xab, 0x92, 0x35, 0x77, 0x56, 0xa7, 0xc2,
	0xbc, 0x56, 0x9b, 0x54, 0x93, 0x88, 0x05, 0xf5, 0xd0, 0xa3, 0x78, 0xb1, 0xdf, 0x55, 0xc5, 0x6b,
	0xd0, 0xc9, 0x92, 0xec, 0xc1, 0xba, 0x18, 0xf6, 0x85, 0xcb, 0xfd, 0x44, 0xfa, 0x71, 0xa4, 0xf5,
	0x8f, 0xd2, 0x04, 0x55, 0x29, 0x4c, 0x3a, 0x6f, 0x9b, 0xd8, 0xd0, 0xd4, 0x77, 0xc6, 0x44, 0x0e,
	0x94, 0x99, 0x26, 0x2d, 0x42, 0xa4, 0x0d, 0xff, 0x87, 0xde, 0xdb, 0xc4, 0x63, 0x12, 0x95, 0x60,
	0x55, 0x51, 0x4a, 0xd8, 0x98, 0x13, 0xc5, 0x14, 0x03, 0x26, 0xd1, 0xeb, 0xa5, 0xa1, 0x55, 0xcb,
	0x38, 0x45, 0x8c, 0xac, 0x41, 0x4d, 0xa4, 0x61, 0x3f, 0x0e, 0xac, 0xba, 0xba, 0xbc, 0x5e, 0x91,
	0x6d, 0xa8, 0x4b, 0xce, 0xfc, 0x00, 0xb9, 0xf5, 0x9f, 0x72, 0x61, 0x6d, 0xca, 0x85, 0xa3, 0x6c,
	0x97, 0x4e, 0x68, 0x63, 0x1f, 0x5c, 0x8e, 0x4c, 0xc6, 0xdc, 0x6a, 0x64, 0x3e, 0xe8, 0x65, 0xfb,
	0x4b, 0x05, 0x36, 0x6e, 0xed, 0xb2, 0xc5, 0x59, 0x9e, 0xa7, 0x63, 0x96, 0xd2, 0xb1, 0xa1, 0x19,
	0xc5, 0x07, 0xdd, 0x97, 0x91, 0xe4, 0x3e, 0x8a, 0x89, 0xa1, 0x05, 0x88, 0x3c, 0x85, 0x46, 0xe8,
	0x4d, 0xf6, 0xab, 0xb6, 0x39, 0x23, 0xe5, 0x8c, 0x9c, 0xd2, 0x9c, 0x58, 0xb4, 0xa9, 0x76, 0x67,
	0x9b, 0xea, 0x65, 0x9b, 0x3e, 0x56, 0x60, 0x75, 0xe6, 0x80, 0x2c, 0xce, 0x1e, 0x1b, 0x9a, 0x87,
	0x05, 0x1b, 0xb2, 0x2e, 0x2c, 0x42, 0x65, 0x1b, 0x96, 0xff, 0xc1, 0x86, 0xea, 0x9d, 0x6d, 0xa8,
	0x95, 0x6d, 0xf8, 0x6c, 0x40, 0x5d, 0x87, 0x20, 0x9b, 0x70, 0x7f, 0xd2, 0xd1, 0xcf, 0xdd, 0xf1,
	0x90, 0x28, 0x03, 0x4c, 0x3a, 0x85, 0xaa, 0x79, 0x51, 0x97, 0x49, 0xd5, 0x30, 0x54, 0xf4, 0xbc,
	0xe4, 0xd0, 0xf8, 0x57, 0xac, 0x97, 0x6f, 0x46, 0xba, 0x37, 0x72, 0xa0, 0x70, 0xbe, 0xe7, 0x7f,
	0x40, 0xd5, 0x1e, 0x0d, 0x5a, 0x84, 0xda, 0xbf, 0x0c, 0x58, 0x9f, 0xf3, 0x7f, 0x59, 0x5c, 0x79,
	0x54, 0xba, 0x14, 0x2f, 0x28, 0x9e, 0x53, 0x64, 0x22, 0x8e, 0x74, 0x85, 0xa6, 0x50, 0x42, 0x60,
	0x59, 0xe2, 0x48, 0xea, 0x7b, 0xaa, 0xef, 0x45, 0x96, 0xe0, 0xc5, 0xb3, 0x6f, 0x57, 0x2d, 0xe3,
	0xf2, 0xaa, 0x65, 0xfc, 0xb8, 0x6a, 0x19, 0x9f, 0xae, 0x5b, 0x4b, 0x97, 0xd7, 0xad, 0xa5, 0xef,
	0xd7, 0xad, 0xa5, 0x63, 0xfb, 0xcc, 0x97, 0x83, 0x61, 0xdf, 0x71, 0xe3, 0xb0, 0x93, 0xc9, 0x77,
	0x28, 0x76, 0x46, 0xea, 0x4d, 0x94, 0x69, 0x82, 0xa2, 0x5f, 0x53, 0x2f, 0xe1, 0xee, 0xef, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x5b, 0x37, 0xbf, 0x7d, 0x53, 0x07, 0x00, 0x00,
}

func (m *MarketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketDataRequestReject != nil {
		{
			size, err := m.MarketDataRequestReject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MarketDataIncremental != nil {
		{
			size, err := m.MarketDataIncremental.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MarketDataSnapShotFullRefresh != nil {
		{
			size, err := m.MarketDataSnapShotFullRefresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MarketDataRequest != nil {
		{
			size, err := m.MarketDataRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NoRelatedSym != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.NoRelatedSym))
		i--
		dAtA[i] = 0x30
	}
	if m.MdUpdateType != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.MdUpdateType))
		i--
		dAtA[i] = 0x28
	}
	if m.MarketDepth != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.MarketDepth))
		i--
		dAtA[i] = 0x20
	}
	if m.SubscriptionRequestType != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.SubscriptionRequestType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketDataSnapShotFullRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataSnapShotFullRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataSnapShotFullRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.MdEntries) > 0 {
		for iNdEx := len(m.MdEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MdEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarketData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.NoMDEntries != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.NoMDEntries))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketDataIncremental) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataIncremental) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataIncremental) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MdEntries) > 0 {
		for iNdEx := len(m.MdEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MdEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarketData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.NoMDEntries != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.NoMDEntries))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MDEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MDEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MDEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MdEntrySize) > 0 {
		i -= len(m.MdEntrySize)
		copy(dAtA[i:], m.MdEntrySize)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.MdEntrySize)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MdEntryPx) > 0 {
		i -= len(m.MdEntryPx)
		copy(dAtA[i:], m.MdEntryPx)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.MdEntryPx)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MdEntryType != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.MdEntryType))
		i--
		dAtA[i] = 0x10
	}
	if m.MdUpdateAction != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.MdUpdateAction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarketDataRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if m.MdReqRejReason != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.MdReqRejReason))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarketData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarketData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MarketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataRequest != nil {
		l = m.MarketDataRequest.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataSnapShotFullRefresh != nil {
		l = m.MarketDataSnapShotFullRefresh.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataIncremental != nil {
		l = m.MarketDataIncremental.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataRequestReject != nil {
		l = m.MarketDataRequestReject.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func (m *MarketDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.SubscriptionRequestType != 0 {
		n += 1 + sovMarketData(uint64(m.SubscriptionRequestType))
	}
	if m.MarketDepth != 0 {
		n += 1 + sovMarketData(uint64(m.MarketDepth))
	}
	if m.MdUpdateType != 0 {
		n += 1 + sovMarketData(uint64(m.MdUpdateType))
	}
	if m.NoRelatedSym != 0 {
		n += 1 + sovMarketData(uint64(m.NoRelatedSym))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func (m *MarketDataSnapShotFullRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.NoMDEntries != 0 {
		n += 1 + sovMarketData(uint64(m.NoMDEntries))
	}
	if len(m.MdEntries) > 0 {
		for _, e := range m.MdEntries {
			l = e.Size()
			n += 1 + l + sovMarketData(uint64(l))
		}
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func (m *MarketDataIncremental) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.NoMDEntries != 0 {
		n += 1 + sovMarketData(uint64(m.NoMDEntries))
	}
	if len(m.MdEntries) > 0 {
		for _, e := range m.MdEntries {
			l = e.Size()
			n += 1 + l + sovMarketData(uint64(l))
		}
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func (m *MDEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MdUpdateAction != 0 {
		n += 1 + sovMarketData(uint64(m.MdUpdateAction))
	}
	if m.MdEntryType != 0 {
		n += 1 + sovMarketData(uint64(m.MdEntryType))
	}
	l = len(m.MdEntryPx)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.MdEntrySize)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func (m *MarketDataRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MdReqRejReason != 0 {
		n += 1 + sovMarketData(uint64(m.MdReqRejReason))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func sovMarketData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarketData(x uint64) (n int) {
	return sovMarketData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MarketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataRequest == nil {
				m.MarketDataRequest = &MarketDataRequest{}
			}
			if err := m.MarketDataRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataSnapShotFullRefresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataSnapShotFullRefresh == nil {
				m.MarketDataSnapShotFullRefresh = &MarketDataSnapShotFullRefresh{}
			}
			if err := m.MarketDataSnapShotFullRefresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataIncremental", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataIncremental == nil {
				m.MarketDataIncremental = &MarketDataIncremental{}
			}
			if err := m.MarketDataIncremental.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataRequestReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataRequestReject == nil {
				m.MarketDataRequestReject = &MarketDataRequestReject{}
			}
			if err := m.MarketDataRequestReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			m.SubscriptionRequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionRequestType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDepth", wireType)
			}
			m.MarketDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketDepth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdUpdateType", wireType)
			}
			m.MdUpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdUpdateType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRelatedSym", wireType)
			}
			m.NoRelatedSym = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRelatedSym |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataSnapShotFullRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataSnapShotFullRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataSnapShotFullRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMDEntries", wireType)
			}
			m.NoMDEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoMDEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdEntries = append(m.MdEntries, &MDEntry{})
			if err := m.MdEntries[len(m.MdEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataIncremental) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataIncremental: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataIncremental: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMDEntries", wireType)
			}
			m.NoMDEntries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoMDEntries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdEntries = append(m.MdEntries, &MDEntry{})
			if err := m.MdEntries[len(m.MdEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MDEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MDEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MDEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdUpdateAction", wireType)
			}
			m.MdUpdateAction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdUpdateAction |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdEntryType", wireType)
			}
			m.MdEntryType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdEntryType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdEntryPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdEntryPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdEntrySize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdEntrySize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqRejReason", wireType)
			}
			m.MdReqRejReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdReqRejReason |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarketData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarketData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarketData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarketData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarketData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarketData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarketData = fmt.Errorf("proto: unexpected end of group")
)
