// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/market_data.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MarketData struct {
	SessionID               string                   `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	MarketDataRequest       *MarketDataRequest       `protobuf:"bytes,2,opt,name=marketDataRequest,proto3" json:"marketDataRequest,omitempty"`
	MarketDataSnapShot      *MarketDataSnapShot      `protobuf:"bytes,3,opt,name=marketDataSnapShot,proto3" json:"marketDataSnapShot,omitempty"`
	MarketDataFullRefresh   *MarketDataFullRefresh   `protobuf:"bytes,4,opt,name=marketDataFullRefresh,proto3" json:"marketDataFullRefresh,omitempty"`
	MarketDataRequestReject *MarketDataRequestReject `protobuf:"bytes,5,opt,name=marketDataRequestReject,proto3" json:"marketDataRequestReject,omitempty"`
}

func (m *MarketData) Reset()         { *m = MarketData{} }
func (m *MarketData) String() string { return proto.CompactTextString(m) }
func (*MarketData) ProtoMessage()    {}
func (*MarketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{0}
}
func (m *MarketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketData.Merge(m, src)
}
func (m *MarketData) XXX_Size() int {
	return m.Size()
}
func (m *MarketData) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketData.DiscardUnknown(m)
}

var xxx_messageInfo_MarketData proto.InternalMessageInfo

func (m *MarketData) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *MarketData) GetMarketDataRequest() *MarketDataRequest {
	if m != nil {
		return m.MarketDataRequest
	}
	return nil
}

func (m *MarketData) GetMarketDataSnapShot() *MarketDataSnapShot {
	if m != nil {
		return m.MarketDataSnapShot
	}
	return nil
}

func (m *MarketData) GetMarketDataFullRefresh() *MarketDataFullRefresh {
	if m != nil {
		return m.MarketDataFullRefresh
	}
	return nil
}

func (m *MarketData) GetMarketDataRequestReject() *MarketDataRequestReject {
	if m != nil {
		return m.MarketDataRequestReject
	}
	return nil
}

type MarketDataRequest struct {
	Header                  *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MdReqID                 string   `protobuf:"bytes,2,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
	SubscriptionRequestType int32    `protobuf:"varint,3,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
	MarketDepth             int32    `protobuf:"varint,4,opt,name=marketDepth,proto3" json:"marketDepth,omitempty"`
	MdUpdateType            int32    `protobuf:"varint,5,opt,name=mdUpdateType,proto3" json:"mdUpdateType,omitempty"`
	NoRelatedSym            int32    `protobuf:"varint,6,opt,name=noRelatedSym,proto3" json:"noRelatedSym,omitempty"`
	Symbol                  string   `protobuf:"bytes,7,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Mic                     string   `protobuf:"bytes,8,opt,name=mic,proto3" json:"mic,omitempty"`
	Trailer                 *Trailer `protobuf:"bytes,9,opt,name=trailer,proto3" json:"trailer,omitempty"`
	Creator                 string   `protobuf:"bytes,10,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MarketDataRequest) Reset()         { *m = MarketDataRequest{} }
func (m *MarketDataRequest) String() string { return proto.CompactTextString(m) }
func (*MarketDataRequest) ProtoMessage()    {}
func (*MarketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{1}
}
func (m *MarketDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataRequest.Merge(m, src)
}
func (m *MarketDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataRequest proto.InternalMessageInfo

func (m *MarketDataRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MarketDataRequest) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

func (m *MarketDataRequest) GetSubscriptionRequestType() int32 {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return 0
}

func (m *MarketDataRequest) GetMarketDepth() int32 {
	if m != nil {
		return m.MarketDepth
	}
	return 0
}

func (m *MarketDataRequest) GetMdUpdateType() int32 {
	if m != nil {
		return m.MdUpdateType
	}
	return 0
}

func (m *MarketDataRequest) GetNoRelatedSym() int32 {
	if m != nil {
		return m.NoRelatedSym
	}
	return 0
}

func (m *MarketDataRequest) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MarketDataRequest) GetMic() string {
	if m != nil {
		return m.Mic
	}
	return ""
}

func (m *MarketDataRequest) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *MarketDataRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MarketDataSnapShot struct {
}

func (m *MarketDataSnapShot) Reset()         { *m = MarketDataSnapShot{} }
func (m *MarketDataSnapShot) String() string { return proto.CompactTextString(m) }
func (*MarketDataSnapShot) ProtoMessage()    {}
func (*MarketDataSnapShot) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{2}
}
func (m *MarketDataSnapShot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataSnapShot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataSnapShot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataSnapShot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataSnapShot.Merge(m, src)
}
func (m *MarketDataSnapShot) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataSnapShot) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataSnapShot.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataSnapShot proto.InternalMessageInfo

type MarketDataFullRefresh struct {
}

func (m *MarketDataFullRefresh) Reset()         { *m = MarketDataFullRefresh{} }
func (m *MarketDataFullRefresh) String() string { return proto.CompactTextString(m) }
func (*MarketDataFullRefresh) ProtoMessage()    {}
func (*MarketDataFullRefresh) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{3}
}
func (m *MarketDataFullRefresh) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataFullRefresh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataFullRefresh.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataFullRefresh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataFullRefresh.Merge(m, src)
}
func (m *MarketDataFullRefresh) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataFullRefresh) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataFullRefresh.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataFullRefresh proto.InternalMessageInfo

type MarketDataRequestReject struct {
}

func (m *MarketDataRequestReject) Reset()         { *m = MarketDataRequestReject{} }
func (m *MarketDataRequestReject) String() string { return proto.CompactTextString(m) }
func (*MarketDataRequestReject) ProtoMessage()    {}
func (*MarketDataRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_774f86e03def608c, []int{4}
}
func (m *MarketDataRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketDataRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketDataRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketDataRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketDataRequestReject.Merge(m, src)
}
func (m *MarketDataRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *MarketDataRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketDataRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_MarketDataRequestReject proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MarketData)(nil), "jim380.re.fix.MarketData")
	proto.RegisterType((*MarketDataRequest)(nil), "jim380.re.fix.MarketDataRequest")
	proto.RegisterType((*MarketDataSnapShot)(nil), "jim380.re.fix.MarketDataSnapShot")
	proto.RegisterType((*MarketDataFullRefresh)(nil), "jim380.re.fix.MarketDataFullRefresh")
	proto.RegisterType((*MarketDataRequestReject)(nil), "jim380.re.fix.MarketDataRequestReject")
}

func init() { proto.RegisterFile("re/fix/market_data.proto", fileDescriptor_774f86e03def608c) }

var fileDescriptor_774f86e03def608c = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x9b, 0x95, 0xb6, 0xf4, 0x15, 0x24, 0x66, 0xd1, 0xd5, 0x20, 0x88, 0x4a, 0x84, 0xd0,
	0x2e, 0x24, 0xd3, 0x76, 0x99, 0x38, 0xa2, 0x0a, 0xb1, 0xc3, 0x90, 0x70, 0xc7, 0x65, 0x97, 0xe1,
	0x26, 0xaf, 0x6b, 0x46, 0x1c, 0x67, 0xb6, 0x2b, 0xb5, 0x9f, 0x81, 0x0b, 0x1f, 0x8b, 0xe3, 0x8e,
	0x1c, 0x51, 0xfb, 0x1d, 0x38, 0xa3, 0x3a, 0x29, 0xed, 0xda, 0x46, 0xdc, 0xe2, 0xbf, 0x7f, 0xef,
	0xef, 0x97, 0xff, 0xb3, 0x81, 0x2a, 0x0c, 0x86, 0xf1, 0x24, 0x10, 0x5c, 0x7d, 0x43, 0x73, 0x15,
	0x71, 0xc3, 0xfd, 0x4c, 0x49, 0x23, 0xc9, 0xe3, 0x9b, 0x58, 0x9c, 0x9c, 0x1e, 0xf9, 0x0a, 0xfd,
	0x61, 0x3c, 0x79, 0xfe, 0xb2, 0x00, 0xb5, 0xe1, 0x69, 0xc4, 0x55, 0x74, 0x25, 0x50, 0x6b, 0x7e,
	0x8d, 0x39, 0xed, 0x7d, 0xaf, 0x02, 0x9c, 0x5b, 0x8f, 0x1e, 0x37, 0x9c, 0xbc, 0x80, 0xa6, 0x46,
	0xad, 0x63, 0x99, 0x9e, 0xf5, 0xa8, 0xd3, 0x75, 0x0e, 0x9b, 0x6c, 0x25, 0x90, 0x4f, 0xb0, 0x2f,
	0xfe, 0xb1, 0x0c, 0x6f, 0xc7, 0xa8, 0x0d, 0xdd, 0xeb, 0x3a, 0x87, 0xad, 0xe3, 0xae, 0x7f, 0xef,
	0x58, 0xff, 0x7c, 0x93, 0x63, 0xdb, 0xa5, 0xe4, 0x33, 0x90, 0x95, 0xd8, 0x4f, 0x79, 0xd6, 0x1f,
	0x49, 0x43, 0xab, 0xd6, 0xf0, 0x55, 0xa9, 0xe1, 0x12, 0x64, 0x3b, 0x8a, 0xc9, 0x25, 0xb4, 0x57,
	0xea, 0x87, 0x71, 0x92, 0x30, 0x1c, 0x2a, 0xd4, 0x23, 0xfa, 0xc0, 0xba, 0xbe, 0x2e, 0x75, 0x5d,
	0x63, 0xd9, 0x6e, 0x0b, 0xf2, 0x15, 0x3a, 0x5b, 0xff, 0xc0, 0xf0, 0x06, 0x43, 0x43, 0x6b, 0xd6,
	0xfd, 0xcd, 0x7f, 0x43, 0xb0, 0x34, 0x2b, 0xb3, 0xf1, 0xfe, 0xec, 0xc1, 0xfe, 0x56, 0x11, 0x79,
	0x0b, 0xf5, 0x11, 0xf2, 0x08, 0x95, 0x9d, 0x48, 0xeb, 0xb8, 0xbd, 0x71, 0xcc, 0x47, 0xbb, 0xc9,
	0x0a, 0x88, 0x50, 0x68, 0x88, 0x88, 0xe1, 0xed, 0x59, 0xcf, 0xce, 0xa6, 0xc9, 0x96, 0x4b, 0x72,
	0x0a, 0x1d, 0x3d, 0x1e, 0xe8, 0x50, 0xc5, 0x99, 0x89, 0x65, 0x5a, 0xf8, 0x5f, 0x4c, 0x33, 0xb4,
	0xa1, 0xd7, 0x58, 0xd9, 0x36, 0xe9, 0x42, 0xab, 0xe8, 0x19, 0x33, 0x93, 0x87, 0x59, 0x63, 0xeb,
	0x12, 0xf1, 0xe0, 0x91, 0x88, 0xbe, 0x64, 0x11, 0x37, 0x68, 0x0d, 0x6b, 0x16, 0xb9, 0xa7, 0x2d,
	0x98, 0x54, 0x32, 0x4c, 0xb8, 0xc1, 0xa8, 0x3f, 0x15, 0xb4, 0x9e, 0x33, 0xeb, 0x1a, 0x39, 0x80,
	0xba, 0x9e, 0x8a, 0x81, 0x4c, 0x68, 0xc3, 0x36, 0x5f, 0xac, 0xc8, 0x13, 0xa8, 0x8a, 0x38, 0xa4,
	0x0f, 0xad, 0xb8, 0xf8, 0x24, 0x47, 0xd0, 0x30, 0x8a, 0xc7, 0x09, 0x2a, 0xda, 0xb4, 0xb9, 0x1c,
	0x6c, 0xe4, 0x72, 0x91, 0xef, 0xb2, 0x25, 0xb6, 0x48, 0x26, 0x54, 0xc8, 0x8d, 0x54, 0x14, 0xf2,
	0x64, 0x8a, 0xa5, 0xf7, 0x14, 0xc8, 0xf6, 0x05, 0xf3, 0x3a, 0xd0, 0xde, 0x79, 0x41, 0xbc, 0x67,
	0xd0, 0x29, 0x99, 0xed, 0xfb, 0x77, 0x3f, 0x67, 0xae, 0x73, 0x37, 0x73, 0x9d, 0xdf, 0x33, 0xd7,
	0xf9, 0x31, 0x77, 0x2b, 0x77, 0x73, 0xb7, 0xf2, 0x6b, 0xee, 0x56, 0x2e, 0xbb, 0xd7, 0xb1, 0x19,
	0x8d, 0x07, 0x7e, 0x28, 0x45, 0x90, 0x37, 0x1a, 0x30, 0x0c, 0x26, 0xf6, 0x75, 0x9a, 0x69, 0x86,
	0x7a, 0x50, 0xb7, 0x6f, 0xf2, 0xe4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x7c, 0x04, 0x17,
	0xdd, 0x03, 0x00, 0x00,
}

func (m *MarketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MarketDataRequestReject != nil {
		{
			size, err := m.MarketDataRequestReject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MarketDataFullRefresh != nil {
		{
			size, err := m.MarketDataFullRefresh.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MarketDataSnapShot != nil {
		{
			size, err := m.MarketDataSnapShot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MarketDataRequest != nil {
		{
			size, err := m.MarketDataRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x52
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Mic) > 0 {
		i -= len(m.Mic)
		copy(dAtA[i:], m.Mic)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Mic)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x3a
	}
	if m.NoRelatedSym != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.NoRelatedSym))
		i--
		dAtA[i] = 0x30
	}
	if m.MdUpdateType != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.MdUpdateType))
		i--
		dAtA[i] = 0x28
	}
	if m.MarketDepth != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.MarketDepth))
		i--
		dAtA[i] = 0x20
	}
	if m.SubscriptionRequestType != 0 {
		i = encodeVarintMarketData(dAtA, i, uint64(m.SubscriptionRequestType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintMarketData(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketDataSnapShot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataSnapShot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataSnapShot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MarketDataFullRefresh) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataFullRefresh) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataFullRefresh) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MarketDataRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketDataRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketDataRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMarketData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarketData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MarketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataRequest != nil {
		l = m.MarketDataRequest.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataSnapShot != nil {
		l = m.MarketDataSnapShot.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataFullRefresh != nil {
		l = m.MarketDataFullRefresh.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.MarketDataRequestReject != nil {
		l = m.MarketDataRequestReject.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func (m *MarketDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.SubscriptionRequestType != 0 {
		n += 1 + sovMarketData(uint64(m.SubscriptionRequestType))
	}
	if m.MarketDepth != 0 {
		n += 1 + sovMarketData(uint64(m.MarketDepth))
	}
	if m.MdUpdateType != 0 {
		n += 1 + sovMarketData(uint64(m.MdUpdateType))
	}
	if m.NoRelatedSym != 0 {
		n += 1 + sovMarketData(uint64(m.NoRelatedSym))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.Mic)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovMarketData(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarketData(uint64(l))
	}
	return n
}

func (m *MarketDataSnapShot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MarketDataFullRefresh) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MarketDataRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMarketData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarketData(x uint64) (n int) {
	return sovMarketData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MarketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataRequest == nil {
				m.MarketDataRequest = &MarketDataRequest{}
			}
			if err := m.MarketDataRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataSnapShot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataSnapShot == nil {
				m.MarketDataSnapShot = &MarketDataSnapShot{}
			}
			if err := m.MarketDataSnapShot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataFullRefresh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataFullRefresh == nil {
				m.MarketDataFullRefresh = &MarketDataFullRefresh{}
			}
			if err := m.MarketDataFullRefresh.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDataRequestReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketDataRequestReject == nil {
				m.MarketDataRequestReject = &MarketDataRequestReject{}
			}
			if err := m.MarketDataRequestReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			m.SubscriptionRequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscriptionRequestType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketDepth", wireType)
			}
			m.MarketDepth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketDepth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdUpdateType", wireType)
			}
			m.MdUpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MdUpdateType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoRelatedSym", wireType)
			}
			m.NoRelatedSym = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoRelatedSym |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarketData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataSnapShot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataSnapShot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataSnapShot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataFullRefresh) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataFullRefresh: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataFullRefresh: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketDataRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketDataRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketDataRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMarketData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarketData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarketData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarketData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarketData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarketData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarketData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarketData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarketData = fmt.Errorf("proto: unexpected end of group")
)
