// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/orders.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// This message is used to represent orders in the FIX protocol
type Orders struct {
	// A string used to identify the trading session for which the message is
	// intended.
	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	// A FIX protocol header containing standard message fields such as
	// beginString, bodyLength, msgType, etc.
	Header *Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// A unique identifier assigned by the client to the order. It is used to
	// identify the order in future messages related to the order
	ClOrdID string `protobuf:"bytes,3,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
	// The symbol or instrument that the order is for.
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// An integer indicating whether the order is a buy or a sell. The values are
	// typically 1 for buy and 2 for sell
	Side int64 `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`
	// The quantity of the instrument that the order is for
	OrderQty string `protobuf:"bytes,6,opt,name=orderQty,proto3" json:"orderQty,omitempty"`
	// An integer indicating the type of order. Common values include 1 for
	// market, 2 for limit, 3 for stop, and 4 for stop limit
	OrdType int64 `protobuf:"varint,7,opt,name=ordType,proto3" json:"ordType,omitempty"`
	// The price at which the order should be executed. This field is required for
	// limit and stop limit orders
	Price string `protobuf:"bytes,8,opt,name=price,proto3" json:"price,omitempty"`
	// An integer indicating how long the order should remain active. Common
	// values include 0 for day, 1 for good till canceled, and 2 for fill or kill
	TimeInForce int64 `protobuf:"varint,9,opt,name=timeInForce,proto3" json:"timeInForce,omitempty"`
	// A free-form text field that can be used to provide additional information
	// about the order.
	Text string `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	// The time the message was sent, expressed in UTC timestamp format
	TransactTime string `protobuf:"bytes,11,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	// A FIX protocol trailer containing standard message fields such as checkSum
	Trailer *Trailer `protobuf:"bytes,12,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// A field used to indicate the creator of the order.
	Creator string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Orders) Reset()         { *m = Orders{} }
func (m *Orders) String() string { return proto.CompactTextString(m) }
func (*Orders) ProtoMessage()    {}
func (*Orders) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a9f93930e44a95f, []int{0}
}
func (m *Orders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Orders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Orders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Orders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orders.Merge(m, src)
}
func (m *Orders) XXX_Size() int {
	return m.Size()
}
func (m *Orders) XXX_DiscardUnknown() {
	xxx_messageInfo_Orders.DiscardUnknown(m)
}

var xxx_messageInfo_Orders proto.InternalMessageInfo

func (m *Orders) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *Orders) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Orders) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

func (m *Orders) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Orders) GetSide() int64 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *Orders) GetOrderQty() string {
	if m != nil {
		return m.OrderQty
	}
	return ""
}

func (m *Orders) GetOrdType() int64 {
	if m != nil {
		return m.OrdType
	}
	return 0
}

func (m *Orders) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Orders) GetTimeInForce() int64 {
	if m != nil {
		return m.TimeInForce
	}
	return 0
}

func (m *Orders) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Orders) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *Orders) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *Orders) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Orders)(nil), "jim380.re.fix.Orders")
}

func init() { proto.RegisterFile("re/fix/orders.proto", fileDescriptor_3a9f93930e44a95f) }

var fileDescriptor_3a9f93930e44a95f = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xb1, 0x8e, 0xda, 0x40,
	0x10, 0xc5, 0x01, 0x0c, 0x2c, 0xd0, 0x6c, 0x12, 0xb4, 0x42, 0x89, 0x65, 0x51, 0xd1, 0xc4, 0x46,
	0xa1, 0x89, 0x52, 0x46, 0x28, 0x0a, 0x15, 0x8a, 0x45, 0x95, 0x26, 0x5a, 0xec, 0x01, 0x36, 0xc2,
	0x5e, 0x6b, 0x76, 0x23, 0xd9, 0x1f, 0x11, 0x29, 0x9f, 0x75, 0x25, 0xe5, 0x95, 0x27, 0xf8, 0x91,
	0x13, 0x63, 0x73, 0x77, 0x5c, 0x37, 0x6f, 0xde, 0x7b, 0x33, 0xbb, 0x6f, 0xd8, 0x5b, 0x84, 0x70,
	0xab, 0x8a, 0x50, 0x63, 0x02, 0x68, 0x82, 0x1c, 0xb5, 0xd5, 0x7c, 0xf8, 0x47, 0xa5, 0xf3, 0x2f,
	0xb3, 0x00, 0x21, 0xd8, 0xaa, 0x62, 0xfc, 0xb1, 0xd6, 0x18, 0x2b, 0xb3, 0x44, 0x62, 0xf2, 0x3b,
	0x05, 0x63, 0xe4, 0x0e, 0x2a, 0xf5, 0xe4, 0x5f, 0x93, 0xb9, 0x2b, 0xb2, 0xf3, 0x0f, 0xac, 0x67,
	0xc0, 0x18, 0xa5, 0xb3, 0xe5, 0x42, 0x38, 0xbe, 0x33, 0xed, 0x45, 0xcf, 0x0d, 0xfe, 0x89, 0xb9,
	0x7b, 0x90, 0x09, 0xa0, 0x78, 0xe3, 0x3b, 0xd3, 0xfe, 0xe7, 0xf7, 0xc1, 0xcd, 0x9e, 0xe0, 0x07,
	0x91, 0x51, 0x2d, 0xe2, 0x82, 0x75, 0xe2, 0xc3, 0x0a, 0x93, 0xe5, 0x42, 0x34, 0x69, 0xd4, 0x15,
	0xf2, 0x11, 0x73, 0x4d, 0x99, 0x6e, 0xf4, 0x41, 0xb4, 0x88, 0xa8, 0x11, 0xe7, 0xac, 0x65, 0x54,
	0x02, 0xa2, 0xed, 0x3b, 0xd3, 0x66, 0x44, 0x35, 0x1f, 0xb3, 0x2e, 0xfd, 0xed, 0xa7, 0x2d, 0x85,
	0x4b, 0xea, 0x27, 0x7c, 0xd9, 0xa0, 0x31, 0x59, 0x97, 0x39, 0x88, 0x0e, 0x59, 0xae, 0x90, 0xbf,
	0x63, 0xed, 0x1c, 0x55, 0x0c, 0xa2, 0x4b, 0x96, 0x0a, 0x70, 0x9f, 0xf5, 0xad, 0x4a, 0x61, 0x99,
	0x7d, 0xd7, 0x18, 0x83, 0xe8, 0x91, 0xe7, 0x65, 0xeb, 0xf2, 0x02, 0x0b, 0x85, 0x15, 0x8c, 0x6c,
	0x54, 0xf3, 0x09, 0x1b, 0x58, 0x94, 0x99, 0x91, 0xb1, 0x5d, 0xab, 0x14, 0x44, 0x9f, 0xb8, 0x9b,
	0x1e, 0x9f, 0xb1, 0x8e, 0x45, 0xa9, 0x0e, 0x80, 0x62, 0x40, 0xd9, 0x8c, 0x5e, 0x65, 0xb3, 0xae,
	0xd8, 0xe8, 0x2a, 0xa3, 0x74, 0x10, 0xa4, 0xd5, 0x28, 0x86, 0x75, 0x3a, 0x15, 0xfc, 0xf6, 0xf5,
	0xee, 0xe4, 0x39, 0xc7, 0x93, 0xe7, 0x3c, 0x9c, 0x3c, 0xe7, 0xff, 0xd9, 0x6b, 0x1c, 0xcf, 0x5e,
	0xe3, 0xfe, 0xec, 0x35, 0x7e, 0xf9, 0x3b, 0x65, 0xf7, 0x7f, 0x37, 0x41, 0xac, 0xd3, 0xb0, 0x1a,
	0x1f, 0x46, 0x10, 0x16, 0x74, 0x5c, 0x5b, 0xe6, 0x60, 0x36, 0x2e, 0x9d, 0x74, 0xfe, 0x18, 0x00,
	0x00, 0xff, 0xff, 0xf0, 0x43, 0xa8, 0x64, 0x17, 0x02, 0x00, 0x00,
}

func (m *Orders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Orders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Orders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrders(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x52
	}
	if m.TimeInForce != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.TimeInForce))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x42
	}
	if m.OrdType != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.OrdType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OrderQty) > 0 {
		i -= len(m.OrderQty)
		copy(dAtA[i:], m.OrderQty)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.OrderQty)))
		i--
		dAtA[i] = 0x32
	}
	if m.Side != 0 {
		i = encodeVarintOrders(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOrders(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintOrders(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrders(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Orders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.Side != 0 {
		n += 1 + sovOrders(uint64(m.Side))
	}
	l = len(m.OrderQty)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.OrdType != 0 {
		n += 1 + sovOrders(uint64(m.OrdType))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.TimeInForce != 0 {
		n += 1 + sovOrders(uint64(m.TimeInForce))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovOrders(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovOrders(uint64(l))
	}
	return n
}

func sovOrders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrders(x uint64) (n int) {
	return sovOrders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Orders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Orders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Orders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderQty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderQty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdType", wireType)
			}
			m.OrdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrdType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeInForce", wireType)
			}
			m.TimeInForce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeInForce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrders
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrders = fmt.Errorf("proto: unexpected end of group")
)
