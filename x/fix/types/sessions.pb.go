// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/sessions.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sessions struct {
	SessionID      string          `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	LogonInitiator *LogonInitiator `protobuf:"bytes,2,opt,name=logonInitiator,proto3" json:"logonInitiator,omitempty"`
	LogonAcceptor  *LogonAcceptor  `protobuf:"bytes,3,opt,name=logonAcceptor,proto3" json:"logonAcceptor,omitempty"`
	Status         string          `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	IsAccepted     bool            `protobuf:"varint,5,opt,name=IsAccepted,proto3" json:"IsAccepted,omitempty"`
}

func (m *Sessions) Reset()         { *m = Sessions{} }
func (m *Sessions) String() string { return proto.CompactTextString(m) }
func (*Sessions) ProtoMessage()    {}
func (*Sessions) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d4d646ca64d70e3, []int{0}
}
func (m *Sessions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sessions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sessions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sessions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sessions.Merge(m, src)
}
func (m *Sessions) XXX_Size() int {
	return m.Size()
}
func (m *Sessions) XXX_DiscardUnknown() {
	xxx_messageInfo_Sessions.DiscardUnknown(m)
}

var xxx_messageInfo_Sessions proto.InternalMessageInfo

func (m *Sessions) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *Sessions) GetLogonInitiator() *LogonInitiator {
	if m != nil {
		return m.LogonInitiator
	}
	return nil
}

func (m *Sessions) GetLogonAcceptor() *LogonAcceptor {
	if m != nil {
		return m.LogonAcceptor
	}
	return nil
}

func (m *Sessions) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Sessions) GetIsAccepted() bool {
	if m != nil {
		return m.IsAccepted
	}
	return false
}

// This message is used by the initiator of a FIX session to initiate a
// connection with the acceptor
type LogonInitiator struct {
	// The FIX message header contains standard metadata about the message,
	// including the sender and receiver IDs and the message type
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// An integer value indicating the encryption method to be used for the
	// session
	EncryptMethod int64 `protobuf:"varint,2,opt,name=encryptMethod,proto3" json:"encryptMethod,omitempty"`
	// An integer value indicating the number of seconds between heartbeats that
	// will be sent during the session. This is used to monitor the connection
	// between the two parties
	HeartBtInt int64 `protobuf:"varint,3,opt,name=heartBtInt,proto3" json:"heartBtInt,omitempty"`
	// The FIX message trailer contains standard metadata about the message,
	// including the message checksum
	Trailer *Trailer `protobuf:"bytes,4,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *LogonInitiator) Reset()         { *m = LogonInitiator{} }
func (m *LogonInitiator) String() string { return proto.CompactTextString(m) }
func (*LogonInitiator) ProtoMessage()    {}
func (*LogonInitiator) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d4d646ca64d70e3, []int{1}
}
func (m *LogonInitiator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogonInitiator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogonInitiator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogonInitiator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogonInitiator.Merge(m, src)
}
func (m *LogonInitiator) XXX_Size() int {
	return m.Size()
}
func (m *LogonInitiator) XXX_DiscardUnknown() {
	xxx_messageInfo_LogonInitiator.DiscardUnknown(m)
}

var xxx_messageInfo_LogonInitiator proto.InternalMessageInfo

func (m *LogonInitiator) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LogonInitiator) GetEncryptMethod() int64 {
	if m != nil {
		return m.EncryptMethod
	}
	return 0
}

func (m *LogonInitiator) GetHeartBtInt() int64 {
	if m != nil {
		return m.HeartBtInt
	}
	return 0
}

func (m *LogonInitiator) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

// This message is used by the acceptor of a FIX session to acknowledge the
// initiation of the connection by the initiator
type LogonAcceptor struct {
	// The FIX message header contains standard metadata about the message,
	// including the sender and receiver IDs and the message type
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// An integer value indicating the encryption method to be used for the
	// session
	EncryptMethod int64 `protobuf:"varint,2,opt,name=encryptMethod,proto3" json:"encryptMethod,omitempty"`
	// An integer value indicating the number of seconds between heartbeats that
	// will be sent during the session. This is used to monitor the connection
	// between the two parties
	HeartBtInt int64 `protobuf:"varint,3,opt,name=heartBtInt,proto3" json:"heartBtInt,omitempty"`
	// The FIX message trailer contains standard metadata about the message,
	// including the message checksum
	Trailer *Trailer `protobuf:"bytes,4,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *LogonAcceptor) Reset()         { *m = LogonAcceptor{} }
func (m *LogonAcceptor) String() string { return proto.CompactTextString(m) }
func (*LogonAcceptor) ProtoMessage()    {}
func (*LogonAcceptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d4d646ca64d70e3, []int{2}
}
func (m *LogonAcceptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogonAcceptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogonAcceptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogonAcceptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogonAcceptor.Merge(m, src)
}
func (m *LogonAcceptor) XXX_Size() int {
	return m.Size()
}
func (m *LogonAcceptor) XXX_DiscardUnknown() {
	xxx_messageInfo_LogonAcceptor.DiscardUnknown(m)
}

var xxx_messageInfo_LogonAcceptor proto.InternalMessageInfo

func (m *LogonAcceptor) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LogonAcceptor) GetEncryptMethod() int64 {
	if m != nil {
		return m.EncryptMethod
	}
	return 0
}

func (m *LogonAcceptor) GetHeartBtInt() int64 {
	if m != nil {
		return m.HeartBtInt
	}
	return 0
}

func (m *LogonAcceptor) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func init() {
	proto.RegisterType((*Sessions)(nil), "jim380.re.fix.Sessions")
	proto.RegisterType((*LogonInitiator)(nil), "jim380.re.fix.LogonInitiator")
	proto.RegisterType((*LogonAcceptor)(nil), "jim380.re.fix.LogonAcceptor")
}

func init() { proto.RegisterFile("re/fix/sessions.proto", fileDescriptor_7d4d646ca64d70e3) }

var fileDescriptor_7d4d646ca64d70e3 = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x92, 0xc1, 0x6a, 0xea, 0x40,
	0x14, 0x86, 0x9d, 0xeb, 0xbd, 0x5e, 0x1d, 0x89, 0x8b, 0x01, 0x25, 0x5c, 0x34, 0x04, 0xb9, 0x0b,
	0x37, 0x4d, 0x44, 0x37, 0xa5, 0xbb, 0x4a, 0x0b, 0x0d, 0xb4, 0x9b, 0x69, 0x57, 0xdd, 0x94, 0x31,
	0x39, 0x9a, 0x29, 0x9a, 0x09, 0x33, 0x23, 0xe8, 0x5b, 0xf4, 0x69, 0xda, 0x57, 0xe8, 0xd2, 0x65,
	0x97, 0x45, 0x97, 0x7d, 0x89, 0xe2, 0x24, 0x52, 0x23, 0x7d, 0x81, 0x2e, 0xe7, 0x9f, 0xef, 0xfc,
	0xe7, 0x3f, 0x87, 0x83, 0x9b, 0x12, 0xfc, 0x09, 0x5f, 0xfa, 0x0a, 0x94, 0xe2, 0x22, 0x51, 0x5e,
	0x2a, 0x85, 0x16, 0xc4, 0x7a, 0xe4, 0xf3, 0xe1, 0x69, 0xdf, 0x93, 0xe0, 0x4d, 0xf8, 0xf2, 0x5f,
	0x67, 0x4f, 0x69, 0x96, 0x44, 0x4c, 0x46, 0x0f, 0x73, 0x50, 0x8a, 0x4d, 0x21, 0xa3, 0xbb, 0x1f,
	0x08, 0x57, 0x6f, 0x73, 0x03, 0xd2, 0xc6, 0xb5, 0xdc, 0x2c, 0xb8, 0xb0, 0x91, 0x8b, 0x7a, 0x35,
	0xfa, 0x25, 0x90, 0x4b, 0xdc, 0x98, 0x89, 0xa9, 0x48, 0x82, 0x84, 0x6b, 0xce, 0xb4, 0x90, 0xf6,
	0x2f, 0x17, 0xf5, 0xea, 0x83, 0x8e, 0x57, 0xe8, 0xe8, 0x5d, 0x17, 0x20, 0x7a, 0x54, 0x44, 0x46,
	0xd8, 0x32, 0xca, 0x79, 0x18, 0x42, 0xba, 0x73, 0x29, 0x1b, 0x97, 0xf6, 0x77, 0x2e, 0x7b, 0x86,
	0x16, 0x4b, 0x48, 0x0b, 0x57, 0x94, 0x66, 0x7a, 0xa1, 0xec, 0xdf, 0x26, 0x65, 0xfe, 0x22, 0x0e,
	0xc6, 0x81, 0xca, 0x28, 0x88, 0xec, 0x3f, 0x2e, 0xea, 0x55, 0xe9, 0x81, 0xd2, 0x7d, 0x41, 0xb8,
	0x51, 0x8c, 0x47, 0x4e, 0x70, 0x25, 0x06, 0x16, 0x81, 0x34, 0x03, 0xd7, 0x07, 0xcd, 0xa3, 0x1c,
	0x57, 0xe6, 0x93, 0xe6, 0x10, 0xf9, 0x8f, 0x2d, 0x48, 0x42, 0xb9, 0x4a, 0xf5, 0x0d, 0xe8, 0x58,
	0x44, 0x66, 0x07, 0x65, 0x5a, 0x14, 0x77, 0x39, 0x62, 0x60, 0x52, 0x8f, 0x74, 0x90, 0x68, 0x33,
	0x60, 0x99, 0x1e, 0x28, 0xa4, 0x8f, 0xff, 0x6a, 0xc9, 0xf8, 0x0c, 0xa4, 0x19, 0xa0, 0x3e, 0x68,
	0x1d, 0x75, 0xbd, 0xcb, 0x7e, 0xe9, 0x1e, 0xeb, 0x3e, 0x23, 0x6c, 0x15, 0x56, 0xf2, 0x43, 0x82,
	0x8f, 0xce, 0x5e, 0x37, 0x0e, 0x5a, 0x6f, 0x1c, 0xf4, 0xbe, 0x71, 0xd0, 0xd3, 0xd6, 0x29, 0xad,
	0xb7, 0x4e, 0xe9, 0x6d, 0xeb, 0x94, 0xee, 0xdd, 0x29, 0xd7, 0xf1, 0x62, 0xec, 0x85, 0x62, 0xee,
	0x67, 0x26, 0x3e, 0x05, 0x7f, 0x69, 0xae, 0x55, 0xaf, 0x52, 0x50, 0xe3, 0x8a, 0xb9, 0xd1, 0xe1,
	0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xd7, 0xce, 0x0c, 0xea, 0x02, 0x00, 0x00,
}

func (m *Sessions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sessions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sessions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAccepted {
		i--
		if m.IsAccepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintSessions(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if m.LogonAcceptor != nil {
		{
			size, err := m.LogonAcceptor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.LogonInitiator != nil {
		{
			size, err := m.LogonInitiator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintSessions(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogonInitiator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogonInitiator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogonInitiator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HeartBtInt != 0 {
		i = encodeVarintSessions(dAtA, i, uint64(m.HeartBtInt))
		i--
		dAtA[i] = 0x18
	}
	if m.EncryptMethod != 0 {
		i = encodeVarintSessions(dAtA, i, uint64(m.EncryptMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogonAcceptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogonAcceptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogonAcceptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.HeartBtInt != 0 {
		i = encodeVarintSessions(dAtA, i, uint64(m.HeartBtInt))
		i--
		dAtA[i] = 0x18
	}
	if m.EncryptMethod != 0 {
		i = encodeVarintSessions(dAtA, i, uint64(m.EncryptMethod))
		i--
		dAtA[i] = 0x10
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSessions(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessions(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sessions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovSessions(uint64(l))
	}
	if m.LogonInitiator != nil {
		l = m.LogonInitiator.Size()
		n += 1 + l + sovSessions(uint64(l))
	}
	if m.LogonAcceptor != nil {
		l = m.LogonAcceptor.Size()
		n += 1 + l + sovSessions(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovSessions(uint64(l))
	}
	if m.IsAccepted {
		n += 2
	}
	return n
}

func (m *LogonInitiator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSessions(uint64(l))
	}
	if m.EncryptMethod != 0 {
		n += 1 + sovSessions(uint64(m.EncryptMethod))
	}
	if m.HeartBtInt != 0 {
		n += 1 + sovSessions(uint64(m.HeartBtInt))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovSessions(uint64(l))
	}
	return n
}

func (m *LogonAcceptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSessions(uint64(l))
	}
	if m.EncryptMethod != 0 {
		n += 1 + sovSessions(uint64(m.EncryptMethod))
	}
	if m.HeartBtInt != 0 {
		n += 1 + sovSessions(uint64(m.HeartBtInt))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovSessions(uint64(l))
	}
	return n
}

func sovSessions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessions(x uint64) (n int) {
	return sovSessions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sessions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sessions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sessions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogonInitiator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogonInitiator == nil {
				m.LogonInitiator = &LogonInitiator{}
			}
			if err := m.LogonInitiator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogonAcceptor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogonAcceptor == nil {
				m.LogonAcceptor = &LogonAcceptor{}
			}
			if err := m.LogonAcceptor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAccepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAccepted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSessions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogonInitiator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogonInitiator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogonInitiator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptMethod", wireType)
			}
			m.EncryptMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptMethod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartBtInt", wireType)
			}
			m.HeartBtInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartBtInt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogonAcceptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogonAcceptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogonAcceptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptMethod", wireType)
			}
			m.EncryptMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptMethod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartBtInt", wireType)
			}
			m.HeartBtInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartBtInt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessions
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessions
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessions
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessions
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessions        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessions          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessions = fmt.Errorf("proto: unexpected end of group")
)
