// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetAccountRequest struct {
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
}

func (m *QueryGetAccountRequest) Reset()         { *m = QueryGetAccountRequest{} }
func (m *QueryGetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountRequest) ProtoMessage()    {}
func (*QueryGetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{2}
}
func (m *QueryGetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountRequest.Merge(m, src)
}
func (m *QueryGetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountRequest proto.InternalMessageInfo

func (m *QueryGetAccountRequest) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

type QueryGetAccountResponse struct {
	Account Account `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account"`
}

func (m *QueryGetAccountResponse) Reset()         { *m = QueryGetAccountResponse{} }
func (m *QueryGetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountResponse) ProtoMessage()    {}
func (*QueryGetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{3}
}
func (m *QueryGetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountResponse.Merge(m, src)
}
func (m *QueryGetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountResponse proto.InternalMessageInfo

func (m *QueryGetAccountResponse) GetAccount() Account {
	if m != nil {
		return m.Account
	}
	return Account{}
}

type QueryAllAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountRequest) Reset()         { *m = QueryAllAccountRequest{} }
func (m *QueryAllAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountRequest) ProtoMessage()    {}
func (*QueryAllAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{4}
}
func (m *QueryAllAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountRequest.Merge(m, src)
}
func (m *QueryAllAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountRequest proto.InternalMessageInfo

func (m *QueryAllAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountResponse struct {
	Account    []Account           `protobuf:"bytes,1,rep,name=Account,proto3" json:"Account"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountResponse) Reset()         { *m = QueryAllAccountResponse{} }
func (m *QueryAllAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountResponse) ProtoMessage()    {}
func (*QueryAllAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{5}
}
func (m *QueryAllAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountResponse.Merge(m, src)
}
func (m *QueryAllAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountResponse proto.InternalMessageInfo

func (m *QueryAllAccountResponse) GetAccount() []Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *QueryAllAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSessionsRequest struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *QueryGetSessionsRequest) Reset()         { *m = QueryGetSessionsRequest{} }
func (m *QueryGetSessionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionsRequest) ProtoMessage()    {}
func (*QueryGetSessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{6}
}
func (m *QueryGetSessionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionsRequest.Merge(m, src)
}
func (m *QueryGetSessionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionsRequest proto.InternalMessageInfo

func (m *QueryGetSessionsRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type QueryGetSessionsResponse struct {
	Sessions Sessions `protobuf:"bytes,1,opt,name=Sessions,proto3" json:"Sessions"`
}

func (m *QueryGetSessionsResponse) Reset()         { *m = QueryGetSessionsResponse{} }
func (m *QueryGetSessionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionsResponse) ProtoMessage()    {}
func (*QueryGetSessionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{7}
}
func (m *QueryGetSessionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionsResponse.Merge(m, src)
}
func (m *QueryGetSessionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionsResponse proto.InternalMessageInfo

func (m *QueryGetSessionsResponse) GetSessions() Sessions {
	if m != nil {
		return m.Sessions
	}
	return Sessions{}
}

type QueryAllSessionsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionsRequest) Reset()         { *m = QueryAllSessionsRequest{} }
func (m *QueryAllSessionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionsRequest) ProtoMessage()    {}
func (*QueryAllSessionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{8}
}
func (m *QueryAllSessionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionsRequest.Merge(m, src)
}
func (m *QueryAllSessionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionsRequest proto.InternalMessageInfo

func (m *QueryAllSessionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSessionsResponse struct {
	Sessions   []Sessions          `protobuf:"bytes,1,rep,name=Sessions,proto3" json:"Sessions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionsResponse) Reset()         { *m = QueryAllSessionsResponse{} }
func (m *QueryAllSessionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionsResponse) ProtoMessage()    {}
func (*QueryAllSessionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{9}
}
func (m *QueryAllSessionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionsResponse.Merge(m, src)
}
func (m *QueryAllSessionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionsResponse proto.InternalMessageInfo

func (m *QueryAllSessionsResponse) GetSessions() []Sessions {
	if m != nil {
		return m.Sessions
	}
	return nil
}

func (m *QueryAllSessionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSessionRejectRequest struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *QueryGetSessionRejectRequest) Reset()         { *m = QueryGetSessionRejectRequest{} }
func (m *QueryGetSessionRejectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionRejectRequest) ProtoMessage()    {}
func (*QueryGetSessionRejectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{10}
}
func (m *QueryGetSessionRejectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionRejectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionRejectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionRejectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionRejectRequest.Merge(m, src)
}
func (m *QueryGetSessionRejectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionRejectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionRejectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionRejectRequest proto.InternalMessageInfo

func (m *QueryGetSessionRejectRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type QueryGetSessionRejectResponse struct {
	SessionReject SessionReject `protobuf:"bytes,1,opt,name=SessionReject,proto3" json:"SessionReject"`
}

func (m *QueryGetSessionRejectResponse) Reset()         { *m = QueryGetSessionRejectResponse{} }
func (m *QueryGetSessionRejectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionRejectResponse) ProtoMessage()    {}
func (*QueryGetSessionRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{11}
}
func (m *QueryGetSessionRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionRejectResponse.Merge(m, src)
}
func (m *QueryGetSessionRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionRejectResponse proto.InternalMessageInfo

func (m *QueryGetSessionRejectResponse) GetSessionReject() SessionReject {
	if m != nil {
		return m.SessionReject
	}
	return SessionReject{}
}

type QueryAllSessionRejectRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionRejectRequest) Reset()         { *m = QueryAllSessionRejectRequest{} }
func (m *QueryAllSessionRejectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionRejectRequest) ProtoMessage()    {}
func (*QueryAllSessionRejectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{12}
}
func (m *QueryAllSessionRejectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionRejectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionRejectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionRejectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionRejectRequest.Merge(m, src)
}
func (m *QueryAllSessionRejectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionRejectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionRejectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionRejectRequest proto.InternalMessageInfo

func (m *QueryAllSessionRejectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSessionRejectResponse struct {
	SessionReject []SessionReject     `protobuf:"bytes,1,rep,name=SessionReject,proto3" json:"SessionReject"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionRejectResponse) Reset()         { *m = QueryAllSessionRejectResponse{} }
func (m *QueryAllSessionRejectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionRejectResponse) ProtoMessage()    {}
func (*QueryAllSessionRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{13}
}
func (m *QueryAllSessionRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionRejectResponse.Merge(m, src)
}
func (m *QueryAllSessionRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionRejectResponse proto.InternalMessageInfo

func (m *QueryAllSessionRejectResponse) GetSessionReject() []SessionReject {
	if m != nil {
		return m.SessionReject
	}
	return nil
}

func (m *QueryAllSessionRejectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSessionLogoutRequest struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *QueryGetSessionLogoutRequest) Reset()         { *m = QueryGetSessionLogoutRequest{} }
func (m *QueryGetSessionLogoutRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionLogoutRequest) ProtoMessage()    {}
func (*QueryGetSessionLogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{14}
}
func (m *QueryGetSessionLogoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionLogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionLogoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionLogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionLogoutRequest.Merge(m, src)
}
func (m *QueryGetSessionLogoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionLogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionLogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionLogoutRequest proto.InternalMessageInfo

func (m *QueryGetSessionLogoutRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

type QueryGetSessionLogoutResponse struct {
	SessionLogout SessionLogout `protobuf:"bytes,1,opt,name=SessionLogout,proto3" json:"SessionLogout"`
}

func (m *QueryGetSessionLogoutResponse) Reset()         { *m = QueryGetSessionLogoutResponse{} }
func (m *QueryGetSessionLogoutResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSessionLogoutResponse) ProtoMessage()    {}
func (*QueryGetSessionLogoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{15}
}
func (m *QueryGetSessionLogoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSessionLogoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSessionLogoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSessionLogoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSessionLogoutResponse.Merge(m, src)
}
func (m *QueryGetSessionLogoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSessionLogoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSessionLogoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSessionLogoutResponse proto.InternalMessageInfo

func (m *QueryGetSessionLogoutResponse) GetSessionLogout() SessionLogout {
	if m != nil {
		return m.SessionLogout
	}
	return SessionLogout{}
}

type QueryAllSessionLogoutRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionLogoutRequest) Reset()         { *m = QueryAllSessionLogoutRequest{} }
func (m *QueryAllSessionLogoutRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionLogoutRequest) ProtoMessage()    {}
func (*QueryAllSessionLogoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{16}
}
func (m *QueryAllSessionLogoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionLogoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionLogoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionLogoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionLogoutRequest.Merge(m, src)
}
func (m *QueryAllSessionLogoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionLogoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionLogoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionLogoutRequest proto.InternalMessageInfo

func (m *QueryAllSessionLogoutRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSessionLogoutResponse struct {
	SessionLogout []SessionLogout     `protobuf:"bytes,1,rep,name=SessionLogout,proto3" json:"SessionLogout"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSessionLogoutResponse) Reset()         { *m = QueryAllSessionLogoutResponse{} }
func (m *QueryAllSessionLogoutResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSessionLogoutResponse) ProtoMessage()    {}
func (*QueryAllSessionLogoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{17}
}
func (m *QueryAllSessionLogoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSessionLogoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSessionLogoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSessionLogoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSessionLogoutResponse.Merge(m, src)
}
func (m *QueryAllSessionLogoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSessionLogoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSessionLogoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSessionLogoutResponse proto.InternalMessageInfo

func (m *QueryAllSessionLogoutResponse) GetSessionLogout() []SessionLogout {
	if m != nil {
		return m.SessionLogout
	}
	return nil
}

func (m *QueryAllSessionLogoutResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOrdersRequest struct {
	ClOrdID string `protobuf:"bytes,1,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
}

func (m *QueryGetOrdersRequest) Reset()         { *m = QueryGetOrdersRequest{} }
func (m *QueryGetOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersRequest) ProtoMessage()    {}
func (*QueryGetOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{18}
}
func (m *QueryGetOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersRequest.Merge(m, src)
}
func (m *QueryGetOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersRequest proto.InternalMessageInfo

func (m *QueryGetOrdersRequest) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

type QueryGetOrdersResponse struct {
	Orders Orders `protobuf:"bytes,1,opt,name=Orders,proto3" json:"Orders"`
}

func (m *QueryGetOrdersResponse) Reset()         { *m = QueryGetOrdersResponse{} }
func (m *QueryGetOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersResponse) ProtoMessage()    {}
func (*QueryGetOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{19}
}
func (m *QueryGetOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersResponse.Merge(m, src)
}
func (m *QueryGetOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersResponse proto.InternalMessageInfo

func (m *QueryGetOrdersResponse) GetOrders() Orders {
	if m != nil {
		return m.Orders
	}
	return Orders{}
}

type QueryAllOrdersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersRequest) Reset()         { *m = QueryAllOrdersRequest{} }
func (m *QueryAllOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersRequest) ProtoMessage()    {}
func (*QueryAllOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{20}
}
func (m *QueryAllOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersRequest.Merge(m, src)
}
func (m *QueryAllOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersRequest proto.InternalMessageInfo

func (m *QueryAllOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrdersResponse struct {
	Orders     []Orders            `protobuf:"bytes,1,rep,name=Orders,proto3" json:"Orders"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersResponse) Reset()         { *m = QueryAllOrdersResponse{} }
func (m *QueryAllOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersResponse) ProtoMessage()    {}
func (*QueryAllOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{21}
}
func (m *QueryAllOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersResponse.Merge(m, src)
}
func (m *QueryAllOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersResponse proto.InternalMessageInfo

func (m *QueryAllOrdersResponse) GetOrders() []Orders {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *QueryAllOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOrdersCancelRequestRequest struct {
	ClOrdID string `protobuf:"bytes,1,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
}

func (m *QueryGetOrdersCancelRequestRequest) Reset()         { *m = QueryGetOrdersCancelRequestRequest{} }
func (m *QueryGetOrdersCancelRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersCancelRequestRequest) ProtoMessage()    {}
func (*QueryGetOrdersCancelRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{22}
}
func (m *QueryGetOrdersCancelRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersCancelRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersCancelRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersCancelRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersCancelRequestRequest.Merge(m, src)
}
func (m *QueryGetOrdersCancelRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersCancelRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersCancelRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersCancelRequestRequest proto.InternalMessageInfo

func (m *QueryGetOrdersCancelRequestRequest) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

type QueryGetOrdersCancelRequestResponse struct {
	OrdersCancelRequest OrdersCancelRequest `protobuf:"bytes,1,opt,name=OrdersCancelRequest,proto3" json:"OrdersCancelRequest"`
}

func (m *QueryGetOrdersCancelRequestResponse) Reset()         { *m = QueryGetOrdersCancelRequestResponse{} }
func (m *QueryGetOrdersCancelRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersCancelRequestResponse) ProtoMessage()    {}
func (*QueryGetOrdersCancelRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{23}
}
func (m *QueryGetOrdersCancelRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersCancelRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersCancelRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersCancelRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersCancelRequestResponse.Merge(m, src)
}
func (m *QueryGetOrdersCancelRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersCancelRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersCancelRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersCancelRequestResponse proto.InternalMessageInfo

func (m *QueryGetOrdersCancelRequestResponse) GetOrdersCancelRequest() OrdersCancelRequest {
	if m != nil {
		return m.OrdersCancelRequest
	}
	return OrdersCancelRequest{}
}

type QueryAllOrdersCancelRequestRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersCancelRequestRequest) Reset()         { *m = QueryAllOrdersCancelRequestRequest{} }
func (m *QueryAllOrdersCancelRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersCancelRequestRequest) ProtoMessage()    {}
func (*QueryAllOrdersCancelRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{24}
}
func (m *QueryAllOrdersCancelRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersCancelRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersCancelRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersCancelRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersCancelRequestRequest.Merge(m, src)
}
func (m *QueryAllOrdersCancelRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersCancelRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersCancelRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersCancelRequestRequest proto.InternalMessageInfo

func (m *QueryAllOrdersCancelRequestRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrdersCancelRequestResponse struct {
	OrdersCancelRequest []OrdersCancelRequest `protobuf:"bytes,1,rep,name=OrdersCancelRequest,proto3" json:"OrdersCancelRequest"`
	Pagination          *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersCancelRequestResponse) Reset()         { *m = QueryAllOrdersCancelRequestResponse{} }
func (m *QueryAllOrdersCancelRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersCancelRequestResponse) ProtoMessage()    {}
func (*QueryAllOrdersCancelRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{25}
}
func (m *QueryAllOrdersCancelRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersCancelRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersCancelRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersCancelRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersCancelRequestResponse.Merge(m, src)
}
func (m *QueryAllOrdersCancelRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersCancelRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersCancelRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersCancelRequestResponse proto.InternalMessageInfo

func (m *QueryAllOrdersCancelRequestResponse) GetOrdersCancelRequest() []OrdersCancelRequest {
	if m != nil {
		return m.OrdersCancelRequest
	}
	return nil
}

func (m *QueryAllOrdersCancelRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOrdersCancelRejectRequest struct {
	ClOrdID string `protobuf:"bytes,1,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
}

func (m *QueryGetOrdersCancelRejectRequest) Reset()         { *m = QueryGetOrdersCancelRejectRequest{} }
func (m *QueryGetOrdersCancelRejectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersCancelRejectRequest) ProtoMessage()    {}
func (*QueryGetOrdersCancelRejectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{26}
}
func (m *QueryGetOrdersCancelRejectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersCancelRejectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersCancelRejectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersCancelRejectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersCancelRejectRequest.Merge(m, src)
}
func (m *QueryGetOrdersCancelRejectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersCancelRejectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersCancelRejectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersCancelRejectRequest proto.InternalMessageInfo

func (m *QueryGetOrdersCancelRejectRequest) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

type QueryGetOrdersCancelRejectResponse struct {
	OrdersCancelReject OrdersCancelReject `protobuf:"bytes,1,opt,name=OrdersCancelReject,proto3" json:"OrdersCancelReject"`
}

func (m *QueryGetOrdersCancelRejectResponse) Reset()         { *m = QueryGetOrdersCancelRejectResponse{} }
func (m *QueryGetOrdersCancelRejectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersCancelRejectResponse) ProtoMessage()    {}
func (*QueryGetOrdersCancelRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{27}
}
func (m *QueryGetOrdersCancelRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersCancelRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersCancelRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersCancelRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersCancelRejectResponse.Merge(m, src)
}
func (m *QueryGetOrdersCancelRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersCancelRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersCancelRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersCancelRejectResponse proto.InternalMessageInfo

func (m *QueryGetOrdersCancelRejectResponse) GetOrdersCancelReject() OrdersCancelReject {
	if m != nil {
		return m.OrdersCancelReject
	}
	return OrdersCancelReject{}
}

type QueryAllOrdersCancelRejectRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersCancelRejectRequest) Reset()         { *m = QueryAllOrdersCancelRejectRequest{} }
func (m *QueryAllOrdersCancelRejectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersCancelRejectRequest) ProtoMessage()    {}
func (*QueryAllOrdersCancelRejectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{28}
}
func (m *QueryAllOrdersCancelRejectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersCancelRejectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersCancelRejectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersCancelRejectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersCancelRejectRequest.Merge(m, src)
}
func (m *QueryAllOrdersCancelRejectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersCancelRejectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersCancelRejectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersCancelRejectRequest proto.InternalMessageInfo

func (m *QueryAllOrdersCancelRejectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrdersCancelRejectResponse struct {
	OrdersCancelReject []OrdersCancelReject `protobuf:"bytes,1,rep,name=OrdersCancelReject,proto3" json:"OrdersCancelReject"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersCancelRejectResponse) Reset()         { *m = QueryAllOrdersCancelRejectResponse{} }
func (m *QueryAllOrdersCancelRejectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersCancelRejectResponse) ProtoMessage()    {}
func (*QueryAllOrdersCancelRejectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{29}
}
func (m *QueryAllOrdersCancelRejectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersCancelRejectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersCancelRejectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersCancelRejectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersCancelRejectResponse.Merge(m, src)
}
func (m *QueryAllOrdersCancelRejectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersCancelRejectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersCancelRejectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersCancelRejectResponse proto.InternalMessageInfo

func (m *QueryAllOrdersCancelRejectResponse) GetOrdersCancelReject() []OrdersCancelReject {
	if m != nil {
		return m.OrdersCancelReject
	}
	return nil
}

func (m *QueryAllOrdersCancelRejectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOrdersExecutionReportRequest struct {
	ClOrdID string `protobuf:"bytes,1,opt,name=clOrdID,proto3" json:"clOrdID,omitempty"`
}

func (m *QueryGetOrdersExecutionReportRequest) Reset()         { *m = QueryGetOrdersExecutionReportRequest{} }
func (m *QueryGetOrdersExecutionReportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersExecutionReportRequest) ProtoMessage()    {}
func (*QueryGetOrdersExecutionReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{30}
}
func (m *QueryGetOrdersExecutionReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersExecutionReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersExecutionReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersExecutionReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersExecutionReportRequest.Merge(m, src)
}
func (m *QueryGetOrdersExecutionReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersExecutionReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersExecutionReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersExecutionReportRequest proto.InternalMessageInfo

func (m *QueryGetOrdersExecutionReportRequest) GetClOrdID() string {
	if m != nil {
		return m.ClOrdID
	}
	return ""
}

type QueryGetOrdersExecutionReportResponse struct {
	OrdersExecutionReport OrdersExecutionReport `protobuf:"bytes,1,opt,name=OrdersExecutionReport,proto3" json:"OrdersExecutionReport"`
}

func (m *QueryGetOrdersExecutionReportResponse) Reset()         { *m = QueryGetOrdersExecutionReportResponse{} }
func (m *QueryGetOrdersExecutionReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrdersExecutionReportResponse) ProtoMessage()    {}
func (*QueryGetOrdersExecutionReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{31}
}
func (m *QueryGetOrdersExecutionReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrdersExecutionReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrdersExecutionReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrdersExecutionReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrdersExecutionReportResponse.Merge(m, src)
}
func (m *QueryGetOrdersExecutionReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrdersExecutionReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrdersExecutionReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrdersExecutionReportResponse proto.InternalMessageInfo

func (m *QueryGetOrdersExecutionReportResponse) GetOrdersExecutionReport() OrdersExecutionReport {
	if m != nil {
		return m.OrdersExecutionReport
	}
	return OrdersExecutionReport{}
}

type QueryAllOrdersExecutionReportRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersExecutionReportRequest) Reset()         { *m = QueryAllOrdersExecutionReportRequest{} }
func (m *QueryAllOrdersExecutionReportRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersExecutionReportRequest) ProtoMessage()    {}
func (*QueryAllOrdersExecutionReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{32}
}
func (m *QueryAllOrdersExecutionReportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersExecutionReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersExecutionReportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersExecutionReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersExecutionReportRequest.Merge(m, src)
}
func (m *QueryAllOrdersExecutionReportRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersExecutionReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersExecutionReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersExecutionReportRequest proto.InternalMessageInfo

func (m *QueryAllOrdersExecutionReportRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrdersExecutionReportResponse struct {
	OrdersExecutionReport []OrdersExecutionReport `protobuf:"bytes,1,rep,name=OrdersExecutionReport,proto3" json:"OrdersExecutionReport"`
	Pagination            *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrdersExecutionReportResponse) Reset()         { *m = QueryAllOrdersExecutionReportResponse{} }
func (m *QueryAllOrdersExecutionReportResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersExecutionReportResponse) ProtoMessage()    {}
func (*QueryAllOrdersExecutionReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{33}
}
func (m *QueryAllOrdersExecutionReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersExecutionReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersExecutionReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersExecutionReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersExecutionReportResponse.Merge(m, src)
}
func (m *QueryAllOrdersExecutionReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersExecutionReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersExecutionReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersExecutionReportResponse proto.InternalMessageInfo

func (m *QueryAllOrdersExecutionReportResponse) GetOrdersExecutionReport() []OrdersExecutionReport {
	if m != nil {
		return m.OrdersExecutionReport
	}
	return nil
}

func (m *QueryAllOrdersExecutionReportResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetQuoteRequest struct {
	QuoteReqID string `protobuf:"bytes,1,opt,name=quoteReqID,proto3" json:"quoteReqID,omitempty"`
}

func (m *QueryGetQuoteRequest) Reset()         { *m = QueryGetQuoteRequest{} }
func (m *QueryGetQuoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetQuoteRequest) ProtoMessage()    {}
func (*QueryGetQuoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{34}
}
func (m *QueryGetQuoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQuoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQuoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQuoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQuoteRequest.Merge(m, src)
}
func (m *QueryGetQuoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQuoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQuoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQuoteRequest proto.InternalMessageInfo

func (m *QueryGetQuoteRequest) GetQuoteReqID() string {
	if m != nil {
		return m.QuoteReqID
	}
	return ""
}

type QueryGetQuoteResponse struct {
	Quote Quote `protobuf:"bytes,1,opt,name=Quote,proto3" json:"Quote"`
}

func (m *QueryGetQuoteResponse) Reset()         { *m = QueryGetQuoteResponse{} }
func (m *QueryGetQuoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetQuoteResponse) ProtoMessage()    {}
func (*QueryGetQuoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{35}
}
func (m *QueryGetQuoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQuoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQuoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQuoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQuoteResponse.Merge(m, src)
}
func (m *QueryGetQuoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQuoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQuoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQuoteResponse proto.InternalMessageInfo

func (m *QueryGetQuoteResponse) GetQuote() Quote {
	if m != nil {
		return m.Quote
	}
	return Quote{}
}

// get Quotes by SessionID
type QuerySessionByIDQuoteRequest struct {
	SessionID string `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (m *QuerySessionByIDQuoteRequest) Reset()         { *m = QuerySessionByIDQuoteRequest{} }
func (m *QuerySessionByIDQuoteRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySessionByIDQuoteRequest) ProtoMessage()    {}
func (*QuerySessionByIDQuoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{36}
}
func (m *QuerySessionByIDQuoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySessionByIDQuoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySessionByIDQuoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySessionByIDQuoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySessionByIDQuoteRequest.Merge(m, src)
}
func (m *QuerySessionByIDQuoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySessionByIDQuoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySessionByIDQuoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySessionByIDQuoteRequest proto.InternalMessageInfo

func (m *QuerySessionByIDQuoteRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

// get Quotes Response by sessionID
type QuerySessionByIDQuoteResponse struct {
	Quote []Quote `protobuf:"bytes,1,rep,name=Quote,proto3" json:"Quote"`
}

func (m *QuerySessionByIDQuoteResponse) Reset()         { *m = QuerySessionByIDQuoteResponse{} }
func (m *QuerySessionByIDQuoteResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySessionByIDQuoteResponse) ProtoMessage()    {}
func (*QuerySessionByIDQuoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{37}
}
func (m *QuerySessionByIDQuoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySessionByIDQuoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySessionByIDQuoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySessionByIDQuoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySessionByIDQuoteResponse.Merge(m, src)
}
func (m *QuerySessionByIDQuoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySessionByIDQuoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySessionByIDQuoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySessionByIDQuoteResponse proto.InternalMessageInfo

func (m *QuerySessionByIDQuoteResponse) GetQuote() []Quote {
	if m != nil {
		return m.Quote
	}
	return nil
}

type QueryAllQuoteRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllQuoteRequest) Reset()         { *m = QueryAllQuoteRequest{} }
func (m *QueryAllQuoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllQuoteRequest) ProtoMessage()    {}
func (*QueryAllQuoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{38}
}
func (m *QueryAllQuoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllQuoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllQuoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllQuoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllQuoteRequest.Merge(m, src)
}
func (m *QueryAllQuoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllQuoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllQuoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllQuoteRequest proto.InternalMessageInfo

func (m *QueryAllQuoteRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllQuoteResponse struct {
	Quote      []Quote             `protobuf:"bytes,1,rep,name=Quote,proto3" json:"Quote"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllQuoteResponse) Reset()         { *m = QueryAllQuoteResponse{} }
func (m *QueryAllQuoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllQuoteResponse) ProtoMessage()    {}
func (*QueryAllQuoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{39}
}
func (m *QueryAllQuoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllQuoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllQuoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllQuoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllQuoteResponse.Merge(m, src)
}
func (m *QueryAllQuoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllQuoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllQuoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllQuoteResponse proto.InternalMessageInfo

func (m *QueryAllQuoteResponse) GetQuote() []Quote {
	if m != nil {
		return m.Quote
	}
	return nil
}

func (m *QueryAllQuoteResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTradeCaptureRequest struct {
	TradeReportID string `protobuf:"bytes,1,opt,name=tradeReportID,proto3" json:"tradeReportID,omitempty"`
}

func (m *QueryGetTradeCaptureRequest) Reset()         { *m = QueryGetTradeCaptureRequest{} }
func (m *QueryGetTradeCaptureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeCaptureRequest) ProtoMessage()    {}
func (*QueryGetTradeCaptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{40}
}
func (m *QueryGetTradeCaptureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeCaptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeCaptureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeCaptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeCaptureRequest.Merge(m, src)
}
func (m *QueryGetTradeCaptureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeCaptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeCaptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeCaptureRequest proto.InternalMessageInfo

func (m *QueryGetTradeCaptureRequest) GetTradeReportID() string {
	if m != nil {
		return m.TradeReportID
	}
	return ""
}

type QueryGetTradeCaptureResponse struct {
	TradeCapture TradeCapture `protobuf:"bytes,1,opt,name=TradeCapture,proto3" json:"TradeCapture"`
}

func (m *QueryGetTradeCaptureResponse) Reset()         { *m = QueryGetTradeCaptureResponse{} }
func (m *QueryGetTradeCaptureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeCaptureResponse) ProtoMessage()    {}
func (*QueryGetTradeCaptureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{41}
}
func (m *QueryGetTradeCaptureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeCaptureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeCaptureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeCaptureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeCaptureResponse.Merge(m, src)
}
func (m *QueryGetTradeCaptureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeCaptureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeCaptureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeCaptureResponse proto.InternalMessageInfo

func (m *QueryGetTradeCaptureResponse) GetTradeCapture() TradeCapture {
	if m != nil {
		return m.TradeCapture
	}
	return TradeCapture{}
}

type QueryAllTradeCaptureRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradeCaptureRequest) Reset()         { *m = QueryAllTradeCaptureRequest{} }
func (m *QueryAllTradeCaptureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradeCaptureRequest) ProtoMessage()    {}
func (*QueryAllTradeCaptureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{42}
}
func (m *QueryAllTradeCaptureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradeCaptureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradeCaptureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradeCaptureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradeCaptureRequest.Merge(m, src)
}
func (m *QueryAllTradeCaptureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradeCaptureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradeCaptureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradeCaptureRequest proto.InternalMessageInfo

func (m *QueryAllTradeCaptureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTradeCaptureResponse struct {
	TradeCapture []TradeCapture      `protobuf:"bytes,1,rep,name=TradeCapture,proto3" json:"TradeCapture"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradeCaptureResponse) Reset()         { *m = QueryAllTradeCaptureResponse{} }
func (m *QueryAllTradeCaptureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradeCaptureResponse) ProtoMessage()    {}
func (*QueryAllTradeCaptureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{43}
}
func (m *QueryAllTradeCaptureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradeCaptureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradeCaptureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradeCaptureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradeCaptureResponse.Merge(m, src)
}
func (m *QueryAllTradeCaptureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradeCaptureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradeCaptureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradeCaptureResponse proto.InternalMessageInfo

func (m *QueryAllTradeCaptureResponse) GetTradeCapture() []TradeCapture {
	if m != nil {
		return m.TradeCapture
	}
	return nil
}

func (m *QueryAllTradeCaptureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMarketDataRequest struct {
	MdReqID string `protobuf:"bytes,1,opt,name=mdReqID,proto3" json:"mdReqID,omitempty"`
}

func (m *QueryGetMarketDataRequest) Reset()         { *m = QueryGetMarketDataRequest{} }
func (m *QueryGetMarketDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketDataRequest) ProtoMessage()    {}
func (*QueryGetMarketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{44}
}
func (m *QueryGetMarketDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketDataRequest.Merge(m, src)
}
func (m *QueryGetMarketDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketDataRequest proto.InternalMessageInfo

func (m *QueryGetMarketDataRequest) GetMdReqID() string {
	if m != nil {
		return m.MdReqID
	}
	return ""
}

type QueryGetMarketDataResponse struct {
	MarketData MarketData `protobuf:"bytes,1,opt,name=MarketData,proto3" json:"MarketData"`
}

func (m *QueryGetMarketDataResponse) Reset()         { *m = QueryGetMarketDataResponse{} }
func (m *QueryGetMarketDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMarketDataResponse) ProtoMessage()    {}
func (*QueryGetMarketDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{45}
}
func (m *QueryGetMarketDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMarketDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMarketDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMarketDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMarketDataResponse.Merge(m, src)
}
func (m *QueryGetMarketDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMarketDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMarketDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMarketDataResponse proto.InternalMessageInfo

func (m *QueryGetMarketDataResponse) GetMarketData() MarketData {
	if m != nil {
		return m.MarketData
	}
	return MarketData{}
}

type QueryAllMarketDataRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketDataRequest) Reset()         { *m = QueryAllMarketDataRequest{} }
func (m *QueryAllMarketDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketDataRequest) ProtoMessage()    {}
func (*QueryAllMarketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{46}
}
func (m *QueryAllMarketDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketDataRequest.Merge(m, src)
}
func (m *QueryAllMarketDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketDataRequest proto.InternalMessageInfo

func (m *QueryAllMarketDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMarketDataResponse struct {
	MarketData []MarketData        `protobuf:"bytes,1,rep,name=MarketData,proto3" json:"MarketData"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMarketDataResponse) Reset()         { *m = QueryAllMarketDataResponse{} }
func (m *QueryAllMarketDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMarketDataResponse) ProtoMessage()    {}
func (*QueryAllMarketDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{47}
}
func (m *QueryAllMarketDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMarketDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMarketDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMarketDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMarketDataResponse.Merge(m, src)
}
func (m *QueryAllMarketDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMarketDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMarketDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMarketDataResponse proto.InternalMessageInfo

func (m *QueryAllMarketDataResponse) GetMarketData() []MarketData {
	if m != nil {
		return m.MarketData
	}
	return nil
}

func (m *QueryAllMarketDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSecurityRequest struct {
	SecurityReqID string `protobuf:"bytes,1,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
}

func (m *QueryGetSecurityRequest) Reset()         { *m = QueryGetSecurityRequest{} }
func (m *QueryGetSecurityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSecurityRequest) ProtoMessage()    {}
func (*QueryGetSecurityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{48}
}
func (m *QueryGetSecurityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSecurityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSecurityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSecurityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSecurityRequest.Merge(m, src)
}
func (m *QueryGetSecurityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSecurityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSecurityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSecurityRequest proto.InternalMessageInfo

func (m *QueryGetSecurityRequest) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

type QueryGetSecurityResponse struct {
	Security Security `protobuf:"bytes,1,opt,name=Security,proto3" json:"Security"`
}

func (m *QueryGetSecurityResponse) Reset()         { *m = QueryGetSecurityResponse{} }
func (m *QueryGetSecurityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSecurityResponse) ProtoMessage()    {}
func (*QueryGetSecurityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{49}
}
func (m *QueryGetSecurityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSecurityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSecurityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSecurityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSecurityResponse.Merge(m, src)
}
func (m *QueryGetSecurityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSecurityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSecurityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSecurityResponse proto.InternalMessageInfo

func (m *QueryGetSecurityResponse) GetSecurity() Security {
	if m != nil {
		return m.Security
	}
	return Security{}
}

type QueryAllSecurityRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSecurityRequest) Reset()         { *m = QueryAllSecurityRequest{} }
func (m *QueryAllSecurityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSecurityRequest) ProtoMessage()    {}
func (*QueryAllSecurityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{50}
}
func (m *QueryAllSecurityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSecurityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSecurityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSecurityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSecurityRequest.Merge(m, src)
}
func (m *QueryAllSecurityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSecurityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSecurityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSecurityRequest proto.InternalMessageInfo

func (m *QueryAllSecurityRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSecurityResponse struct {
	Security   []Security          `protobuf:"bytes,1,rep,name=Security,proto3" json:"Security"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSecurityResponse) Reset()         { *m = QueryAllSecurityResponse{} }
func (m *QueryAllSecurityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSecurityResponse) ProtoMessage()    {}
func (*QueryAllSecurityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{51}
}
func (m *QueryAllSecurityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSecurityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSecurityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSecurityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSecurityResponse.Merge(m, src)
}
func (m *QueryAllSecurityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSecurityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSecurityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSecurityResponse proto.InternalMessageInfo

func (m *QueryAllSecurityResponse) GetSecurity() []Security {
	if m != nil {
		return m.Security
	}
	return nil
}

func (m *QueryAllSecurityResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOrderMassStatusRequest struct {
	MassStatusReqID string `protobuf:"bytes,1,opt,name=massStatusReqID,proto3" json:"massStatusReqID,omitempty"`
}

func (m *QueryGetOrderMassStatusRequest) Reset()         { *m = QueryGetOrderMassStatusRequest{} }
func (m *QueryGetOrderMassStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderMassStatusRequest) ProtoMessage()    {}
func (*QueryGetOrderMassStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{52}
}
func (m *QueryGetOrderMassStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderMassStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderMassStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderMassStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderMassStatusRequest.Merge(m, src)
}
func (m *QueryGetOrderMassStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderMassStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderMassStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderMassStatusRequest proto.InternalMessageInfo

func (m *QueryGetOrderMassStatusRequest) GetMassStatusReqID() string {
	if m != nil {
		return m.MassStatusReqID
	}
	return ""
}

type QueryGetOrderMassStatusResponse struct {
	OrderMassStatus OrderMassStatus `protobuf:"bytes,1,opt,name=OrderMassStatus,proto3" json:"OrderMassStatus"`
}

func (m *QueryGetOrderMassStatusResponse) Reset()         { *m = QueryGetOrderMassStatusResponse{} }
func (m *QueryGetOrderMassStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOrderMassStatusResponse) ProtoMessage()    {}
func (*QueryGetOrderMassStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{53}
}
func (m *QueryGetOrderMassStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOrderMassStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOrderMassStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOrderMassStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOrderMassStatusResponse.Merge(m, src)
}
func (m *QueryGetOrderMassStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOrderMassStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOrderMassStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOrderMassStatusResponse proto.InternalMessageInfo

func (m *QueryGetOrderMassStatusResponse) GetOrderMassStatus() OrderMassStatus {
	if m != nil {
		return m.OrderMassStatus
	}
	return OrderMassStatus{}
}

type QueryAllOrderMassStatusRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrderMassStatusRequest) Reset()         { *m = QueryAllOrderMassStatusRequest{} }
func (m *QueryAllOrderMassStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrderMassStatusRequest) ProtoMessage()    {}
func (*QueryAllOrderMassStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{54}
}
func (m *QueryAllOrderMassStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrderMassStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrderMassStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrderMassStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrderMassStatusRequest.Merge(m, src)
}
func (m *QueryAllOrderMassStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrderMassStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrderMassStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrderMassStatusRequest proto.InternalMessageInfo

func (m *QueryAllOrderMassStatusRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOrderMassStatusResponse struct {
	OrderMassStatus []OrderMassStatus   `protobuf:"bytes,1,rep,name=OrderMassStatus,proto3" json:"OrderMassStatus"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOrderMassStatusResponse) Reset()         { *m = QueryAllOrderMassStatusResponse{} }
func (m *QueryAllOrderMassStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrderMassStatusResponse) ProtoMessage()    {}
func (*QueryAllOrderMassStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{55}
}
func (m *QueryAllOrderMassStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrderMassStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrderMassStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrderMassStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrderMassStatusResponse.Merge(m, src)
}
func (m *QueryAllOrderMassStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrderMassStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrderMassStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrderMassStatusResponse proto.InternalMessageInfo

func (m *QueryAllOrderMassStatusResponse) GetOrderMassStatus() []OrderMassStatus {
	if m != nil {
		return m.OrderMassStatus
	}
	return nil
}

func (m *QueryAllOrderMassStatusResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTradingSessionRequest struct {
	TradSesReqID string `protobuf:"bytes,1,opt,name=tradSesReqID,proto3" json:"tradSesReqID,omitempty"`
}

func (m *QueryGetTradingSessionRequest) Reset()         { *m = QueryGetTradingSessionRequest{} }
func (m *QueryGetTradingSessionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingSessionRequest) ProtoMessage()    {}
func (*QueryGetTradingSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{56}
}
func (m *QueryGetTradingSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingSessionRequest.Merge(m, src)
}
func (m *QueryGetTradingSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingSessionRequest proto.InternalMessageInfo

func (m *QueryGetTradingSessionRequest) GetTradSesReqID() string {
	if m != nil {
		return m.TradSesReqID
	}
	return ""
}

type QueryGetTradingSessionResponse struct {
	TradingSession TradingSession `protobuf:"bytes,1,opt,name=TradingSession,proto3" json:"TradingSession"`
}

func (m *QueryGetTradingSessionResponse) Reset()         { *m = QueryGetTradingSessionResponse{} }
func (m *QueryGetTradingSessionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradingSessionResponse) ProtoMessage()    {}
func (*QueryGetTradingSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{57}
}
func (m *QueryGetTradingSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradingSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradingSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradingSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradingSessionResponse.Merge(m, src)
}
func (m *QueryGetTradingSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradingSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradingSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradingSessionResponse proto.InternalMessageInfo

func (m *QueryGetTradingSessionResponse) GetTradingSession() TradingSession {
	if m != nil {
		return m.TradingSession
	}
	return TradingSession{}
}

type QueryAllTradingSessionRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradingSessionRequest) Reset()         { *m = QueryAllTradingSessionRequest{} }
func (m *QueryAllTradingSessionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradingSessionRequest) ProtoMessage()    {}
func (*QueryAllTradingSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{58}
}
func (m *QueryAllTradingSessionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradingSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradingSessionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradingSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradingSessionRequest.Merge(m, src)
}
func (m *QueryAllTradingSessionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradingSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradingSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradingSessionRequest proto.InternalMessageInfo

func (m *QueryAllTradingSessionRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTradingSessionResponse struct {
	TradingSession []TradingSession    `protobuf:"bytes,1,rep,name=TradingSession,proto3" json:"TradingSession"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradingSessionResponse) Reset()         { *m = QueryAllTradingSessionResponse{} }
func (m *QueryAllTradingSessionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradingSessionResponse) ProtoMessage()    {}
func (*QueryAllTradingSessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_979860cc6e2c0384, []int{59}
}
func (m *QueryAllTradingSessionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradingSessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradingSessionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradingSessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradingSessionResponse.Merge(m, src)
}
func (m *QueryAllTradingSessionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradingSessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradingSessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradingSessionResponse proto.InternalMessageInfo

func (m *QueryAllTradingSessionResponse) GetTradingSession() []TradingSession {
	if m != nil {
		return m.TradingSession
	}
	return nil
}

func (m *QueryAllTradingSessionResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "jim380.re.fix.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "jim380.re.fix.QueryParamsResponse")
	proto.RegisterType((*QueryGetAccountRequest)(nil), "jim380.re.fix.QueryGetAccountRequest")
	proto.RegisterType((*QueryGetAccountResponse)(nil), "jim380.re.fix.QueryGetAccountResponse")
	proto.RegisterType((*QueryAllAccountRequest)(nil), "jim380.re.fix.QueryAllAccountRequest")
	proto.RegisterType((*QueryAllAccountResponse)(nil), "jim380.re.fix.QueryAllAccountResponse")
	proto.RegisterType((*QueryGetSessionsRequest)(nil), "jim380.re.fix.QueryGetSessionsRequest")
	proto.RegisterType((*QueryGetSessionsResponse)(nil), "jim380.re.fix.QueryGetSessionsResponse")
	proto.RegisterType((*QueryAllSessionsRequest)(nil), "jim380.re.fix.QueryAllSessionsRequest")
	proto.RegisterType((*QueryAllSessionsResponse)(nil), "jim380.re.fix.QueryAllSessionsResponse")
	proto.RegisterType((*QueryGetSessionRejectRequest)(nil), "jim380.re.fix.QueryGetSessionRejectRequest")
	proto.RegisterType((*QueryGetSessionRejectResponse)(nil), "jim380.re.fix.QueryGetSessionRejectResponse")
	proto.RegisterType((*QueryAllSessionRejectRequest)(nil), "jim380.re.fix.QueryAllSessionRejectRequest")
	proto.RegisterType((*QueryAllSessionRejectResponse)(nil), "jim380.re.fix.QueryAllSessionRejectResponse")
	proto.RegisterType((*QueryGetSessionLogoutRequest)(nil), "jim380.re.fix.QueryGetSessionLogoutRequest")
	proto.RegisterType((*QueryGetSessionLogoutResponse)(nil), "jim380.re.fix.QueryGetSessionLogoutResponse")
	proto.RegisterType((*QueryAllSessionLogoutRequest)(nil), "jim380.re.fix.QueryAllSessionLogoutRequest")
	proto.RegisterType((*QueryAllSessionLogoutResponse)(nil), "jim380.re.fix.QueryAllSessionLogoutResponse")
	proto.RegisterType((*QueryGetOrdersRequest)(nil), "jim380.re.fix.QueryGetOrdersRequest")
	proto.RegisterType((*QueryGetOrdersResponse)(nil), "jim380.re.fix.QueryGetOrdersResponse")
	proto.RegisterType((*QueryAllOrdersRequest)(nil), "jim380.re.fix.QueryAllOrdersRequest")
	proto.RegisterType((*QueryAllOrdersResponse)(nil), "jim380.re.fix.QueryAllOrdersResponse")
	proto.RegisterType((*QueryGetOrdersCancelRequestRequest)(nil), "jim380.re.fix.QueryGetOrdersCancelRequestRequest")
	proto.RegisterType((*QueryGetOrdersCancelRequestResponse)(nil), "jim380.re.fix.QueryGetOrdersCancelRequestResponse")
	proto.RegisterType((*QueryAllOrdersCancelRequestRequest)(nil), "jim380.re.fix.QueryAllOrdersCancelRequestRequest")
	proto.RegisterType((*QueryAllOrdersCancelRequestResponse)(nil), "jim380.re.fix.QueryAllOrdersCancelRequestResponse")
	proto.RegisterType((*QueryGetOrdersCancelRejectRequest)(nil), "jim380.re.fix.QueryGetOrdersCancelRejectRequest")
	proto.RegisterType((*QueryGetOrdersCancelRejectResponse)(nil), "jim380.re.fix.QueryGetOrdersCancelRejectResponse")
	proto.RegisterType((*QueryAllOrdersCancelRejectRequest)(nil), "jim380.re.fix.QueryAllOrdersCancelRejectRequest")
	proto.RegisterType((*QueryAllOrdersCancelRejectResponse)(nil), "jim380.re.fix.QueryAllOrdersCancelRejectResponse")
	proto.RegisterType((*QueryGetOrdersExecutionReportRequest)(nil), "jim380.re.fix.QueryGetOrdersExecutionReportRequest")
	proto.RegisterType((*QueryGetOrdersExecutionReportResponse)(nil), "jim380.re.fix.QueryGetOrdersExecutionReportResponse")
	proto.RegisterType((*QueryAllOrdersExecutionReportRequest)(nil), "jim380.re.fix.QueryAllOrdersExecutionReportRequest")
	proto.RegisterType((*QueryAllOrdersExecutionReportResponse)(nil), "jim380.re.fix.QueryAllOrdersExecutionReportResponse")
	proto.RegisterType((*QueryGetQuoteRequest)(nil), "jim380.re.fix.QueryGetQuoteRequest")
	proto.RegisterType((*QueryGetQuoteResponse)(nil), "jim380.re.fix.QueryGetQuoteResponse")
	proto.RegisterType((*QuerySessionByIDQuoteRequest)(nil), "jim380.re.fix.QuerySessionByIDQuoteRequest")
	proto.RegisterType((*QuerySessionByIDQuoteResponse)(nil), "jim380.re.fix.QuerySessionByIDQuoteResponse")
	proto.RegisterType((*QueryAllQuoteRequest)(nil), "jim380.re.fix.QueryAllQuoteRequest")
	proto.RegisterType((*QueryAllQuoteResponse)(nil), "jim380.re.fix.QueryAllQuoteResponse")
	proto.RegisterType((*QueryGetTradeCaptureRequest)(nil), "jim380.re.fix.QueryGetTradeCaptureRequest")
	proto.RegisterType((*QueryGetTradeCaptureResponse)(nil), "jim380.re.fix.QueryGetTradeCaptureResponse")
	proto.RegisterType((*QueryAllTradeCaptureRequest)(nil), "jim380.re.fix.QueryAllTradeCaptureRequest")
	proto.RegisterType((*QueryAllTradeCaptureResponse)(nil), "jim380.re.fix.QueryAllTradeCaptureResponse")
	proto.RegisterType((*QueryGetMarketDataRequest)(nil), "jim380.re.fix.QueryGetMarketDataRequest")
	proto.RegisterType((*QueryGetMarketDataResponse)(nil), "jim380.re.fix.QueryGetMarketDataResponse")
	proto.RegisterType((*QueryAllMarketDataRequest)(nil), "jim380.re.fix.QueryAllMarketDataRequest")
	proto.RegisterType((*QueryAllMarketDataResponse)(nil), "jim380.re.fix.QueryAllMarketDataResponse")
	proto.RegisterType((*QueryGetSecurityRequest)(nil), "jim380.re.fix.QueryGetSecurityRequest")
	proto.RegisterType((*QueryGetSecurityResponse)(nil), "jim380.re.fix.QueryGetSecurityResponse")
	proto.RegisterType((*QueryAllSecurityRequest)(nil), "jim380.re.fix.QueryAllSecurityRequest")
	proto.RegisterType((*QueryAllSecurityResponse)(nil), "jim380.re.fix.QueryAllSecurityResponse")
	proto.RegisterType((*QueryGetOrderMassStatusRequest)(nil), "jim380.re.fix.QueryGetOrderMassStatusRequest")
	proto.RegisterType((*QueryGetOrderMassStatusResponse)(nil), "jim380.re.fix.QueryGetOrderMassStatusResponse")
	proto.RegisterType((*QueryAllOrderMassStatusRequest)(nil), "jim380.re.fix.QueryAllOrderMassStatusRequest")
	proto.RegisterType((*QueryAllOrderMassStatusResponse)(nil), "jim380.re.fix.QueryAllOrderMassStatusResponse")
	proto.RegisterType((*QueryGetTradingSessionRequest)(nil), "jim380.re.fix.QueryGetTradingSessionRequest")
	proto.RegisterType((*QueryGetTradingSessionResponse)(nil), "jim380.re.fix.QueryGetTradingSessionResponse")
	proto.RegisterType((*QueryAllTradingSessionRequest)(nil), "jim380.re.fix.QueryAllTradingSessionRequest")
	proto.RegisterType((*QueryAllTradingSessionResponse)(nil), "jim380.re.fix.QueryAllTradingSessionResponse")
}

func init() { proto.RegisterFile("re/fix/query.proto", fileDescriptor_979860cc6e2c0384) }

var fileDescriptor_979860cc6e2c0384 = []byte{
	// 2182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xdf, 0x6f, 0x1c, 0x47,
	0x1d, 0xcf, 0xf4, 0x20, 0x6d, 0xa6, 0x0d, 0x29, 0x13, 0x3b, 0x71, 0x36, 0xf6, 0x39, 0x1e, 0x9f,
	0x63, 0x27, 0xb6, 0x6f, 0xfd, 0x23, 0x0d, 0xa5, 0x02, 0x8a, 0x93, 0x94, 0x92, 0x42, 0x68, 0xe3,
	0x80, 0x90, 0x2a, 0xc1, 0x75, 0x73, 0xb7, 0xb9, 0x5e, 0xbb, 0x77, 0xeb, 0xec, 0xee, 0x41, 0xa2,
	0xd3, 0x81, 0xca, 0x13, 0x48, 0x48, 0xfc, 0x12, 0x08, 0x21, 0xc1, 0x13, 0xe2, 0x01, 0xa1, 0x08,
	0x21, 0xd4, 0x07, 0xc4, 0x33, 0xaa, 0x78, 0x8a, 0xe0, 0x85, 0x27, 0x84, 0x12, 0xfe, 0x90, 0x6a,
	0x67, 0xbe, 0x73, 0xbb, 0x33, 0x3b, 0xb3, 0xbb, 0xe7, 0x6c, 0xde, 0xec, 0x99, 0xef, 0xcc, 0xf7,
	0xf3, 0xf9, 0x7c, 0xe7, 0x76, 0x66, 0x3f, 0xb3, 0x98, 0x04, 0xae, 0x7d, 0xa7, 0x77, 0xcf, 0xbe,
	0x3b, 0x74, 0x83, 0xfb, 0xcd, 0x83, 0xc0, 0x8f, 0x7c, 0x72, 0xfc, 0xbd, 0x5e, 0x7f, 0xf7, 0xe5,
	0xad, 0x66, 0xe0, 0x36, 0xef, 0xf4, 0xee, 0x59, 0x33, 0x5d, 0xbf, 0xeb, 0xb3, 0x1e, 0x3b, 0xfe,
	0x8b, 0x07, 0x59, 0xf3, 0x5d, 0xdf, 0xef, 0x7a, 0xae, 0xed, 0x1c, 0xf4, 0x6c, 0x67, 0x30, 0xf0,
	0x23, 0x27, 0xea, 0xf9, 0x83, 0x10, 0x7a, 0x2f, 0xb6, 0xfd, 0xb0, 0xef, 0x87, 0xf6, 0x6d, 0x27,
	0x74, 0xf9, 0xdc, 0xf6, 0x77, 0xb6, 0x6f, 0xbb, 0x91, 0xb3, 0x6d, 0x1f, 0x38, 0xdd, 0xde, 0x80,
	0x05, 0x43, 0xec, 0x49, 0x80, 0x70, 0xe0, 0x04, 0x4e, 0x5f, 0x4c, 0x30, 0x03, 0x8d, 0x4e, 0xbb,
	0xed, 0x0f, 0x07, 0x11, 0xb4, 0xce, 0x42, 0x6b, 0xe8, 0x86, 0x61, 0x2a, 0xdb, 0x59, 0xb9, 0xb9,
	0x15, 0xb8, 0xef, 0xb9, 0xed, 0xc8, 0xd0, 0xe9, 0xf9, 0x5d, 0x7f, 0x18, 0x29, 0xb9, 0xfd, 0xa0,
	0xe3, 0x06, 0x62, 0x3a, 0x2a, 0x35, 0xb6, 0xda, 0xce, 0xa0, 0xed, 0x7a, 0xad, 0xc0, 0xbd, 0x3b,
	0x74, 0x43, 0x31, 0x70, 0xc9, 0x10, 0x93, 0x4a, 0xdc, 0x90, 0x43, 0xdc, 0x7b, 0x6e, 0x7b, 0x18,
	0x71, 0x78, 0x07, 0x7e, 0x20, 0xa2, 0x92, 0x02, 0xf8, 0x91, 0x0b, 0x6d, 0x16, 0xb4, 0x45, 0x81,
	0xd3, 0x71, 0x5b, 0x6d, 0xe7, 0x20, 0x1a, 0x06, 0xa2, 0x6f, 0x0e, 0xfa, 0xfa, 0x4e, 0xf0, 0xbe,
	0x1b, 0xb5, 0x3a, 0x4e, 0xe4, 0x64, 0xc4, 0x69, 0x0f, 0x83, 0x5e, 0x04, 0xd5, 0xb4, 0xea, 0x69,
	0x18, 0xad, 0xbe, 0x13, 0x86, 0xad, 0x30, 0x72, 0xa2, 0xa1, 0x60, 0x3b, 0x9f, 0x4a, 0xd6, 0x1b,
	0x74, 0x5b, 0xa0, 0x13, 0xef, 0xa5, 0x33, 0x98, 0xdc, 0x8c, 0xcb, 0xf7, 0x16, 0x2b, 0xce, 0x3e,
	0xd7, 0x80, 0xbe, 0x81, 0x4f, 0x4a, 0xad, 0xe1, 0x81, 0x3f, 0x08, 0x5d, 0xb2, 0x8b, 0x8f, 0xf2,
	0x22, 0xce, 0xa1, 0x73, 0x68, 0xed, 0xf9, 0x9d, 0xd9, 0xa6, 0xb4, 0x92, 0x9a, 0x3c, 0xfc, 0xca,
	0x27, 0x3e, 0xfa, 0xef, 0xe2, 0x91, 0x7d, 0x08, 0xa5, 0x17, 0xf1, 0x29, 0x36, 0xd7, 0xeb, 0x6e,
	0xb4, 0xc7, 0x8b, 0x0d, 0x59, 0xc8, 0x8b, 0xb8, 0xd6, 0xe9, 0x75, 0xd8, 0x5c, 0xc7, 0xf6, 0xe3,
	0x3f, 0xe9, 0x4d, 0x7c, 0x3a, 0x13, 0x0b, 0xb9, 0x2f, 0xe3, 0x67, 0xa1, 0x09, 0x92, 0x9f, 0x52,
	0x92, 0x43, 0x2f, 0x64, 0x17, 0xc1, 0xf4, 0x1d, 0x48, 0xbf, 0xe7, 0x79, 0x4a, 0xfa, 0x2f, 0x61,
	0x9c, 0xac, 0x55, 0x98, 0xf4, 0x7c, 0x93, 0x2f, 0xec, 0x66, 0xbc, 0xb0, 0x9b, 0xfc, 0x47, 0x03,
	0x0b, 0xbb, 0xf9, 0x96, 0xd3, 0x75, 0x61, 0xec, 0x7e, 0x6a, 0x24, 0xfd, 0x0d, 0x02, 0xd4, 0xe9,
	0x14, 0x3a, 0xd4, 0xb5, 0xd2, 0xa8, 0xc9, 0xeb, 0x12, 0xb6, 0x67, 0x18, 0xb6, 0xd5, 0x42, 0x6c,
	0x3c, 0xa9, 0x04, 0xee, 0x33, 0x89, 0xa2, 0xb7, 0xe0, 0x47, 0x25, 0xf8, 0xcf, 0xe3, 0x63, 0xb0,
	0x16, 0xae, 0x5f, 0x83, 0x22, 0x24, 0x0d, 0xf4, 0x1b, 0x78, 0x2e, 0x3b, 0x10, 0x58, 0x7d, 0x16,
	0x3f, 0x27, 0xda, 0x40, 0xb7, 0xd3, 0x0a, 0x2d, 0xd1, 0x0d, 0xbc, 0x26, 0xe1, 0xd4, 0x49, 0xb4,
	0x52, 0xf1, 0x54, 0x55, 0x8f, 0xdf, 0x21, 0x80, 0x2e, 0xe5, 0xd0, 0x42, 0xaf, 0x4d, 0x01, 0xbd,
	0xba, 0x9a, 0x7c, 0x0e, 0xcf, 0x2b, 0xd2, 0xee, 0xb3, 0xe7, 0x4a, 0xb9, 0xc2, 0xf4, 0xf0, 0x82,
	0x61, 0x34, 0x50, 0xfc, 0x32, 0x3e, 0x2e, 0x75, 0x80, 0x94, 0xf3, 0x7a, 0x9e, 0x3c, 0x06, 0xc8,
	0xca, 0x03, 0xe9, 0x1d, 0x00, 0x9a, 0x08, 0x29, 0x03, 0xad, 0xaa, 0x62, 0x7f, 0x41, 0xc0, 0x29,
	0x9b, 0xc8, 0xcc, 0xa9, 0x76, 0x28, 0x4e, 0x4f, 0xb3, 0x8a, 0x5f, 0x65, 0x3b, 0xcf, 0x61, 0xab,
	0x28, 0x46, 0x67, 0x18, 0xf3, 0x8e, 0xfc, 0x2a, 0xf2, 0x18, 0x85, 0x31, 0x6f, 0xd4, 0x54, 0x51,
	0x06, 0xfa, 0x14, 0xab, 0x58, 0xcc, 0xa9, 0x76, 0x28, 0x4e, 0xd5, 0x55, 0x71, 0x1b, 0xcf, 0x8a,
	0x3a, 0xbc, 0xc9, 0xf6, 0x71, 0xa1, 0xca, 0x1c, 0x7e, 0xb6, 0xed, 0xbd, 0x19, 0x74, 0x26, 0xc5,
	0x13, 0xff, 0xd2, 0x1b, 0xc9, 0x86, 0x26, 0x86, 0x24, 0xfb, 0x23, 0x6f, 0x31, 0xec, 0x8f, 0xbc,
	0x53, 0xec, 0x8f, 0xfc, 0x3f, 0xda, 0x02, 0x04, 0x7b, 0x9e, 0x27, 0x23, 0xa8, 0xaa, 0x2e, 0xbf,
	0x42, 0xc9, 0x16, 0x98, 0x03, 0xb8, 0x56, 0x12, 0x70, 0x75, 0xda, 0x7f, 0x01, 0x53, 0x59, 0xc8,
	0xab, 0xec, 0x94, 0x25, 0x38, 0x14, 0x16, 0xe2, 0x03, 0x84, 0x97, 0x73, 0x27, 0x00, 0x96, 0x6f,
	0xe3, 0x93, 0x9a, 0x6e, 0x50, 0x94, 0x6a, 0x29, 0x4b, 0x91, 0xc0, 0x5f, 0x37, 0x09, 0xf5, 0x80,
	0xc3, 0x44, 0x5b, 0x2d, 0x87, 0xaa, 0x4a, 0xf9, 0x4f, 0xc1, 0xd8, 0x94, 0xae, 0x88, 0x71, 0xed,
	0x89, 0x19, 0x57, 0x57, 0xfe, 0xcf, 0xe3, 0x25, 0x7d, 0xf5, 0xd2, 0x5b, 0x8c, 0xb9, 0xfa, 0x63,
	0xd3, 0xea, 0x91, 0x36, 0x8e, 0x6f, 0x62, 0x92, 0xed, 0x85, 0x0a, 0x2c, 0xe5, 0x0a, 0x91, 0xda,
	0x42, 0x34, 0x53, 0xd0, 0xf7, 0x01, 0x7d, 0xa6, 0x12, 0x4f, 0x63, 0x83, 0xfc, 0x07, 0x32, 0x2d,
	0xb3, 0x52, 0x64, 0x6b, 0x4f, 0x48, 0xb6, 0xba, 0x9a, 0x7f, 0x11, 0x37, 0xe4, 0xa2, 0xbd, 0x26,
	0xde, 0x9a, 0xf6, 0xd9, 0x4b, 0x53, 0x71, 0xd9, 0x7f, 0x84, 0xf0, 0x4a, 0xc1, 0x14, 0xa0, 0xc6,
	0x3b, 0x78, 0x56, 0x1b, 0x00, 0x75, 0x68, 0x68, 0x05, 0x51, 0x62, 0x41, 0x13, 0xfd, 0x44, 0x74,
	0x00, 0x6c, 0x26, 0x55, 0x31, 0xb0, 0xa9, 0x6a, 0x19, 0xfc, 0x4b, 0x70, 0x37, 0x27, 0x2c, 0xe6,
	0x5e, 0xab, 0x84, 0x7b, 0x75, 0x4b, 0xe2, 0x32, 0x9e, 0x11, 0xf5, 0xbc, 0x19, 0xbf, 0x23, 0x0b,
	0xd1, 0xea, 0x18, 0xdf, 0x85, 0xff, 0x27, 0xab, 0x20, 0xd5, 0x42, 0xaf, 0x27, 0x3b, 0x37, 0x8c,
	0x03, 0xee, 0x5b, 0xf8, 0x93, 0xac, 0x01, 0x84, 0x9e, 0x51, 0xb8, 0xb2, 0x3e, 0xe0, 0xc6, 0x03,
	0x27, 0x47, 0x39, 0x38, 0x63, 0x5c, 0xb9, 0x7f, 0xfd, 0x9a, 0x04, 0x25, 0xff, 0x28, 0x77, 0x13,
	0x8e, 0x3d, 0xd9, 0xd1, 0x59, 0x40, 0xb5, 0x72, 0x80, 0xbe, 0x0d, 0x9a, 0xec, 0x79, 0x9e, 0x04,
	0xa4, 0xaa, 0x85, 0xf4, 0x73, 0x94, 0x1c, 0x3a, 0x9e, 0x10, 0x6b, 0x75, 0x0b, 0xe1, 0x2a, 0x3e,
	0x2b, 0x0a, 0xfa, 0xf5, 0xc0, 0xe9, 0xb8, 0x57, 0xb9, 0x2f, 0x22, 0xb8, 0x37, 0xf0, 0x71, 0xe6,
	0x97, 0xf0, 0xf5, 0x37, 0x29, 0x84, 0xdc, 0x48, 0xdd, 0xe4, 0x54, 0x2e, 0x4f, 0x02, 0xfc, 0x5e,
	0xc3, 0x2f, 0xa4, 0xdb, 0x41, 0xc3, 0xb3, 0x0a, 0xcd, 0x74, 0x08, 0xb0, 0x95, 0x86, 0x51, 0x17,
	0xb0, 0xee, 0x79, 0x9e, 0x0e, 0x6b, 0x55, 0x75, 0x7a, 0x80, 0x92, 0xb3, 0x7b, 0x49, 0x3a, 0xb5,
	0x43, 0xd0, 0xa9, 0xae, 0x86, 0x2f, 0xe1, 0x33, 0x42, 0xfe, 0x1b, 0xcc, 0xc0, 0xba, 0xe6, 0x44,
	0x4e, 0xea, 0xa1, 0xde, 0xef, 0xa4, 0x7f, 0xce, 0xe2, 0x5f, 0xfa, 0x2d, 0x6c, 0xe9, 0x86, 0x01,
	0xc9, 0x57, 0x31, 0x4e, 0x5a, 0x41, 0xcd, 0x33, 0x0a, 0xc5, 0x24, 0x00, 0x08, 0xa6, 0x86, 0xd0,
	0x36, 0xa0, 0xda, 0xf3, 0xbc, 0x2c, 0xaa, 0xaa, 0x6a, 0xf5, 0x07, 0x04, 0x24, 0x94, 0x2c, 0x06,
	0x12, 0xb5, 0x29, 0x49, 0x54, 0x57, 0xa3, 0x57, 0xd3, 0x96, 0x10, 0xb7, 0x12, 0x53, 0xbf, 0xb1,
	0x30, 0x69, 0x4a, 0x7e, 0x63, 0x52, 0xa3, 0x6c, 0x0d, 0x89, 0x8e, 0xb4, 0xbf, 0xc2, 0xdb, 0x8c,
	0xd6, 0x10, 0xef, 0x4e, 0xfc, 0x15, 0xfe, 0xbf, 0x6c, 0x0d, 0xc9, 0xb8, 0x9e, 0x8e, 0x35, 0x94,
	0x0b, 0xbd, 0x36, 0x05, 0xf4, 0xea, 0x6a, 0xf3, 0x06, 0xae, 0x4b, 0x87, 0x9b, 0x1b, 0x4e, 0x18,
	0xde, 0x62, 0x6e, 0xae, 0x90, 0x62, 0x0d, 0x9f, 0xe8, 0xa7, 0x1b, 0x27, 0x45, 0x52, 0x9b, 0xe9,
	0x5d, 0xbc, 0x68, 0x9c, 0x0b, 0x28, 0x7f, 0x0d, 0x9f, 0x50, 0xba, 0x40, 0xdc, 0xba, 0xee, 0x80,
	0x90, 0x44, 0x81, 0x00, 0xea, 0x60, 0xfa, 0x2e, 0xc0, 0x17, 0xe7, 0x93, 0x2c, 0xfc, 0xaa, 0x2a,
	0xf9, 0x37, 0x04, 0xec, 0x74, 0xa9, 0xf2, 0xd8, 0xd5, 0x0e, 0xcd, 0xae, 0xca, 0x9d, 0x6e, 0x21,
	0xbd, 0x49, 0xf5, 0x06, 0xdd, 0x89, 0x47, 0xc5, 0x55, 0xa2, 0xf8, 0x85, 0x78, 0x5b, 0xbb, 0xe5,
	0x4a, 0x15, 0x96, 0xda, 0x68, 0x3f, 0x59, 0x2a, 0xea, 0x24, 0xc0, 0xff, 0x2b, 0xf8, 0x53, 0x72,
	0x0f, 0xe8, 0xbd, 0xa0, 0xd9, 0x1e, 0x92, 0x20, 0x60, 0xaf, 0x0c, 0xa5, 0xdd, 0xc4, 0xdc, 0xd1,
	0x63, 0xae, 0xaa, 0xb2, 0x1f, 0xa2, 0x64, 0x11, 0x4d, 0x41, 0xac, 0x76, 0x48, 0x62, 0x95, 0x55,
	0x75, 0xe7, 0xc1, 0x72, 0x7c, 0x76, 0x72, 0x83, 0xfb, 0x64, 0x80, 0x8f, 0xf2, 0xab, 0x10, 0xb2,
	0x94, 0x39, 0x3f, 0xa9, 0x77, 0x2d, 0x16, 0xcd, 0x0b, 0xe1, 0x69, 0xe8, 0xc2, 0x0f, 0xfe, 0xfd,
	0xff, 0x5f, 0x3c, 0x73, 0x9a, 0xcc, 0xda, 0x3c, 0xd6, 0xde, 0x4f, 0x5f, 0xa9, 0x91, 0xef, 0x4d,
	0x6e, 0x19, 0xc8, 0x8a, 0x6e, 0xb6, 0xcc, 0xd5, 0x8b, 0x75, 0xbe, 0x28, 0x0c, 0x12, 0x37, 0x58,
	0xe2, 0x3a, 0x99, 0x57, 0x12, 0xc3, 0xb5, 0x9d, 0x3d, 0xea, 0xf4, 0x3a, 0x63, 0x32, 0xc2, 0x18,
	0x06, 0xee, 0x79, 0x9e, 0x1e, 0x42, 0xe6, 0xfa, 0x45, 0x0f, 0x21, 0x7b, 0x85, 0x42, 0xeb, 0x0c,
	0xc2, 0x1c, 0x39, 0xa5, 0x87, 0x40, 0x7e, 0x88, 0x12, 0x4b, 0x9f, 0x98, 0x78, 0x29, 0x77, 0x0d,
	0xd6, 0x6a, 0x61, 0x1c, 0x64, 0x5f, 0x67, 0xd9, 0x57, 0xc8, 0xb2, 0x92, 0x5d, 0xdc, 0x50, 0xda,
	0xa3, 0xc9, 0x8b, 0xc0, 0x98, 0x7c, 0x1f, 0x3f, 0x2f, 0x26, 0x88, 0x85, 0x30, 0x31, 0x2c, 0x05,
	0x46, 0x73, 0x79, 0x41, 0x17, 0x19, 0x98, 0x33, 0xe4, 0xb4, 0x01, 0x0c, 0xf9, 0x2d, 0x52, 0x7c,
	0x72, 0xb2, 0x9e, 0x4f, 0x54, 0xb2, 0x2b, 0xac, 0x8d, 0x72, 0xc1, 0x80, 0x66, 0x9b, 0xa1, 0x59,
	0x27, 0x17, 0xf4, 0x68, 0x6c, 0x7e, 0x59, 0x2a, 0x09, 0xf4, 0x4b, 0x84, 0x5f, 0x94, 0x26, 0x8b,
	0x65, 0x5a, 0xcf, 0xa7, 0x5f, 0x02, 0xa2, 0xe9, 0xda, 0x80, 0x9e, 0x67, 0x10, 0xcf, 0x91, 0x7a,
	0x2e, 0x44, 0x49, 0x37, 0x30, 0x98, 0x0b, 0x74, 0x93, 0x1c, 0xf4, 0x22, 0xdd, 0x64, 0x17, 0xbc,
	0x50, 0x37, 0x7e, 0x81, 0x6d, 0xd2, 0x8d, 0x4f, 0x56, 0x42, 0xb7, 0x12, 0x10, 0x4d, 0x46, 0x7d,
	0xa1, 0x6e, 0x1c, 0x62, 0xfc, 0xe0, 0x11, 0xa6, 0x70, 0xc3, 0x20, 0x81, 0x64, 0x69, 0x5b, 0x2b,
	0x05, 0x51, 0x90, 0x7e, 0x95, 0xa5, 0x5f, 0x22, 0x8b, 0x4a, 0x7a, 0x7e, 0xd3, 0x6e, 0x8f, 0xc0,
	0x0b, 0x1a, 0x93, 0xef, 0xe2, 0x63, 0x7c, 0x68, 0xac, 0x47, 0xc3, 0x40, 0xb1, 0x04, 0x84, 0x8c,
	0x33, 0x6e, 0x7c, 0xe2, 0x72, 0x08, 0xe4, 0xaf, 0x48, 0xeb, 0xb0, 0x92, 0xed, 0x5c, 0x82, 0x3a,
	0x6f, 0xd8, 0xda, 0x99, 0x66, 0x08, 0xa0, 0xbb, 0xcc, 0xd0, 0x6d, 0x91, 0xa6, 0x16, 0x9d, 0xf2,
	0x45, 0x43, 0x4a, 0xaf, 0x07, 0x08, 0x9f, 0xd2, 0xcc, 0x1b, 0xab, 0xb7, 0x9d, 0xab, 0x4b, 0x79,
	0xe4, 0xf9, 0xce, 0x34, 0xdd, 0x64, 0xc8, 0x57, 0xc9, 0x4a, 0x19, 0xe4, 0x21, 0xf9, 0x33, 0xd2,
	0x59, 0x9a, 0x64, 0xab, 0x94, 0x66, 0xe9, 0xe7, 0xc6, 0xf6, 0x14, 0x23, 0x00, 0xea, 0x4b, 0x0c,
	0xaa, 0x4d, 0x36, 0x0b, 0xa0, 0xf2, 0xa7, 0xdc, 0x44, 0xe3, 0x3f, 0x22, 0xe1, 0xbd, 0xa5, 0x67,
	0x8d, 0x25, 0xde, 0x2a, 0xa5, 0x57, 0x21, 0xea, 0x5c, 0x0f, 0x98, 0x6e, 0x30, 0xd4, 0xe7, 0x49,
	0xa3, 0x04, 0xea, 0x90, 0xfc, 0x1d, 0x19, 0x8c, 0x42, 0xb2, 0x9b, 0x2b, 0x98, 0xde, 0xe8, 0xb4,
	0x2e, 0x4d, 0x37, 0x08, 0x20, 0xbf, 0xcc, 0x20, 0xef, 0x90, 0x2d, 0x3d, 0x64, 0xf5, 0xc3, 0x9a,
	0x94, 0xd6, 0x1f, 0x22, 0x3c, 0xa7, 0x9d, 0x3b, 0x96, 0x7b, 0x37, 0x57, 0xbc, 0x69, 0x18, 0x14,
	0xd9, 0xad, 0xd4, 0x66, 0x0c, 0x2e, 0x90, 0xd5, 0x72, 0x0c, 0x42, 0x32, 0x06, 0x9b, 0x8d, 0x2c,
	0x1b, 0x14, 0x4b, 0xdb, 0x7e, 0x56, 0x23, 0x3f, 0x08, 0x40, 0x5c, 0x60, 0x20, 0x96, 0xc9, 0x92,
	0x02, 0x82, 0x79, 0xa6, 0xf6, 0x28, 0xb1, 0x4e, 0xc7, 0xe4, 0xd7, 0x08, 0x7f, 0x9a, 0x0d, 0x0e,
	0xaf, 0x08, 0xdb, 0xf2, 0xfa, 0x35, 0xfd, 0x86, 0x62, 0xf0, 0x44, 0xf5, 0x1b, 0x8a, 0xc9, 0x02,
	0xa5, 0x6b, 0x0c, 0x1b, 0x25, 0xe7, 0xf4, 0xd8, 0x52, 0x5b, 0x5d, 0x84, 0x9f, 0x63, 0x43, 0xe3,
	0x0a, 0x2e, 0x1b, 0x8a, 0x51, 0x2c, 0x8e, 0xea, 0x6b, 0x1a, 0x9f, 0xe7, 0x0c, 0x00, 0x3b, 0x00,
	0xc8, 0x8e, 0xd8, 0x45, 0x83, 0xe4, 0x1a, 0xb7, 0xcf, 0x5a, 0x2f, 0x15, 0x0b, 0x40, 0x2e, 0x31,
	0x20, 0x4d, 0xb2, 0xa1, 0x00, 0x91, 0xbe, 0x05, 0xb3, 0x47, 0x92, 0xab, 0x39, 0x26, 0x3f, 0x43,
	0xf8, 0x44, 0x7a, 0xba, 0x58, 0x9d, 0x8b, 0x06, 0xe2, 0xa5, 0x21, 0x1a, 0x4c, 0x45, 0xba, 0xc2,
	0x20, 0x2e, 0x92, 0x85, 0x3c, 0x88, 0x21, 0xf9, 0x09, 0x4a, 0x5b, 0x5a, 0x64, 0xcd, 0xa0, 0x42,
	0xc6, 0x71, 0xb3, 0x2e, 0x94, 0x88, 0x2c, 0x78, 0x9a, 0xa5, 0xbe, 0x8e, 0xb3, 0x47, 0xe0, 0x22,
	0x8e, 0xe3, 0x57, 0x81, 0xe3, 0xc9, 0x24, 0xb1, 0x46, 0x6b, 0x06, 0xde, 0x25, 0x41, 0x69, 0xad,
	0x3c, 0x4a, 0x19, 0xa8, 0x79, 0x62, 0x99, 0x41, 0x91, 0x1f, 0xa3, 0xc4, 0x4d, 0xca, 0x79, 0x2b,
	0x91, 0x6c, 0xae, 0x9c, 0xb7, 0x12, 0xd9, 0xaa, 0x32, 0x3e, 0x6f, 0x84, 0x4f, 0x17, 0xff, 0xa2,
	0x52, 0x8e, 0xdd, 0x98, 0x7c, 0x80, 0xe2, 0x57, 0x13, 0xde, 0x94, 0xff, 0x6a, 0x52, 0x02, 0x91,
	0xc6, 0x3c, 0xa3, 0x4b, 0x0c, 0xd1, 0x59, 0x72, 0x46, 0x8f, 0xa8, 0xe7, 0x86, 0xe4, 0x4f, 0x28,
	0xe3, 0xc7, 0x90, 0xcd, 0xbc, 0x0d, 0x23, 0xe3, 0x1e, 0x59, 0xcd, 0xb2, 0xe1, 0x80, 0xea, 0x15,
	0x86, 0xea, 0x12, 0xd9, 0xd1, 0x3d, 0x97, 0xd3, 0xdf, 0x4a, 0xda, 0x23, 0xc5, 0x3d, 0x1b, 0xc7,
	0x8f, 0x04, 0xa2, 0xcc, 0x1b, 0x2b, 0xb7, 0x99, 0xb7, 0x41, 0x94, 0x44, 0x6c, 0xf6, 0xac, 0x8c,
	0x0f, 0xca, 0x0c, 0x62, 0xf2, 0x7b, 0xa4, 0xba, 0x20, 0x64, 0x23, 0xe7, 0x41, 0x94, 0x31, 0x6c,
	0xac, 0xcd, 0x92, 0xd1, 0x05, 0xc7, 0x21, 0xe5, 0xbb, 0x52, 0xfe, 0xe8, 0x12, 0x2e, 0x15, 0xdf,
	0x6a, 0xe4, 0x19, 0x63, 0x15, 0x37, 0x72, 0x9e, 0x47, 0x25, 0x91, 0x1a, 0xed, 0x21, 0xe3, 0xdb,
	0x8b, 0x82, 0xf4, 0xca, 0x2b, 0x1f, 0x3d, 0xaa, 0xa3, 0x87, 0x8f, 0xea, 0xe8, 0x7f, 0x8f, 0xea,
	0xe8, 0xa7, 0x8f, 0xeb, 0x47, 0x1e, 0x3e, 0xae, 0x1f, 0xf9, 0xcf, 0xe3, 0xfa, 0x91, 0xb7, 0xcf,
	0x75, 0x7b, 0xd1, 0xbb, 0xc3, 0xdb, 0xcd, 0xb6, 0xdf, 0x4f, 0xcd, 0x71, 0x8f, 0xcf, 0x72, 0xff,
	0xc0, 0x0d, 0x6f, 0x1f, 0x65, 0x9f, 0xcf, 0xee, 0x7e, 0x1c, 0x00, 0x00, 0xff, 0xff, 0x67, 0x4b,
	0xba, 0x09, 0x60, 0x2d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Account items.
	Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error)
	// Queries a list of Sessions items.
	Sessions(ctx context.Context, in *QueryGetSessionsRequest, opts ...grpc.CallOption) (*QueryGetSessionsResponse, error)
	SessionsAll(ctx context.Context, in *QueryAllSessionsRequest, opts ...grpc.CallOption) (*QueryAllSessionsResponse, error)
	// Queries a list of SessionReject items.
	SessionReject(ctx context.Context, in *QueryGetSessionRejectRequest, opts ...grpc.CallOption) (*QueryGetSessionRejectResponse, error)
	SessionRejectAll(ctx context.Context, in *QueryAllSessionRejectRequest, opts ...grpc.CallOption) (*QueryAllSessionRejectResponse, error)
	// Queries a list of SessionLogout items.
	SessionLogout(ctx context.Context, in *QueryGetSessionLogoutRequest, opts ...grpc.CallOption) (*QueryGetSessionLogoutResponse, error)
	SessionLogoutAll(ctx context.Context, in *QueryAllSessionLogoutRequest, opts ...grpc.CallOption) (*QueryAllSessionLogoutResponse, error)
	// Queries a list of Orders items.
	Orders(ctx context.Context, in *QueryGetOrdersRequest, opts ...grpc.CallOption) (*QueryGetOrdersResponse, error)
	OrdersAll(ctx context.Context, in *QueryAllOrdersRequest, opts ...grpc.CallOption) (*QueryAllOrdersResponse, error)
	// Queries a list of OrdersCancelRequest items.
	OrdersCancelRequest(ctx context.Context, in *QueryGetOrdersCancelRequestRequest, opts ...grpc.CallOption) (*QueryGetOrdersCancelRequestResponse, error)
	OrdersCancelRequestAll(ctx context.Context, in *QueryAllOrdersCancelRequestRequest, opts ...grpc.CallOption) (*QueryAllOrdersCancelRequestResponse, error)
	// Queries a list of OrdersCancelReject items.
	OrdersCancelReject(ctx context.Context, in *QueryGetOrdersCancelRejectRequest, opts ...grpc.CallOption) (*QueryGetOrdersCancelRejectResponse, error)
	OrdersCancelRejectAll(ctx context.Context, in *QueryAllOrdersCancelRejectRequest, opts ...grpc.CallOption) (*QueryAllOrdersCancelRejectResponse, error)
	// Queries a list of OrdersExecutionReport items.
	OrdersExecutionReport(ctx context.Context, in *QueryGetOrdersExecutionReportRequest, opts ...grpc.CallOption) (*QueryGetOrdersExecutionReportResponse, error)
	OrdersExecutionReportAll(ctx context.Context, in *QueryAllOrdersExecutionReportRequest, opts ...grpc.CallOption) (*QueryAllOrdersExecutionReportResponse, error)
	// Queries a list of Quote items.
	Quote(ctx context.Context, in *QueryGetQuoteRequest, opts ...grpc.CallOption) (*QueryGetQuoteResponse, error)
	QuotesBySessionID(ctx context.Context, in *QuerySessionByIDQuoteRequest, opts ...grpc.CallOption) (*QuerySessionByIDQuoteResponse, error)
	QuoteAll(ctx context.Context, in *QueryAllQuoteRequest, opts ...grpc.CallOption) (*QueryAllQuoteResponse, error)
	// Queries a list of TradeCapture items.
	TradeCapture(ctx context.Context, in *QueryGetTradeCaptureRequest, opts ...grpc.CallOption) (*QueryGetTradeCaptureResponse, error)
	TradeCaptureAll(ctx context.Context, in *QueryAllTradeCaptureRequest, opts ...grpc.CallOption) (*QueryAllTradeCaptureResponse, error)
	// Queries a list of MarketData items.
	MarketData(ctx context.Context, in *QueryGetMarketDataRequest, opts ...grpc.CallOption) (*QueryGetMarketDataResponse, error)
	MarketDataAll(ctx context.Context, in *QueryAllMarketDataRequest, opts ...grpc.CallOption) (*QueryAllMarketDataResponse, error)
	// Queries a list of Security items.
	Security(ctx context.Context, in *QueryGetSecurityRequest, opts ...grpc.CallOption) (*QueryGetSecurityResponse, error)
	SecurityAll(ctx context.Context, in *QueryAllSecurityRequest, opts ...grpc.CallOption) (*QueryAllSecurityResponse, error)
	// Queries a list of OrderMassStatus items.
	OrderMassStatus(ctx context.Context, in *QueryGetOrderMassStatusRequest, opts ...grpc.CallOption) (*QueryGetOrderMassStatusResponse, error)
	OrderMassStatusAll(ctx context.Context, in *QueryAllOrderMassStatusRequest, opts ...grpc.CallOption) (*QueryAllOrderMassStatusResponse, error)
	// Queries a list of TradingSession items.
	TradingSession(ctx context.Context, in *QueryGetTradingSessionRequest, opts ...grpc.CallOption) (*QueryGetTradingSessionResponse, error)
	TradingSessionAll(ctx context.Context, in *QueryAllTradingSessionRequest, opts ...grpc.CallOption) (*QueryAllTradingSessionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error) {
	out := new(QueryAllAccountResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/AccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sessions(ctx context.Context, in *QueryGetSessionsRequest, opts ...grpc.CallOption) (*QueryGetSessionsResponse, error) {
	out := new(QueryGetSessionsResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/Sessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionsAll(ctx context.Context, in *QueryAllSessionsRequest, opts ...grpc.CallOption) (*QueryAllSessionsResponse, error) {
	out := new(QueryAllSessionsResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/SessionsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionReject(ctx context.Context, in *QueryGetSessionRejectRequest, opts ...grpc.CallOption) (*QueryGetSessionRejectResponse, error) {
	out := new(QueryGetSessionRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/SessionReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionRejectAll(ctx context.Context, in *QueryAllSessionRejectRequest, opts ...grpc.CallOption) (*QueryAllSessionRejectResponse, error) {
	out := new(QueryAllSessionRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/SessionRejectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionLogout(ctx context.Context, in *QueryGetSessionLogoutRequest, opts ...grpc.CallOption) (*QueryGetSessionLogoutResponse, error) {
	out := new(QueryGetSessionLogoutResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/SessionLogout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SessionLogoutAll(ctx context.Context, in *QueryAllSessionLogoutRequest, opts ...grpc.CallOption) (*QueryAllSessionLogoutResponse, error) {
	out := new(QueryAllSessionLogoutResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/SessionLogoutAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Orders(ctx context.Context, in *QueryGetOrdersRequest, opts ...grpc.CallOption) (*QueryGetOrdersResponse, error) {
	out := new(QueryGetOrdersResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/Orders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersAll(ctx context.Context, in *QueryAllOrdersRequest, opts ...grpc.CallOption) (*QueryAllOrdersResponse, error) {
	out := new(QueryAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrdersAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersCancelRequest(ctx context.Context, in *QueryGetOrdersCancelRequestRequest, opts ...grpc.CallOption) (*QueryGetOrdersCancelRequestResponse, error) {
	out := new(QueryGetOrdersCancelRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrdersCancelRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersCancelRequestAll(ctx context.Context, in *QueryAllOrdersCancelRequestRequest, opts ...grpc.CallOption) (*QueryAllOrdersCancelRequestResponse, error) {
	out := new(QueryAllOrdersCancelRequestResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrdersCancelRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersCancelReject(ctx context.Context, in *QueryGetOrdersCancelRejectRequest, opts ...grpc.CallOption) (*QueryGetOrdersCancelRejectResponse, error) {
	out := new(QueryGetOrdersCancelRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrdersCancelReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersCancelRejectAll(ctx context.Context, in *QueryAllOrdersCancelRejectRequest, opts ...grpc.CallOption) (*QueryAllOrdersCancelRejectResponse, error) {
	out := new(QueryAllOrdersCancelRejectResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrdersCancelRejectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersExecutionReport(ctx context.Context, in *QueryGetOrdersExecutionReportRequest, opts ...grpc.CallOption) (*QueryGetOrdersExecutionReportResponse, error) {
	out := new(QueryGetOrdersExecutionReportResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrdersExecutionReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrdersExecutionReportAll(ctx context.Context, in *QueryAllOrdersExecutionReportRequest, opts ...grpc.CallOption) (*QueryAllOrdersExecutionReportResponse, error) {
	out := new(QueryAllOrdersExecutionReportResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrdersExecutionReportAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Quote(ctx context.Context, in *QueryGetQuoteRequest, opts ...grpc.CallOption) (*QueryGetQuoteResponse, error) {
	out := new(QueryGetQuoteResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/Quote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuotesBySessionID(ctx context.Context, in *QuerySessionByIDQuoteRequest, opts ...grpc.CallOption) (*QuerySessionByIDQuoteResponse, error) {
	out := new(QuerySessionByIDQuoteResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/QuotesBySessionID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuoteAll(ctx context.Context, in *QueryAllQuoteRequest, opts ...grpc.CallOption) (*QueryAllQuoteResponse, error) {
	out := new(QueryAllQuoteResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/QuoteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeCapture(ctx context.Context, in *QueryGetTradeCaptureRequest, opts ...grpc.CallOption) (*QueryGetTradeCaptureResponse, error) {
	out := new(QueryGetTradeCaptureResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/TradeCapture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeCaptureAll(ctx context.Context, in *QueryAllTradeCaptureRequest, opts ...grpc.CallOption) (*QueryAllTradeCaptureResponse, error) {
	out := new(QueryAllTradeCaptureResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/TradeCaptureAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketData(ctx context.Context, in *QueryGetMarketDataRequest, opts ...grpc.CallOption) (*QueryGetMarketDataResponse, error) {
	out := new(QueryGetMarketDataResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/MarketData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketDataAll(ctx context.Context, in *QueryAllMarketDataRequest, opts ...grpc.CallOption) (*QueryAllMarketDataResponse, error) {
	out := new(QueryAllMarketDataResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/MarketDataAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Security(ctx context.Context, in *QueryGetSecurityRequest, opts ...grpc.CallOption) (*QueryGetSecurityResponse, error) {
	out := new(QueryGetSecurityResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/Security", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SecurityAll(ctx context.Context, in *QueryAllSecurityRequest, opts ...grpc.CallOption) (*QueryAllSecurityResponse, error) {
	out := new(QueryAllSecurityResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/SecurityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderMassStatus(ctx context.Context, in *QueryGetOrderMassStatusRequest, opts ...grpc.CallOption) (*QueryGetOrderMassStatusResponse, error) {
	out := new(QueryGetOrderMassStatusResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrderMassStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OrderMassStatusAll(ctx context.Context, in *QueryAllOrderMassStatusRequest, opts ...grpc.CallOption) (*QueryAllOrderMassStatusResponse, error) {
	out := new(QueryAllOrderMassStatusResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/OrderMassStatusAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingSession(ctx context.Context, in *QueryGetTradingSessionRequest, opts ...grpc.CallOption) (*QueryGetTradingSessionResponse, error) {
	out := new(QueryGetTradingSessionResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/TradingSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingSessionAll(ctx context.Context, in *QueryAllTradingSessionRequest, opts ...grpc.CallOption) (*QueryAllTradingSessionResponse, error) {
	out := new(QueryAllTradingSessionResponse)
	err := c.cc.Invoke(ctx, "/jim380.re.fix.Query/TradingSessionAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Account items.
	Account(context.Context, *QueryGetAccountRequest) (*QueryGetAccountResponse, error)
	AccountAll(context.Context, *QueryAllAccountRequest) (*QueryAllAccountResponse, error)
	// Queries a list of Sessions items.
	Sessions(context.Context, *QueryGetSessionsRequest) (*QueryGetSessionsResponse, error)
	SessionsAll(context.Context, *QueryAllSessionsRequest) (*QueryAllSessionsResponse, error)
	// Queries a list of SessionReject items.
	SessionReject(context.Context, *QueryGetSessionRejectRequest) (*QueryGetSessionRejectResponse, error)
	SessionRejectAll(context.Context, *QueryAllSessionRejectRequest) (*QueryAllSessionRejectResponse, error)
	// Queries a list of SessionLogout items.
	SessionLogout(context.Context, *QueryGetSessionLogoutRequest) (*QueryGetSessionLogoutResponse, error)
	SessionLogoutAll(context.Context, *QueryAllSessionLogoutRequest) (*QueryAllSessionLogoutResponse, error)
	// Queries a list of Orders items.
	Orders(context.Context, *QueryGetOrdersRequest) (*QueryGetOrdersResponse, error)
	OrdersAll(context.Context, *QueryAllOrdersRequest) (*QueryAllOrdersResponse, error)
	// Queries a list of OrdersCancelRequest items.
	OrdersCancelRequest(context.Context, *QueryGetOrdersCancelRequestRequest) (*QueryGetOrdersCancelRequestResponse, error)
	OrdersCancelRequestAll(context.Context, *QueryAllOrdersCancelRequestRequest) (*QueryAllOrdersCancelRequestResponse, error)
	// Queries a list of OrdersCancelReject items.
	OrdersCancelReject(context.Context, *QueryGetOrdersCancelRejectRequest) (*QueryGetOrdersCancelRejectResponse, error)
	OrdersCancelRejectAll(context.Context, *QueryAllOrdersCancelRejectRequest) (*QueryAllOrdersCancelRejectResponse, error)
	// Queries a list of OrdersExecutionReport items.
	OrdersExecutionReport(context.Context, *QueryGetOrdersExecutionReportRequest) (*QueryGetOrdersExecutionReportResponse, error)
	OrdersExecutionReportAll(context.Context, *QueryAllOrdersExecutionReportRequest) (*QueryAllOrdersExecutionReportResponse, error)
	// Queries a list of Quote items.
	Quote(context.Context, *QueryGetQuoteRequest) (*QueryGetQuoteResponse, error)
	QuotesBySessionID(context.Context, *QuerySessionByIDQuoteRequest) (*QuerySessionByIDQuoteResponse, error)
	QuoteAll(context.Context, *QueryAllQuoteRequest) (*QueryAllQuoteResponse, error)
	// Queries a list of TradeCapture items.
	TradeCapture(context.Context, *QueryGetTradeCaptureRequest) (*QueryGetTradeCaptureResponse, error)
	TradeCaptureAll(context.Context, *QueryAllTradeCaptureRequest) (*QueryAllTradeCaptureResponse, error)
	// Queries a list of MarketData items.
	MarketData(context.Context, *QueryGetMarketDataRequest) (*QueryGetMarketDataResponse, error)
	MarketDataAll(context.Context, *QueryAllMarketDataRequest) (*QueryAllMarketDataResponse, error)
	// Queries a list of Security items.
	Security(context.Context, *QueryGetSecurityRequest) (*QueryGetSecurityResponse, error)
	SecurityAll(context.Context, *QueryAllSecurityRequest) (*QueryAllSecurityResponse, error)
	// Queries a list of OrderMassStatus items.
	OrderMassStatus(context.Context, *QueryGetOrderMassStatusRequest) (*QueryGetOrderMassStatusResponse, error)
	OrderMassStatusAll(context.Context, *QueryAllOrderMassStatusRequest) (*QueryAllOrderMassStatusResponse, error)
	// Queries a list of TradingSession items.
	TradingSession(context.Context, *QueryGetTradingSessionRequest) (*QueryGetTradingSessionResponse, error)
	TradingSessionAll(context.Context, *QueryAllTradingSessionRequest) (*QueryAllTradingSessionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Account(ctx context.Context, req *QueryGetAccountRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedQueryServer) AccountAll(ctx context.Context, req *QueryAllAccountRequest) (*QueryAllAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAll not implemented")
}
func (*UnimplementedQueryServer) Sessions(ctx context.Context, req *QueryGetSessionsRequest) (*QueryGetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sessions not implemented")
}
func (*UnimplementedQueryServer) SessionsAll(ctx context.Context, req *QueryAllSessionsRequest) (*QueryAllSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionsAll not implemented")
}
func (*UnimplementedQueryServer) SessionReject(ctx context.Context, req *QueryGetSessionRejectRequest) (*QueryGetSessionRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionReject not implemented")
}
func (*UnimplementedQueryServer) SessionRejectAll(ctx context.Context, req *QueryAllSessionRejectRequest) (*QueryAllSessionRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionRejectAll not implemented")
}
func (*UnimplementedQueryServer) SessionLogout(ctx context.Context, req *QueryGetSessionLogoutRequest) (*QueryGetSessionLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionLogout not implemented")
}
func (*UnimplementedQueryServer) SessionLogoutAll(ctx context.Context, req *QueryAllSessionLogoutRequest) (*QueryAllSessionLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionLogoutAll not implemented")
}
func (*UnimplementedQueryServer) Orders(ctx context.Context, req *QueryGetOrdersRequest) (*QueryGetOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (*UnimplementedQueryServer) OrdersAll(ctx context.Context, req *QueryAllOrdersRequest) (*QueryAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersAll not implemented")
}
func (*UnimplementedQueryServer) OrdersCancelRequest(ctx context.Context, req *QueryGetOrdersCancelRequestRequest) (*QueryGetOrdersCancelRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersCancelRequest not implemented")
}
func (*UnimplementedQueryServer) OrdersCancelRequestAll(ctx context.Context, req *QueryAllOrdersCancelRequestRequest) (*QueryAllOrdersCancelRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersCancelRequestAll not implemented")
}
func (*UnimplementedQueryServer) OrdersCancelReject(ctx context.Context, req *QueryGetOrdersCancelRejectRequest) (*QueryGetOrdersCancelRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersCancelReject not implemented")
}
func (*UnimplementedQueryServer) OrdersCancelRejectAll(ctx context.Context, req *QueryAllOrdersCancelRejectRequest) (*QueryAllOrdersCancelRejectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersCancelRejectAll not implemented")
}
func (*UnimplementedQueryServer) OrdersExecutionReport(ctx context.Context, req *QueryGetOrdersExecutionReportRequest) (*QueryGetOrdersExecutionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersExecutionReport not implemented")
}
func (*UnimplementedQueryServer) OrdersExecutionReportAll(ctx context.Context, req *QueryAllOrdersExecutionReportRequest) (*QueryAllOrdersExecutionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersExecutionReportAll not implemented")
}
func (*UnimplementedQueryServer) Quote(ctx context.Context, req *QueryGetQuoteRequest) (*QueryGetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Quote not implemented")
}
func (*UnimplementedQueryServer) QuotesBySessionID(ctx context.Context, req *QuerySessionByIDQuoteRequest) (*QuerySessionByIDQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuotesBySessionID not implemented")
}
func (*UnimplementedQueryServer) QuoteAll(ctx context.Context, req *QueryAllQuoteRequest) (*QueryAllQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuoteAll not implemented")
}
func (*UnimplementedQueryServer) TradeCapture(ctx context.Context, req *QueryGetTradeCaptureRequest) (*QueryGetTradeCaptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeCapture not implemented")
}
func (*UnimplementedQueryServer) TradeCaptureAll(ctx context.Context, req *QueryAllTradeCaptureRequest) (*QueryAllTradeCaptureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeCaptureAll not implemented")
}
func (*UnimplementedQueryServer) MarketData(ctx context.Context, req *QueryGetMarketDataRequest) (*QueryGetMarketDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketData not implemented")
}
func (*UnimplementedQueryServer) MarketDataAll(ctx context.Context, req *QueryAllMarketDataRequest) (*QueryAllMarketDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketDataAll not implemented")
}
func (*UnimplementedQueryServer) Security(ctx context.Context, req *QueryGetSecurityRequest) (*QueryGetSecurityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Security not implemented")
}
func (*UnimplementedQueryServer) SecurityAll(ctx context.Context, req *QueryAllSecurityRequest) (*QueryAllSecurityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecurityAll not implemented")
}
func (*UnimplementedQueryServer) OrderMassStatus(ctx context.Context, req *QueryGetOrderMassStatusRequest) (*QueryGetOrderMassStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderMassStatus not implemented")
}
func (*UnimplementedQueryServer) OrderMassStatusAll(ctx context.Context, req *QueryAllOrderMassStatusRequest) (*QueryAllOrderMassStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderMassStatusAll not implemented")
}
func (*UnimplementedQueryServer) TradingSession(ctx context.Context, req *QueryGetTradingSessionRequest) (*QueryGetTradingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSession not implemented")
}
func (*UnimplementedQueryServer) TradingSessionAll(ctx context.Context, req *QueryAllTradingSessionRequest) (*QueryAllTradingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingSessionAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Account(ctx, req.(*QueryGetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/AccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAll(ctx, req.(*QueryAllAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/Sessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sessions(ctx, req.(*QueryGetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/SessionsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionsAll(ctx, req.(*QueryAllSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSessionRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/SessionReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionReject(ctx, req.(*QueryGetSessionRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionRejectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSessionRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionRejectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/SessionRejectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionRejectAll(ctx, req.(*QueryAllSessionRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSessionLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/SessionLogout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionLogout(ctx, req.(*QueryGetSessionLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SessionLogoutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSessionLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SessionLogoutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/SessionLogoutAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SessionLogoutAll(ctx, req.(*QueryAllSessionLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Orders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Orders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/Orders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Orders(ctx, req.(*QueryGetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrdersAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersAll(ctx, req.(*QueryAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersCancelRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrdersCancelRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersCancelRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrdersCancelRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersCancelRequest(ctx, req.(*QueryGetOrdersCancelRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersCancelRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrdersCancelRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersCancelRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrdersCancelRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersCancelRequestAll(ctx, req.(*QueryAllOrdersCancelRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersCancelReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrdersCancelRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersCancelReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrdersCancelReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersCancelReject(ctx, req.(*QueryGetOrdersCancelRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersCancelRejectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrdersCancelRejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersCancelRejectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrdersCancelRejectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersCancelRejectAll(ctx, req.(*QueryAllOrdersCancelRejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrdersExecutionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrdersExecutionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersExecutionReport(ctx, req.(*QueryGetOrdersExecutionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrdersExecutionReportAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrdersExecutionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrdersExecutionReportAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrdersExecutionReportAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrdersExecutionReportAll(ctx, req.(*QueryAllOrdersExecutionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Quote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Quote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/Quote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Quote(ctx, req.(*QueryGetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuotesBySessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySessionByIDQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuotesBySessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/QuotesBySessionID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuotesBySessionID(ctx, req.(*QuerySessionByIDQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuoteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuoteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/QuoteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuoteAll(ctx, req.(*QueryAllQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeCapture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradeCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeCapture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/TradeCapture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeCapture(ctx, req.(*QueryGetTradeCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeCaptureAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTradeCaptureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeCaptureAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/TradeCaptureAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeCaptureAll(ctx, req.(*QueryAllTradeCaptureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMarketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/MarketData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketData(ctx, req.(*QueryGetMarketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketDataAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMarketDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketDataAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/MarketDataAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketDataAll(ctx, req.(*QueryAllMarketDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Security_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSecurityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Security(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/Security",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Security(ctx, req.(*QueryGetSecurityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SecurityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSecurityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SecurityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/SecurityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SecurityAll(ctx, req.(*QueryAllSecurityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderMassStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOrderMassStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderMassStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrderMassStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderMassStatus(ctx, req.(*QueryGetOrderMassStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OrderMassStatusAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrderMassStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OrderMassStatusAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/OrderMassStatusAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OrderMassStatusAll(ctx, req.(*QueryAllOrderMassStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/TradingSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingSession(ctx, req.(*QueryGetTradingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingSessionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTradingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingSessionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jim380.re.fix.Query/TradingSessionAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingSessionAll(ctx, req.(*QueryAllTradingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jim380.re.fix.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _Query_Account_Handler,
		},
		{
			MethodName: "AccountAll",
			Handler:    _Query_AccountAll_Handler,
		},
		{
			MethodName: "Sessions",
			Handler:    _Query_Sessions_Handler,
		},
		{
			MethodName: "SessionsAll",
			Handler:    _Query_SessionsAll_Handler,
		},
		{
			MethodName: "SessionReject",
			Handler:    _Query_SessionReject_Handler,
		},
		{
			MethodName: "SessionRejectAll",
			Handler:    _Query_SessionRejectAll_Handler,
		},
		{
			MethodName: "SessionLogout",
			Handler:    _Query_SessionLogout_Handler,
		},
		{
			MethodName: "SessionLogoutAll",
			Handler:    _Query_SessionLogoutAll_Handler,
		},
		{
			MethodName: "Orders",
			Handler:    _Query_Orders_Handler,
		},
		{
			MethodName: "OrdersAll",
			Handler:    _Query_OrdersAll_Handler,
		},
		{
			MethodName: "OrdersCancelRequest",
			Handler:    _Query_OrdersCancelRequest_Handler,
		},
		{
			MethodName: "OrdersCancelRequestAll",
			Handler:    _Query_OrdersCancelRequestAll_Handler,
		},
		{
			MethodName: "OrdersCancelReject",
			Handler:    _Query_OrdersCancelReject_Handler,
		},
		{
			MethodName: "OrdersCancelRejectAll",
			Handler:    _Query_OrdersCancelRejectAll_Handler,
		},
		{
			MethodName: "OrdersExecutionReport",
			Handler:    _Query_OrdersExecutionReport_Handler,
		},
		{
			MethodName: "OrdersExecutionReportAll",
			Handler:    _Query_OrdersExecutionReportAll_Handler,
		},
		{
			MethodName: "Quote",
			Handler:    _Query_Quote_Handler,
		},
		{
			MethodName: "QuotesBySessionID",
			Handler:    _Query_QuotesBySessionID_Handler,
		},
		{
			MethodName: "QuoteAll",
			Handler:    _Query_QuoteAll_Handler,
		},
		{
			MethodName: "TradeCapture",
			Handler:    _Query_TradeCapture_Handler,
		},
		{
			MethodName: "TradeCaptureAll",
			Handler:    _Query_TradeCaptureAll_Handler,
		},
		{
			MethodName: "MarketData",
			Handler:    _Query_MarketData_Handler,
		},
		{
			MethodName: "MarketDataAll",
			Handler:    _Query_MarketDataAll_Handler,
		},
		{
			MethodName: "Security",
			Handler:    _Query_Security_Handler,
		},
		{
			MethodName: "SecurityAll",
			Handler:    _Query_SecurityAll_Handler,
		},
		{
			MethodName: "OrderMassStatus",
			Handler:    _Query_OrderMassStatus_Handler,
		},
		{
			MethodName: "OrderMassStatusAll",
			Handler:    _Query_OrderMassStatusAll_Handler,
		},
		{
			MethodName: "TradingSession",
			Handler:    _Query_TradingSession_Handler,
		},
		{
			MethodName: "TradingSessionAll",
			Handler:    _Query_TradingSessionAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "re/fix/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		for iNdEx := len(m.Account) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Account[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Sessions.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sessions) > 0 {
		for iNdEx := len(m.Sessions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sessions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionRejectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionRejectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionRejectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SessionReject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionRejectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionRejectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionRejectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionReject) > 0 {
		for iNdEx := len(m.SessionReject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SessionReject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionLogoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionLogoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionLogoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSessionLogoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSessionLogoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSessionLogoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SessionLogout.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionLogoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionLogoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionLogoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSessionLogoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSessionLogoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSessionLogoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionLogout) > 0 {
		for iNdEx := len(m.SessionLogout) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SessionLogout[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Orders.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersCancelRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersCancelRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersCancelRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersCancelRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersCancelRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersCancelRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OrdersCancelRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersCancelRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersCancelRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersCancelRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersCancelRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersCancelRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersCancelRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrdersCancelRequest) > 0 {
		for iNdEx := len(m.OrdersCancelRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrdersCancelRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersCancelRejectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersCancelRejectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersCancelRejectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersCancelRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersCancelRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersCancelRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OrdersCancelReject.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersCancelRejectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersCancelRejectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersCancelRejectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersCancelRejectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersCancelRejectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersCancelRejectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrdersCancelReject) > 0 {
		for iNdEx := len(m.OrdersCancelReject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrdersCancelReject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersExecutionReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersExecutionReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersExecutionReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClOrdID) > 0 {
		i -= len(m.ClOrdID)
		copy(dAtA[i:], m.ClOrdID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ClOrdID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrdersExecutionReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrdersExecutionReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrdersExecutionReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OrdersExecutionReport.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersExecutionReportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersExecutionReportRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersExecutionReportRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersExecutionReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersExecutionReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersExecutionReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrdersExecutionReport) > 0 {
		for iNdEx := len(m.OrdersExecutionReport) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrdersExecutionReport[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQuoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQuoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQuoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteReqID) > 0 {
		i -= len(m.QuoteReqID)
		copy(dAtA[i:], m.QuoteReqID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteReqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQuoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQuoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQuoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Quote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySessionByIDQuoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySessionByIDQuoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySessionByIDQuoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySessionByIDQuoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySessionByIDQuoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySessionByIDQuoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quote) > 0 {
		for iNdEx := len(m.Quote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Quote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllQuoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllQuoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllQuoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllQuoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllQuoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllQuoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Quote) > 0 {
		for iNdEx := len(m.Quote) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Quote[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeCaptureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeCaptureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeCaptureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradeReportID) > 0 {
		i -= len(m.TradeReportID)
		copy(dAtA[i:], m.TradeReportID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TradeReportID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeCaptureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeCaptureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeCaptureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TradeCapture.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTradeCaptureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradeCaptureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradeCaptureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTradeCaptureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradeCaptureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradeCaptureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TradeCapture) > 0 {
		for iNdEx := len(m.TradeCapture) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradeCapture[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MdReqID) > 0 {
		i -= len(m.MdReqID)
		copy(dAtA[i:], m.MdReqID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MdReqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMarketDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMarketDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMarketDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MarketData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMarketDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMarketDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMarketDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketData) > 0 {
		for iNdEx := len(m.MarketData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MarketData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSecurityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSecurityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSecurityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSecurityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSecurityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSecurityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Security.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllSecurityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSecurityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSecurityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSecurityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSecurityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSecurityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Security) > 0 {
		for iNdEx := len(m.Security) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Security[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderMassStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderMassStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderMassStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MassStatusReqID) > 0 {
		i -= len(m.MassStatusReqID)
		copy(dAtA[i:], m.MassStatusReqID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MassStatusReqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOrderMassStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOrderMassStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOrderMassStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OrderMassStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOrderMassStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrderMassStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrderMassStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrderMassStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrderMassStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrderMassStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderMassStatus) > 0 {
		for iNdEx := len(m.OrderMassStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OrderMassStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradSesReqID) > 0 {
		i -= len(m.TradSesReqID)
		copy(dAtA[i:], m.TradSesReqID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TradSesReqID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradingSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradingSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradingSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TradingSession.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTradingSessionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradingSessionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradingSessionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTradingSessionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradingSessionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradingSessionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TradingSession) > 0 {
		for iNdEx := len(m.TradingSession) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradingSession[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Account.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Account) > 0 {
		for _, e := range m.Account {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sessions.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSessionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSessionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sessions) > 0 {
		for _, e := range m.Sessions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionRejectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionReject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSessionRejectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSessionRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SessionReject) > 0 {
		for _, e := range m.SessionReject {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionLogoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSessionLogoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SessionLogout.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSessionLogoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSessionLogoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SessionLogout) > 0 {
		for _, e := range m.SessionLogout {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Orders.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersCancelRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersCancelRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OrdersCancelRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrdersCancelRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrdersCancelRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrdersCancelRequest) > 0 {
		for _, e := range m.OrdersCancelRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersCancelRejectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersCancelRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OrdersCancelReject.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrdersCancelRejectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrdersCancelRejectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrdersCancelReject) > 0 {
		for _, e := range m.OrdersCancelReject {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersExecutionReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClOrdID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrdersExecutionReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OrdersExecutionReport.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrdersExecutionReportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrdersExecutionReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrdersExecutionReport) > 0 {
		for _, e := range m.OrdersExecutionReport {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetQuoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuoteReqID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetQuoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Quote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySessionByIDQuoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySessionByIDQuoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Quote) > 0 {
		for _, e := range m.Quote {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllQuoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllQuoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Quote) > 0 {
		for _, e := range m.Quote {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradeCaptureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TradeReportID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradeCaptureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TradeCapture.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTradeCaptureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTradeCaptureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TradeCapture) > 0 {
		for _, e := range m.TradeCapture {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMarketDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MdReqID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMarketDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MarketData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMarketDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMarketDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MarketData) > 0 {
		for _, e := range m.MarketData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSecurityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSecurityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Security.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllSecurityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSecurityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Security) > 0 {
		for _, e := range m.Security {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrderMassStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MassStatusReqID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOrderMassStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OrderMassStatus.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOrderMassStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOrderMassStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderMassStatus) > 0 {
		for _, e := range m.OrderMassStatus {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TradSesReqID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradingSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TradingSession.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTradingSessionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTradingSessionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TradingSession) > 0 {
		for _, e := range m.TradingSession {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account, Account{})
			if err := m.Account[len(m.Account)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sessions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sessions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sessions = append(m.Sessions, Sessions{})
			if err := m.Sessions[len(m.Sessions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionRejectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionRejectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionRejectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionRejectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionRejectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionRejectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionReject = append(m.SessionReject, SessionReject{})
			if err := m.SessionReject[len(m.SessionReject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionLogoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionLogoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionLogoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSessionLogoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSessionLogoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSessionLogoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLogout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionLogout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionLogoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionLogoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionLogoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSessionLogoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSessionLogoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSessionLogoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionLogout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionLogout = append(m.SessionLogout, SessionLogout{})
			if err := m.SessionLogout[len(m.SessionLogout)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Orders.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, Orders{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersCancelRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersCancelRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersCancelRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrdersCancelRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersCancelRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersCancelRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersCancelRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrdersCancelRequest = append(m.OrdersCancelRequest, OrdersCancelRequest{})
			if err := m.OrdersCancelRequest[len(m.OrdersCancelRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersCancelRejectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRejectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRejectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersCancelRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersCancelRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersCancelReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrdersCancelReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersCancelRejectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRejectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRejectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersCancelRejectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRejectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersCancelRejectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersCancelReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrdersCancelReject = append(m.OrdersCancelReject, OrdersCancelReject{})
			if err := m.OrdersCancelReject[len(m.OrdersCancelReject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersExecutionReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersExecutionReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersExecutionReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClOrdID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClOrdID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrdersExecutionReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrdersExecutionReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrdersExecutionReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersExecutionReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrdersExecutionReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersExecutionReportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersExecutionReportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersExecutionReportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersExecutionReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersExecutionReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersExecutionReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrdersExecutionReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrdersExecutionReport = append(m.OrdersExecutionReport, OrdersExecutionReport{})
			if err := m.OrdersExecutionReport[len(m.OrdersExecutionReport)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQuoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQuoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQuoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQuoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQuoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQuoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySessionByIDQuoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySessionByIDQuoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySessionByIDQuoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySessionByIDQuoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySessionByIDQuoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySessionByIDQuoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = append(m.Quote, Quote{})
			if err := m.Quote[len(m.Quote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllQuoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllQuoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllQuoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllQuoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllQuoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllQuoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = append(m.Quote, Quote{})
			if err := m.Quote[len(m.Quote)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeCaptureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeCaptureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeCaptureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeReportID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeReportID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeCaptureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeCaptureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeCaptureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeCapture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradeCapture.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradeCaptureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradeCaptureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradeCaptureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradeCaptureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradeCaptureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradeCaptureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeCapture", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeCapture = append(m.TradeCapture, TradeCapture{})
			if err := m.TradeCapture[len(m.TradeCapture)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MdReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MdReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMarketDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMarketDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMarketDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarketData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMarketDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMarketDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMarketDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketData = append(m.MarketData, MarketData{})
			if err := m.MarketData[len(m.MarketData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSecurityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSecurityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSecurityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSecurityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSecurityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSecurityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Security.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSecurityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSecurityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSecurityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSecurityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSecurityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSecurityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Security = append(m.Security, Security{})
			if err := m.Security[len(m.Security)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderMassStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderMassStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderMassStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MassStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MassStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOrderMassStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOrderMassStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOrderMassStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderMassStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderMassStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrderMassStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrderMassStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrderMassStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrderMassStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrderMassStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrderMassStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderMassStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderMassStatus = append(m.OrderMassStatus, OrderMassStatus{})
			if err := m.OrderMassStatus[len(m.OrderMassStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradSesReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradSesReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradingSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradingSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradingSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TradingSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradingSessionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradingSessionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradingSessionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradingSessionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradingSessionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradingSessionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSession = append(m.TradingSession, TradingSession{})
			if err := m.TradingSession[len(m.TradingSession)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
