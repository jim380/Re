// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: re/fix/security_status.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecurityStatus struct {
	SessionID                   string                       `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityStatusRequest       *SecurityStatusRequest       `protobuf:"bytes,2,opt,name=securityStatusRequest,proto3" json:"securityStatusRequest,omitempty"`
	SecurityStatusResponse      *SecurityStatusResponse      `protobuf:"bytes,3,opt,name=securityStatusResponse,proto3" json:"securityStatusResponse,omitempty"`
	SecurityStatusRequestReject *SecurityStatusRequestReject `protobuf:"bytes,4,opt,name=securityStatusRequestReject,proto3" json:"securityStatusRequestReject,omitempty"`
}

func (m *SecurityStatus) Reset()         { *m = SecurityStatus{} }
func (m *SecurityStatus) String() string { return proto.CompactTextString(m) }
func (*SecurityStatus) ProtoMessage()    {}
func (*SecurityStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_c527dd44744e28ed, []int{0}
}
func (m *SecurityStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStatus.Merge(m, src)
}
func (m *SecurityStatus) XXX_Size() int {
	return m.Size()
}
func (m *SecurityStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStatus proto.InternalMessageInfo

func (m *SecurityStatus) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *SecurityStatus) GetSecurityStatusRequest() *SecurityStatusRequest {
	if m != nil {
		return m.SecurityStatusRequest
	}
	return nil
}

func (m *SecurityStatus) GetSecurityStatusResponse() *SecurityStatusResponse {
	if m != nil {
		return m.SecurityStatusResponse
	}
	return nil
}

func (m *SecurityStatus) GetSecurityStatusRequestReject() *SecurityStatusRequestReject {
	if m != nil {
		return m.SecurityStatusRequestReject
	}
	return nil
}

// Security Status Request with fields, tags and descriptions and MsgType = e
type SecurityStatusRequest struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (324) Must be unique, or the ID of previous Security Status Request (e) to disable if SubscriptionRequestType (263) = Disable previous Snapshot + Updates Request (2).
	SecurityStatusReqID string `protobuf:"bytes,2,opt,name=SecurityStatusReqID,proto3" json:"SecurityStatusReqID,omitempty"`
	Instrument          string `protobuf:"bytes,3,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// (711) Number of underlyings
	NoUnderlyings string `protobuf:"bytes,4,opt,name=noUnderlyings,proto3" json:"noUnderlyings,omitempty"`
	// Must be provided if Number of underlyings > 0
	UnderlyingInstrument string `protobuf:"bytes,5,opt,name=underlyingInstrument,proto3" json:"underlyingInstrument,omitempty"`
	// (555) Number of legs that make up the Security
	NoLegs string `protobuf:"bytes,6,opt,name=noLegs,proto3" json:"noLegs,omitempty"`
	// Required if NoLegs (555) > 0
	InstrumentLeg string `protobuf:"bytes,7,opt,name=instrumentLeg,proto3" json:"instrumentLeg,omitempty"`
	// (15)
	Currency string `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	// (263) SubscriptionRequestType indicates to the other party what type of response is expected. A snapshot request only asks for current information. A subscribe request asks for updates as the status changes. Unsubscribe will cancel any future update messages from the counter party.)
	SubscriptionRequestType string `protobuf:"bytes,9,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
	// (336)
	TradingSessionID string `protobuf:"bytes,10,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	// (625)
	TradingSessionSubID string `protobuf:"bytes,11,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,12,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// owner
	Creator string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *SecurityStatusRequest) Reset()         { *m = SecurityStatusRequest{} }
func (m *SecurityStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityStatusRequest) ProtoMessage()    {}
func (*SecurityStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c527dd44744e28ed, []int{1}
}
func (m *SecurityStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStatusRequest.Merge(m, src)
}
func (m *SecurityStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStatusRequest proto.InternalMessageInfo

func (m *SecurityStatusRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SecurityStatusRequest) GetSecurityStatusReqID() string {
	if m != nil {
		return m.SecurityStatusReqID
	}
	return ""
}

func (m *SecurityStatusRequest) GetInstrument() string {
	if m != nil {
		return m.Instrument
	}
	return ""
}

func (m *SecurityStatusRequest) GetNoUnderlyings() string {
	if m != nil {
		return m.NoUnderlyings
	}
	return ""
}

func (m *SecurityStatusRequest) GetUnderlyingInstrument() string {
	if m != nil {
		return m.UnderlyingInstrument
	}
	return ""
}

func (m *SecurityStatusRequest) GetNoLegs() string {
	if m != nil {
		return m.NoLegs
	}
	return ""
}

func (m *SecurityStatusRequest) GetInstrumentLeg() string {
	if m != nil {
		return m.InstrumentLeg
	}
	return ""
}

func (m *SecurityStatusRequest) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *SecurityStatusRequest) GetSubscriptionRequestType() string {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return ""
}

func (m *SecurityStatusRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *SecurityStatusRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *SecurityStatusRequest) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *SecurityStatusRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Security Status Response with fields, tags and descriptions and MsgType = f
type SecurityStatusResponse struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (324)
	SecurityStatusReqID string `protobuf:"bytes,2,opt,name=securityStatusReqID,proto3" json:"securityStatusReqID,omitempty"`
	// (711) Number of underlyings
	NoUnderlyings string `protobuf:"bytes,3,opt,name=noUnderlyings,proto3" json:"noUnderlyings,omitempty"`
	// Must be provided if Number of underlyings > 0
	UnderlyingInstrument string `protobuf:"bytes,4,opt,name=underlyingInstrument,proto3" json:"underlyingInstrument,omitempty"`
	// (555) Required for multileg quotes
	NoLegs string `protobuf:"bytes,5,opt,name=noLegs,proto3" json:"noLegs,omitempty"`
	// Required if NoLegs (555) > 0
	InstrumentLeg string `protobuf:"bytes,6,opt,name=instrumentLeg,proto3" json:"instrumentLeg,omitempty"`
	// (15)
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// (336)
	TradingSessionID string `protobuf:"bytes,8,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	// (625)
	TradingSessionSubID string `protobuf:"bytes,9,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	// (325) Set to 'Y' if message is sent as a result of a subscription request not a snapshot request
	UnsolicitedIndicator string `protobuf:"bytes,10,opt,name=unsolicitedIndicator,proto3" json:"unsolicitedIndicator,omitempty"`
	// (326) Identifies the trading status applicable to the transaction.
	SecurityTradingStatus string `protobuf:"bytes,11,opt,name=securityTradingStatus,proto3" json:"securityTradingStatus,omitempty"`
	// (291)
	FinancialStatus string `protobuf:"bytes,12,opt,name=financialStatus,proto3" json:"financialStatus,omitempty"`
	// (292)
	CorporateAction string `protobuf:"bytes,13,opt,name=corporateAction,proto3" json:"corporateAction,omitempty"`
	// (327) Denotes the reason for the Opening Delay or Trading Halt.
	HaltReason string `protobuf:"bytes,14,opt,name=haltReason,proto3" json:"haltReason,omitempty"`
	// (328)
	InViewOfCommon string `protobuf:"bytes,15,opt,name=inViewOfCommon,proto3" json:"inViewOfCommon,omitempty"`
	// (329)
	DueToRelated string `protobuf:"bytes,16,opt,name=dueToRelated,proto3" json:"dueToRelated,omitempty"`
	// (330)
	BuyVolume string `protobuf:"bytes,17,opt,name=buyVolume,proto3" json:"buyVolume,omitempty"`
	// (331)
	SellVolume string `protobuf:"bytes,18,opt,name=sellVolume,proto3" json:"sellVolume,omitempty"`
	// (332)
	HighPx string `protobuf:"bytes,19,opt,name=highPx,proto3" json:"highPx,omitempty"`
	// (333)
	LowPx string `protobuf:"bytes,20,opt,name=lowPx,proto3" json:"lowPx,omitempty"`
	// (31) Represents the last price for that security either on a Consolidated or an individual participant basis at the time it is disseminated.
	LastPx string `protobuf:"bytes,21,opt,name=lastPx,proto3" json:"lastPx,omitempty"`
	// (60) Trade Dissemination Time
	TransactTime string `protobuf:"bytes,22,opt,name=transactTime,proto3" json:"transactTime,omitempty"`
	// (334)
	Adjustment string `protobuf:"bytes,23,opt,name=adjustment,proto3" json:"adjustment,omitempty"`
	// (58) Comment, instructions, or other identifying information.
	Text string `protobuf:"bytes,24,opt,name=text,proto3" json:"text,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,25,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// owner
	Creator string `protobuf:"bytes,26,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *SecurityStatusResponse) Reset()         { *m = SecurityStatusResponse{} }
func (m *SecurityStatusResponse) String() string { return proto.CompactTextString(m) }
func (*SecurityStatusResponse) ProtoMessage()    {}
func (*SecurityStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c527dd44744e28ed, []int{2}
}
func (m *SecurityStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStatusResponse.Merge(m, src)
}
func (m *SecurityStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *SecurityStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStatusResponse proto.InternalMessageInfo

func (m *SecurityStatusResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SecurityStatusResponse) GetSecurityStatusReqID() string {
	if m != nil {
		return m.SecurityStatusReqID
	}
	return ""
}

func (m *SecurityStatusResponse) GetNoUnderlyings() string {
	if m != nil {
		return m.NoUnderlyings
	}
	return ""
}

func (m *SecurityStatusResponse) GetUnderlyingInstrument() string {
	if m != nil {
		return m.UnderlyingInstrument
	}
	return ""
}

func (m *SecurityStatusResponse) GetNoLegs() string {
	if m != nil {
		return m.NoLegs
	}
	return ""
}

func (m *SecurityStatusResponse) GetInstrumentLeg() string {
	if m != nil {
		return m.InstrumentLeg
	}
	return ""
}

func (m *SecurityStatusResponse) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *SecurityStatusResponse) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *SecurityStatusResponse) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *SecurityStatusResponse) GetUnsolicitedIndicator() string {
	if m != nil {
		return m.UnsolicitedIndicator
	}
	return ""
}

func (m *SecurityStatusResponse) GetSecurityTradingStatus() string {
	if m != nil {
		return m.SecurityTradingStatus
	}
	return ""
}

func (m *SecurityStatusResponse) GetFinancialStatus() string {
	if m != nil {
		return m.FinancialStatus
	}
	return ""
}

func (m *SecurityStatusResponse) GetCorporateAction() string {
	if m != nil {
		return m.CorporateAction
	}
	return ""
}

func (m *SecurityStatusResponse) GetHaltReason() string {
	if m != nil {
		return m.HaltReason
	}
	return ""
}

func (m *SecurityStatusResponse) GetInViewOfCommon() string {
	if m != nil {
		return m.InViewOfCommon
	}
	return ""
}

func (m *SecurityStatusResponse) GetDueToRelated() string {
	if m != nil {
		return m.DueToRelated
	}
	return ""
}

func (m *SecurityStatusResponse) GetBuyVolume() string {
	if m != nil {
		return m.BuyVolume
	}
	return ""
}

func (m *SecurityStatusResponse) GetSellVolume() string {
	if m != nil {
		return m.SellVolume
	}
	return ""
}

func (m *SecurityStatusResponse) GetHighPx() string {
	if m != nil {
		return m.HighPx
	}
	return ""
}

func (m *SecurityStatusResponse) GetLowPx() string {
	if m != nil {
		return m.LowPx
	}
	return ""
}

func (m *SecurityStatusResponse) GetLastPx() string {
	if m != nil {
		return m.LastPx
	}
	return ""
}

func (m *SecurityStatusResponse) GetTransactTime() string {
	if m != nil {
		return m.TransactTime
	}
	return ""
}

func (m *SecurityStatusResponse) GetAdjustment() string {
	if m != nil {
		return m.Adjustment
	}
	return ""
}

func (m *SecurityStatusResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SecurityStatusResponse) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *SecurityStatusResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Security Status Request Reject with fields, tags and descriptions and MsgType = AJ
type SecurityStatusRequestReject struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (324)
	SecurityStatusReqID string `protobuf:"bytes,2,opt,name=securityStatusReqID,proto3" json:"securityStatusReqID,omitempty"`
	// (560) Reason for rejecting the Security Status Request, The SecurityRejectReason field (Tag 560) in the Security Status Request Reject message (MsgType = AJ) indicates the reason for rejecting the Security Status Request. The values for the SecurityRejectReason field can vary depending on the implementation and version of the FIX protocol. Here are some common values that may be used:
	// 0: Unknown symbol
	// 1: Exchange closed
	// 2: Order exceeded limit
	// 3: Invalid request
	// 4: Unsupported request
	// 5: Unauthorized request
	// 6: Duplicate request
	// 7: System unavailable
	// 8: Security not found
	// 9: Other
	SecurityRejectReason string `protobuf:"bytes,3,opt,name=securityRejectReason,proto3" json:"securityRejectReason,omitempty"`
	// (58) Additional text or comment regarding the rejection
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,5,opt,name=trailer,proto3" json:"trailer,omitempty"`
	// owner
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *SecurityStatusRequestReject) Reset()         { *m = SecurityStatusRequestReject{} }
func (m *SecurityStatusRequestReject) String() string { return proto.CompactTextString(m) }
func (*SecurityStatusRequestReject) ProtoMessage()    {}
func (*SecurityStatusRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_c527dd44744e28ed, []int{3}
}
func (m *SecurityStatusRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityStatusRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityStatusRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityStatusRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityStatusRequestReject.Merge(m, src)
}
func (m *SecurityStatusRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *SecurityStatusRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityStatusRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityStatusRequestReject proto.InternalMessageInfo

func (m *SecurityStatusRequestReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SecurityStatusRequestReject) GetSecurityStatusReqID() string {
	if m != nil {
		return m.SecurityStatusReqID
	}
	return ""
}

func (m *SecurityStatusRequestReject) GetSecurityRejectReason() string {
	if m != nil {
		return m.SecurityRejectReason
	}
	return ""
}

func (m *SecurityStatusRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SecurityStatusRequestReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func (m *SecurityStatusRequestReject) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*SecurityStatus)(nil), "jim380.re.fix.SecurityStatus")
	proto.RegisterType((*SecurityStatusRequest)(nil), "jim380.re.fix.SecurityStatusRequest")
	proto.RegisterType((*SecurityStatusResponse)(nil), "jim380.re.fix.SecurityStatusResponse")
	proto.RegisterType((*SecurityStatusRequestReject)(nil), "jim380.re.fix.SecurityStatusRequestReject")
}

func init() { proto.RegisterFile("re/fix/security_status.proto", fileDescriptor_c527dd44744e28ed) }

var fileDescriptor_c527dd44744e28ed = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x4e, 0x2b, 0x37,
	0x14, 0x26, 0xdc, 0xfc, 0x10, 0xf3, 0x73, 0x6f, 0x7d, 0x93, 0xe0, 0x02, 0x8d, 0x50, 0x44, 0x2b,
	0x84, 0xd4, 0x04, 0x85, 0x2e, 0x50, 0x77, 0x6d, 0x59, 0x34, 0x12, 0x52, 0xd1, 0x24, 0x65, 0x81,
	0x54, 0x21, 0x67, 0xe6, 0x24, 0x31, 0x9a, 0xb1, 0x53, 0xdb, 0x23, 0x92, 0xb7, 0xa8, 0xfa, 0x24,
	0x7d, 0x8c, 0x2e, 0xd9, 0xb5, 0x9b, 0x4a, 0x15, 0xbc, 0x48, 0x35, 0xf6, 0x24, 0x61, 0x92, 0x09,
	0x90, 0x4a, 0x77, 0x97, 0xf3, 0x7d, 0xdf, 0x9c, 0x63, 0x9f, 0xf3, 0xd9, 0x0e, 0x3a, 0x90, 0xd0,
	0xe8, 0xb1, 0x51, 0x43, 0x81, 0x1b, 0x4a, 0xa6, 0xc7, 0xb7, 0x4a, 0x53, 0x1d, 0xaa, 0xfa, 0x50,
	0x0a, 0x2d, 0xf0, 0xf6, 0x1d, 0x0b, 0xce, 0xce, 0x4f, 0xeb, 0x12, 0xea, 0x3d, 0x36, 0xda, 0xfb,
	0x62, 0x22, 0xd6, 0x94, 0x7b, 0x54, 0x7a, 0xb7, 0x01, 0x28, 0x45, 0xfb, 0x60, 0xd5, 0xb5, 0xbf,
	0xd6, 0xd1, 0x4e, 0x3b, 0xce, 0xd3, 0x36, 0x69, 0xf0, 0x01, 0x2a, 0x2a, 0x50, 0x8a, 0x09, 0xde,
	0xba, 0x20, 0x99, 0xc3, 0xcc, 0x71, 0xd1, 0x99, 0x01, 0xf8, 0x06, 0x95, 0x55, 0x42, 0xef, 0xc0,
	0xaf, 0x21, 0x28, 0x4d, 0xd6, 0x0f, 0x33, 0xc7, 0x9b, 0xcd, 0xa3, 0x7a, 0xa2, 0x7c, 0xbd, 0x9d,
	0xa6, 0x75, 0xd2, 0x53, 0xe0, 0x5f, 0x50, 0x65, 0x9e, 0x50, 0x43, 0xc1, 0x15, 0x90, 0x77, 0x26,
	0xf9, 0x97, 0xaf, 0x24, 0xb7, 0x62, 0x67, 0x49, 0x12, 0xec, 0xa3, 0xfd, 0xd4, 0xba, 0x0e, 0xdc,
	0x81, 0xab, 0x49, 0xd6, 0xd4, 0x38, 0x79, 0xd3, 0x06, 0xcc, 0x17, 0xce, 0x4b, 0xe9, 0x6a, 0x7f,
	0x64, 0x51, 0x39, 0xf5, 0x63, 0xfc, 0x35, 0xca, 0x0f, 0x80, 0x7a, 0x20, 0x4d, 0x77, 0x37, 0x9b,
	0xe5, 0xb9, 0x92, 0x3f, 0x1a, 0xd2, 0x89, 0x45, 0xf8, 0x14, 0x7d, 0x5c, 0xc8, 0xd3, 0xba, 0x30,
	0xfd, 0x2e, 0x3a, 0x69, 0x14, 0xae, 0x22, 0xc4, 0xb8, 0xd2, 0x32, 0x0c, 0x80, 0x6b, 0xd3, 0xbb,
	0xa2, 0xf3, 0x0c, 0xc1, 0x47, 0x68, 0x9b, 0x8b, 0x9f, 0xb9, 0x07, 0xd2, 0x1f, 0x33, 0xde, 0x57,
	0x66, 0xeb, 0x45, 0x27, 0x09, 0xe2, 0x26, 0x2a, 0x85, 0xd3, 0xb0, 0x35, 0xcb, 0x97, 0x33, 0xe2,
	0x54, 0x0e, 0x57, 0x50, 0x9e, 0x8b, 0x4b, 0xe8, 0x2b, 0x92, 0x37, 0xaa, 0x38, 0x8a, 0x2a, 0xce,
	0xea, 0x5f, 0x42, 0x9f, 0x14, 0x6c, 0xc5, 0x04, 0x88, 0xf7, 0xd0, 0x86, 0x1b, 0x4a, 0x09, 0xdc,
	0x1d, 0x93, 0x0d, 0x23, 0x98, 0xc6, 0xf8, 0x1c, 0xed, 0xaa, 0xb0, 0xab, 0x5c, 0xc9, 0x86, 0x9a,
	0x09, 0x1e, 0xf7, 0xb2, 0x33, 0x1e, 0x02, 0x29, 0x1a, 0xe9, 0x32, 0x1a, 0x9f, 0xa0, 0x0f, 0x5a,
	0x52, 0x8f, 0xf1, 0x7e, 0x7b, 0x6a, 0x6b, 0x64, 0x3e, 0x59, 0xc0, 0xa3, 0x5e, 0x27, 0xb1, 0x76,
	0xd8, 0x6d, 0x5d, 0x90, 0x4d, 0xdb, 0xeb, 0x14, 0x0a, 0x9f, 0xa2, 0x82, 0x96, 0x94, 0xf9, 0x20,
	0xc9, 0x96, 0x99, 0x66, 0x65, 0x6e, 0x9a, 0x1d, 0xcb, 0x3a, 0x13, 0x19, 0x26, 0xa8, 0xe0, 0x4a,
	0xa0, 0x5a, 0x48, 0xb2, 0x6d, 0xf2, 0x4e, 0xc2, 0xda, 0x3f, 0x05, 0x54, 0x49, 0xf7, 0xf4, 0xff,
	0xf0, 0x8c, 0x5a, 0xee, 0x99, 0x14, 0x6a, 0xd1, 0x13, 0xef, 0x56, 0xf1, 0x44, 0xf6, 0x4d, 0x9e,
	0xc8, 0xbd, 0xec, 0x89, 0xfc, 0x6b, 0x9e, 0x28, 0xcc, 0x79, 0x22, 0x6d, 0xb2, 0x1b, 0xab, 0x4d,
	0xb6, 0xb8, 0x7c, 0xb2, 0x66, 0xaf, 0x4a, 0xf8, 0xcc, 0x65, 0x1a, 0xbc, 0x16, 0xf7, 0x98, 0x6b,
	0x86, 0x86, 0x26, 0x7b, 0x5d, 0xe4, 0xf0, 0x37, 0xb3, 0xdb, 0xb1, 0x13, 0xa7, 0x34, 0x3d, 0x8e,
	0x1d, 0x94, 0x4e, 0xe2, 0x63, 0xf4, 0xbe, 0xc7, 0x38, 0xe5, 0x2e, 0xa3, 0x7e, 0xac, 0xdf, 0x32,
	0xfa, 0x79, 0x38, 0x52, 0xba, 0x42, 0x0e, 0x85, 0xa4, 0x1a, 0xbe, 0x73, 0x23, 0xa7, 0xc7, 0x1e,
	0x9a, 0x87, 0xa3, 0x3b, 0x60, 0x40, 0x7d, 0xed, 0x00, 0x55, 0x82, 0x93, 0x1d, 0x7b, 0x07, 0xcc,
	0x10, 0xfc, 0x15, 0xda, 0x61, 0xfc, 0x9a, 0xc1, 0xfd, 0x4f, 0xbd, 0x1f, 0x44, 0x10, 0x08, 0x4e,
	0xde, 0x1b, 0xcd, 0x1c, 0x8a, 0x6b, 0x68, 0xcb, 0x0b, 0xa1, 0x23, 0x1c, 0xf0, 0xa9, 0x06, 0x8f,
	0x7c, 0x30, 0xaa, 0x04, 0x16, 0xbd, 0x18, 0xdd, 0x70, 0x7c, 0x2d, 0xfc, 0x30, 0x00, 0xf2, 0x99,
	0x7d, 0x31, 0xa6, 0x40, 0xb4, 0x12, 0x05, 0xbe, 0x1f, 0xd3, 0xd8, 0xae, 0x64, 0x86, 0x44, 0xfe,
	0x18, 0xb0, 0xfe, 0xe0, 0x6a, 0x44, 0x3e, 0x5a, 0x7f, 0xd8, 0x08, 0x97, 0x50, 0xce, 0x17, 0xf7,
	0x57, 0x23, 0x52, 0x32, 0xb0, 0x0d, 0x22, 0xb5, 0x4f, 0x95, 0xbe, 0x1a, 0x91, 0xb2, 0x55, 0xdb,
	0x28, 0x5a, 0xa7, 0x96, 0x94, 0x2b, 0xea, 0xea, 0x0e, 0x0b, 0x80, 0x54, 0xec, 0x3a, 0x9f, 0x63,
	0xd1, 0x4a, 0xa8, 0x77, 0x17, 0x2a, 0x6d, 0x3c, 0xbb, 0x6b, 0x57, 0x32, 0x43, 0x30, 0x46, 0x59,
	0x0d, 0x23, 0x4d, 0x88, 0x61, 0xcc, 0xef, 0xe7, 0xe7, 0xfb, 0xf3, 0x95, 0xcf, 0xf7, 0x5e, 0xf2,
	0x7c, 0xff, 0xbe, 0x8e, 0xf6, 0x5f, 0x78, 0x4f, 0x3e, 0xfd, 0x21, 0x6f, 0xa2, 0xd2, 0x04, 0x8e,
	0x9f, 0x30, 0x6b, 0x0f, 0x7b, 0xd6, 0x53, 0xb9, 0x69, 0x53, 0xb2, 0xe9, 0x4d, 0xc9, 0xad, 0xdc,
	0x94, 0x7c, 0xa2, 0x29, 0xdf, 0x7f, 0xfb, 0xe7, 0x63, 0x35, 0xf3, 0xf0, 0x58, 0xcd, 0xfc, 0xfb,
	0x58, 0xcd, 0xfc, 0xf6, 0x54, 0x5d, 0x7b, 0x78, 0xaa, 0xae, 0xfd, 0xfd, 0x54, 0x5d, 0xbb, 0x39,
	0xec, 0x33, 0x3d, 0x08, 0xbb, 0x75, 0x57, 0x04, 0x0d, 0x9b, 0xbe, 0xe1, 0x40, 0x63, 0x64, 0xfe,
	0xce, 0xe8, 0xf1, 0x10, 0x54, 0x37, 0x6f, 0xfe, 0xc4, 0x9c, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x97, 0xcb, 0x59, 0x97, 0x12, 0x09, 0x00, 0x00,
}

func (m *SecurityStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecurityStatusRequestReject != nil {
		{
			size, err := m.SecurityStatusRequestReject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SecurityStatusResponse != nil {
		{
			size, err := m.SecurityStatusResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SecurityStatusRequest != nil {
		{
			size, err := m.SecurityStatusRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SubscriptionRequestType) > 0 {
		i -= len(m.SubscriptionRequestType)
		copy(dAtA[i:], m.SubscriptionRequestType)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SubscriptionRequestType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InstrumentLeg) > 0 {
		i -= len(m.InstrumentLeg)
		copy(dAtA[i:], m.InstrumentLeg)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.InstrumentLeg)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NoLegs) > 0 {
		i -= len(m.NoLegs)
		copy(dAtA[i:], m.NoLegs)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.NoLegs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UnderlyingInstrument) > 0 {
		i -= len(m.UnderlyingInstrument)
		copy(dAtA[i:], m.UnderlyingInstrument)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.UnderlyingInstrument)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoUnderlyings) > 0 {
		i -= len(m.NoUnderlyings)
		copy(dAtA[i:], m.NoUnderlyings)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.NoUnderlyings)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Instrument) > 0 {
		i -= len(m.Instrument)
		copy(dAtA[i:], m.Instrument)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Instrument)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityStatusReqID) > 0 {
		i -= len(m.SecurityStatusReqID)
		copy(dAtA[i:], m.SecurityStatusReqID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SecurityStatusReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd2
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.Adjustment) > 0 {
		i -= len(m.Adjustment)
		copy(dAtA[i:], m.Adjustment)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Adjustment)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.TransactTime) > 0 {
		i -= len(m.TransactTime)
		copy(dAtA[i:], m.TransactTime)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.TransactTime)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.LastPx) > 0 {
		i -= len(m.LastPx)
		copy(dAtA[i:], m.LastPx)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.LastPx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.LowPx) > 0 {
		i -= len(m.LowPx)
		copy(dAtA[i:], m.LowPx)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.LowPx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.HighPx) > 0 {
		i -= len(m.HighPx)
		copy(dAtA[i:], m.HighPx)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.HighPx)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.SellVolume) > 0 {
		i -= len(m.SellVolume)
		copy(dAtA[i:], m.SellVolume)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SellVolume)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.BuyVolume) > 0 {
		i -= len(m.BuyVolume)
		copy(dAtA[i:], m.BuyVolume)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.BuyVolume)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.DueToRelated) > 0 {
		i -= len(m.DueToRelated)
		copy(dAtA[i:], m.DueToRelated)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.DueToRelated)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.InViewOfCommon) > 0 {
		i -= len(m.InViewOfCommon)
		copy(dAtA[i:], m.InViewOfCommon)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.InViewOfCommon)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.HaltReason) > 0 {
		i -= len(m.HaltReason)
		copy(dAtA[i:], m.HaltReason)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.HaltReason)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.CorporateAction) > 0 {
		i -= len(m.CorporateAction)
		copy(dAtA[i:], m.CorporateAction)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.CorporateAction)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.FinancialStatus) > 0 {
		i -= len(m.FinancialStatus)
		copy(dAtA[i:], m.FinancialStatus)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.FinancialStatus)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SecurityTradingStatus) > 0 {
		i -= len(m.SecurityTradingStatus)
		copy(dAtA[i:], m.SecurityTradingStatus)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SecurityTradingStatus)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UnsolicitedIndicator) > 0 {
		i -= len(m.UnsolicitedIndicator)
		copy(dAtA[i:], m.UnsolicitedIndicator)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.UnsolicitedIndicator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Currency) > 0 {
		i -= len(m.Currency)
		copy(dAtA[i:], m.Currency)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Currency)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InstrumentLeg) > 0 {
		i -= len(m.InstrumentLeg)
		copy(dAtA[i:], m.InstrumentLeg)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.InstrumentLeg)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NoLegs) > 0 {
		i -= len(m.NoLegs)
		copy(dAtA[i:], m.NoLegs)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.NoLegs)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UnderlyingInstrument) > 0 {
		i -= len(m.UnderlyingInstrument)
		copy(dAtA[i:], m.UnderlyingInstrument)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.UnderlyingInstrument)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NoUnderlyings) > 0 {
		i -= len(m.NoUnderlyings)
		copy(dAtA[i:], m.NoUnderlyings)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.NoUnderlyings)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityStatusReqID) > 0 {
		i -= len(m.SecurityStatusReqID)
		copy(dAtA[i:], m.SecurityStatusReqID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SecurityStatusReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityStatusRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityStatusRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityStatusRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityRejectReason) > 0 {
		i -= len(m.SecurityRejectReason)
		copy(dAtA[i:], m.SecurityRejectReason)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SecurityRejectReason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityStatusReqID) > 0 {
		i -= len(m.SecurityStatusReqID)
		copy(dAtA[i:], m.SecurityStatusReqID)
		i = encodeVarintSecurityStatus(dAtA, i, uint64(len(m.SecurityStatusReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecurityStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecurityStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecurityStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	if m.SecurityStatusRequest != nil {
		l = m.SecurityStatusRequest.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	if m.SecurityStatusResponse != nil {
		l = m.SecurityStatusResponse.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	if m.SecurityStatusRequestReject != nil {
		l = m.SecurityStatusRequestReject.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	return n
}

func (m *SecurityStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.SecurityStatusReqID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Instrument)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.NoUnderlyings)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.UnderlyingInstrument)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.NoLegs)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.InstrumentLeg)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.SubscriptionRequestType)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	return n
}

func (m *SecurityStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.SecurityStatusReqID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.NoUnderlyings)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.UnderlyingInstrument)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.NoLegs)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.InstrumentLeg)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.UnsolicitedIndicator)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.SecurityTradingStatus)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.FinancialStatus)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.CorporateAction)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.HaltReason)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.InViewOfCommon)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.DueToRelated)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.BuyVolume)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.SellVolume)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.HighPx)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.LowPx)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.LastPx)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.TransactTime)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Adjustment)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 2 + l + sovSecurityStatus(uint64(l))
	}
	return n
}

func (m *SecurityStatusRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.SecurityStatusReqID)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.SecurityRejectReason)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSecurityStatus(uint64(l))
	}
	return n
}

func sovSecurityStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecurityStatus(x uint64) (n int) {
	return sovSecurityStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecurityStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityStatusRequest == nil {
				m.SecurityStatusRequest = &SecurityStatusRequest{}
			}
			if err := m.SecurityStatusRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityStatusResponse == nil {
				m.SecurityStatusResponse = &SecurityStatusResponse{}
			}
			if err := m.SecurityStatusResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusRequestReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityStatusRequestReject == nil {
				m.SecurityStatusRequestReject = &SecurityStatusRequestReject{}
			}
			if err := m.SecurityStatusRequestReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnderlyings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoUnderlyings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingInstrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingInstrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLegs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoLegs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstrumentLeg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstrumentLeg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoUnderlyings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoUnderlyings = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingInstrument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingInstrument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLegs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoLegs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstrumentLeg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstrumentLeg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsolicitedIndicator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnsolicitedIndicator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityTradingStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityTradingStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinancialStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinancialStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorporateAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CorporateAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaltReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HaltReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InViewOfCommon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InViewOfCommon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueToRelated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DueToRelated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellVolume = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adjustment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adjustment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityStatusRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityStatusRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityStatusRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityStatusReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityStatusReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityRejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityRejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecurityStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecurityStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecurityStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecurityStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecurityStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecurityStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecurityStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecurityStatus = fmt.Errorf("proto: unexpected end of group")
)
