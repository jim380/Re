swagger: '2.0'
info:
  title: HTTP API Console
  name: ''
  description: ''
paths:
  /cosmos/adminmodule/adminmodule/admins:
    get:
      summary: Queries a list of admins items.
      operationId: CosmosAdminmoduleAdminmoduleAdmins
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              admins:
                type: array
                items:
                  type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/adminmodule/adminmodule/archivedproposals:
    get:
      summary: Queries a list of archived proposals.
      operationId: CosmosAdminmoduleAdminmoduleArchivedProposals
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: array
                items:
                  type: object
                  properties:
                    proposal_id:
                      type: string
                      format: uint64
                    content:
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    status:
                      type: string
                      enum:
                        - PROPOSAL_STATUS_UNSPECIFIED
                        - PROPOSAL_STATUS_DEPOSIT_PERIOD
                        - PROPOSAL_STATUS_VOTING_PERIOD
                        - PROPOSAL_STATUS_PASSED
                        - PROPOSAL_STATUS_REJECTED
                        - PROPOSAL_STATUS_FAILED
                      default: PROPOSAL_STATUS_UNSPECIFIED
                      description: >-
                        ProposalStatus enumerates the valid statuses of a
                        proposal.

                         - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                         - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                        period.
                         - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                        period.
                         - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                        passed.
                         - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                        been rejected.
                         - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                        failed.
                    final_tally_result:
                      type: object
                      properties:
                        'yes':
                          type: string
                        abstain:
                          type: string
                        'no':
                          type: string
                        no_with_veto:
                          type: string
                      description: >-
                        TallyResult defines a standard tally for a governance
                        proposal.
                    submit_time:
                      type: string
                      format: date-time
                    deposit_end_time:
                      type: string
                      format: date-time
                    total_deposit:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                          amount:
                            type: string
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                    voting_start_time:
                      type: string
                      format: date-time
                    voting_end_time:
                      type: string
                      format: date-time
                  description: >-
                    Proposal defines the core field members of a governance
                    proposal.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/auth/v1beta1/accounts:
    get:
      summary: Accounts returns all the existing accounts
      description: 'Since: cosmos-sdk 0.43'
      operationId: CosmosAuthV1Beta1Accounts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              accounts:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                title: accounts are the existing accounts
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAccountsResponse is the response type for the Query/Accounts
              RPC method.


              Since: cosmos-sdk 0.43
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/auth/v1beta1/accounts/{address}:
    get:
      summary: Account returns account details based on address.
      operationId: CosmosAuthV1Beta1Account
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                description: account defines the account of the corresponding address.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
            description: >-
              QueryAccountResponse is the response type for the Query/Account
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address defines the address to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/module_accounts/{name}:
    get:
      summary: ModuleAccountByName returns the module account info by module name
      operationId: CosmosAuthV1Beta1ModuleAccountByName
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              account:
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: >-
              QueryModuleAccountByNameResponse is the response type for the
              Query/ModuleAccountByName RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: name
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/auth/v1beta1/params:
    get:
      summary: Params queries all parameters.
      operationId: CosmosAuthV1Beta1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  max_memo_characters:
                    type: string
                    format: uint64
                  tx_sig_limit:
                    type: string
                    format: uint64
                  tx_size_cost_per_byte:
                    type: string
                    format: uint64
                  sig_verify_cost_ed25519:
                    type: string
                    format: uint64
                  sig_verify_cost_secp256k1:
                    type: string
                    format: uint64
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/authz/v1beta1/grants:
    get:
      summary: Returns list of `Authorization`, granted to the grantee by the granter.
      operationId: CosmosAuthzV1Beta1Grants
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              grants:
                type: array
                items:
                  type: object
                  properties:
                    authorization:
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    expiration:
                      type: string
                      format: date-time
                  description: |-
                    Grant gives permissions to execute
                    the provide method with expiration time.
                description: >-
                  authorizations is a list of grants granted for grantee by
                  granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGrantsResponse is the response type for the
              Query/Authorizations RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          in: query
          required: false
          type: string
        - name: grantee
          in: query
          required: false
          type: string
        - name: msg_type_url
          description: >-
            Optional, msg_type_url, when set, will query only grants matching
            given msg type.
          in: query
          required: false
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/authz/v1beta1/grants/grantee/{grantee}:
    get:
      summary: GranteeGrants returns a list of `GrantAuthorization` by grantee.
      description: 'Since: cosmos-sdk 0.45.2'
      operationId: CosmosAuthzV1Beta1GranteeGrants
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              grants:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                    grantee:
                      type: string
                    authorization:
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    expiration:
                      type: string
                      format: date-time
                  description: 'Since: cosmos-sdk 0.45.2'
                  title: >-
                    GrantAuthorization extends a grant with both the addresses
                    of the grantee and granter.

                    It is used in genesis.proto and query.proto
                description: grants is a list of grants granted to the grantee.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGranteeGrantsResponse is the response type for the
              Query/GranteeGrants RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: grantee
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/authz/v1beta1/grants/granter/{granter}:
    get:
      summary: GranterGrants returns list of `GrantAuthorization`, granted by granter.
      description: 'Since: cosmos-sdk 0.45.2'
      operationId: CosmosAuthzV1Beta1GranterGrants
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              grants:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                    grantee:
                      type: string
                    authorization:
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    expiration:
                      type: string
                      format: date-time
                  description: 'Since: cosmos-sdk 0.45.2'
                  title: >-
                    GrantAuthorization extends a grant with both the addresses
                    of the grantee and granter.

                    It is used in genesis.proto and query.proto
                description: grants is a list of grants granted by the granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryGranterGrantsResponse is the response type for the
              Query/GranterGrants RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/balances/{address}:
    get:
      summary: AllBalances queries the balance of all coins for a single account.
      operationId: CosmosBankV1Beta1AllBalances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: balances is the balances of all the coins.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllBalancesResponse is the response type for the
              Query/AllBalances RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/balances/{address}/by_denom:
    get:
      summary: Balance queries the balance of a single coin for a single account.
      operationId: CosmosBankV1Beta1Balance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balance:
                description: balance is the balance of the coin.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
            description: >-
              QueryBalanceResponse is the response type for the Query/Balance
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: address
          description: address is the address to query balances for.
          in: path
          required: true
          type: string
        - name: denom
          description: denom is the coin denom to query balances for.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      summary: >-
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
      operationId: CosmosBankV1Beta1DenomsMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadatas:
                type: array
                items:
                  type: object
                  properties:
                    description:
                      type: string
                    denom_units:
                      type: array
                      items:
                        type: object
                        properties:
                          denom:
                            type: string
                            description: >-
                              denom represents the string name of the given
                              denom unit (e.g uatom).
                          exponent:
                            type: integer
                            format: int64
                            description: >-
                              exponent represents power of 10 exponent that one
                              must

                              raise the base_denom to in order to equal the
                              given DenomUnit's denom

                              1 denom = 1^exponent base_denom

                              (e.g. with a base_denom of uatom, one can create a
                              DenomUnit of 'atom' with

                              exponent = 6, thus: 1 atom = 10^6 uatom).
                          aliases:
                            type: array
                            items:
                              type: string
                            title: >-
                              aliases is a list of string aliases for the given
                              denom
                        description: |-
                          DenomUnit represents a struct that describes a given
                          denomination unit of the basic token.
                      title: >-
                        denom_units represents the list of DenomUnit's for a
                        given coin
                    base:
                      type: string
                      description: >-
                        base represents the base denom (should be the DenomUnit
                        with exponent = 0).
                    display:
                      type: string
                      description: |-
                        display indicates the suggested denom that should be
                        displayed in clients.
                    name:
                      type: string
                      description: 'Since: cosmos-sdk 0.43'
                      title: 'name defines the name of the token (eg: Cosmos Atom)'
                    symbol:
                      type: string
                      description: >-
                        symbol is the token symbol usually shown on exchanges
                        (eg: ATOM). This can

                        be the same as the display.


                        Since: cosmos-sdk 0.43
                  description: |-
                    Metadata represents a struct that describes
                    a basic token.
                description: >-
                  metadata provides the client information for all the
                  registered tokens.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryDenomsMetadataResponse is the response type for the
              Query/DenomsMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/denoms_metadata/{denom}:
    get:
      summary: DenomsMetadata queries the client metadata of a given coin denomination.
      operationId: CosmosBankV1Beta1DenomMetadata
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              metadata:
                description: >-
                  metadata describes and provides all the client information for
                  the requested token.
                type: object
                properties:
                  description:
                    type: string
                  denom_units:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                          description: >-
                            denom represents the string name of the given denom
                            unit (e.g uatom).
                        exponent:
                          type: integer
                          format: int64
                          description: >-
                            exponent represents power of 10 exponent that one
                            must

                            raise the base_denom to in order to equal the given
                            DenomUnit's denom

                            1 denom = 1^exponent base_denom

                            (e.g. with a base_denom of uatom, one can create a
                            DenomUnit of 'atom' with

                            exponent = 6, thus: 1 atom = 10^6 uatom).
                        aliases:
                          type: array
                          items:
                            type: string
                          title: >-
                            aliases is a list of string aliases for the given
                            denom
                      description: |-
                        DenomUnit represents a struct that describes a given
                        denomination unit of the basic token.
                    title: >-
                      denom_units represents the list of DenomUnit's for a given
                      coin
                  base:
                    type: string
                    description: >-
                      base represents the base denom (should be the DenomUnit
                      with exponent = 0).
                  display:
                    type: string
                    description: |-
                      display indicates the suggested denom that should be
                      displayed in clients.
                  name:
                    type: string
                    description: 'Since: cosmos-sdk 0.43'
                    title: 'name defines the name of the token (eg: Cosmos Atom)'
                  symbol:
                    type: string
                    description: >-
                      symbol is the token symbol usually shown on exchanges (eg:
                      ATOM). This can

                      be the same as the display.


                      Since: cosmos-sdk 0.43
            description: >-
              QueryDenomMetadataResponse is the response type for the
              Query/DenomMetadata RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: denom
          description: denom is the coin denom to query the metadata for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/bank/v1beta1/params:
    get:
      summary: Params queries the parameters of x/bank module.
      operationId: CosmosBankV1Beta1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  send_enabled:
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        enabled:
                          type: boolean
                      description: >-
                        SendEnabled maps coin denom to a send_enabled status
                        (whether a denom is

                        sendable).
                  default_send_enabled:
                    type: boolean
                description: Params defines the parameters for the bank module.
            description: >-
              QueryParamsResponse defines the response type for querying x/bank
              parameters.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
  /cosmos/bank/v1beta1/spendable_balances/{address}:
    get:
      summary: |-
        SpendableBalances queries the spenable balance of all coins for a single
        account.
      operationId: CosmosBankV1Beta1SpendableBalances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              balances:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                description: balances is the spendable balances of all the coins.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QuerySpendableBalancesResponse defines the gRPC response structure
              for querying

              an account's spendable balances.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: address
          description: address is the address to query spendable balances for.
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/supply:
    get:
      summary: TotalSupply queries the total supply of all coins.
      operationId: CosmosBankV1Beta1TotalSupply
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              supply:
                type: array
                items:
                  type: object
                  properties:
                    denom:
                      type: string
                    amount:
                      type: string
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                title: supply is the supply of the coins
              pagination:
                description: |-
                  pagination defines the pagination in the response.

                  Since: cosmos-sdk 0.43
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryTotalSupplyResponse is the response type for the
              Query/TotalSupply RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/bank/v1beta1/supply/{denom}:
    get:
      summary: SupplyOf queries the supply of a single coin.
      operationId: CosmosBankV1Beta1SupplyOf
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              amount:
                description: amount is the supply of the coin.
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
            description: >-
              QuerySupplyOfResponse is the response type for the Query/SupplyOf
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: denom
          description: denom is the coin denom to query balances for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/base/tendermint/v1beta1/blocks/latest:
    get:
      summary: GetLatestBlock returns the latest block.
      operationId: CosmosBaseTendermintV1Beta1GetLatestBlock
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        description: commit from validators from the last block
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                        title: transactions
                      validators_hash:
                        type: string
                        format: byte
                        description: validators for the current block
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                        title: validators for the next block
                      consensus_hash:
                        type: string
                        format: byte
                        title: consensus params for current block
                      app_hash:
                        type: string
                        format: byte
                        title: state after txs from the previous block
                      last_results_hash:
                        type: string
                        format: byte
                        title: >-
                          root hash of all results from the txs from the
                          previous block
                      evidence_hash:
                        type: string
                        format: byte
                        description: evidence included in the block
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                        title: original proposer of the block
                    description: Header defines the structure of a block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                      description: zero if vote is nil.
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                      description: zero if vote is nil.
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              description: >-
                                                commit from validators from the last
                                                block
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                              title: transactions
                                            validators_hash:
                                              type: string
                                              format: byte
                                              description: validators for the current block
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                              title: validators for the next block
                                            consensus_hash:
                                              type: string
                                              format: byte
                                              title: consensus params for current block
                                            app_hash:
                                              type: string
                                              format: byte
                                              title: state after txs from the previous block
                                            last_results_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                root hash of all results from the txs
                                                from the previous block
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              description: evidence included in the block
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                              title: original proposer of the block
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
            description: >-
              GetLatestBlockResponse is the response type for the
              Query/GetLatestBlock RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/blocks/{height}:
    get:
      summary: GetBlockByHeight queries block for given height.
      operationId: CosmosBaseTendermintV1Beta1GetBlockByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              block:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        description: commit from validators from the last block
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                        title: transactions
                      validators_hash:
                        type: string
                        format: byte
                        description: validators for the current block
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                        title: validators for the next block
                      consensus_hash:
                        type: string
                        format: byte
                        title: consensus params for current block
                      app_hash:
                        type: string
                        format: byte
                        title: state after txs from the previous block
                      last_results_hash:
                        type: string
                        format: byte
                        title: >-
                          root hash of all results from the txs from the
                          previous block
                      evidence_hash:
                        type: string
                        format: byte
                        description: evidence included in the block
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                        title: original proposer of the block
                    description: Header defines the structure of a block header.
                  data:
                    type: object
                    properties:
                      txs:
                        type: array
                        items:
                          type: string
                          format: byte
                        description: >-
                          Txs that will be applied by state @ block.Height+1.

                          NOTE: not all txs here are valid.  We're just agreeing
                          on the order first.

                          This means that block.AppHash does not include these
                          txs.
                    title: >-
                      Data contains the set of transactions included in the
                      block
                  evidence:
                    type: object
                    properties:
                      evidence:
                        type: array
                        items:
                          type: object
                          properties:
                            duplicate_vote_evidence:
                              type: object
                              properties:
                                vote_a:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                      description: zero if vote is nil.
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                vote_b:
                                  type: object
                                  properties:
                                    type:
                                      type: string
                                      enum:
                                        - SIGNED_MSG_TYPE_UNKNOWN
                                        - SIGNED_MSG_TYPE_PREVOTE
                                        - SIGNED_MSG_TYPE_PRECOMMIT
                                        - SIGNED_MSG_TYPE_PROPOSAL
                                      default: SIGNED_MSG_TYPE_UNKNOWN
                                      description: >-
                                        SignedMsgType is a type of signed
                                        message in the consensus.

                                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                      description: zero if vote is nil.
                                    timestamp:
                                      type: string
                                      format: date-time
                                    validator_address:
                                      type: string
                                      format: byte
                                    validator_index:
                                      type: integer
                                      format: int32
                                    signature:
                                      type: string
                                      format: byte
                                  description: >-
                                    Vote represents a prevote, precommit, or
                                    commit vote from validators for

                                    consensus.
                                total_voting_power:
                                  type: string
                                  format: int64
                                validator_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                DuplicateVoteEvidence contains evidence of a
                                validator signed two conflicting votes.
                            light_client_attack_evidence:
                              type: object
                              properties:
                                conflicting_block:
                                  type: object
                                  properties:
                                    signed_header:
                                      type: object
                                      properties:
                                        header:
                                          type: object
                                          properties:
                                            version:
                                              title: basic block info
                                              type: object
                                              properties:
                                                block:
                                                  type: string
                                                  format: uint64
                                                app:
                                                  type: string
                                                  format: uint64
                                              description: >-
                                                Consensus captures the consensus rules
                                                for processing a block in the
                                                blockchain,

                                                including all blockchain data structures
                                                and the rules of the application's

                                                state transition machine.
                                            chain_id:
                                              type: string
                                            height:
                                              type: string
                                              format: int64
                                            time:
                                              type: string
                                              format: date-time
                                            last_block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            last_commit_hash:
                                              type: string
                                              format: byte
                                              description: >-
                                                commit from validators from the last
                                                block
                                              title: hashes of block data
                                            data_hash:
                                              type: string
                                              format: byte
                                              title: transactions
                                            validators_hash:
                                              type: string
                                              format: byte
                                              description: validators for the current block
                                              title: >-
                                                hashes from the app output from the prev
                                                block
                                            next_validators_hash:
                                              type: string
                                              format: byte
                                              title: validators for the next block
                                            consensus_hash:
                                              type: string
                                              format: byte
                                              title: consensus params for current block
                                            app_hash:
                                              type: string
                                              format: byte
                                              title: state after txs from the previous block
                                            last_results_hash:
                                              type: string
                                              format: byte
                                              title: >-
                                                root hash of all results from the txs
                                                from the previous block
                                            evidence_hash:
                                              type: string
                                              format: byte
                                              description: evidence included in the block
                                              title: consensus info
                                            proposer_address:
                                              type: string
                                              format: byte
                                              title: original proposer of the block
                                          description: >-
                                            Header defines the structure of a block
                                            header.
                                        commit:
                                          type: object
                                          properties:
                                            height:
                                              type: string
                                              format: int64
                                            round:
                                              type: integer
                                              format: int32
                                            block_id:
                                              type: object
                                              properties:
                                                hash:
                                                  type: string
                                                  format: byte
                                                part_set_header:
                                                  type: object
                                                  properties:
                                                    total:
                                                      type: integer
                                                      format: int64
                                                    hash:
                                                      type: string
                                                      format: byte
                                                  title: PartsetHeader
                                              title: BlockID
                                            signatures:
                                              type: array
                                              items:
                                                type: object
                                                properties:
                                                  block_id_flag:
                                                    type: string
                                                    enum:
                                                      - BLOCK_ID_FLAG_UNKNOWN
                                                      - BLOCK_ID_FLAG_ABSENT
                                                      - BLOCK_ID_FLAG_COMMIT
                                                      - BLOCK_ID_FLAG_NIL
                                                    default: BLOCK_ID_FLAG_UNKNOWN
                                                    title: >-
                                                      BlockIdFlag indicates which BlcokID the
                                                      signature is for
                                                  validator_address:
                                                    type: string
                                                    format: byte
                                                  timestamp:
                                                    type: string
                                                    format: date-time
                                                  signature:
                                                    type: string
                                                    format: byte
                                                description: >-
                                                  CommitSig is a part of the Vote included
                                                  in a Commit.
                                          description: >-
                                            Commit contains the evidence that a
                                            block was committed by a set of
                                            validators.
                                    validator_set:
                                      type: object
                                      properties:
                                        validators:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              address:
                                                type: string
                                                format: byte
                                              pub_key:
                                                type: object
                                                properties:
                                                  ed25519:
                                                    type: string
                                                    format: byte
                                                  secp256k1:
                                                    type: string
                                                    format: byte
                                                title: >-
                                                  PublicKey defines the keys available for
                                                  use with Validators
                                              voting_power:
                                                type: string
                                                format: int64
                                              proposer_priority:
                                                type: string
                                                format: int64
                                        proposer:
                                          type: object
                                          properties:
                                            address:
                                              type: string
                                              format: byte
                                            pub_key:
                                              type: object
                                              properties:
                                                ed25519:
                                                  type: string
                                                  format: byte
                                                secp256k1:
                                                  type: string
                                                  format: byte
                                              title: >-
                                                PublicKey defines the keys available for
                                                use with Validators
                                            voting_power:
                                              type: string
                                              format: int64
                                            proposer_priority:
                                              type: string
                                              format: int64
                                        total_voting_power:
                                          type: string
                                          format: int64
                                common_height:
                                  type: string
                                  format: int64
                                byzantine_validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                                timestamp:
                                  type: string
                                  format: date-time
                              description: >-
                                LightClientAttackEvidence contains evidence of a
                                set of validators attempting to mislead a light
                                client.
                  last_commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
            description: >-
              GetBlockByHeightResponse is the response type for the
              Query/GetBlockByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/node_info:
    get:
      summary: GetNodeInfo queries the current node info.
      operationId: CosmosBaseTendermintV1Beta1GetNodeInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              default_node_info:
                type: object
                properties:
                  protocol_version:
                    type: object
                    properties:
                      p2p:
                        type: string
                        format: uint64
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                  default_node_id:
                    type: string
                  listen_addr:
                    type: string
                  network:
                    type: string
                  version:
                    type: string
                  channels:
                    type: string
                    format: byte
                  moniker:
                    type: string
                  other:
                    type: object
                    properties:
                      tx_index:
                        type: string
                      rpc_address:
                        type: string
              application_version:
                type: object
                properties:
                  name:
                    type: string
                  app_name:
                    type: string
                  version:
                    type: string
                  git_commit:
                    type: string
                  build_tags:
                    type: string
                  go_version:
                    type: string
                  build_deps:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          title: module path
                        version:
                          type: string
                          title: module version
                        sum:
                          type: string
                          title: checksum
                      title: Module is the type for VersionInfo
                  cosmos_sdk_version:
                    type: string
                    title: 'Since: cosmos-sdk 0.43'
                description: VersionInfo is the type for the GetNodeInfoResponse message.
            description: >-
              GetNodeInfoResponse is the request type for the Query/GetNodeInfo
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/syncing:
    get:
      summary: GetSyncing queries node syncing.
      operationId: CosmosBaseTendermintV1Beta1GetSyncing
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              syncing:
                type: boolean
            description: >-
              GetSyncingResponse is the response type for the Query/GetSyncing
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/latest:
    get:
      summary: GetLatestValidatorSet queries latest validator-set.
      operationId: CosmosBaseTendermintV1Beta1GetLatestValidatorSet
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              GetLatestValidatorSetResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /cosmos/base/tendermint/v1beta1/validatorsets/{height}:
    get:
      summary: GetValidatorSetByHeight queries validator-set at a given height.
      operationId: CosmosBaseTendermintV1Beta1GetValidatorSetByHeight
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              block_height:
                type: string
                format: int64
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    pub_key:
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
                  description: Validator is the type for the validator-set.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              GetValidatorSetByHeightResponse is the response type for the
              Query/GetValidatorSetByHeight RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          in: path
          required: true
          type: string
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /cosmos/evidence/v1beta1/evidence:
    get:
      summary: AllEvidence queries all evidence.
      operationId: CosmosEvidenceV1Beta1AllEvidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
                description: evidence returns all evidences.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllEvidenceResponse is the response type for the
              Query/AllEvidence RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/evidence/v1beta1/evidence/{evidence_hash}:
    get:
      summary: Evidence queries evidence based on evidence hash.
      operationId: CosmosEvidenceV1Beta1Evidence
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              evidence:
                description: evidence returns the requested evidence.
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
            description: >-
              QueryEvidenceResponse is the response type for the Query/Evidence
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: evidence_hash
          description: evidence_hash defines the hash of the requested evidence.
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  /cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}:
    get:
      summary: Allowance returns fee granted to the grantee by the granter.
      operationId: CosmosFeegrantV1Beta1Allowance
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              allowance:
                description: allowance is a allowance granted for grantee by granter.
                type: object
                properties:
                  granter:
                    type: string
                    description: >-
                      granter is the address of the user granting an allowance
                      of their funds.
                  grantee:
                    type: string
                    description: >-
                      grantee is the address of the user being granted an
                      allowance of another user's funds.
                  allowance:
                    description: allowance can be any of basic and filtered fee allowance.
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                title: >-
                  Grant is stored in the KVStore to record a grant with full
                  context
            description: >-
              QueryAllowanceResponse is the response type for the
              Query/Allowance RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          description: >-
            granter is the address of the user granting an allowance of their
            funds.
          in: path
          required: true
          type: string
        - name: grantee
          description: >-
            grantee is the address of the user being granted an allowance of
            another user's funds.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/feegrant/v1beta1/allowances/{grantee}:
    get:
      summary: Allowances returns all the grants for address.
      operationId: CosmosFeegrantV1Beta1Allowances
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              allowances:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                      description: >-
                        granter is the address of the user granting an allowance
                        of their funds.
                    grantee:
                      type: string
                      description: >-
                        grantee is the address of the user being granted an
                        allowance of another user's funds.
                    allowance:
                      description: >-
                        allowance can be any of basic and filtered fee
                        allowance.
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                  title: >-
                    Grant is stored in the KVStore to record a grant with full
                    context
                description: allowances are allowance's granted for grantee by granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllowancesResponse is the response type for the
              Query/Allowances RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: grantee
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/feegrant/v1beta1/issued/{granter}:
    get:
      summary: |-
        AllowancesByGranter returns all the grants given by an address
        Since v0.46
      operationId: CosmosFeegrantV1Beta1AllowancesByGranter
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              allowances:
                type: array
                items:
                  type: object
                  properties:
                    granter:
                      type: string
                      description: >-
                        granter is the address of the user granting an allowance
                        of their funds.
                    grantee:
                      type: string
                      description: >-
                        grantee is the address of the user being granted an
                        allowance of another user's funds.
                    allowance:
                      description: >-
                        allowance can be any of basic and filtered fee
                        allowance.
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                  title: >-
                    Grant is stored in the KVStore to record a grant with full
                    context
                description: allowances that have been issued by the granter.
              pagination:
                description: pagination defines an pagination for the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryAllowancesByGranterResponse is the response type for the
              Query/AllowancesByGranter RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: granter
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/params/v1beta1/params:
    get:
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      operationId: CosmosParamsV1Beta1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              param:
                description: param defines the queried parameter.
                type: object
                properties:
                  subspace:
                    type: string
                  key:
                    type: string
                  value:
                    type: string
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: subspace
          description: subspace defines the module to query the parameter for.
          in: query
          required: false
          type: string
        - name: key
          description: key defines the key of the parameter in the subspace.
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/slashing/v1beta1/params:
    get:
      summary: Params queries the parameters of slashing module
      operationId: CosmosSlashingV1Beta1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                type: object
                properties:
                  signed_blocks_window:
                    type: string
                    format: int64
                  min_signed_per_window:
                    type: string
                    format: byte
                  downtime_jail_duration:
                    type: string
                  slash_fraction_double_sign:
                    type: string
                    format: byte
                  slash_fraction_downtime:
                    type: string
                    format: byte
                description: >-
                  Params represents the parameters used for by the slashing
                  module.
            title: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      summary: SigningInfos queries signing info of all validators
      operationId: CosmosSlashingV1Beta1SigningInfos
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              info:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    start_height:
                      type: string
                      format: int64
                      title: >-
                        Height at which validator was first a candidate OR was
                        unjailed
                    index_offset:
                      type: string
                      format: int64
                      description: >-
                        Index which is incremented each time the validator was a
                        bonded

                        in a block and may have signed a precommit or not. This
                        in conjunction with the

                        `SignedBlocksWindow` param determines the index in the
                        `MissedBlocksBitArray`.
                    jailed_until:
                      type: string
                      format: date-time
                      description: >-
                        Timestamp until which the validator is jailed due to
                        liveness downtime.
                    tombstoned:
                      type: boolean
                      description: >-
                        Whether or not a validator has been tombstoned (killed
                        out of validator set). It is set

                        once the validator commits an equivocation or for any
                        other configured misbehiavor.
                    missed_blocks_counter:
                      type: string
                      format: int64
                      description: >-
                        A counter kept to avoid unnecessary array reads.

                        Note that `Sum(MissedBlocksBitArray)` always equals
                        `MissedBlocksCounter`.
                  description: >-
                    ValidatorSigningInfo defines a validator's signing info for
                    monitoring their

                    liveness activity.
                title: info is the signing info of all validators
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: >-
              QuerySigningInfosResponse is the response type for the
              Query/SigningInfos RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmos/slashing/v1beta1/signing_infos/{cons_address}:
    get:
      summary: SigningInfo queries the signing info of given cons address
      operationId: CosmosSlashingV1Beta1SigningInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              val_signing_info:
                title: >-
                  val_signing_info is the signing info of requested val cons
                  address
                type: object
                properties:
                  address:
                    type: string
                  start_height:
                    type: string
                    format: int64
                    title: >-
                      Height at which validator was first a candidate OR was
                      unjailed
                  index_offset:
                    type: string
                    format: int64
                    description: >-
                      Index which is incremented each time the validator was a
                      bonded

                      in a block and may have signed a precommit or not. This in
                      conjunction with the

                      `SignedBlocksWindow` param determines the index in the
                      `MissedBlocksBitArray`.
                  jailed_until:
                    type: string
                    format: date-time
                    description: >-
                      Timestamp until which the validator is jailed due to
                      liveness downtime.
                  tombstoned:
                    type: boolean
                    description: >-
                      Whether or not a validator has been tombstoned (killed out
                      of validator set). It is set

                      once the validator commits an equivocation or for any
                      other configured misbehiavor.
                  missed_blocks_counter:
                    type: string
                    format: int64
                    description: >-
                      A counter kept to avoid unnecessary array reads.

                      Note that `Sum(MissedBlocksBitArray)` always equals
                      `MissedBlocksCounter`.
                description: >-
                  ValidatorSigningInfo defines a validator's signing info for
                  monitoring their

                  liveness activity.
            title: >-
              QuerySigningInfoResponse is the response type for the
              Query/SigningInfo RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: cons_address
          description: cons_address is the address to query signing info of
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/tx/v1beta1/simulate:
    post:
      summary: Simulate simulates executing a transaction for estimating gas usage.
      operationId: CosmosTxV1Beta1Simulate
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              gas_info:
                description: gas_info is the information about gas used in the simulation.
                type: object
                properties:
                  gas_wanted:
                    type: string
                    format: uint64
                    description: >-
                      GasWanted is the maximum units of work we allow this tx to
                      perform.
                  gas_used:
                    type: string
                    format: uint64
                    description: GasUsed is the amount of gas actually consumed.
              result:
                description: result is the result of the simulation.
                type: object
                properties:
                  data:
                    type: string
                    format: byte
                    description: >-
                      Data is any data returned from message or handler
                      execution. It MUST be

                      length prefixed in order to separate data from multiple
                      message executions.
                  log:
                    type: string
                    description: >-
                      Log contains the log information from message or handler
                      execution.
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                                format: byte
                              value:
                                type: string
                                format: byte
                              index:
                                type: boolean
                                title: nondeterministic
                            description: >-
                              EventAttribute is a single key-value pair,
                              associated with an event.
                      description: >-
                        Event allows application developers to attach additional
                        information to

                        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx
                        and ResponseDeliverTx.

                        Later, transactions may be queried using these events.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during message

                      or handler execution.
            description: |-
              SimulateResponse is the response type for the
              Service.SimulateRPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: |-
            SimulateRequest is the request type for the Service.Simulate
            RPC method.
          in: body
          required: true
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.SimulateRequest'
      tags:
        - Service
  /cosmos/tx/v1beta1/txs:
    get:
      summary: GetTxsEvent fetches txs by event.
      operationId: CosmosTxV1Beta1GetTxsEvent
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxsEventResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: events
          description: events is the list of transaction event type.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
        - name: order_by
          description: |2-
             - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
             - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
             - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
          in: query
          required: false
          type: string
          enum:
            - ORDER_BY_UNSPECIFIED
            - ORDER_BY_ASC
            - ORDER_BY_DESC
          default: ORDER_BY_UNSPECIFIED
      tags:
        - Service
    post:
      summary: BroadcastTx broadcast transaction.
      operationId: CosmosTxV1Beta1BroadcastTx
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              tx_response:
                description: tx_response is the queried TxResponses.
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                    title: The block height
                  txhash:
                    type: string
                    description: The transaction hash.
                  codespace:
                    type: string
                    title: Namespace for the Code
                  code:
                    type: integer
                    format: int64
                    description: Response code.
                  data:
                    type: string
                    description: Result bytes, if any.
                  raw_log:
                    type: string
                    description: >-
                      The output of the application's logger (raw string). May
                      be

                      non-deterministic.
                  logs:
                    type: array
                    items:
                      type: object
                      properties:
                        msg_index:
                          type: integer
                          format: int64
                        log:
                          type: string
                        events:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                              attributes:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    key:
                                      type: string
                                    value:
                                      type: string
                                  description: >-
                                    Attribute defines an attribute wrapper where
                                    the key and value are

                                    strings instead of raw bytes.
                            description: >-
                              StringEvent defines en Event object wrapper where
                              all the attributes

                              contain key/value pairs that are strings instead
                              of raw bytes.
                          description: >-
                            Events contains a slice of Event objects that were
                            emitted during some

                            execution.
                      description: >-
                        ABCIMessageLog defines a structure containing an indexed
                        tx ABCI message log.
                    description: >-
                      The output of the application's logger (typed). May be
                      non-deterministic.
                  info:
                    type: string
                    description: Additional information. May be non-deterministic.
                  gas_wanted:
                    type: string
                    format: int64
                    description: Amount of gas requested for transaction.
                  gas_used:
                    type: string
                    format: int64
                    description: Amount of gas consumed by transaction.
                  tx:
                    description: The request transaction bytes.
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                  timestamp:
                    type: string
                    description: >-
                      Time of the previous block. For heights > 1, it's the
                      weighted median of

                      the timestamps of the valid votes in the block.LastCommit.
                      For height == 1,

                      it's genesis time.
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                                format: byte
                              value:
                                type: string
                                format: byte
                              index:
                                type: boolean
                                title: nondeterministic
                            description: >-
                              EventAttribute is a single key-value pair,
                              associated with an event.
                      description: >-
                        Event allows application developers to attach additional
                        information to

                        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx
                        and ResponseDeliverTx.

                        Later, transactions may be queried using these events.
                    description: >-
                      Events defines all the events emitted by processing a
                      transaction. Note,

                      these events include those emitted by processing all the
                      messages and those

                      emitted from the ante handler. Whereas Logs contains the
                      events, with

                      additional metadata, emitted only by processing the
                      messages.


                      Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
            description: |-
              BroadcastTxResponse is the response type for the
              Service.BroadcastTx method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: body
          description: >-
            BroadcastTxRequest is the request type for the
            Service.BroadcastTxRequest

            RPC method.
          in: body
          required: true
          schema:
            type: object
            properties:
              tx_bytes:
                type: string
                format: byte
                description: tx_bytes is the raw transaction.
              mode:
                type: string
                enum:
                  - BROADCAST_MODE_UNSPECIFIED
                  - BROADCAST_MODE_BLOCK
                  - BROADCAST_MODE_SYNC
                  - BROADCAST_MODE_ASYNC
                default: BROADCAST_MODE_UNSPECIFIED
                description: >-
                  BroadcastMode specifies the broadcast mode for the
                  TxService.Broadcast RPC method.

                   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
                   - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
                  the tx to be committed in a block.
                   - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
                  a CheckTx execution response only.
                   - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
                  immediately.
            description: >-
              BroadcastTxRequest is the request type for the
              Service.BroadcastTxRequest

              RPC method.
      tags:
        - Service
  /cosmos/tx/v1beta1/txs/block/{height}:
    get:
      summary: GetBlockWithTxs fetches a block with decoded txs.
      description: 'Since: cosmos-sdk 0.45.2'
      operationId: CosmosTxV1Beta1GetBlockWithTxs
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetBlockWithTxsResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: height
          description: height is the height of the block to query.
          in: path
          required: true
          type: string
          format: int64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Service
  /cosmos/tx/v1beta1/txs/{hash}:
    get:
      summary: GetTx fetches a tx by hash.
      operationId: CosmosTxV1Beta1GetTx
      responses:
        '200':
          description: A successful response.
          schema:
            $ref: '#/definitions/cosmos.tx.v1beta1.GetTxResponse'
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: hash
          description: hash is the tx hash to query, encoded as a hex string.
          in: path
          required: true
          type: string
      tags:
        - Service
  /cosmos/upgrade/v1beta1/applied_plan/{name}:
    get:
      summary: AppliedPlan queries a previously applied upgrade plan by its name.
      operationId: CosmosUpgradeV1Beta1AppliedPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              height:
                type: string
                format: int64
                description: height is the block height at which the plan was applied.
            description: >-
              QueryAppliedPlanResponse is the response type for the
              Query/AppliedPlan RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: name
          description: name is the name of the applied plan to query for.
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      summary: CurrentPlan queries the current upgrade plan.
      operationId: CosmosUpgradeV1Beta1CurrentPlan
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              plan:
                description: plan is the current upgrade plan.
                type: object
                properties:
                  name:
                    type: string
                    description: >-
                      Sets the name for the upgrade. This name will be used by
                      the upgraded

                      version of the software to apply any special "on-upgrade"
                      commands during

                      the first BeginBlock method after the upgrade is applied.
                      It is also used

                      to detect whether a software version can handle a given
                      upgrade. If no

                      upgrade handler with this name has been set in the
                      software, it will be

                      assumed that the software is out-of-date when the upgrade
                      Time or Height is

                      reached and the software will exit.
                  time:
                    type: string
                    format: date-time
                    description: >-
                      Deprecated: Time based upgrades have been deprecated. Time
                      based upgrade logic

                      has been removed from the SDK.

                      If this field is not empty, an error will be thrown.
                  height:
                    type: string
                    format: int64
                    description: |-
                      The height at which the upgrade must be performed.
                      Only used if Time is not set.
                  info:
                    type: string
                    title: >-
                      Any application specific upgrade info to be included
                      on-chain

                      such as a git commit that validators could automatically
                      upgrade to
                  upgraded_client_state:
                    description: >-
                      Deprecated: UpgradedClientState field has been deprecated.
                      IBC upgrade logic has been

                      moved to the IBC module in the sub module 02-client.

                      If this field is not empty, an error will be thrown.
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
            description: >-
              QueryCurrentPlanResponse is the response type for the
              Query/CurrentPlan RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmos/upgrade/v1beta1/module_versions:
    get:
      summary: ModuleVersions queries the list of module versions from state.
      description: 'Since: cosmos-sdk 0.43'
      operationId: CosmosUpgradeV1Beta1ModuleVersions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              module_versions:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      title: name of the app module
                    version:
                      type: string
                      format: uint64
                      title: consensus version of the app module
                  description: |-
                    ModuleVersion specifies a module and its consensus version.

                    Since: cosmos-sdk 0.43
                description: >-
                  module_versions is a list of module names with their consensus
                  versions.
            description: >-
              QueryModuleVersionsResponse is the response type for the
              Query/ModuleVersions

              RPC method.


              Since: cosmos-sdk 0.43
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: module_name
          description: |-
            module_name is a field to query a specific module
            consensus version from state. Leaving this empty will
            fetch the full list of module versions from state
          in: query
          required: false
          type: string
      tags:
        - Query
  /cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}:
    get:
      summary: >-
        UpgradedConsensusState queries the consensus state that will serve

        as a trusted kernel for the next version of this chain. It will only be

        stored at the last height of this chain.

        UpgradedConsensusState RPC not supported with legacy querier

        This rpc is deprecated now that IBC has its own replacement

        (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
      operationId: CosmosUpgradeV1Beta1UpgradedConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              upgraded_consensus_state:
                type: string
                format: byte
                title: 'Since: cosmos-sdk 0.43'
            description: >-
              QueryUpgradedConsensusStateResponse is the response type for the
              Query/UpgradedConsensusState

              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: last_height
          description: |-
            last height of the current chain must be sent in request
            as this is the height under which next consensus state is stored
          in: path
          required: true
          type: string
          format: int64
      tags:
        - Query
  /cosmwasm/wasm/v1/code:
    get:
      summary: Codes gets the metadata for all stored wasm codes
      operationId: CosmwasmWasmV1Codes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              code_infos:
                type: array
                items:
                  type: object
                  properties:
                    code_id:
                      type: string
                      format: uint64
                      title: id for legacy support
                    creator:
                      type: string
                    data_hash:
                      type: string
                      format: byte
                    instantiate_permission:
                      type: object
                      properties:
                        permission:
                          type: string
                          enum:
                            - ACCESS_TYPE_UNSPECIFIED
                            - ACCESS_TYPE_NOBODY
                            - ACCESS_TYPE_ONLY_ADDRESS
                            - ACCESS_TYPE_EVERYBODY
                            - ACCESS_TYPE_ANY_OF_ADDRESSES
                          default: ACCESS_TYPE_UNSPECIFIED
                          description: >-
                            - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                            placeholder for empty value
                             - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                             - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                            Deprecated: use AccessTypeAnyOfAddresses instead
                             - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                             - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                          title: AccessType permission types
                        address:
                          type: string
                          title: |-
                            Address
                            Deprecated: replaced by addresses
                        addresses:
                          type: array
                          items:
                            type: string
                      description: AccessConfig access control type.
                  title: CodeInfoResponse contains code meta data from CodeInfo
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: >-
              QueryCodesResponse is the response type for the Query/Codes RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmwasm/wasm/v1/code/{code_id}:
    get:
      summary: Code gets the binary code and metadata for a singe wasm code
      operationId: CosmwasmWasmV1Code
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              code_info:
                type: object
                properties:
                  code_id:
                    type: string
                    format: uint64
                    title: id for legacy support
                  creator:
                    type: string
                  data_hash:
                    type: string
                    format: byte
                  instantiate_permission:
                    type: object
                    properties:
                      permission:
                        type: string
                        enum:
                          - ACCESS_TYPE_UNSPECIFIED
                          - ACCESS_TYPE_NOBODY
                          - ACCESS_TYPE_ONLY_ADDRESS
                          - ACCESS_TYPE_EVERYBODY
                          - ACCESS_TYPE_ANY_OF_ADDRESSES
                        default: ACCESS_TYPE_UNSPECIFIED
                        description: >-
                          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                          placeholder for empty value
                           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                           - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                          Deprecated: use AccessTypeAnyOfAddresses instead
                           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                        title: AccessType permission types
                      address:
                        type: string
                        title: |-
                          Address
                          Deprecated: replaced by addresses
                      addresses:
                        type: array
                        items:
                          type: string
                    description: AccessConfig access control type.
                title: CodeInfoResponse contains code meta data from CodeInfo
              data:
                type: string
                format: byte
            title: >-
              QueryCodeResponse is the response type for the Query/Code RPC
              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: code_id
          description: grpc-gateway_out does not support Go style CodID
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /cosmwasm/wasm/v1/code/{code_id}/contracts:
    get:
      summary: ContractsByCode lists all smart contracts for a code id
      operationId: CosmwasmWasmV1ContractsByCode
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              contracts:
                type: array
                items:
                  type: string
                title: contracts are a set of contract addresses
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryContractsByCodeResponse is the response type for the
              Query/ContractsByCode RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: code_id
          description: grpc-gateway_out does not support Go style CodID
          in: path
          required: true
          type: string
          format: uint64
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmwasm/wasm/v1/codes/params:
    get:
      summary: Params gets the module params
      operationId: CosmwasmWasmV1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  code_upload_access:
                    type: object
                    properties:
                      permission:
                        type: string
                        enum:
                          - ACCESS_TYPE_UNSPECIFIED
                          - ACCESS_TYPE_NOBODY
                          - ACCESS_TYPE_ONLY_ADDRESS
                          - ACCESS_TYPE_EVERYBODY
                          - ACCESS_TYPE_ANY_OF_ADDRESSES
                        default: ACCESS_TYPE_UNSPECIFIED
                        description: >-
                          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                          placeholder for empty value
                           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                           - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                          Deprecated: use AccessTypeAnyOfAddresses instead
                           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                        title: AccessType permission types
                      address:
                        type: string
                        title: |-
                          Address
                          Deprecated: replaced by addresses
                      addresses:
                        type: array
                        items:
                          type: string
                    description: AccessConfig access control type.
                  instantiate_default_permission:
                    type: string
                    enum:
                      - ACCESS_TYPE_UNSPECIFIED
                      - ACCESS_TYPE_NOBODY
                      - ACCESS_TYPE_ONLY_ADDRESS
                      - ACCESS_TYPE_EVERYBODY
                      - ACCESS_TYPE_ANY_OF_ADDRESSES
                    default: ACCESS_TYPE_UNSPECIFIED
                    description: >-
                      - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                      placeholder for empty value
                       - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                       - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                      Deprecated: use AccessTypeAnyOfAddresses instead
                       - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                       - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                    title: AccessType permission types
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /cosmwasm/wasm/v1/codes/pinned:
    get:
      summary: PinnedCodes gets the pinned code ids
      operationId: CosmwasmWasmV1PinnedCodes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              code_ids:
                type: array
                items:
                  type: string
                  format: uint64
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryPinnedCodesResponse is the response type for the
              Query/PinnedCodes RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}:
    get:
      summary: ContractInfo gets the contract meta data
      operationId: CosmwasmWasmV1ContractInfo
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
                title: address is the address of the contract
              contract_info:
                type: object
                properties:
                  code_id:
                    type: string
                    format: uint64
                    title: CodeID is the reference to the stored Wasm code
                  creator:
                    type: string
                    title: Creator address who initially instantiated the contract
                  admin:
                    type: string
                    title: Admin is an optional address that can execute migrations
                  label:
                    type: string
                    description: >-
                      Label is optional metadata to be stored with a contract
                      instance.
                  created:
                    description: Created Tx position when the contract was instantiated.
                    type: object
                    properties:
                      block_height:
                        type: string
                        format: uint64
                        title: BlockHeight is the block the contract was created at
                      tx_index:
                        type: string
                        format: uint64
                        title: >-
                          TxIndex is a monotonic counter within the block
                          (actual transaction index,

                          or gas consumed)
                  ibc_port_id:
                    type: string
                  extension:
                    description: >-
                      Extension is an extension point to store custom metadata
                      within the

                      persistence model.
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                title: ContractInfo stores a WASM contract instance
            title: >-
              QueryContractInfoResponse is the response type for the
              Query/ContractInfo RPC

              method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract to query
          in: path
          required: true
          type: string
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/history:
    get:
      summary: ContractHistory gets the contract code history
      operationId: CosmwasmWasmV1ContractHistory
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              entries:
                type: array
                items:
                  type: object
                  properties:
                    operation:
                      type: string
                      enum:
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
                      default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                      description: >-
                        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                        ContractCodeHistoryOperationTypeUnspecified placeholder
                        for empty value
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
                      title: >-
                        ContractCodeHistoryOperationType actions that caused a
                        code change
                    code_id:
                      type: string
                      format: uint64
                      title: CodeID is the reference to the stored WASM code
                    updated:
                      description: Updated Tx position when the operation was executed.
                      type: object
                      properties:
                        block_height:
                          type: string
                          format: uint64
                          title: BlockHeight is the block the contract was created at
                        tx_index:
                          type: string
                          format: uint64
                          title: >-
                            TxIndex is a monotonic counter within the block
                            (actual transaction index,

                            or gas consumed)
                    msg:
                      type: string
                      format: byte
                  description: ContractCodeHistoryEntry metadata to a contract.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryContractHistoryResponse is the response type for the
              Query/ContractHistory RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract to query
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/raw/{query_data}:
    get:
      summary: RawContractState gets single key from the raw store data of a contract
      operationId: CosmwasmWasmV1RawContractState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: string
                format: byte
                title: Data contains the raw store data
            title: |-
              QueryRawContractStateResponse is the response type for the
              Query/RawContractState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract
          in: path
          required: true
          type: string
        - name: query_data
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/smart/{query_data}:
    get:
      summary: SmartContractState get smart query result from the contract
      operationId: CosmwasmWasmV1SmartContractState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: string
                format: byte
                title: Data contains the json data returned from the smart contract
            title: |-
              QuerySmartContractStateResponse is the response type for the
              Query/SmartContractState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract
          in: path
          required: true
          type: string
        - name: query_data
          description: QueryData contains the query data passed to the contract
          in: path
          required: true
          type: string
          format: byte
      tags:
        - Query
  /cosmwasm/wasm/v1/contract/{address}/state:
    get:
      summary: AllContractState gets all raw store data for a single contract
      operationId: CosmwasmWasmV1AllContractState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              models:
                type: array
                items:
                  type: object
                  properties:
                    key:
                      type: string
                      format: byte
                      title: hex-encode key to read it better (this is often ascii)
                    value:
                      type: string
                      format: byte
                      title: base64-encode raw value
                  title: Model is a struct that holds a KV pair
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            title: |-
              QueryAllContractStateResponse is the response type for the
              Query/AllContractState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: address
          description: address is the address of the contract
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /cosmwasm/wasm/v1/contracts/creator/{creator_address}:
    get:
      summary: ContractsByCreator gets the contracts by creator
      operationId: CosmwasmWasmV1ContractsByCreator
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              contract_addresses:
                type: array
                items:
                  type: string
                title: ContractAddresses result set
              pagination:
                description: Pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: |-
              QueryContractsByCreatorResponse is the response type for the
              Query/ContractsByCreator RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: creator_address
          description: CreatorAddress is the address of contract creator
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/apps/interchain_accounts/controller/v1/owners/{owner}/connections/{connection_id}:
    get:
      summary: >-
        InterchainAccount returns the interchain account address for a given
        owner address on a given connection
      operationId: IbcApplicationsInterchainAccountsControllerV1InterchainAccount
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              address:
                type: string
            description: >-
              QueryInterchainAccountResponse the response type for the
              Query/InterchainAccount RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: owner
          in: path
          required: true
          type: string
        - name: connection_id
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/apps/interchain_accounts/controller/v1/params:
    get:
      summary: Params queries all parameters of the ICA controller submodule.
      operationId: IbcApplicationsInterchainAccountsControllerV1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  controller_enabled:
                    type: boolean
                    description: >-
                      controller_enabled enables or disables the controller
                      submodule.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
  /ibc/apps/interchain_accounts/host/v1/params:
    get:
      summary: Params queries all parameters of the ICA host submodule.
      operationId: IbcApplicationsInterchainAccountsHostV1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  host_enabled:
                    type: boolean
                    description: host_enabled enables or disables the host submodule.
                  allow_messages:
                    type: array
                    items:
                      type: string
                    description: >-
                      allow_messages defines a list of sdk message typeURLs
                      allowed to be executed on a host chain.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
  /ibc/apps/transfer/v1/channels/{channel_id}/ports/{port_id}/escrow_address:
    get:
      summary: >-
        EscrowAddress returns the escrow address for a particular port and
        channel id.
      operationId: IbcApplicationsTransferV1EscrowAddress
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              escrow_address:
                type: string
                title: the escrow account address
            description: >-
              QueryEscrowAddressResponse is the response type of the
              EscrowAddress RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: unique channel identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: unique port identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/apps/transfer/v1/denom_hashes/{trace}:
    get:
      summary: DenomHash queries a denomination hash information.
      operationId: IbcApplicationsTransferV1DenomHash
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              hash:
                type: string
                description: hash (in hex format) of the denomination trace information.
            description: >-
              QueryDenomHashResponse is the response type for the
              Query/DenomHash RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: trace
          description: The denomination trace ([port_id]/[channel_id])+/[denom]
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/apps/transfer/v1/denom_traces:
    get:
      summary: DenomTraces queries all denomination traces.
      operationId: IbcApplicationsTransferV1DenomTraces
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denom_traces:
                type: array
                items:
                  type: object
                  properties:
                    path:
                      type: string
                      description: >-
                        path defines the chain of port/channel identifiers used
                        for tracing the

                        source of the fungible token.
                    base_denom:
                      type: string
                      description: base denomination of the relayed fungible token.
                  description: >-
                    DenomTrace contains the base denomination for ICS20 fungible
                    tokens and the

                    source tracing information path.
                description: denom_traces returns all denominations trace information.
              pagination:
                description: pagination defines the pagination in the response.
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
            description: >-
              QueryConnectionsResponse is the response type for the
              Query/DenomTraces RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/apps/transfer/v1/denom_traces/{hash}:
    get:
      summary: DenomTrace queries a denomination trace information.
      operationId: IbcApplicationsTransferV1DenomTrace
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              denom_trace:
                description: >-
                  denom_trace returns the requested denomination trace
                  information.
                type: object
                properties:
                  path:
                    type: string
                    description: >-
                      path defines the chain of port/channel identifiers used
                      for tracing the

                      source of the fungible token.
                  base_denom:
                    type: string
                    description: base denomination of the relayed fungible token.
            description: >-
              QueryDenomTraceResponse is the response type for the
              Query/DenomTrace RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: hash
          description: >-
            hash (in hex format) or denom (full denom with ibc prefix) of the
            denomination trace information.
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/apps/transfer/v1/params:
    get:
      summary: Params queries all parameters of the ibc-transfer module.
      operationId: IbcApplicationsTransferV1Params
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  send_enabled:
                    type: boolean
                    description: >-
                      send_enabled enables or disables all cross-chain token
                      transfers from this

                      chain.
                  receive_enabled:
                    type: boolean
                    description: >-
                      receive_enabled enables or disables all cross-chain token
                      transfers to this

                      chain.
            description: >-
              QueryParamsResponse is the response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /ibc/core/channel/v1/channels:
    get:
      summary: Channels queries all the IBC channels of a chain.
      operationId: IbcCoreChannelV1Channels
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channels:
                type: array
                items:
                  type: object
                  properties:
                    state:
                      title: current state of the channel end
                      type: string
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                      description: >-
                        State defines if a channel is in one of the following
                        states:

                        CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                         - STATE_INIT: A channel has just started the opening handshake.
                         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                         - STATE_OPEN: A channel has completed the handshake. Open channels are
                        ready to send and receive packets.
                         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                        packets.
                    ordering:
                      title: whether the channel is ordered or unordered
                      type: string
                      enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      default: ORDER_NONE_UNSPECIFIED
                      description: >-
                        - ORDER_NONE_UNSPECIFIED: zero-value for channel
                        ordering
                         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                        which they were sent.
                         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                    counterparty:
                      title: counterparty channel end
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: >-
                            port on the counterparty chain which owns the other
                            end of the channel.
                        channel_id:
                          type: string
                          title: channel end on the counterparty chain
                    connection_hops:
                      type: array
                      items:
                        type: string
                      title: >-
                        list of connection identifiers, in order, along which
                        packets sent on

                        this channel will travel
                    version:
                      type: string
                      title: >-
                        opaque channel version, which is agreed upon during the
                        handshake
                    port_id:
                      type: string
                      title: port identifier
                    channel_id:
                      type: string
                      title: channel identifier
                  description: >-
                    IdentifiedChannel defines a channel with additional port and
                    channel

                    identifier fields.
                description: list of stored channels of the chain.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            description: >-
              QueryChannelsResponse is the response type for the Query/Channels
              RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}:
    get:
      summary: Channel queries an IBC Channel.
      operationId: IbcCoreChannelV1Channel
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channel:
                title: channel associated with the request identifiers
                type: object
                properties:
                  state:
                    title: current state of the channel end
                    type: string
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                      - STATE_CLOSED
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                    description: >-
                      State defines if a channel is in one of the following
                      states:

                      CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                       - STATE_INIT: A channel has just started the opening handshake.
                       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                       - STATE_OPEN: A channel has completed the handshake. Open channels are
                      ready to send and receive packets.
                       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                      packets.
                  ordering:
                    title: whether the channel is ordered or unordered
                    type: string
                    enum:
                      - ORDER_NONE_UNSPECIFIED
                      - ORDER_UNORDERED
                      - ORDER_ORDERED
                    default: ORDER_NONE_UNSPECIFIED
                    description: |-
                      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                      which they were sent.
                       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                  counterparty:
                    title: counterparty channel end
                    type: object
                    properties:
                      port_id:
                        type: string
                        description: >-
                          port on the counterparty chain which owns the other
                          end of the channel.
                      channel_id:
                        type: string
                        title: channel end on the counterparty chain
                  connection_hops:
                    type: array
                    items:
                      type: string
                    title: >-
                      list of connection identifiers, in order, along which
                      packets sent on

                      this channel will travel
                  version:
                    type: string
                    title: >-
                      opaque channel version, which is agreed upon during the
                      handshake
                description: >-
                  Channel defines pipeline for exactly-once packet delivery
                  between specific

                  modules on separate blockchains, which has at least one end
                  capable of

                  sending packets and one end capable of receiving packets.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            description: >-
              QueryChannelResponse is the response type for the Query/Channel
              RPC method.

              Besides the Channel end, it includes a proof and the height from
              which the

              proof was retrieved.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/client_state:
    get:
      summary: >-
        ChannelClientState queries for the client state for the channel
        associated

        with the provided channel identifiers.
      operationId: IbcCoreChannelV1ChannelClientState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              identified_client_state:
                title: client state associated with the channel
                type: object
                properties:
                  client_id:
                    type: string
                    title: client identifier
                  client_state:
                    title: client state
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                description: >-
                  IdentifiedClientState defines a client state with an
                  additional client

                  identifier field.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryChannelClientStateResponse is the Response type for the
              Query/QueryChannelClientState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      summary: |-
        ChannelConsensusState queries for the consensus state for the channel
        associated with the provided channel identifiers.
      operationId: IbcCoreChannelV1ChannelConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_state:
                title: consensus state associated with the channel
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              client_id:
                type: string
                title: client ID associated with the consensus state
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryChannelClientStateResponse is the Response type for the
              Query/QueryChannelClientState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: revision_number
          description: revision number of the consensus state
          in: path
          required: true
          type: string
          format: uint64
        - name: revision_height
          description: revision height of the consensus state
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence:
    get:
      summary: >-
        NextSequenceReceive returns the next receive sequence for a given
        channel.
      operationId: IbcCoreChannelV1NextSequenceReceive
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              next_sequence_receive:
                type: string
                format: uint64
                title: next sequence receive number
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QuerySequenceResponse is the request type for the
              Query/QueryNextSequenceReceiveResponse RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements:
    get:
      summary: >-
        PacketAcknowledgements returns all the packet acknowledgements
        associated

        with a channel.
      operationId: IbcCoreChannelV1PacketAcknowledgements
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              acknowledgements:
                type: array
                items:
                  type: object
                  properties:
                    port_id:
                      type: string
                      description: channel port identifier.
                    channel_id:
                      type: string
                      description: channel unique identifier.
                    sequence:
                      type: string
                      format: uint64
                      description: packet sequence.
                    data:
                      type: string
                      format: byte
                      description: embedded data that represents packet state.
                  description: >-
                    PacketState defines the generic type necessary to retrieve
                    and store

                    packet commitments, acknowledgements, and receipts.

                    Caller is responsible for knowing the context necessary to
                    interpret this

                    state as a commitment, acknowledgement, or a receipt.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryPacketAcknowledgemetsResponse is the request type for the
              Query/QueryPacketAcknowledgements RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: packet_commitment_sequences
          description: list of packet sequences
          in: query
          required: false
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: multi
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}:
    get:
      summary: PacketAcknowledgement queries a stored packet acknowledgement hash.
      operationId: IbcCoreChannelV1PacketAcknowledgement
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              acknowledgement:
                type: string
                format: byte
                title: packet associated with the request fields
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: >-
              QueryPacketAcknowledgementResponse defines the client query
              response for a

              packet which also includes a proof and the height from which the

              proof was retrieved
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: sequence
          description: packet sequence
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments:
    get:
      summary: |-
        PacketCommitments returns all the packet commitments hashes associated
        with a channel.
      operationId: IbcCoreChannelV1PacketCommitments
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              commitments:
                type: array
                items:
                  type: object
                  properties:
                    port_id:
                      type: string
                      description: channel port identifier.
                    channel_id:
                      type: string
                      description: channel unique identifier.
                    sequence:
                      type: string
                      format: uint64
                      description: packet sequence.
                    data:
                      type: string
                      format: byte
                      description: embedded data that represents packet state.
                  description: >-
                    PacketState defines the generic type necessary to retrieve
                    and store

                    packet commitments, acknowledgements, and receipts.

                    Caller is responsible for knowing the context necessary to
                    interpret this

                    state as a commitment, acknowledgement, or a receipt.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryPacketCommitmentsResponse is the request type for the
              Query/QueryPacketCommitments RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks:
    get:
      summary: >-
        UnreceivedAcks returns all the unreceived IBC acknowledgements
        associated

        with a channel and sequences.
      operationId: IbcCoreChannelV1UnreceivedAcks
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequences:
                type: array
                items:
                  type: string
                  format: uint64
                title: list of unreceived acknowledgement sequences
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryUnreceivedAcksResponse is the response type for the
              Query/UnreceivedAcks RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: packet_ack_sequences
          description: list of acknowledgement sequences
          in: path
          required: true
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: csv
          minItems: 1
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets:
    get:
      summary: >-
        UnreceivedPackets returns all the unreceived IBC packets associated with
        a

        channel and sequences.
      operationId: IbcCoreChannelV1UnreceivedPackets
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              sequences:
                type: array
                items:
                  type: string
                  format: uint64
                title: list of unreceived packet sequences
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryUnreceivedPacketsResponse is the response type for the
              Query/UnreceivedPacketCommitments RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: packet_commitment_sequences
          description: list of packet sequences
          in: path
          required: true
          type: array
          items:
            type: string
            format: uint64
          collectionFormat: csv
          minItems: 1
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}:
    get:
      summary: PacketCommitment queries a stored packet commitment hash.
      operationId: IbcCoreChannelV1PacketCommitment
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              commitment:
                type: string
                format: byte
                title: packet associated with the request fields
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: >-
              QueryPacketCommitmentResponse defines the client query response
              for a packet

              which also includes a proof and the height from which the proof
              was

              retrieved
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: sequence
          description: packet sequence
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}:
    get:
      summary: >-
        PacketReceipt queries if a given packet sequence has been received on
        the

        queried chain
      operationId: IbcCoreChannelV1PacketReceipt
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              received:
                type: boolean
                title: success flag for if receipt exists
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: >-
              QueryPacketReceiptResponse defines the client query response for a
              packet

              receipt which also includes a proof, and the height from which the
              proof was

              retrieved
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: channel_id
          description: channel unique identifier
          in: path
          required: true
          type: string
        - name: port_id
          description: port unique identifier
          in: path
          required: true
          type: string
        - name: sequence
          description: packet sequence
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /ibc/core/channel/v1/connections/{connection}/channels:
    get:
      summary: |-
        ConnectionChannels queries all the channels associated with a connection
        end.
      operationId: IbcCoreChannelV1ConnectionChannels
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              channels:
                type: array
                items:
                  type: object
                  properties:
                    state:
                      title: current state of the channel end
                      type: string
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                      description: >-
                        State defines if a channel is in one of the following
                        states:

                        CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                         - STATE_INIT: A channel has just started the opening handshake.
                         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                         - STATE_OPEN: A channel has completed the handshake. Open channels are
                        ready to send and receive packets.
                         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                        packets.
                    ordering:
                      title: whether the channel is ordered or unordered
                      type: string
                      enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      default: ORDER_NONE_UNSPECIFIED
                      description: >-
                        - ORDER_NONE_UNSPECIFIED: zero-value for channel
                        ordering
                         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                        which they were sent.
                         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                    counterparty:
                      title: counterparty channel end
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: >-
                            port on the counterparty chain which owns the other
                            end of the channel.
                        channel_id:
                          type: string
                          title: channel end on the counterparty chain
                    connection_hops:
                      type: array
                      items:
                        type: string
                      title: >-
                        list of connection identifiers, in order, along which
                        packets sent on

                        this channel will travel
                    version:
                      type: string
                      title: >-
                        opaque channel version, which is agreed upon during the
                        handshake
                    port_id:
                      type: string
                      title: port identifier
                    channel_id:
                      type: string
                      title: channel identifier
                  description: >-
                    IdentifiedChannel defines a channel with additional port and
                    channel

                    identifier fields.
                description: list of channels associated with a connection.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryConnectionChannelsResponse is the Response type for the
              Query/QueryConnectionChannels RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection
          description: connection unique identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/client/v1/params:
    get:
      summary: ClientParams queries all parameters of the ibc client.
      operationId: IbcCoreClientV1ClientParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params defines the parameters of the module.
                type: object
                properties:
                  allowed_clients:
                    type: array
                    items:
                      type: string
                    description: >-
                      allowed_clients defines the list of allowed client state
                      types.
            description: >-
              QueryClientParamsResponse is the response type for the
              Query/ClientParams RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /ibc/core/client/v1/client_states:
    get:
      summary: ClientStates queries all the IBC light clients of a chain.
      operationId: IbcCoreClientV1ClientStates
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              client_states:
                type: array
                items:
                  type: object
                  properties:
                    client_id:
                      type: string
                      title: client identifier
                    client_state:
                      title: client state
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                  description: >-
                    IdentifiedClientState defines a client state with an
                    additional client

                    identifier field.
                description: list of stored ClientStates of the chain.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            description: >-
              QueryClientStatesResponse is the response type for the
              Query/ClientStates RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/core/client/v1/client_states/{client_id}:
    get:
      summary: ClientState queries an IBC light client.
      operationId: IbcCoreClientV1ClientState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              client_state:
                title: client state associated with the request identifier
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            description: >-
              QueryClientStateResponse is the response type for the
              Query/ClientState RPC

              method. Besides the client state, it includes a proof and the
              height from

              which the proof was retrieved.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client state unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/client/v1/client_status/{client_id}:
    get:
      summary: Status queries the status of an IBC client.
      operationId: IbcCoreClientV1ClientStatus
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              status:
                type: string
            description: >-
              QueryClientStatusResponse is the response type for the
              Query/ClientStatus RPC

              method. It returns the current status of the IBC client.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/client/v1/consensus_states/{client_id}:
    get:
      summary: |-
        ConsensusStates queries all the consensus state associated with a given
        client.
      operationId: IbcCoreClientV1ConsensusStates
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_states:
                type: array
                items:
                  type: object
                  properties:
                    height:
                      title: consensus state height
                      type: object
                      properties:
                        revision_number:
                          type: string
                          format: uint64
                          title: the revision that the client is currently on
                        revision_height:
                          type: string
                          format: uint64
                          title: the height within the given revision
                      description: >-
                        Normally the RevisionHeight is incremented at each
                        height while keeping

                        RevisionNumber the same. However some consensus
                        algorithms may choose to

                        reset the height in certain conditions e.g. hard forks,
                        state-machine

                        breaking changes In these cases, the RevisionNumber is
                        incremented so that

                        height continues to be monitonically increasing even as
                        the RevisionHeight

                        gets reset
                    consensus_state:
                      title: consensus state
                      type: object
                      properties:
                        '@type':
                          type: string
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                      additionalProperties: {}
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                  description: >-
                    ConsensusStateWithHeight defines a consensus state with an
                    additional height

                    field.
                title: consensus states associated with the identifier
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: |-
              QueryConsensusStatesResponse is the response type for the
              Query/ConsensusStates RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/core/client/v1/consensus_states/{client_id}/heights:
    get:
      summary: >-
        ConsensusStateHeights queries the height of every consensus states
        associated with a given client.
      operationId: IbcCoreClientV1ConsensusStateHeights
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_state_heights:
                type: array
                items:
                  type: object
                  properties:
                    revision_number:
                      type: string
                      format: uint64
                      title: the revision that the client is currently on
                    revision_height:
                      type: string
                      format: uint64
                      title: the height within the given revision
                  description: >-
                    Normally the RevisionHeight is incremented at each height
                    while keeping

                    RevisionNumber the same. However some consensus algorithms
                    may choose to

                    reset the height in certain conditions e.g. hard forks,
                    state-machine

                    breaking changes In these cases, the RevisionNumber is
                    incremented so that

                    height continues to be monitonically increasing even as the
                    RevisionHeight

                    gets reset
                  title: >-
                    Height is a monotonically increasing data type

                    that can be compared against another Height for the purposes
                    of updating and

                    freezing clients
                title: consensus state heights
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
            title: |-
              QueryConsensusStateHeightsResponse is the response type for the
              Query/ConsensusStateHeights RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client identifier
          in: path
          required: true
          type: string
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/core/client/v1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}:
    get:
      summary: >-
        ConsensusState queries a consensus state associated with a client state
        at

        a given height.
      operationId: IbcCoreClientV1ConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_state:
                title: >-
                  consensus state associated with the client identifier at the
                  given height
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: >-
              QueryConsensusStateResponse is the response type for the
              Query/ConsensusState

              RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client identifier
          in: path
          required: true
          type: string
        - name: revision_number
          description: consensus state revision number
          in: path
          required: true
          type: string
          format: uint64
        - name: revision_height
          description: consensus state revision height
          in: path
          required: true
          type: string
          format: uint64
        - name: latest_height
          description: >-
            latest_height overrrides the height field and queries the latest
            stored

            ConsensusState
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/core/client/v1/upgraded_client_states:
    get:
      summary: UpgradedClientState queries an Upgraded IBC light client.
      operationId: IbcCoreClientV1UpgradedClientState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              upgraded_client_state:
                title: client state associated with the request identifier
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: |-
              QueryUpgradedClientStateResponse is the response type for the
              Query/UpgradedClientState RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /ibc/core/client/v1/upgraded_consensus_states:
    get:
      summary: UpgradedConsensusState queries an Upgraded IBC consensus state.
      operationId: IbcCoreClientV1UpgradedConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              upgraded_consensus_state:
                title: Consensus state associated with the request identifier
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: |-
              QueryUpgradedConsensusStateResponse is the response type for the
              Query/UpgradedConsensusState RPC method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /ibc/core/connection/v1/client_connections/{client_id}:
    get:
      summary: |-
        ClientConnections queries the connection paths associated with a client
        state.
      operationId: IbcCoreConnectionV1ClientConnections
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              connection_paths:
                type: array
                items:
                  type: string
                description: slice of all the connection paths associated with a client.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was generated
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryClientConnectionsResponse is the response type for the
              Query/ClientConnections RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: client_id
          description: client identifier associated with a connection
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/connection/v1/connections:
    get:
      summary: Connections queries all the IBC connections of a chain.
      operationId: IbcCoreConnectionV1Connections
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              connections:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: connection identifier.
                    client_id:
                      type: string
                      description: client associated with this connection.
                    versions:
                      type: array
                      items:
                        type: object
                        properties:
                          identifier:
                            type: string
                            title: unique version identifier
                          features:
                            type: array
                            items:
                              type: string
                            title: >-
                              list of features compatible with the specified
                              identifier
                        description: >-
                          Version defines the versioning scheme used to
                          negotiate the IBC verison in

                          the connection handshake.
                      title: >-
                        IBC version which can be utilised to determine encodings
                        or protocols for

                        channels or packets utilising this connection
                    state:
                      description: current state of the connection end.
                      type: string
                      enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                      default: STATE_UNINITIALIZED_UNSPECIFIED
                    counterparty:
                      description: counterparty chain associated with this connection.
                      type: object
                      properties:
                        client_id:
                          type: string
                          description: >-
                            identifies the client on the counterparty chain
                            associated with a given

                            connection.
                        connection_id:
                          type: string
                          description: >-
                            identifies the connection end on the counterparty
                            chain associated with a

                            given connection.
                        prefix:
                          description: commitment merkle prefix of the counterparty chain.
                          type: object
                          properties:
                            key_prefix:
                              type: string
                              format: byte
                          title: >-
                            MerklePrefix is merkle path prefixed to the key.

                            The constructed key from the Path and the key will
                            be append(Path.KeyPath,

                            append(Path.KeyPrefix, key...))
                    delay_period:
                      type: string
                      format: uint64
                      description: delay period associated with this connection.
                  description: >-
                    IdentifiedConnection defines a connection with additional
                    connection

                    identifier field.
                description: list of stored connections of the chain.
              pagination:
                title: pagination response
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
              height:
                title: query block height
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            description: >-
              QueryConnectionsResponse is the response type for the
              Query/Connections RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /ibc/core/connection/v1/connections/{connection_id}:
    get:
      summary: Connection queries an IBC connection end.
      operationId: IbcCoreConnectionV1Connection
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              connection:
                title: connection associated with the request identifier
                type: object
                properties:
                  client_id:
                    type: string
                    description: client associated with this connection.
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        identifier:
                          type: string
                          title: unique version identifier
                        features:
                          type: array
                          items:
                            type: string
                          title: >-
                            list of features compatible with the specified
                            identifier
                      description: >-
                        Version defines the versioning scheme used to negotiate
                        the IBC verison in

                        the connection handshake.
                    description: >-
                      IBC version which can be utilised to determine encodings
                      or protocols for

                      channels or packets utilising this connection.
                  state:
                    description: current state of the connection end.
                    type: string
                    enum:
                      - STATE_UNINITIALIZED_UNSPECIFIED
                      - STATE_INIT
                      - STATE_TRYOPEN
                      - STATE_OPEN
                    default: STATE_UNINITIALIZED_UNSPECIFIED
                  counterparty:
                    description: counterparty chain associated with this connection.
                    type: object
                    properties:
                      client_id:
                        type: string
                        description: >-
                          identifies the client on the counterparty chain
                          associated with a given

                          connection.
                      connection_id:
                        type: string
                        description: >-
                          identifies the connection end on the counterparty
                          chain associated with a

                          given connection.
                      prefix:
                        description: commitment merkle prefix of the counterparty chain.
                        type: object
                        properties:
                          key_prefix:
                            type: string
                            format: byte
                        title: >-
                          MerklePrefix is merkle path prefixed to the key.

                          The constructed key from the Path and the key will be
                          append(Path.KeyPath,

                          append(Path.KeyPrefix, key...))
                  delay_period:
                    type: string
                    format: uint64
                    description: >-
                      delay period that must pass before a consensus state can
                      be used for

                      packet-verification NOTE: delay period logic is only
                      implemented by some

                      clients.
                description: >-
                  ConnectionEnd defines a stateful object on a chain connected
                  to another

                  separate one.

                  NOTE: there must only be 2 defined ConnectionEnds to establish

                  a connection between two chains.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            description: >-
              QueryConnectionResponse is the response type for the
              Query/Connection RPC

              method. Besides the connection end, it includes a proof and the
              height from

              which the proof was retrieved.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection_id
          description: connection unique identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/connection/v1/connections/{connection_id}/client_state:
    get:
      summary: |-
        ConnectionClientState queries the client state associated with the
        connection.
      operationId: IbcCoreConnectionV1ConnectionClientState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              identified_client_state:
                title: client state associated with the channel
                type: object
                properties:
                  client_id:
                    type: string
                    title: client identifier
                  client_state:
                    title: client state
                    type: object
                    properties:
                      '@type':
                        type: string
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                    additionalProperties: {}
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                description: >-
                  IdentifiedClientState defines a client state with an
                  additional client

                  identifier field.
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryConnectionClientStateResponse is the response type for the
              Query/ConnectionClientState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection_id
          description: connection identifier
          in: path
          required: true
          type: string
      tags:
        - Query
  /ibc/core/connection/v1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      summary: |-
        ConnectionConsensusState queries the consensus state associated with the
        connection.
      operationId: IbcCoreConnectionV1ConnectionConsensusState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consensus_state:
                title: consensus state associated with the channel
                type: object
                properties:
                  '@type':
                    type: string
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                additionalProperties: {}
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
              client_id:
                type: string
                title: client ID associated with the consensus state
              proof:
                type: string
                format: byte
                title: merkle proof of existence
              proof_height:
                title: height at which the proof was retrieved
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
            title: |-
              QueryConnectionConsensusStateResponse is the response type for the
              Query/ConnectionConsensusState RPC method
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: connection_id
          description: connection identifier
          in: path
          required: true
          type: string
        - name: revision_number
          in: path
          required: true
          type: string
          format: uint64
        - name: revision_height
          in: path
          required: true
          type: string
          format: uint64
      tags:
        - Query
  /interchain_security/ccv/consumer/next-fee-distribution:
    get:
      summary: >-
        ConsumerGenesis queries the genesis state needed to start a consumer
        chain

        whose proposal has been accepted
      operationId: InterchainSecurityCcvConsumerV1QueryNextFeeDistribution
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  currentHeight:
                    type: string
                    format: int64
                    title: current block height at the time of querying
                  lastHeight:
                    type: string
                    format: int64
                    title: block height at which last distribution took place
                  nextHeight:
                    type: string
                    format: int64
                    title: block height at which next distribution will take place
                  distribution_fraction:
                    type: string
                    title: ratio between consumer and provider fee distribution
                  total:
                    type: string
                    title: total accruead fees at the time of querying
                  toProvider:
                    type: string
                    title: amount distibuted to provider chain
                  toConsumer:
                    type: string
                    title: amount distributed (kept) by consumer chain
                title: >-
                  NextFeeDistributionEstimate holds information about next fee
                  distribution
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/consumer/params:
    get:
      summary: QueryParams queries the ccv/consumer module parameters.
      operationId: InterchainSecurityCcvConsumerV1QueryParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
                properties:
                  enabled:
                    type: boolean
                    title: >-
                      TODO: Remove enabled flag and find a better way to setup
                      integration tests

                      See:
                      https://github.com/cosmos/interchain-security/issues/339
                  blocks_per_distribution_transmission:
                    type: string
                    format: int64
                    description: >-
                      /////////////////////

                      Distribution Params

                      Number of blocks between ibc-token-transfers from the
                      consumer chain to

                      the provider chain. Note that at this transmission event a
                      fraction of

                      the accumulated tokens are divided and sent consumer
                      redistribution

                      address.
                  distribution_transmission_channel:
                    type: string
                    description: >-
                      Channel, and provider-chain receiving address to send
                      distribution token

                      transfers over. These parameters is auto-set during the
                      consumer <->

                      provider handshake procedure.
                  provider_fee_pool_addr_str:
                    type: string
                  ccv_timeout_period:
                    type: string
                    title: >-
                      Sent CCV related IBC packets will timeout after this
                      duration
                  transfer_timeout_period:
                    type: string
                    title: >-
                      Sent transfer related IBC packets will timeout after this
                      duration
                  consumer_redistribution_fraction:
                    type: string
                    description: >-
                      The fraction of tokens allocated to the consumer
                      redistribution address

                      during distribution events. The fraction is a string
                      representing a

                      decimal number. For example "0.75" would represent 75%.
                  historical_entries:
                    type: string
                    format: int64
                    description: >-
                      The number of historical info entries to persist in store.

                      This param is a part of the cosmos sdk staking module. In
                      the case of 

                      a ccv enabled consumer chain, the ccv module acts as the
                      staking module.
                  unbonding_period:
                    type: string
                    description: >-
                      Unbonding period for the consumer,

                      which should be smaller than that of the provider in
                      general.
                  soft_opt_out_threshold:
                    type: string
                    title: >-
                      The threshold for the percentage of validators at the
                      bottom of the set who

                      can opt out of running the consumer chain without being
                      punished. For example, a

                      value of 0.05 means that the validators in the bottom 5%
                      of the set can opt out
                title: Params defines the parameters for CCV consumer module
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/provider/consumer_chain_start_proposals:
    get:
      summary: QueryConsumerChainStarts queries consumer chain start proposals.
      operationId: InterchainSecurityCcvProviderV1QueryConsumerChainStarts
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: object
                properties:
                  pending:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                          title: the title of the proposal
                        description:
                          type: string
                          title: the description of the proposal
                        chain_id:
                          type: string
                          description: >-
                            the proposed chain-id of the new consumer chain,
                            must be different from all other consumer chain ids
                            of the executing

                            provider chain.
                        initial_height:
                          description: >-
                            the proposed initial height of new consumer chain.

                            For a completely new chain, this will be {0,1}.
                            However, it may be different if this is a chain that
                            is converting to a consumer chain.
                          type: object
                          properties:
                            revision_number:
                              type: string
                              format: uint64
                              title: the revision that the client is currently on
                            revision_height:
                              type: string
                              format: uint64
                              title: the height within the given revision
                          title: >-
                            Height is a monotonically increasing data type

                            that can be compared against another Height for the
                            purposes of updating and

                            freezing clients
                        genesis_hash:
                          type: string
                          format: byte
                          description: >-
                            The hash of the consumer chain genesis state without
                            the consumer CCV module genesis params. 

                            It is used for off-chain confirmation of
                            genesis.json validity by validators and other
                            parties.
                        binary_hash:
                          type: string
                          format: byte
                          description: >-
                            The hash of the consumer chain binary that should be
                            run by validators on chain initialization.

                            It is used for off-chain confirmation of binary
                            validity by validators and other parties.
                        spawn_time:
                          type: string
                          format: date-time
                          description: >-
                            spawn time is the time on the provider chain at
                            which the consumer chain genesis is finalized and
                            all validators

                            will be responsible for starting their consumer
                            chain validator node.
                        unbonding_period:
                          type: string
                          description: >-
                            Unbonding period for the consumer,

                            which should be smaller than that of the provider in
                            general.
                        ccv_timeout_period:
                          type: string
                          title: >-
                            Sent CCV related IBC packets will timeout after this
                            duration
                        transfer_timeout_period:
                          type: string
                          title: >-
                            Sent transfer related IBC packets will timeout after
                            this duration
                        consumer_redistribution_fraction:
                          type: string
                          description: >-
                            The fraction of tokens allocated to the consumer
                            redistribution address

                            during distribution events. The fraction is a string
                            representing a

                            decimal number. For example "0.75" would represent
                            75%.
                        blocks_per_distribution_transmission:
                          type: string
                          format: int64
                          description: >-
                            BlocksPerDistributionTransmission is the number of
                            blocks between ibc-token-transfers from the consumer
                            chain to the provider chain.

                            On sending transmission event,
                            `consumer_redistribution_fraction` of the
                            accumulated tokens are sent to the consumer
                            redistribution address.
                        historical_entries:
                          type: string
                          format: int64
                          description: >-
                            The number of historical info entries to persist in
                            store.

                            This param is a part of the cosmos sdk staking
                            module. In the case of 

                            a ccv enabled consumer chain, the ccv module acts as
                            the staking module.
                      description: >-
                        ConsumerAdditionProposal is a governance proposal on the
                        provider chain to spawn a new consumer chain.

                        If it passes, then all validators on the provider chain
                        are expected to validate the consumer chain at spawn
                        time

                        or get slashed. It is recommended that spawn time occurs
                        after the proposal end time.
                    title: proposals waiting for spawn_time to pass
                description: >-
                  ConsumerAdditionProposals holds pending governance proposals
                  on the provider chain to spawn a new chain.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/provider/consumer_chain_stop_proposals:
    get:
      summary: QueryConsumerChainStops queries consumer chain stop proposals.
      operationId: InterchainSecurityCcvProviderV1QueryConsumerChainStops
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              proposals:
                type: object
                properties:
                  pending:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                          title: the title of the proposal
                        description:
                          type: string
                          title: the description of the proposal
                        chain_id:
                          type: string
                          title: the chain-id of the consumer chain to be stopped
                        stop_time:
                          type: string
                          format: date-time
                          title: >-
                            the time on the provider chain at which all
                            validators are responsible to stop their consumer
                            chain validator node
                      description: >-
                        ConsumerRemovalProposal is a governance proposal on the
                        provider chain to remove (and stop) a consumer chain.

                        If it passes, all the consumer chain's state is removed
                        from the provider chain. The outstanding unbonding

                        operation funds are released.
                    title: proposals waiting for stop_time to pass
                description: >-
                  ConsumerRemovalProposals holds pending governance proposals on
                  the provider chain to remove (and stop) a consumer chain.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/provider/consumer_chains:
    get:
      summary: |-
        ConsumerChains queries active consumer chains supported by the provider
        chain
      operationId: InterchainSecurityCcvProviderV1QueryConsumerChains
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              chains:
                type: array
                items:
                  type: object
                  properties:
                    chain_id:
                      type: string
                    client_id:
                      type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/provider/consumer_genesis/{chain_id}:
    get:
      summary: >-
        ConsumerGenesis queries the genesis state needed to start a consumer
        chain

        whose proposal has been accepted
      operationId: InterchainSecurityCcvProviderV1QueryConsumerGenesis
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              genesis_state:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      enabled:
                        type: boolean
                        title: >-
                          TODO: Remove enabled flag and find a better way to
                          setup integration tests

                          See:
                          https://github.com/cosmos/interchain-security/issues/339
                      blocks_per_distribution_transmission:
                        type: string
                        format: int64
                        description: >-
                          /////////////////////

                          Distribution Params

                          Number of blocks between ibc-token-transfers from the
                          consumer chain to

                          the provider chain. Note that at this transmission
                          event a fraction of

                          the accumulated tokens are divided and sent consumer
                          redistribution

                          address.
                      distribution_transmission_channel:
                        type: string
                        description: >-
                          Channel, and provider-chain receiving address to send
                          distribution token

                          transfers over. These parameters is auto-set during
                          the consumer <->

                          provider handshake procedure.
                      provider_fee_pool_addr_str:
                        type: string
                      ccv_timeout_period:
                        type: string
                        title: >-
                          Sent CCV related IBC packets will timeout after this
                          duration
                      transfer_timeout_period:
                        type: string
                        title: >-
                          Sent transfer related IBC packets will timeout after
                          this duration
                      consumer_redistribution_fraction:
                        type: string
                        description: >-
                          The fraction of tokens allocated to the consumer
                          redistribution address

                          during distribution events. The fraction is a string
                          representing a

                          decimal number. For example "0.75" would represent
                          75%.
                      historical_entries:
                        type: string
                        format: int64
                        description: >-
                          The number of historical info entries to persist in
                          store.

                          This param is a part of the cosmos sdk staking module.
                          In the case of 

                          a ccv enabled consumer chain, the ccv module acts as
                          the staking module.
                      unbonding_period:
                        type: string
                        description: >-
                          Unbonding period for the consumer,

                          which should be smaller than that of the provider in
                          general.
                      soft_opt_out_threshold:
                        type: string
                        title: >-
                          The threshold for the percentage of validators at the
                          bottom of the set who

                          can opt out of running the consumer chain without
                          being punished. For example, a

                          value of 0.05 means that the validators in the bottom
                          5% of the set can opt out
                    title: Params defines the parameters for CCV consumer module
                  provider_client_id:
                    type: string
                    description: empty for a new chain, filled in on restart.
                  provider_channel_id:
                    type: string
                    description: empty for a new chain, filled in on restart.
                  new_chain:
                    type: boolean
                    description: true for new chain GenesisState, false for chain restart.
                  provider_client_state:
                    description: >-
                      ProviderClientState filled in on new chain, nil on
                      restart.
                    type: object
                    properties:
                      chain_id:
                        type: string
                      trust_level:
                        type: object
                        properties:
                          numerator:
                            type: string
                            format: uint64
                          denominator:
                            type: string
                            format: uint64
                        description: >-
                          Fraction defines the protobuf message type for
                          tmmath.Fraction that only

                          supports positive values.
                      trusting_period:
                        type: string
                        title: >-
                          duration of the period since the LastestTimestamp
                          during which the

                          submitted headers are valid for upgrade
                      unbonding_period:
                        type: string
                        title: duration of the staking unbonding period
                      max_clock_drift:
                        type: string
                        description: >-
                          defines how much new (untrusted) header's Time can
                          drift into the future.
                      frozen_height:
                        title: >-
                          Block height when the client was frozen due to a
                          misbehaviour
                        type: object
                        properties:
                          revision_number:
                            type: string
                            format: uint64
                            title: the revision that the client is currently on
                          revision_height:
                            type: string
                            format: uint64
                            title: the height within the given revision
                        description: >-
                          Normally the RevisionHeight is incremented at each
                          height while keeping

                          RevisionNumber the same. However some consensus
                          algorithms may choose to

                          reset the height in certain conditions e.g. hard
                          forks, state-machine

                          breaking changes In these cases, the RevisionNumber is
                          incremented so that

                          height continues to be monitonically increasing even
                          as the RevisionHeight

                          gets reset
                      latest_height:
                        title: Latest height the client was updated to
                        type: object
                        properties:
                          revision_number:
                            type: string
                            format: uint64
                            title: the revision that the client is currently on
                          revision_height:
                            type: string
                            format: uint64
                            title: the height within the given revision
                        description: >-
                          Normally the RevisionHeight is incremented at each
                          height while keeping

                          RevisionNumber the same. However some consensus
                          algorithms may choose to

                          reset the height in certain conditions e.g. hard
                          forks, state-machine

                          breaking changes In these cases, the RevisionNumber is
                          incremented so that

                          height continues to be monitonically increasing even
                          as the RevisionHeight

                          gets reset
                      proof_specs:
                        type: array
                        items:
                          type: object
                          properties:
                            leaf_spec:
                              title: >-
                                any field in the ExistenceProof must be the same
                                as in this spec.

                                except Prefix, which is just the first bytes of
                                prefix (spec can be longer)
                              type: object
                              properties:
                                hash:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                                prehash_key:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                                prehash_value:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                                length:
                                  type: string
                                  enum:
                                    - NO_PREFIX
                                    - VAR_PROTO
                                    - VAR_RLP
                                    - FIXED32_BIG
                                    - FIXED32_LITTLE
                                    - FIXED64_BIG
                                    - FIXED64_LITTLE
                                    - REQUIRE_32_BYTES
                                    - REQUIRE_64_BYTES
                                  default: NO_PREFIX
                                  description: >-
                                    - NO_PREFIX: NO_PREFIX don't include any
                                    length info
                                     - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                                     - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                                     - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                                     - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                                     - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                                     - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                                     - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                                     - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                                  title: >-
                                    *

                                    LengthOp defines how to process the key and
                                    value of the LeafOp

                                    to include length information. After
                                    encoding the length with the given

                                    algorithm, the length will be prepended to
                                    the key and value bytes.

                                    (Each one with it's own encoded length)
                                prefix:
                                  type: string
                                  format: byte
                                  description: >-
                                    prefix is a fixed bytes that may optionally
                                    be included at the beginning to
                                    differentiate

                                    a leaf node from an inner node.
                              description: >-
                                *

                                LeafOp represents the raw key-value data we wish
                                to prove, and

                                must be flexible to represent the internal
                                transformation from

                                the original key-value pairs into the basis
                                hash, for many existing

                                merkle trees.


                                key and value are passed in. So that the
                                signature of this operation is:

                                leafOp(key, value) -> output


                                To process this, first prehash the keys and
                                values if needed (ANY means no hash in this
                                case):

                                hkey = prehashKey(key)

                                hvalue = prehashValue(value)


                                Then combine the bytes, and hash it

                                output = hash(prefix || length(hkey) || hkey ||
                                length(hvalue) || hvalue)
                            inner_spec:
                              type: object
                              properties:
                                child_order:
                                  type: array
                                  items:
                                    type: integer
                                    format: int32
                                  title: >-
                                    Child order is the ordering of the children
                                    node, must count from 0

                                    iavl tree is [0, 1] (left then right)

                                    merk is [0, 2, 1] (left, right, here)
                                child_size:
                                  type: integer
                                  format: int32
                                min_prefix_length:
                                  type: integer
                                  format: int32
                                max_prefix_length:
                                  type: integer
                                  format: int32
                                empty_child:
                                  type: string
                                  format: byte
                                  title: >-
                                    empty child is the prehash image that is
                                    used when one child is nil (eg. 20 bytes of
                                    0)
                                hash:
                                  type: string
                                  enum:
                                    - NO_HASH
                                    - SHA256
                                    - SHA512
                                    - KECCAK
                                    - RIPEMD160
                                    - BITCOIN
                                    - SHA512_256
                                  default: NO_HASH
                                  title: >-
                                    - NO_HASH: NO_HASH is the default if no data
                                    passed. Note this is an illegal argument
                                    some places.
                                     - BITCOIN: ripemd160(sha256(x))
                              description: >-
                                InnerSpec contains all store-specific structure
                                info to determine if two proofs from a

                                given store are neighbors.


                                This enables:


                                isLeftMost(spec: InnerSpec, op: InnerOp)

                                isRightMost(spec: InnerSpec, op: InnerOp)

                                isLeftNeighbor(spec: InnerSpec, left: InnerOp,
                                right: InnerOp)
                            max_depth:
                              type: integer
                              format: int32
                              title: >-
                                max_depth (if > 0) is the maximum number of
                                InnerOps allowed (mainly for fixed-depth tries)
                            min_depth:
                              type: integer
                              format: int32
                              title: >-
                                min_depth (if > 0) is the minimum number of
                                InnerOps allowed (mainly for fixed-depth tries)
                          description: >-
                            *

                            ProofSpec defines what the expected parameters are
                            for a given proof type.

                            This can be stored in the client and used to
                            validate any incoming proofs.


                            verify(ProofSpec, Proof) -> Proof | Error


                            As demonstrated in tests, if we don't fix the
                            algorithm used to calculate the

                            LeafHash for a given tree, there are many possible
                            key-value pairs that can

                            generate a given hash (by interpretting the preimage
                            differently).

                            We need this for proper security, requires client
                            knows a priori what

                            tree format server uses. But not in code, rather a
                            configuration object.
                        title: >-
                          Proof specifications used in verifying counterparty
                          state
                      upgrade_path:
                        type: array
                        items:
                          type: string
                        title: >-
                          Path at which next upgraded client will be committed.

                          Each element corresponds to the key for a single
                          CommitmentProof in the

                          chained proof. NOTE: ClientState must stored under

                          `{upgradePath}/{upgradeHeight}/clientState`
                          ConsensusState must be stored

                          under `{upgradepath}/{upgradeHeight}/consensusState`
                          For SDK chains using

                          the default upgrade module, upgrade_path should be
                          []string{"upgrade",

                          "upgradedIBCState"}`
                      allow_update_after_expiry:
                        type: boolean
                        title: >-
                          This flag, when set to true, will allow governance to
                          recover a client

                          which has expired
                      allow_update_after_misbehaviour:
                        type: boolean
                        title: >-
                          This flag, when set to true, will allow governance to
                          unfreeze a client

                          whose chain has experienced a misbehaviour event
                  provider_consensus_state:
                    description: >-
                      ProviderConsensusState filled in on new chain, nil on
                      restart.
                    type: object
                    properties:
                      timestamp:
                        type: string
                        format: date-time
                        description: >-
                          timestamp that corresponds to the block height in
                          which the ConsensusState

                          was stored.
                      root:
                        title: commitment root (i.e app hash)
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                        description: >-
                          MerkleRoot defines a merkle root hash.

                          In the Cosmos SDK, the AppHash of a block header
                          becomes the root.
                      next_validators_hash:
                        type: string
                        format: byte
                  maturing_packets:
                    type: array
                    items:
                      type: object
                      properties:
                        vscId:
                          type: string
                          format: uint64
                        maturity_time:
                          type: string
                          format: date-time
                      title: >-
                        MaturingVSCPacket contains the maturing time of a
                        received VSCPacket
                    description: MaturingPackets nil on new chain, filled in on restart.
                  initial_val_set:
                    type: array
                    items:
                      type: object
                      properties:
                        pub_key:
                          type: object
                          properties:
                            ed25519:
                              type: string
                              format: byte
                            secp256k1:
                              type: string
                              format: byte
                          title: >-
                            PublicKey defines the keys available for use with
                            Tendermint Validators
                        power:
                          type: string
                          format: int64
                      title: ValidatorUpdate
                    description: InitialValset filled in on new chain and on restart.
                  height_to_valset_update_id:
                    type: array
                    items:
                      type: object
                      properties:
                        height:
                          type: string
                          format: uint64
                        valset_update_id:
                          type: string
                          format: uint64
                      title: >-
                        HeightValsetUpdateID defines the genesis information for
                        the mapping 

                        of each block height to a valset update id
                    description: >-
                      HeightToValsetUpdateId nil on new chain, filled in on
                      restart.
                  outstanding_downtime_slashing:
                    type: array
                    items:
                      type: object
                      properties:
                        validator_consensus_address:
                          type: string
                      description: >-
                        OutstandingDowntime defines the genesis information for
                        each validator

                        flagged with an outstanding downtime slashing.
                    description: >-
                      OutstandingDowntimes nil on new chain, filled  in on
                      restart.
                  pending_consumer_packets:
                    description: >-
                      PendingConsumerPackets nil on new chain, filled in on
                      restart.
                    type: object
                    properties:
                      list:
                        type: array
                        items:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - CONSUMER_PACKET_TYPE_UNSPECIFIED
                                - CONSUMER_PACKET_TYPE_SLASH
                                - CONSUMER_PACKET_TYPE_VSCM
                              default: CONSUMER_PACKET_TYPE_UNSPECIFIED
                              description: >-
                                ConsumerPacketType indicates interchain security
                                specific packet types.

                                 - CONSUMER_PACKET_TYPE_UNSPECIFIED: UNSPECIFIED packet type
                                 - CONSUMER_PACKET_TYPE_SLASH: Slash packet
                                 - CONSUMER_PACKET_TYPE_VSCM: VSCMatured packet
                            slashPacketData:
                              type: object
                              properties:
                                validator:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                      title: The first 20 bytes of SHA256(public key)
                                    power:
                                      type: string
                                      format: int64
                                      description: The voting power
                                      title: >-
                                        PubKey pub_key = 2
                                        [(gogoproto.nullable)=false];
                                  title: Validator
                                valset_update_id:
                                  type: string
                                  format: uint64
                                  title: >-
                                    map to the infraction block height on the
                                    provider
                                infraction:
                                  title: >-
                                    tell if the slashing is for a downtime or a
                                    double-signing infraction
                                  type: string
                                  enum:
                                    - INFRACTION_TYPE_UNSPECIFIED
                                    - INFRACTION_TYPE_DOUBLE_SIGN
                                    - INFRACTION_TYPE_DOWNTIME
                                  default: INFRACTION_TYPE_UNSPECIFIED
                                  description: >-
                                    InfractionType indicates the infraction type
                                    a validator commited.

                                     - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                                     - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                                     - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
                              description: >-
                                This packet is sent from the consumer chain to
                                the provider chain

                                to request the slashing of a validator as a
                                result of an infraction

                                committed on the consumer chain.
                            vscMaturedPacketData:
                              type: object
                              properties:
                                valset_update_id:
                                  type: string
                                  format: uint64
                                  title: >-
                                    the id of the VSC packet that reached
                                    maturity
                              description: >-
                                This packet is sent from the consumer chain to
                                the provider chain

                                to notify that a VSC packet reached maturity on
                                the consumer chain.
                          title: >-
                            ConsumerPacketData contains a consumer packet data
                            and a type tag
                  last_transmission_block_height:
                    description: >-
                      LastTransmissionBlockHeight nil on new chain, filled in on
                      restart.
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                    title: >-
                      LastTransmissionBlockHeight is the last time validator
                      holding

                      pools were transmitted to the provider chain
                  preCCV:
                    type: boolean
                    title: >-
                      flag indicating whether the consumer CCV module starts in
                      pre-CCV state
                title: GenesisState defines the CCV consumer chain genesis state
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: chain_id
          in: path
          required: true
          type: string
      tags:
        - Query
  /interchain_security/ccv/provider/pending_consumer_packets:
    get:
      summary: >-
        QueryThrottledConsumerPacketData returns a list of pending packet data
        instances

        (slash packet and vsc matured) for a single consumer chain
      operationId: InterchainSecurityCcvProviderV1QueryThrottledConsumerPacketData
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              chain_id:
                type: string
              size:
                type: string
                format: uint64
              packetDataInstances:
                type: array
                items:
                  type: object
                  properties:
                    slash_packet:
                      type: object
                      properties:
                        validator:
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                              title: The first 20 bytes of SHA256(public key)
                            power:
                              type: string
                              format: int64
                              description: The voting power
                              title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
                          title: Validator
                        valset_update_id:
                          type: string
                          format: uint64
                          title: map to the infraction block height on the provider
                        infraction:
                          title: >-
                            tell if the slashing is for a downtime or a
                            double-signing infraction
                          type: string
                          enum:
                            - INFRACTION_TYPE_UNSPECIFIED
                            - INFRACTION_TYPE_DOUBLE_SIGN
                            - INFRACTION_TYPE_DOWNTIME
                          default: INFRACTION_TYPE_UNSPECIFIED
                          description: >-
                            InfractionType indicates the infraction type a
                            validator commited.

                             - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                             - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                             - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
                      description: >-
                        This packet is sent from the consumer chain to the
                        provider chain

                        to request the slashing of a validator as a result of an
                        infraction

                        committed on the consumer chain.
                    vsc_matured_packet:
                      type: object
                      properties:
                        valset_update_id:
                          type: string
                          format: uint64
                          title: the id of the VSC packet that reached maturity
                      description: >-
                        This packet is sent from the consumer chain to the
                        provider chain

                        to notify that a VSC packet reached maturity on the
                        consumer chain.
                  title: >-
                    ThrottledPacketDataWrapper contains either SlashPacketData
                    or VSCMaturedPacketData
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: chain_id
          in: query
          required: false
          type: string
      tags:
        - Query
  /interchain_security/ccv/provider/throttle_state:
    get:
      summary: >-
        QueryThrottleState returns the main on-chain state relevant to currently
        throttled slash packets
      operationId: InterchainSecurityCcvProviderV1QueryThrottleState
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              slash_meter:
                type: string
                format: int64
                title: current slash_meter state
              slash_meter_allowance:
                type: string
                format: int64
                description: >-
                  allowance of voting power units (int) that the slash meter is
                  given per replenish period

                  this also serves as the max value for the meter.
              next_replenish_candidate:
                type: string
                format: date-time
                title: >-
                  next time the slash meter could potentially be replenished,
                  iff it's not full
              packets:
                type: array
                items:
                  type: object
                  properties:
                    global_entry:
                      type: object
                      properties:
                        recv_time:
                          type: string
                          format: date-time
                          description: >-
                            Block time that slash packet was received by
                            provider chain.

                            This field is used for store key iteration ordering.
                        consumer_chain_id:
                          type: string
                          description: The consumer that sent a slash packet.
                        ibc_seq_num:
                          type: string
                          format: uint64
                          description: >-
                            The IBC sequence number of the recv packet.  

                            This field is used in the store key to ensure
                            uniqueness.
                        provider_val_cons_addr:
                          description: >-
                            The provider's consensus address of the validator
                            being slashed. 

                            This field is used to obtain validator power in
                            HandleThrottleQueues.


                            This field is not used in the store key, but is
                            persisted in value bytes, see QueueGlobalSlashEntry.
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                          title: >-
                            A validator's consensus address on the provider
                            chain
                      description: >-
                        A persisted queue entry indicating that a slash packet
                        data instance needs to be handled.

                        This type belongs in the "global" queue, to coordinate
                        slash packet handling times between consumers.
                    data:
                      type: object
                      properties:
                        validator:
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                              title: The first 20 bytes of SHA256(public key)
                            power:
                              type: string
                              format: int64
                              description: The voting power
                              title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
                          title: Validator
                        valset_update_id:
                          type: string
                          format: uint64
                          title: map to the infraction block height on the provider
                        infraction:
                          title: >-
                            tell if the slashing is for a downtime or a
                            double-signing infraction
                          type: string
                          enum:
                            - INFRACTION_TYPE_UNSPECIFIED
                            - INFRACTION_TYPE_DOUBLE_SIGN
                            - INFRACTION_TYPE_DOWNTIME
                          default: INFRACTION_TYPE_UNSPECIFIED
                          description: >-
                            InfractionType indicates the infraction type a
                            validator commited.

                             - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                             - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                             - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
                      description: >-
                        This packet is sent from the consumer chain to the
                        provider chain

                        to request the slashing of a validator as a result of an
                        infraction

                        committed on the consumer chain.
                  description: >-
                    A query wrapper type for the global entry and data relevant
                    to a throttled slash packet.
                title: data relevant to currently throttled slash packets
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      tags:
        - Query
  /interchain_security/ccv/provider/validator_consumer_addr:
    get:
      summary: |-
        QueryValidatorConsumerAddr queries the address
        assigned by a validator for a consumer chain.
      operationId: InterchainSecurityCcvProviderV1QueryValidatorConsumerAddr
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              consumer_address:
                type: string
                title: The address of the validator on the consumer chain
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: chain_id
          description: The id of the consumer chain
          in: query
          required: false
          type: string
        - name: provider_address
          description: The consensus address of the validator on the provider chain
          in: query
          required: false
          type: string
      tags:
        - Query
  /interchain_security/ccv/provider/validator_provider_addr:
    get:
      summary: |-
        QueryProviderAddr returns the provider chain validator
        given a consumer chain validator address
      operationId: InterchainSecurityCcvProviderV1QueryValidatorProviderAddr
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              provider_address:
                type: string
                title: The address of the validator on the provider chain
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                      description: >-
                        A URL/resource name that uniquely identifies the type of
                        the serialized

                        protocol buffer message. This string must contain at
                        least

                        one "/" character. The last segment of the URL's path
                        must represent

                        the fully qualified name of the type (as in

                        `path/google.protobuf.Duration`). The name should be in
                        a canonical form

                        (e.g., leading "." is not accepted).


                        In practice, teams usually precompile into the binary
                        all types that they

                        expect it to use in the context of Any. However, for
                        URLs which use the

                        scheme `http`, `https`, or no scheme, one can optionally
                        set up a type

                        server that maps type URLs to message definitions as
                        follows:


                        * If no scheme is provided, `https` is assumed.

                        * An HTTP GET on the URL must yield a
                        [google.protobuf.Type][]
                          value in binary format, or produce an error.
                        * Applications are allowed to cache lookup results based
                        on the
                          URL, or have them precompiled into a binary to avoid any
                          lookup. Therefore, binary compatibility needs to be preserved
                          on changes to types. (Use versioned type names to manage
                          breaking changes.)

                        Note: this functionality is not currently available in
                        the official

                        protobuf release, and it is not used for type URLs
                        beginning with

                        type.googleapis.com.


                        Schemes other than `http`, `https` (or the empty scheme)
                        might be

                        used with implementation specific semantics.
                  additionalProperties: {}
                  description: >-
                    `Any` contains an arbitrary serialized protocol buffer
                    message along with a

                    URL that describes the type of the serialized message.


                    Protobuf library provides support to pack/unpack Any values
                    in the form

                    of utility functions or additional generated methods of the
                    Any type.


                    Example 1: Pack and unpack a message in C++.

                        Foo foo = ...;
                        Any any;
                        any.PackFrom(foo);
                        ...
                        if (any.UnpackTo(&foo)) {
                          ...
                        }

                    Example 2: Pack and unpack a message in Java.

                        Foo foo = ...;
                        Any any = Any.pack(foo);
                        ...
                        if (any.is(Foo.class)) {
                          foo = any.unpack(Foo.class);
                        }

                     Example 3: Pack and unpack a message in Python.

                        foo = Foo(...)
                        any = Any()
                        any.Pack(foo)
                        ...
                        if any.Is(Foo.DESCRIPTOR):
                          any.Unpack(foo)
                          ...

                     Example 4: Pack and unpack a message in Go

                         foo := &pb.Foo{...}
                         any, err := anypb.New(foo)
                         if err != nil {
                           ...
                         }
                         ...
                         foo := &pb.Foo{}
                         if err := any.UnmarshalTo(foo); err != nil {
                           ...
                         }

                    The pack methods provided by protobuf library will by
                    default use

                    'type.googleapis.com/full.type.name' as the type URL and the
                    unpack

                    methods only use the fully qualified type name after the
                    last '/'

                    in the type URL, for example "foo.bar.com/x/y.z" will yield
                    type

                    name "y.z".



                    JSON

                    ====

                    The JSON representation of an `Any` value uses the regular

                    representation of the deserialized, embedded message, with
                    an

                    additional field `@type` which contains the type URL.
                    Example:

                        package google.profile;
                        message Person {
                          string first_name = 1;
                          string last_name = 2;
                        }

                        {
                          "@type": "type.googleapis.com/google.profile.Person",
                          "firstName": <string>,
                          "lastName": <string>
                        }

                    If the embedded message type is well-known and has a custom
                    JSON

                    representation, that representation will be embedded adding
                    a field

                    `value` which holds the custom JSON in addition to the
                    `@type`

                    field. Example (for message [google.protobuf.Duration][]):

                        {
                          "@type": "type.googleapis.com/google.protobuf.Duration",
                          "value": "1.212s"
                        }
      parameters:
        - name: chain_id
          description: The id of the provider chain
          in: query
          required: false
          type: string
        - name: consumer_address
          description: The consensus address of the validator on the consumer chain
          in: query
          required: false
          type: string
      tags:
        - Query
  /jim380/Re/fix/account/registration:
    get:
      operationId: Jim380ReFixAccountRegistrationAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              AccountRegistration:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                    companyName:
                      type: string
                    website:
                      type: string
                    socialMediaLinks:
                      type: string
                    createdAt:
                      type: string
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/account/registration/{address}:
    get:
      summary: Queries a list of AccountRegistration items.
      operationId: Jim380ReFixAccountRegistration
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              AccountRegistration:
                type: object
                properties:
                  address:
                    type: string
                  companyName:
                    type: string
                  website:
                    type: string
                  socialMediaLinks:
                    type: string
                  createdAt:
                    type: string
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: address
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/market/data:
    get:
      operationId: Jim380ReFixMarketDataAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              MarketData:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    marketDataRequest:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        mdReqID:
                          type: string
                          title: >-
                            MDReqID field provides a unique identifier for the
                            market data request

                            message
                        subscriptionRequestType:
                          type: string
                          format: int64
                          description: >-
                            subscriptionRequestType field corresponds to the FIX
                            tag 263, and the

                            values 0 and 1 respectively indicate snapshot and
                            snapshot + incremental

                            updates.
                        marketDepth:
                          type: string
                          format: int64
                          title: >-
                            MarketDepth field is used to indicate the level of
                            market data depth that

                            is being requested. Specifically, it specifies how
                            many levels of the order

                            book should be included in the response to the
                            request
                        mdUpdateType:
                          type: string
                          format: int64
                          title: >-
                            The mdUpdateType field specifies the type of updates
                            that the sender wants

                            to receive in response to their request for market
                            data. The possible

                            values are "0" for full refresh, "1" for incremental
                            refresh, and "2" for

                            removing a single price level
                        noRelatedSym:
                          type: string
                          format: int64
                          title: >-
                            The NoRelatedSym field in a Market Data Request
                            message is used to indicate

                            the number of symbols or instruments for which the
                            market data is being

                            requested
                        symbol:
                          type: string
                          title: >-
                            In the context of a Market Data Request message in
                            the FIX protocol, the

                            Symbol field refers to the security or financial
                            instrument for which

                            market data is being requested
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                      title: Market Data Request message
                    marketDataSnapShotFullRefresh:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        mdReqID:
                          type: string
                          title: >-
                            The identifier of an originating market data request
                            (corresponds to the

                            MDReqID field specified in the Market Data Request
                            message)
                        symbol:
                          type: string
                          title: >-
                            The ticker symbol that is being quoted (such as
                            BTC/USDT)
                        noMDEntries:
                          type: string
                          format: int64
                          title: >-
                            The number of market data entries (bids or offers)
                            listed in a request
                        mdEntries:
                          type: array
                          items:
                            type: object
                            properties:
                              mdUpdateAction:
                                type: string
                                format: int64
                                description: >-
                                  The type of update action that is being
                                  reported for the MDEntry.

                                  Possible values are "0" for new, "1" for
                                  change, and "2" for delete.
                              mdEntryType:
                                type: string
                                format: int64
                                title: 'The side of a quote: 0 — bid , 1 — ask'
                              mdEntryPx:
                                type: string
                                title: The price for a market data entry
                              mdEntrySize:
                                type: string
                                description: >-
                                  The quantity (tradeable volume) of a market
                                  data entry.
                            title: Market Data Entry message
                          title: >-
                            The repeated group of MDEntry fields that provide
                            multiple entries
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                      title: Market Data Snapshot/Full Refresh message
                    marketDataIncremental:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        mdReqID:
                          type: string
                          title: >-
                            The identifier of an originating market data request
                            (corresponds to the

                            MDReqID field specified in the Market Data Request
                            message)
                        NoMDEntries:
                          type: string
                          format: int64
                          title: >-
                            The number of market data entries (bids or offers)
                            listed in a request
                        mdEntries:
                          type: array
                          items:
                            type: object
                            properties:
                              mdUpdateAction:
                                type: string
                                format: int64
                                description: >-
                                  The type of update action that is being
                                  reported for the MDEntry.

                                  Possible values are "0" for new, "1" for
                                  change, and "2" for delete.
                              mdEntryType:
                                type: string
                                format: int64
                                title: 'The side of a quote: 0 — bid , 1 — ask'
                              mdEntryPx:
                                type: string
                                title: The price for a market data entry
                              mdEntrySize:
                                type: string
                                description: >-
                                  The quantity (tradeable volume) of a market
                                  data entry.
                            title: Market Data Entry message
                          description: >-
                            The repeated group of MDEntry fields that provide
                            the incremental updates

                            for the market data.
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                      title: Market Data Incremental message
                    marketDataRequestReject:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        mdReqID:
                          type: string
                          title: >-
                            The identifier of a Market Data Request that has
                            been rejected
                        mdReqRejReason:
                          type: string
                          format: int64
                          title: Indicates the reason why a request has been rejected
                        text:
                          type: string
                          title: >-
                            The detailed information (if available) on why a
                            request has been rejected
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                      title: Market Data Request Reject message
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/market/data/{mdReqID}:
    get:
      summary: Queries a list of MarketData items.
      operationId: Jim380ReFixMarketData
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              MarketData:
                type: object
                properties:
                  sessionID:
                    type: string
                  marketDataRequest:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      mdReqID:
                        type: string
                        title: >-
                          MDReqID field provides a unique identifier for the
                          market data request

                          message
                      subscriptionRequestType:
                        type: string
                        format: int64
                        description: >-
                          subscriptionRequestType field corresponds to the FIX
                          tag 263, and the

                          values 0 and 1 respectively indicate snapshot and
                          snapshot + incremental

                          updates.
                      marketDepth:
                        type: string
                        format: int64
                        title: >-
                          MarketDepth field is used to indicate the level of
                          market data depth that

                          is being requested. Specifically, it specifies how
                          many levels of the order

                          book should be included in the response to the request
                      mdUpdateType:
                        type: string
                        format: int64
                        title: >-
                          The mdUpdateType field specifies the type of updates
                          that the sender wants

                          to receive in response to their request for market
                          data. The possible

                          values are "0" for full refresh, "1" for incremental
                          refresh, and "2" for

                          removing a single price level
                      noRelatedSym:
                        type: string
                        format: int64
                        title: >-
                          The NoRelatedSym field in a Market Data Request
                          message is used to indicate

                          the number of symbols or instruments for which the
                          market data is being

                          requested
                      symbol:
                        type: string
                        title: >-
                          In the context of a Market Data Request message in the
                          FIX protocol, the

                          Symbol field refers to the security or financial
                          instrument for which

                          market data is being requested
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                    title: Market Data Request message
                  marketDataSnapShotFullRefresh:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      mdReqID:
                        type: string
                        title: >-
                          The identifier of an originating market data request
                          (corresponds to the

                          MDReqID field specified in the Market Data Request
                          message)
                      symbol:
                        type: string
                        title: >-
                          The ticker symbol that is being quoted (such as
                          BTC/USDT)
                      noMDEntries:
                        type: string
                        format: int64
                        title: >-
                          The number of market data entries (bids or offers)
                          listed in a request
                      mdEntries:
                        type: array
                        items:
                          type: object
                          properties:
                            mdUpdateAction:
                              type: string
                              format: int64
                              description: >-
                                The type of update action that is being reported
                                for the MDEntry.

                                Possible values are "0" for new, "1" for change,
                                and "2" for delete.
                            mdEntryType:
                              type: string
                              format: int64
                              title: 'The side of a quote: 0 — bid , 1 — ask'
                            mdEntryPx:
                              type: string
                              title: The price for a market data entry
                            mdEntrySize:
                              type: string
                              description: >-
                                The quantity (tradeable volume) of a market data
                                entry.
                          title: Market Data Entry message
                        title: >-
                          The repeated group of MDEntry fields that provide
                          multiple entries
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                    title: Market Data Snapshot/Full Refresh message
                  marketDataIncremental:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      mdReqID:
                        type: string
                        title: >-
                          The identifier of an originating market data request
                          (corresponds to the

                          MDReqID field specified in the Market Data Request
                          message)
                      NoMDEntries:
                        type: string
                        format: int64
                        title: >-
                          The number of market data entries (bids or offers)
                          listed in a request
                      mdEntries:
                        type: array
                        items:
                          type: object
                          properties:
                            mdUpdateAction:
                              type: string
                              format: int64
                              description: >-
                                The type of update action that is being reported
                                for the MDEntry.

                                Possible values are "0" for new, "1" for change,
                                and "2" for delete.
                            mdEntryType:
                              type: string
                              format: int64
                              title: 'The side of a quote: 0 — bid , 1 — ask'
                            mdEntryPx:
                              type: string
                              title: The price for a market data entry
                            mdEntrySize:
                              type: string
                              description: >-
                                The quantity (tradeable volume) of a market data
                                entry.
                          title: Market Data Entry message
                        description: >-
                          The repeated group of MDEntry fields that provide the
                          incremental updates

                          for the market data.
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                    title: Market Data Incremental message
                  marketDataRequestReject:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      mdReqID:
                        type: string
                        title: >-
                          The identifier of a Market Data Request that has been
                          rejected
                      mdReqRejReason:
                        type: string
                        format: int64
                        title: Indicates the reason why a request has been rejected
                      text:
                        type: string
                        title: >-
                          The detailed information (if available) on why a
                          request has been rejected
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                    title: Market Data Request Reject message
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: mdReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/order/mass/status:
    get:
      operationId: Jim380ReFixOrderMassStatusAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrderMassStatus:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    orderMassStatusRequest:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        massStatusReqID:
                          type: string
                          description: (586) The unique identifier for the status request.
                        massStatusReqType:
                          type: string
                          description: >-
                            (585) The type of status request. Valid values are
                            "All" to request the

                            status of all orders in the group, or "Partial" to
                            request the status of a

                            subset of orders in the group.
                        clOrdID:
                          type: string
                          description: (49) The unique identifier for the group of orders.
                        account:
                          type: string
                          description: (1) The account that the orders belong to.
                        symbol:
                          type: string
                          description: >-
                            (55) The symbol of the security that the orders are
                            for.
                        securityID:
                          type: string
                          description: >-
                            (48) The security identifier of the security that
                            the orders are for.
                        tradingSessionID:
                          type: string
                          description: (336) The trading session that the orders are for.
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                      description: >-
                        Order Mass Status Request with fields, tags and
                        descriptions.
                    orderMassStatusReport:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        clOrdID:
                          type: string
                          description: (49) The unique identifier for the order.
                        massStatusReqID:
                          type: string
                          description: (585) The unique identifier for the status request.
                        account:
                          type: string
                          description: (1) The account that the order belongs to.
                        symbol:
                          type: string
                          description: >-
                            (55) The symbol of the security that the order is
                            for.
                        securityID:
                          type: string
                          description: >-
                            (48) The security identifier of the security that
                            the order is for.
                        tradingSessionID:
                          type: string
                          description: (336) The trading session that the order is for.
                        ordStatus:
                          type: string
                          description: >-
                            (39)  The status of the order. Valid values are
                            "New", "Pending",

                            "PartiallyFilled", "Filled", "Cancelled", and
                            "Expired".
                        execType:
                          type: string
                          description: >-
                            (150) The type of execution report. Valid values are
                            "New", "Replace",

                            "Cancel", and "Status".
                        ordQty:
                          type: string
                          description: >-
                            (38) The quantity of the order that has been
                            executed.
                        lastPx:
                          type: string
                          description: (31) The last price at which the order was executed.
                        cumQty:
                          type: string
                          description: >-
                            (44) The total quantity of the order that has been
                            executed.
                        avgPx:
                          type: string
                          description: >-
                            (69) The average price at which the order has been
                            executed.
                        leavesQty:
                          type: string
                          description: >-
                            (11) The quantity of the order that remains to be
                            executed.
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                      description: >-
                        Order Mass Status Report with fields, tags and
                        descriptions.
                    OrderMassStatusRequestReject:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        refSeqID:
                          type: string
                          description: >-
                            (34) The unique identifier for the rejected message.

                            the RefSeqID field in the Order Mass Status Request
                            Reject (AR) message

                            will contain the same value as the MassStatusReqID
                            field in the original

                            Order Mass Status Request (AF) message.
                        rejCode:
                          type: string
                          title: >-
                            (587) The reason for the rejection. Valid values
                            are:

                            1: Invalid message type

                            2: Invalid field

                            3: Invalid value

                            4: Unsupported feature

                            5: Insufficient permissions

                            6: Internal error

                            7: Timeout

                            8: Other
                        text:
                          type: string
                          description: >-
                            (588) A text description of the reason for the
                            rejection.
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                      description: >-
                        Order Mass Status Request Reject with fields, tags and
                        descriptions.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/order/mass/status/{massStatusReqID}:
    get:
      summary: Queries a list of OrderMassStatus items.
      operationId: Jim380ReFixOrderMassStatus
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrderMassStatus:
                type: object
                properties:
                  sessionID:
                    type: string
                  orderMassStatusRequest:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      massStatusReqID:
                        type: string
                        description: (586) The unique identifier for the status request.
                      massStatusReqType:
                        type: string
                        description: >-
                          (585) The type of status request. Valid values are
                          "All" to request the

                          status of all orders in the group, or "Partial" to
                          request the status of a

                          subset of orders in the group.
                      clOrdID:
                        type: string
                        description: (49) The unique identifier for the group of orders.
                      account:
                        type: string
                        description: (1) The account that the orders belong to.
                      symbol:
                        type: string
                        description: >-
                          (55) The symbol of the security that the orders are
                          for.
                      securityID:
                        type: string
                        description: >-
                          (48) The security identifier of the security that the
                          orders are for.
                      tradingSessionID:
                        type: string
                        description: (336) The trading session that the orders are for.
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                    description: >-
                      Order Mass Status Request with fields, tags and
                      descriptions.
                  orderMassStatusReport:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      clOrdID:
                        type: string
                        description: (49) The unique identifier for the order.
                      massStatusReqID:
                        type: string
                        description: (585) The unique identifier for the status request.
                      account:
                        type: string
                        description: (1) The account that the order belongs to.
                      symbol:
                        type: string
                        description: (55) The symbol of the security that the order is for.
                      securityID:
                        type: string
                        description: >-
                          (48) The security identifier of the security that the
                          order is for.
                      tradingSessionID:
                        type: string
                        description: (336) The trading session that the order is for.
                      ordStatus:
                        type: string
                        description: >-
                          (39)  The status of the order. Valid values are "New",
                          "Pending",

                          "PartiallyFilled", "Filled", "Cancelled", and
                          "Expired".
                      execType:
                        type: string
                        description: >-
                          (150) The type of execution report. Valid values are
                          "New", "Replace",

                          "Cancel", and "Status".
                      ordQty:
                        type: string
                        description: (38) The quantity of the order that has been executed.
                      lastPx:
                        type: string
                        description: (31) The last price at which the order was executed.
                      cumQty:
                        type: string
                        description: >-
                          (44) The total quantity of the order that has been
                          executed.
                      avgPx:
                        type: string
                        description: >-
                          (69) The average price at which the order has been
                          executed.
                      leavesQty:
                        type: string
                        description: >-
                          (11) The quantity of the order that remains to be
                          executed.
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                    description: >-
                      Order Mass Status Report with fields, tags and
                      descriptions.
                  OrderMassStatusRequestReject:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      refSeqID:
                        type: string
                        description: >-
                          (34) The unique identifier for the rejected message.

                          the RefSeqID field in the Order Mass Status Request
                          Reject (AR) message

                          will contain the same value as the MassStatusReqID
                          field in the original

                          Order Mass Status Request (AF) message.
                      rejCode:
                        type: string
                        title: |-
                          (587) The reason for the rejection. Valid values are:
                          1: Invalid message type
                          2: Invalid field
                          3: Invalid value
                          4: Unsupported feature
                          5: Insufficient permissions
                          6: Internal error
                          7: Timeout
                          8: Other
                      text:
                        type: string
                        description: >-
                          (588) A text description of the reason for the
                          rejection.
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                    description: >-
                      Order Mass Status Request Reject with fields, tags and
                      descriptions.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: massStatusReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/orders:
    get:
      operationId: Jim380ReFixOrdersAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Orders:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                      description: >-
                        A string used to identify the trading session for which
                        the message is

                        intended.
                    header:
                      description: >-
                        A FIX protocol header containing standard message fields
                        such as

                        beginString, bodyLength, msgType, etc.
                      type: object
                      properties:
                        beginString:
                          type: string
                          description: >-
                            This field specifies the version of the FIX protocol
                            being used. For

                            example, "FIX.4.4" indicates version 4.4 of the
                            protocol.
                        bodyLength:
                          type: string
                          format: int64
                          description: >-
                            This field specifies the length of the message body
                            in bytes.
                        msgType:
                          type: string
                          title: >-
                            This field identifies the type of message being
                            sent. For example, "D"

                            indicates a New Order Single message
                        senderCompID:
                          type: string
                          title: >-
                            This field identifies the sender of the message.
                            This is typically a unique

                            identifier assigned to each party that uses the FIX
                            protocol
                        targetCompID:
                          type: string
                          description: This field identifies the recipient of the message.
                        msgSeqNum:
                          type: string
                          format: int64
                          title: >-
                            Is a field in the FIX protocol message header that
                            is used to assign a

                            unique sequence number to each message
                        sendingTime:
                          type: string
                          title: >-
                            This field specifies the time that the message was
                            sent
                      title: >-
                        This message header contains fields that identify the
                        message being sent and

                        its sender and recipient
                    clOrdID:
                      type: string
                      title: >-
                        A unique identifier assigned by the client to the order.
                        It is used to

                        identify the order in future messages related to the
                        order
                    symbol:
                      type: string
                      description: The symbol or instrument that the order is for.
                    side:
                      type: string
                      format: int64
                      title: >-
                        An integer indicating whether the order is a buy or a
                        sell. The values are

                        typically 1 for buy and 2 for sell
                    orderQty:
                      type: string
                      title: The quantity of the instrument that the order is for
                    ordType:
                      type: string
                      format: int64
                      title: >-
                        An integer indicating the type of order. Common values
                        include 1 for

                        market, 2 for limit, 3 for stop, and 4 for stop limit
                    price:
                      type: string
                      title: >-
                        The price at which the order should be executed. This
                        field is required for

                        limit and stop limit orders
                    timeInForce:
                      type: string
                      format: int64
                      title: >-
                        An integer indicating how long the order should remain
                        active. Common

                        values include 0 for day, 1 for good till canceled, and
                        2 for fill or kill
                    text:
                      type: string
                      description: >-
                        A free-form text field that can be used to provide
                        additional information

                        about the order.
                    transactTime:
                      type: string
                      title: >-
                        The time the message was sent, expressed in UTC
                        timestamp format
                    trailer:
                      title: >-
                        A FIX protocol trailer containing standard message
                        fields such as checkSum
                      type: object
                      properties:
                        checkSum:
                          type: string
                          format: int64
                          description: >-
                            The checksum value is calculated by summing the
                            ASCII values of all

                            characters in the message (excluding the SOH (start
                            of header) and ETX (end

                            of text) characters), taking the sum modulo 256, and
                            converting the result

                            to a two-character hexadecimal string.
                  title: This message is used to represent orders in the FIX protocol
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/orders/cancel/reject/{clOrdID}:
    get:
      summary: Queries a list of OrdersCancelReject items.
      operationId: Jim380ReFixOrdersCancelReject
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrdersCancelReject:
                type: object
                properties:
                  sessionID:
                    type: string
                    description: >-
                      A string field that specifies the FIX session ID for the
                      message.
                  header:
                    description: >-
                      A Header field that contains standard header information
                      for the message,

                      such as the message type, sender and receiver
                      identification, and sequence

                      number.
                    type: object
                    properties:
                      beginString:
                        type: string
                        description: >-
                          This field specifies the version of the FIX protocol
                          being used. For

                          example, "FIX.4.4" indicates version 4.4 of the
                          protocol.
                      bodyLength:
                        type: string
                        format: int64
                        description: >-
                          This field specifies the length of the message body in
                          bytes.
                      msgType:
                        type: string
                        title: >-
                          This field identifies the type of message being sent.
                          For example, "D"

                          indicates a New Order Single message
                      senderCompID:
                        type: string
                        title: >-
                          This field identifies the sender of the message. This
                          is typically a unique

                          identifier assigned to each party that uses the FIX
                          protocol
                      targetCompID:
                        type: string
                        description: This field identifies the recipient of the message.
                      msgSeqNum:
                        type: string
                        format: int64
                        title: >-
                          Is a field in the FIX protocol message header that is
                          used to assign a

                          unique sequence number to each message
                      sendingTime:
                        type: string
                        title: >-
                          This field specifies the time that the message was
                          sent
                    title: >-
                      This message header contains fields that identify the
                      message being sent and

                      its sender and recipient
                  orderID:
                    type: string
                    title: >-
                      A string field that contains the ID of the order that was
                      rejected. When an

                      order is submitted to a trading venue or OMS, it assigns a
                      unique orderID

                      to that order to track and identify it within its system.
                      If the order is

                      subsequently rejected, the trading venue or OMS would
                      typically provide the

                      orderID associated with the rejected order in the
                      OrdersCancelReject

                      message
                  origClOrdID:
                    type: string
                    description: >-
                      A string field that contains the original client order ID
                      for the order

                      that was cancelled.
                  clOrdID:
                    type: string
                    description: >-
                      A string field that contains the client order ID for the
                      order that was

                      cancelled or modified.
                  cxlRejReason:
                    type: string
                    format: int64
                    title: >-
                      An integer field that specifies the reason for the order
                      cancellation

                      rejection, using a standard set of values defined in the
                      FIX protocol.

                      Typically, the cxlRejReason field provides a numerical
                      code or value that

                      represents a specific reason for the order cancellation
                      rejection. Examples

                      of common cxlRejReason values in the FIX protocol include:
                       0: Too Late to Cancel
                       1: Unknown Order
                       2: Broker/Exchange Option
                       3: Order Already in Pending Cancel or Pending Replace Status
                       4: Unable to Process Request
                       5: Duplicate ClOrdID
                       6: Unsupported Order Characteristic
                       7: Other
                  cxlRejResponseTo:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the message sequence
                      number of the order

                      cancellation request to which this message is responding.
                      When an order

                      cancellation request is submitted, it is assigned a unique
                      message sequence

                      number by the FIX engine or the trading system. This
                      sequence number is

                      used to track and identify specific messages within the
                      order flow. The

                      cxlRejResponseTo field in the OrdersCancelReject message
                      is populated with

                      the sequence number of the original order cancellation
                      request message that

                      resulted in the rejection.
                  transactTime:
                    type: string
                    description: A string field that specifies the time of the transaction.
                  trailer:
                    description: >-
                      A Trailer field that contains standard trailer information
                      for the message,

                      such as the message checksum.
                    type: object
                    properties:
                      checkSum:
                        type: string
                        format: int64
                        description: >-
                          The checksum value is calculated by summing the ASCII
                          values of all

                          characters in the message (excluding the SOH (start of
                          header) and ETX (end

                          of text) characters), taking the sum modulo 256, and
                          converting the result

                          to a two-character hexadecimal string.
                    title: >-
                      This message trailer contains a checksum field that is
                      used to ensure message

                      integrity
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: clOrdID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/orders/cancel/rejects:
    get:
      operationId: Jim380ReFixOrdersCancelRejectAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrdersCancelReject:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                      description: >-
                        A string field that specifies the FIX session ID for the
                        message.
                    header:
                      description: >-
                        A Header field that contains standard header information
                        for the message,

                        such as the message type, sender and receiver
                        identification, and sequence

                        number.
                      type: object
                      properties:
                        beginString:
                          type: string
                          description: >-
                            This field specifies the version of the FIX protocol
                            being used. For

                            example, "FIX.4.4" indicates version 4.4 of the
                            protocol.
                        bodyLength:
                          type: string
                          format: int64
                          description: >-
                            This field specifies the length of the message body
                            in bytes.
                        msgType:
                          type: string
                          title: >-
                            This field identifies the type of message being
                            sent. For example, "D"

                            indicates a New Order Single message
                        senderCompID:
                          type: string
                          title: >-
                            This field identifies the sender of the message.
                            This is typically a unique

                            identifier assigned to each party that uses the FIX
                            protocol
                        targetCompID:
                          type: string
                          description: This field identifies the recipient of the message.
                        msgSeqNum:
                          type: string
                          format: int64
                          title: >-
                            Is a field in the FIX protocol message header that
                            is used to assign a

                            unique sequence number to each message
                        sendingTime:
                          type: string
                          title: >-
                            This field specifies the time that the message was
                            sent
                      title: >-
                        This message header contains fields that identify the
                        message being sent and

                        its sender and recipient
                    orderID:
                      type: string
                      title: >-
                        A string field that contains the ID of the order that
                        was rejected. When an

                        order is submitted to a trading venue or OMS, it assigns
                        a unique orderID

                        to that order to track and identify it within its
                        system. If the order is

                        subsequently rejected, the trading venue or OMS would
                        typically provide the

                        orderID associated with the rejected order in the
                        OrdersCancelReject

                        message
                    origClOrdID:
                      type: string
                      description: >-
                        A string field that contains the original client order
                        ID for the order

                        that was cancelled.
                    clOrdID:
                      type: string
                      description: >-
                        A string field that contains the client order ID for the
                        order that was

                        cancelled or modified.
                    cxlRejReason:
                      type: string
                      format: int64
                      title: >-
                        An integer field that specifies the reason for the order
                        cancellation

                        rejection, using a standard set of values defined in the
                        FIX protocol.

                        Typically, the cxlRejReason field provides a numerical
                        code or value that

                        represents a specific reason for the order cancellation
                        rejection. Examples

                        of common cxlRejReason values in the FIX protocol
                        include:
                         0: Too Late to Cancel
                         1: Unknown Order
                         2: Broker/Exchange Option
                         3: Order Already in Pending Cancel or Pending Replace Status
                         4: Unable to Process Request
                         5: Duplicate ClOrdID
                         6: Unsupported Order Characteristic
                         7: Other
                    cxlRejResponseTo:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the message sequence
                        number of the order

                        cancellation request to which this message is
                        responding. When an order

                        cancellation request is submitted, it is assigned a
                        unique message sequence

                        number by the FIX engine or the trading system. This
                        sequence number is

                        used to track and identify specific messages within the
                        order flow. The

                        cxlRejResponseTo field in the OrdersCancelReject message
                        is populated with

                        the sequence number of the original order cancellation
                        request message that

                        resulted in the rejection.
                    transactTime:
                      type: string
                      description: >-
                        A string field that specifies the time of the
                        transaction.
                    trailer:
                      description: >-
                        A Trailer field that contains standard trailer
                        information for the message,

                        such as the message checksum.
                      type: object
                      properties:
                        checkSum:
                          type: string
                          format: int64
                          description: >-
                            The checksum value is calculated by summing the
                            ASCII values of all

                            characters in the message (excluding the SOH (start
                            of header) and ETX (end

                            of text) characters), taking the sum modulo 256, and
                            converting the result

                            to a two-character hexadecimal string.
                      title: >-
                        This message trailer contains a checksum field that is
                        used to ensure message

                        integrity
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/orders/cancel/request/{clOrdID}:
    get:
      summary: Queries a list of OrdersCancelRequest items.
      operationId: Jim380ReFixOrdersCancelRequest
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrdersCancelRequest:
                type: object
                properties:
                  sessionID:
                    type: string
                    title: >-
                      A string field that specifies the FIX session ID for the
                      message
                  header:
                    title: >-
                      A Header field that contains standard header information
                      for the message,

                      such as the message type, sender and receiver
                      identification, and sequence

                      number
                    type: object
                    properties:
                      beginString:
                        type: string
                        description: >-
                          This field specifies the version of the FIX protocol
                          being used. For

                          example, "FIX.4.4" indicates version 4.4 of the
                          protocol.
                      bodyLength:
                        type: string
                        format: int64
                        description: >-
                          This field specifies the length of the message body in
                          bytes.
                      msgType:
                        type: string
                        title: >-
                          This field identifies the type of message being sent.
                          For example, "D"

                          indicates a New Order Single message
                      senderCompID:
                        type: string
                        title: >-
                          This field identifies the sender of the message. This
                          is typically a unique

                          identifier assigned to each party that uses the FIX
                          protocol
                      targetCompID:
                        type: string
                        description: This field identifies the recipient of the message.
                      msgSeqNum:
                        type: string
                        format: int64
                        title: >-
                          Is a field in the FIX protocol message header that is
                          used to assign a

                          unique sequence number to each message
                      sendingTime:
                        type: string
                        title: >-
                          This field specifies the time that the message was
                          sent
                  origClOrdID:
                    type: string
                    title: >-
                      A string field that contains the original client order ID
                      for the order

                      that was cancelled
                  clOrdID:
                    type: string
                    title: >-
                      A string field that contains the client order ID for the
                      order that was

                      cancelled or modified
                  trailer:
                    title: >-
                      A Trailer field that contains standard trailer information
                      for the message,

                      such as the message checksum
                    type: object
                    properties:
                      checkSum:
                        type: string
                        format: int64
                        description: >-
                          The checksum value is calculated by summing the ASCII
                          values of all

                          characters in the message (excluding the SOH (start of
                          header) and ETX (end

                          of text) characters), taking the sum modulo 256, and
                          converting the result

                          to a two-character hexadecimal string.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: clOrdID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/orders/cancel/requests:
    get:
      operationId: Jim380ReFixOrdersCancelRequestAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrdersCancelRequest:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                      title: >-
                        A string field that specifies the FIX session ID for the
                        message
                    header:
                      title: >-
                        A Header field that contains standard header information
                        for the message,

                        such as the message type, sender and receiver
                        identification, and sequence

                        number
                      type: object
                      properties:
                        beginString:
                          type: string
                          description: >-
                            This field specifies the version of the FIX protocol
                            being used. For

                            example, "FIX.4.4" indicates version 4.4 of the
                            protocol.
                        bodyLength:
                          type: string
                          format: int64
                          description: >-
                            This field specifies the length of the message body
                            in bytes.
                        msgType:
                          type: string
                          title: >-
                            This field identifies the type of message being
                            sent. For example, "D"

                            indicates a New Order Single message
                        senderCompID:
                          type: string
                          title: >-
                            This field identifies the sender of the message.
                            This is typically a unique

                            identifier assigned to each party that uses the FIX
                            protocol
                        targetCompID:
                          type: string
                          description: This field identifies the recipient of the message.
                        msgSeqNum:
                          type: string
                          format: int64
                          title: >-
                            Is a field in the FIX protocol message header that
                            is used to assign a

                            unique sequence number to each message
                        sendingTime:
                          type: string
                          title: >-
                            This field specifies the time that the message was
                            sent
                    origClOrdID:
                      type: string
                      title: >-
                        A string field that contains the original client order
                        ID for the order

                        that was cancelled
                    clOrdID:
                      type: string
                      title: >-
                        A string field that contains the client order ID for the
                        order that was

                        cancelled or modified
                    trailer:
                      title: >-
                        A Trailer field that contains standard trailer
                        information for the message,

                        such as the message checksum
                      type: object
                      properties:
                        checkSum:
                          type: string
                          format: int64
                          description: >-
                            The checksum value is calculated by summing the
                            ASCII values of all

                            characters in the message (excluding the SOH (start
                            of header) and ETX (end

                            of text) characters), taking the sum modulo 256, and
                            converting the result

                            to a two-character hexadecimal string.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/orders/execution/report/{clOrdID}:
    get:
      summary: Queries a list of OrdersExecutionReport items.
      operationId: Jim380ReFixOrdersExecutionReport
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrdersExecutionReport:
                type: object
                properties:
                  sessionID:
                    type: string
                    description: >-
                      A string field that specifies the FIX session ID for the
                      message.
                  header:
                    description: >-
                      A Header field that contains standard header information
                      for the message,

                      such as the message type, sender and receiver
                      identification, and sequence

                      number.
                    type: object
                    properties:
                      beginString:
                        type: string
                        description: >-
                          This field specifies the version of the FIX protocol
                          being used. For

                          example, "FIX.4.4" indicates version 4.4 of the
                          protocol.
                      bodyLength:
                        type: string
                        format: int64
                        description: >-
                          This field specifies the length of the message body in
                          bytes.
                      msgType:
                        type: string
                        title: >-
                          This field identifies the type of message being sent.
                          For example, "D"

                          indicates a New Order Single message
                      senderCompID:
                        type: string
                        title: >-
                          This field identifies the sender of the message. This
                          is typically a unique

                          identifier assigned to each party that uses the FIX
                          protocol
                      targetCompID:
                        type: string
                        description: This field identifies the recipient of the message.
                      msgSeqNum:
                        type: string
                        format: int64
                        title: >-
                          Is a field in the FIX protocol message header that is
                          used to assign a

                          unique sequence number to each message
                      sendingTime:
                        type: string
                        title: >-
                          This field specifies the time that the message was
                          sent
                    title: >-
                      This message header contains fields that identify the
                      message being sent and

                      its sender and recipient
                  clOrdID:
                    type: string
                    description: >-
                      A string field that contains the client order ID for the
                      order being

                      reported.
                  orderID:
                    type: string
                    title: >-
                      A string field that contains the ID of the order being
                      reported. OrderID is

                      a string field that contains the unique identifier
                      assigned to an order by

                      the system or trading platform. It is typically generated
                      by the system

                      upon order submission and is used to uniquely identify the
                      order within the

                      system. The orderID is useful for internal system
                      processes, such as order

                      matching, order book management, and order status tracking
                  execID:
                    type: string
                    title: >-
                      A string field that contains the ID of the execution being
                      reported, if

                      any. It is a string field that contains the identifier
                      assigned to a

                      particular execution of an order. Each execution of an
                      order typically has

                      a separate execID associated with it. The execID can be
                      used to uniquely

                      identify and track a specific execution in the order
                      execution report. It

                      is useful for monitoring the status, details, and timing
                      of individual

                      executions within the overall order lifecycle. The execID
                      field in the FIX

                      protocol can be auto-generated by the trading venue or the
                      FIX protocol

                      software when responding with an execution report. The
                      trading venue's

                      execID serves as a local identifier within their own
                      system to track and

                      reference executions. It allows the trading venue to
                      uniquely identify each

                      execution and associate it with the relevant order and
                      trade details. When

                      sending an execution report to clients or counterparties
                      via the FIX

                      protocol, the trading venue includes its own generated
                      execID value in the

                      execution report message. This enables the recipient to
                      correlate the

                      execution report with the specific execution on the
                      trading venue's side
                  ordStatus:
                    type: string
                    description: >-
                      A string field that indicates the current status of the
                      order, such as

                      "New", "Partially filled", "Filled", "Cancelled", "Pending
                      Cancel",

                      "Rejected", etc.
                  execType:
                    type: string
                    description: >-
                      A string field that indicates the type of the execution
                      being reported,

                      such as "New", "Partial fill", "Fill", "Done for day",
                      "Cancelled", etc.
                  symbol:
                    type: string
                    description: A string field that identifies the security being traded.
                  side:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the side of the order (buy
                      or sell).
                  orderQty:
                    type: string
                    description: An integer field that specifies the quantity of the order.
                  price:
                    type: string
                    description: An integer field that specifies the price of the order.
                  timeInForce:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the time-in-force value
                      for the order, such

                      as "Day", "GTC" (Good 'Til Cancelled), "IOC" (Immediate or
                      Cancel), etc.
                  lastPx:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the price of the last
                      execution, if any.
                  lastQty:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the quantity of the last
                      execution, if any.
                  leavesQty:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the quantity of the order
                      that remains open

                      and has not yet been filled or cancelled.
                  cumQty:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the total quantity of the
                      order that has

                      been filled.
                  avgPx:
                    type: string
                    format: int64
                    description: >-
                      An integer field that specifies the average price of all
                      executions that

                      have occurred for the order.
                  text:
                    type: string
                    description: >-
                      A string field that provides additional information about
                      the order status

                      or execution, such as an error message or reason for
                      rejection.
                  transactTime:
                    type: string
                    description: A string field that specifies the time of the transaction.
                  trailer:
                    description: >-
                      A Trailer field that contains standard trailer information
                      for the message,

                      such as the message checksum.
                    type: object
                    properties:
                      checkSum:
                        type: string
                        format: int64
                        description: >-
                          The checksum value is calculated by summing the ASCII
                          values of all

                          characters in the message (excluding the SOH (start of
                          header) and ETX (end

                          of text) characters), taking the sum modulo 256, and
                          converting the result

                          to a two-character hexadecimal string.
                    title: >-
                      This message trailer contains a checksum field that is
                      used to ensure message

                      integrity
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: clOrdID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/orders/execution/reports:
    get:
      operationId: Jim380ReFixOrdersExecutionReportAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              OrdersExecutionReport:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                      description: >-
                        A string field that specifies the FIX session ID for the
                        message.
                    header:
                      description: >-
                        A Header field that contains standard header information
                        for the message,

                        such as the message type, sender and receiver
                        identification, and sequence

                        number.
                      type: object
                      properties:
                        beginString:
                          type: string
                          description: >-
                            This field specifies the version of the FIX protocol
                            being used. For

                            example, "FIX.4.4" indicates version 4.4 of the
                            protocol.
                        bodyLength:
                          type: string
                          format: int64
                          description: >-
                            This field specifies the length of the message body
                            in bytes.
                        msgType:
                          type: string
                          title: >-
                            This field identifies the type of message being
                            sent. For example, "D"

                            indicates a New Order Single message
                        senderCompID:
                          type: string
                          title: >-
                            This field identifies the sender of the message.
                            This is typically a unique

                            identifier assigned to each party that uses the FIX
                            protocol
                        targetCompID:
                          type: string
                          description: This field identifies the recipient of the message.
                        msgSeqNum:
                          type: string
                          format: int64
                          title: >-
                            Is a field in the FIX protocol message header that
                            is used to assign a

                            unique sequence number to each message
                        sendingTime:
                          type: string
                          title: >-
                            This field specifies the time that the message was
                            sent
                      title: >-
                        This message header contains fields that identify the
                        message being sent and

                        its sender and recipient
                    clOrdID:
                      type: string
                      description: >-
                        A string field that contains the client order ID for the
                        order being

                        reported.
                    orderID:
                      type: string
                      title: >-
                        A string field that contains the ID of the order being
                        reported. OrderID is

                        a string field that contains the unique identifier
                        assigned to an order by

                        the system or trading platform. It is typically
                        generated by the system

                        upon order submission and is used to uniquely identify
                        the order within the

                        system. The orderID is useful for internal system
                        processes, such as order

                        matching, order book management, and order status
                        tracking
                    execID:
                      type: string
                      title: >-
                        A string field that contains the ID of the execution
                        being reported, if

                        any. It is a string field that contains the identifier
                        assigned to a

                        particular execution of an order. Each execution of an
                        order typically has

                        a separate execID associated with it. The execID can be
                        used to uniquely

                        identify and track a specific execution in the order
                        execution report. It

                        is useful for monitoring the status, details, and timing
                        of individual

                        executions within the overall order lifecycle. The
                        execID field in the FIX

                        protocol can be auto-generated by the trading venue or
                        the FIX protocol

                        software when responding with an execution report. The
                        trading venue's

                        execID serves as a local identifier within their own
                        system to track and

                        reference executions. It allows the trading venue to
                        uniquely identify each

                        execution and associate it with the relevant order and
                        trade details. When

                        sending an execution report to clients or counterparties
                        via the FIX

                        protocol, the trading venue includes its own generated
                        execID value in the

                        execution report message. This enables the recipient to
                        correlate the

                        execution report with the specific execution on the
                        trading venue's side
                    ordStatus:
                      type: string
                      description: >-
                        A string field that indicates the current status of the
                        order, such as

                        "New", "Partially filled", "Filled", "Cancelled",
                        "Pending Cancel",

                        "Rejected", etc.
                    execType:
                      type: string
                      description: >-
                        A string field that indicates the type of the execution
                        being reported,

                        such as "New", "Partial fill", "Fill", "Done for day",
                        "Cancelled", etc.
                    symbol:
                      type: string
                      description: >-
                        A string field that identifies the security being
                        traded.
                    side:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the side of the order
                        (buy or sell).
                    orderQty:
                      type: string
                      description: >-
                        An integer field that specifies the quantity of the
                        order.
                    price:
                      type: string
                      description: An integer field that specifies the price of the order.
                    timeInForce:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the time-in-force value
                        for the order, such

                        as "Day", "GTC" (Good 'Til Cancelled), "IOC" (Immediate
                        or Cancel), etc.
                    lastPx:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the price of the last
                        execution, if any.
                    lastQty:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the quantity of the last
                        execution, if any.
                    leavesQty:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the quantity of the
                        order that remains open

                        and has not yet been filled or cancelled.
                    cumQty:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the total quantity of
                        the order that has

                        been filled.
                    avgPx:
                      type: string
                      format: int64
                      description: >-
                        An integer field that specifies the average price of all
                        executions that

                        have occurred for the order.
                    text:
                      type: string
                      description: >-
                        A string field that provides additional information
                        about the order status

                        or execution, such as an error message or reason for
                        rejection.
                    transactTime:
                      type: string
                      description: >-
                        A string field that specifies the time of the
                        transaction.
                    trailer:
                      description: >-
                        A Trailer field that contains standard trailer
                        information for the message,

                        such as the message checksum.
                      type: object
                      properties:
                        checkSum:
                          type: string
                          format: int64
                          description: >-
                            The checksum value is calculated by summing the
                            ASCII values of all

                            characters in the message (excluding the SOH (start
                            of header) and ETX (end

                            of text) characters), taking the sum modulo 256, and
                            converting the result

                            to a two-character hexadecimal string.
                      title: >-
                        This message trailer contains a checksum field that is
                        used to ensure message

                        integrity
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/orders/{clOrdID}:
    get:
      summary: Queries a list of Orders items.
      operationId: Jim380ReFixOrders
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Orders:
                type: object
                properties:
                  sessionID:
                    type: string
                    description: >-
                      A string used to identify the trading session for which
                      the message is

                      intended.
                  header:
                    description: >-
                      A FIX protocol header containing standard message fields
                      such as

                      beginString, bodyLength, msgType, etc.
                    type: object
                    properties:
                      beginString:
                        type: string
                        description: >-
                          This field specifies the version of the FIX protocol
                          being used. For

                          example, "FIX.4.4" indicates version 4.4 of the
                          protocol.
                      bodyLength:
                        type: string
                        format: int64
                        description: >-
                          This field specifies the length of the message body in
                          bytes.
                      msgType:
                        type: string
                        title: >-
                          This field identifies the type of message being sent.
                          For example, "D"

                          indicates a New Order Single message
                      senderCompID:
                        type: string
                        title: >-
                          This field identifies the sender of the message. This
                          is typically a unique

                          identifier assigned to each party that uses the FIX
                          protocol
                      targetCompID:
                        type: string
                        description: This field identifies the recipient of the message.
                      msgSeqNum:
                        type: string
                        format: int64
                        title: >-
                          Is a field in the FIX protocol message header that is
                          used to assign a

                          unique sequence number to each message
                      sendingTime:
                        type: string
                        title: >-
                          This field specifies the time that the message was
                          sent
                    title: >-
                      This message header contains fields that identify the
                      message being sent and

                      its sender and recipient
                  clOrdID:
                    type: string
                    title: >-
                      A unique identifier assigned by the client to the order.
                      It is used to

                      identify the order in future messages related to the order
                  symbol:
                    type: string
                    description: The symbol or instrument that the order is for.
                  side:
                    type: string
                    format: int64
                    title: >-
                      An integer indicating whether the order is a buy or a
                      sell. The values are

                      typically 1 for buy and 2 for sell
                  orderQty:
                    type: string
                    title: The quantity of the instrument that the order is for
                  ordType:
                    type: string
                    format: int64
                    title: >-
                      An integer indicating the type of order. Common values
                      include 1 for

                      market, 2 for limit, 3 for stop, and 4 for stop limit
                  price:
                    type: string
                    title: >-
                      The price at which the order should be executed. This
                      field is required for

                      limit and stop limit orders
                  timeInForce:
                    type: string
                    format: int64
                    title: >-
                      An integer indicating how long the order should remain
                      active. Common

                      values include 0 for day, 1 for good till canceled, and 2
                      for fill or kill
                  text:
                    type: string
                    description: >-
                      A free-form text field that can be used to provide
                      additional information

                      about the order.
                  transactTime:
                    type: string
                    title: >-
                      The time the message was sent, expressed in UTC timestamp
                      format
                  trailer:
                    title: >-
                      A FIX protocol trailer containing standard message fields
                      such as checkSum
                    type: object
                    properties:
                      checkSum:
                        type: string
                        format: int64
                        description: >-
                          The checksum value is calculated by summing the ASCII
                          values of all

                          characters in the message (excluding the SOH (start of
                          header) and ETX (end

                          of text) characters), taking the sum modulo 256, and
                          converting the result

                          to a two-character hexadecimal string.
                title: This message is used to represent orders in the FIX protocol
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: clOrdID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/params:
    get:
      summary: Parameters queries the parameters of the module.
      operationId: Jim380ReFixParams
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              params:
                description: params holds all the parameters of this module.
                type: object
            description: >-
              QueryParamsResponse is response type for the Query/Params RPC
              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      tags:
        - Query
  /jim380/Re/fix/quote/{quoteReqID}:
    get:
      summary: Queries a list of Quote items.
      operationId: Jim380ReFixQuote
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Quote:
                type: object
                properties:
                  sessionID:
                    type: string
                  quoteRequest:
                    type: object
                    properties:
                      header:
                        title: Standard header for the message
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      quoteReqID:
                        type: string
                        title: Unique identifier for the Quote Request message
                      symbol:
                        type: string
                        title: >-
                          Ticker symbol or instrument code for the security
                          being quoted
                      securityID:
                        type: string
                        title: Identifier for the security being quoted
                      securityIDSource:
                        type: string
                        title: Specifies the source of the security identifier
                      side:
                        type: string
                        title: Indicates whether the quote is for a buy or sell order
                      orderQty:
                        type: string
                        title: Quantity of the security being quoted
                      futSettDate:
                        type: string
                        title: Date of the future settlement
                      settlDate2:
                        type: string
                        title: Secondary settlement date for the security
                      account:
                        type: string
                        title: Account number for the order
                      bidPx:
                        type: string
                        title: >-
                          Price at which the buyer is willing to buy the
                          security
                      offerPx:
                        type: string
                        title: >-
                          Price at which the seller is willing to sell the
                          security
                      currency:
                        type: string
                        title: Currency of the quoted price
                      validUntilTime:
                        type: string
                        title: Time after which the quote is no longer valid
                      expireTime:
                        type: string
                        title: Time at which the quote will expire
                      quoteType:
                        type: string
                        title: Type of quote being requested (e.g. Indicative, Firm)
                      bidSize:
                        type: string
                        title: Quantity of securities offered at the bid price
                      offerSize:
                        type: string
                        title: Quantity of securities offered at the offer price
                      mic:
                        type: string
                        title: Market identification code
                      text:
                        type: string
                        description: >-
                          Additional information or comments about the quote
                          request.
                      trailer:
                        title: Standard trailer for the message
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                  quoteAcknowledgement:
                    type: object
                    properties:
                      header:
                        title: standard Header
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                      quoteReqID:
                        type: string
                        title: >-
                          Unique identifier for the original Quote Request
                          message
                      quoteID:
                        type: string
                        title: Unique identifier for the Quote
                      quoteStatus:
                        type: string
                        title: Status of the Quote (e.g. Accepted, Rejected, Expired)
                      quoteType:
                        type: string
                        title: Type of Quote (e.g. Indicative, Firm)
                      securityID:
                        type: string
                        title: dentifier for the security being quoted
                      securityIDSource:
                        type: string
                        title: Specifies the source of the security identifier
                      symbol:
                        type: string
                        title: >-
                          Ticker symbol or instrument code for the security
                          being quoted
                      side:
                        type: string
                        title: indicates whether the quote is for a buy or sell order
                      orderQty:
                        type: string
                        title: Quantity of the security being quoted
                      lastQty:
                        type: string
                        title: Quantity of the last trade
                      lastPx:
                        type: string
                        title: Price of the last trade
                      bidPx:
                        type: string
                        title: >-
                          Price at which the buyer is willing to buy the
                          security
                      offerPx:
                        type: string
                        title: >-
                          Price at which the seller is willing to sell the
                          security
                      currency:
                        type: string
                        title: Currency of the quoted price
                      settlDate:
                        type: string
                        title: Settlement date for the security
                      validUntilTime:
                        type: string
                        title: Time after which the quote is no longer valid
                      expireTime:
                        type: string
                        title: Time at which the quote will expire
                      text:
                        type: string
                        title: Additional information or comments about the quote
                      noQuoteQualifiers:
                        type: string
                        title: Number of Quote Qualifiers
                      quoteQualifier:
                        type: string
                        title: >-
                          Additional information about the quote (e.g. Yield,
                          Size)
                      noLegs:
                        type: string
                        title: >-
                          Number of legs in the security (for multi-legged
                          securities)
                      legSymbol:
                        type: string
                        title: >-
                          Ticker symbol or instrument code for each leg of the
                          security
                      legSecurityID:
                        type: string
                        title: Identifier for each leg of the security
                      legSecurityIDSource:
                        type: string
                        title: >-
                          Specifies the source of the identifier for each leg of
                          the security
                      legRatioQty:
                        type: string
                        title: >-
                          Ratio of one leg to the other in a multi-legged
                          security
                      trailer:
                        title: standard Trailer
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                  quoteRequestReject:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                      quoteReqID:
                        type: string
                        title: >-
                          The ID of the original Quote Request message that is
                          being rejected
                      quoteRequestRejectReason:
                        type: string
                        description: >-
                          A code indicating the reason for rejecting the Quote
                          Request, Examples

                          include "Invalid instrument requested", "Unknown
                          instrument", "Unsupported

                          request type", etc.
                      text:
                        type: string
                        title: >-
                          A human-readable description of the reason for
                          rejecting the Quote Request
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: quoteReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/quote/{sessionID}:
    get:
      operationId: Jim380ReFixQuotesBySessionID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Quote:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    quoteRequest:
                      type: object
                      properties:
                        header:
                          title: Standard header for the message
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        quoteReqID:
                          type: string
                          title: Unique identifier for the Quote Request message
                        symbol:
                          type: string
                          title: >-
                            Ticker symbol or instrument code for the security
                            being quoted
                        securityID:
                          type: string
                          title: Identifier for the security being quoted
                        securityIDSource:
                          type: string
                          title: Specifies the source of the security identifier
                        side:
                          type: string
                          title: >-
                            Indicates whether the quote is for a buy or sell
                            order
                        orderQty:
                          type: string
                          title: Quantity of the security being quoted
                        futSettDate:
                          type: string
                          title: Date of the future settlement
                        settlDate2:
                          type: string
                          title: Secondary settlement date for the security
                        account:
                          type: string
                          title: Account number for the order
                        bidPx:
                          type: string
                          title: >-
                            Price at which the buyer is willing to buy the
                            security
                        offerPx:
                          type: string
                          title: >-
                            Price at which the seller is willing to sell the
                            security
                        currency:
                          type: string
                          title: Currency of the quoted price
                        validUntilTime:
                          type: string
                          title: Time after which the quote is no longer valid
                        expireTime:
                          type: string
                          title: Time at which the quote will expire
                        quoteType:
                          type: string
                          title: >-
                            Type of quote being requested (e.g. Indicative,
                            Firm)
                        bidSize:
                          type: string
                          title: Quantity of securities offered at the bid price
                        offerSize:
                          type: string
                          title: Quantity of securities offered at the offer price
                        mic:
                          type: string
                          title: Market identification code
                        text:
                          type: string
                          description: >-
                            Additional information or comments about the quote
                            request.
                        trailer:
                          title: Standard trailer for the message
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                    quoteAcknowledgement:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        quoteReqID:
                          type: string
                          title: >-
                            Unique identifier for the original Quote Request
                            message
                        quoteID:
                          type: string
                          title: Unique identifier for the Quote
                        quoteStatus:
                          type: string
                          title: >-
                            Status of the Quote (e.g. Accepted, Rejected,
                            Expired)
                        quoteType:
                          type: string
                          title: Type of Quote (e.g. Indicative, Firm)
                        securityID:
                          type: string
                          title: dentifier for the security being quoted
                        securityIDSource:
                          type: string
                          title: Specifies the source of the security identifier
                        symbol:
                          type: string
                          title: >-
                            Ticker symbol or instrument code for the security
                            being quoted
                        side:
                          type: string
                          title: >-
                            indicates whether the quote is for a buy or sell
                            order
                        orderQty:
                          type: string
                          title: Quantity of the security being quoted
                        lastQty:
                          type: string
                          title: Quantity of the last trade
                        lastPx:
                          type: string
                          title: Price of the last trade
                        bidPx:
                          type: string
                          title: >-
                            Price at which the buyer is willing to buy the
                            security
                        offerPx:
                          type: string
                          title: >-
                            Price at which the seller is willing to sell the
                            security
                        currency:
                          type: string
                          title: Currency of the quoted price
                        settlDate:
                          type: string
                          title: Settlement date for the security
                        validUntilTime:
                          type: string
                          title: Time after which the quote is no longer valid
                        expireTime:
                          type: string
                          title: Time at which the quote will expire
                        text:
                          type: string
                          title: Additional information or comments about the quote
                        noQuoteQualifiers:
                          type: string
                          title: Number of Quote Qualifiers
                        quoteQualifier:
                          type: string
                          title: >-
                            Additional information about the quote (e.g. Yield,
                            Size)
                        noLegs:
                          type: string
                          title: >-
                            Number of legs in the security (for multi-legged
                            securities)
                        legSymbol:
                          type: string
                          title: >-
                            Ticker symbol or instrument code for each leg of the
                            security
                        legSecurityID:
                          type: string
                          title: Identifier for each leg of the security
                        legSecurityIDSource:
                          type: string
                          title: >-
                            Specifies the source of the identifier for each leg
                            of the security
                        legRatioQty:
                          type: string
                          title: >-
                            Ratio of one leg to the other in a multi-legged
                            security
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                    quoteRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                        quoteReqID:
                          type: string
                          title: >-
                            The ID of the original Quote Request message that is
                            being rejected
                        quoteRequestRejectReason:
                          type: string
                          description: >-
                            A code indicating the reason for rejecting the Quote
                            Request, Examples

                            include "Invalid instrument requested", "Unknown
                            instrument", "Unsupported

                            request type", etc.
                        text:
                          type: string
                          title: >-
                            A human-readable description of the reason for
                            rejecting the Quote Request
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
            title: get Quotes Response by sessionID
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: sessionID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/quotes:
    get:
      operationId: Jim380ReFixQuoteAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Quote:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    quoteRequest:
                      type: object
                      properties:
                        header:
                          title: Standard header for the message
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        quoteReqID:
                          type: string
                          title: Unique identifier for the Quote Request message
                        symbol:
                          type: string
                          title: >-
                            Ticker symbol or instrument code for the security
                            being quoted
                        securityID:
                          type: string
                          title: Identifier for the security being quoted
                        securityIDSource:
                          type: string
                          title: Specifies the source of the security identifier
                        side:
                          type: string
                          title: >-
                            Indicates whether the quote is for a buy or sell
                            order
                        orderQty:
                          type: string
                          title: Quantity of the security being quoted
                        futSettDate:
                          type: string
                          title: Date of the future settlement
                        settlDate2:
                          type: string
                          title: Secondary settlement date for the security
                        account:
                          type: string
                          title: Account number for the order
                        bidPx:
                          type: string
                          title: >-
                            Price at which the buyer is willing to buy the
                            security
                        offerPx:
                          type: string
                          title: >-
                            Price at which the seller is willing to sell the
                            security
                        currency:
                          type: string
                          title: Currency of the quoted price
                        validUntilTime:
                          type: string
                          title: Time after which the quote is no longer valid
                        expireTime:
                          type: string
                          title: Time at which the quote will expire
                        quoteType:
                          type: string
                          title: >-
                            Type of quote being requested (e.g. Indicative,
                            Firm)
                        bidSize:
                          type: string
                          title: Quantity of securities offered at the bid price
                        offerSize:
                          type: string
                          title: Quantity of securities offered at the offer price
                        mic:
                          type: string
                          title: Market identification code
                        text:
                          type: string
                          description: >-
                            Additional information or comments about the quote
                            request.
                        trailer:
                          title: Standard trailer for the message
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                    quoteAcknowledgement:
                      type: object
                      properties:
                        header:
                          title: standard Header
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                        quoteReqID:
                          type: string
                          title: >-
                            Unique identifier for the original Quote Request
                            message
                        quoteID:
                          type: string
                          title: Unique identifier for the Quote
                        quoteStatus:
                          type: string
                          title: >-
                            Status of the Quote (e.g. Accepted, Rejected,
                            Expired)
                        quoteType:
                          type: string
                          title: Type of Quote (e.g. Indicative, Firm)
                        securityID:
                          type: string
                          title: dentifier for the security being quoted
                        securityIDSource:
                          type: string
                          title: Specifies the source of the security identifier
                        symbol:
                          type: string
                          title: >-
                            Ticker symbol or instrument code for the security
                            being quoted
                        side:
                          type: string
                          title: >-
                            indicates whether the quote is for a buy or sell
                            order
                        orderQty:
                          type: string
                          title: Quantity of the security being quoted
                        lastQty:
                          type: string
                          title: Quantity of the last trade
                        lastPx:
                          type: string
                          title: Price of the last trade
                        bidPx:
                          type: string
                          title: >-
                            Price at which the buyer is willing to buy the
                            security
                        offerPx:
                          type: string
                          title: >-
                            Price at which the seller is willing to sell the
                            security
                        currency:
                          type: string
                          title: Currency of the quoted price
                        settlDate:
                          type: string
                          title: Settlement date for the security
                        validUntilTime:
                          type: string
                          title: Time after which the quote is no longer valid
                        expireTime:
                          type: string
                          title: Time at which the quote will expire
                        text:
                          type: string
                          title: Additional information or comments about the quote
                        noQuoteQualifiers:
                          type: string
                          title: Number of Quote Qualifiers
                        quoteQualifier:
                          type: string
                          title: >-
                            Additional information about the quote (e.g. Yield,
                            Size)
                        noLegs:
                          type: string
                          title: >-
                            Number of legs in the security (for multi-legged
                            securities)
                        legSymbol:
                          type: string
                          title: >-
                            Ticker symbol or instrument code for each leg of the
                            security
                        legSecurityID:
                          type: string
                          title: Identifier for each leg of the security
                        legSecurityIDSource:
                          type: string
                          title: >-
                            Specifies the source of the identifier for each leg
                            of the security
                        legRatioQty:
                          type: string
                          title: >-
                            Ratio of one leg to the other in a multi-legged
                            security
                        trailer:
                          title: standard Trailer
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                    quoteRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                        quoteReqID:
                          type: string
                          title: >-
                            The ID of the original Quote Request message that is
                            being rejected
                        quoteRequestRejectReason:
                          type: string
                          description: >-
                            A code indicating the reason for rejecting the Quote
                            Request, Examples

                            include "Invalid instrument requested", "Unknown
                            instrument", "Unsupported

                            request type", etc.
                        text:
                          type: string
                          title: >-
                            A human-readable description of the reason for
                            rejecting the Quote Request
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/security/definition:
    get:
      operationId: Jim380ReFixSecurityAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Security:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    securityDefinitionRequest:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: >-
                            (Tag 320): Unique identifier assigned by the
                            requester to the security

                            definition request message
                        securityRequestType:
                          type: string
                          title: >-
                            (Tag 321): Specifies the type of security definition
                            being requested (e.g.,

                            requesting all securities, by symbol, by security
                            type, etc.)
                        symbol:
                          type: string
                          description: >-
                            (Tag 55): Unique identifier for the security being
                            requested.
                        securityExchange:
                          type: string
                          description: >-
                            (Tag 207): Code or identifier representing the
                            exchange where the security

                            is listed.
                        issuer:
                          type: string
                          description: >-
                            (Tag 106): Identifier of the issuer or
                            issuer-specific identifier for the

                            security.
                        securityDesc:
                          type: string
                          title: '(Tag 107): Description or name of the security'
                        securityType:
                          type: string
                          title: >-
                            (Tag 167): Type of the security (e.g., stock, bond,
                            option, future)
                        currency:
                          type: string
                          title: >-
                            (Tag 15): Currency in which the security is
                            denominated
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Security Definition Request with fields, tags and
                        descriptions.
                    securityDefinition:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          description: >-
                            (Tag 320): Unique identifier of the original
                            security definition request.
                        securityResponseID:
                          type: string
                          title: >-
                            (Tag 322): Unique identifier assigned by the
                            responder to the security

                            definition message
                        securityResponseType:
                          type: string
                          description: >-
                            (Tag 323): Type of response to the security
                            definition request (e.g.,

                            acceptance, rejection, etc.).
                        symbol:
                          type: string
                          description: '(Tag 55): Unique identifier for the security.'
                        securityExchange:
                          type: string
                          description: >-
                            (Tag 207): Code or identifier representing the
                            exchange where the security

                            is listed.
                        issuer:
                          type: string
                          description: >-
                            (Tag 106): Identifier of the issuer or
                            issuer-specific identifier for the

                            security.
                        SecurityDesc:
                          type: string
                          description: '(Tag 107): Description or name of the security.'
                        SecurityType:
                          type: string
                          description: >-
                            (Tag 167): Type of the security (e.g., stock, bond,
                            option, future).
                        currency:
                          type: string
                          description: >-
                            (Tag 15): Currency in which the security is
                            denominated.
                        contractMultiplier:
                          type: string
                          description: >-
                            (Tag 231): Multiplier applied to the contract size
                            to calculate the actual

                            quantity.
                        minPriceIncrement:
                          type: string
                          description: '(Tag 969): Minimum price increment for the security.'
                        minPriceIncrementAmount:
                          type: string
                          description: >-
                            (Tag 1146): Minimum price increment expressed as a
                            monetary amount.
                        unitOfMeasure:
                          type: string
                          description: '(Tag 996): Unit of measure for the contract size.'
                        priceUnitOfMeasure:
                          type: string
                          description: '(Tag 1191): Unit of measure for the price.'
                        settlType:
                          type: string
                          description: '(Tag 63): Type of settlement for the security.'
                        settlDate:
                          type: string
                          description: '(Tag 64): Date of settlement for the security.'
                        maturityMonthYear:
                          type: string
                          description: >-
                            (Tag 200): Month and year of maturity for the
                            security.
                        couponRate:
                          type: string
                          description: >-
                            (Tag 223): Coupon rate or interest rate for the
                            security.
                        factor:
                          type: string
                          description: >-
                            (Tag 228): Factor applied to the price to calculate
                            the actual value.
                        creditRating:
                          type: string
                          description: '(Tag 255): Credit rating assigned to the security.'
                        securityExchangeID:
                          type: string
                          description: >-
                            (Tag 2076): Unique identifier for the security
                            exchange.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: Security Definition with fields, tags and descriptions.
                    securityDefinitionRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: >-
                            (Tag 320): Unique identifier of the rejected
                            security definition request
                        securityRequestResult:
                          type: string
                          title: >-
                            (Tag 560): Result of the security definition request
                            (e.g., successful,

                            invalid security, etc.)
                        securityRequestError:
                          type: string
                          description: >-
                            (Tag 561): Description of the error or reason for
                            rejecting the security

                            definition request.
                        securityRequestErrorCode:
                          type: string
                          description: >-
                            (Tag 562): Code indicating the specific error or
                            reason for rejecting the

                            request.
                        text:
                          type: string
                          title: >-
                            (Tag 58): Additional free-text description or
                            information related to the

                            rejection
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Security Definition Request Rejeect with fields, tags
                        and descriptions.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/security/definition/{securityReqID}:
    get:
      summary: Queries a list of Security items.
      operationId: Jim380ReFixSecurity
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Security:
                type: object
                properties:
                  sessionID:
                    type: string
                  securityDefinitionRequest:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: >-
                          (Tag 320): Unique identifier assigned by the requester
                          to the security

                          definition request message
                      securityRequestType:
                        type: string
                        title: >-
                          (Tag 321): Specifies the type of security definition
                          being requested (e.g.,

                          requesting all securities, by symbol, by security
                          type, etc.)
                      symbol:
                        type: string
                        description: >-
                          (Tag 55): Unique identifier for the security being
                          requested.
                      securityExchange:
                        type: string
                        description: >-
                          (Tag 207): Code or identifier representing the
                          exchange where the security

                          is listed.
                      issuer:
                        type: string
                        description: >-
                          (Tag 106): Identifier of the issuer or issuer-specific
                          identifier for the

                          security.
                      securityDesc:
                        type: string
                        title: '(Tag 107): Description or name of the security'
                      securityType:
                        type: string
                        title: >-
                          (Tag 167): Type of the security (e.g., stock, bond,
                          option, future)
                      currency:
                        type: string
                        title: >-
                          (Tag 15): Currency in which the security is
                          denominated
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Security Definition Request with fields, tags and
                      descriptions.
                  securityDefinition:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        description: >-
                          (Tag 320): Unique identifier of the original security
                          definition request.
                      securityResponseID:
                        type: string
                        title: >-
                          (Tag 322): Unique identifier assigned by the responder
                          to the security

                          definition message
                      securityResponseType:
                        type: string
                        description: >-
                          (Tag 323): Type of response to the security definition
                          request (e.g.,

                          acceptance, rejection, etc.).
                      symbol:
                        type: string
                        description: '(Tag 55): Unique identifier for the security.'
                      securityExchange:
                        type: string
                        description: >-
                          (Tag 207): Code or identifier representing the
                          exchange where the security

                          is listed.
                      issuer:
                        type: string
                        description: >-
                          (Tag 106): Identifier of the issuer or issuer-specific
                          identifier for the

                          security.
                      SecurityDesc:
                        type: string
                        description: '(Tag 107): Description or name of the security.'
                      SecurityType:
                        type: string
                        description: >-
                          (Tag 167): Type of the security (e.g., stock, bond,
                          option, future).
                      currency:
                        type: string
                        description: >-
                          (Tag 15): Currency in which the security is
                          denominated.
                      contractMultiplier:
                        type: string
                        description: >-
                          (Tag 231): Multiplier applied to the contract size to
                          calculate the actual

                          quantity.
                      minPriceIncrement:
                        type: string
                        description: '(Tag 969): Minimum price increment for the security.'
                      minPriceIncrementAmount:
                        type: string
                        description: >-
                          (Tag 1146): Minimum price increment expressed as a
                          monetary amount.
                      unitOfMeasure:
                        type: string
                        description: '(Tag 996): Unit of measure for the contract size.'
                      priceUnitOfMeasure:
                        type: string
                        description: '(Tag 1191): Unit of measure for the price.'
                      settlType:
                        type: string
                        description: '(Tag 63): Type of settlement for the security.'
                      settlDate:
                        type: string
                        description: '(Tag 64): Date of settlement for the security.'
                      maturityMonthYear:
                        type: string
                        description: >-
                          (Tag 200): Month and year of maturity for the
                          security.
                      couponRate:
                        type: string
                        description: >-
                          (Tag 223): Coupon rate or interest rate for the
                          security.
                      factor:
                        type: string
                        description: >-
                          (Tag 228): Factor applied to the price to calculate
                          the actual value.
                      creditRating:
                        type: string
                        description: '(Tag 255): Credit rating assigned to the security.'
                      securityExchangeID:
                        type: string
                        description: >-
                          (Tag 2076): Unique identifier for the security
                          exchange.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: Security Definition with fields, tags and descriptions.
                  securityDefinitionRequestReject:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: >-
                          (Tag 320): Unique identifier of the rejected security
                          definition request
                      securityRequestResult:
                        type: string
                        title: >-
                          (Tag 560): Result of the security definition request
                          (e.g., successful,

                          invalid security, etc.)
                      securityRequestError:
                        type: string
                        description: >-
                          (Tag 561): Description of the error or reason for
                          rejecting the security

                          definition request.
                      securityRequestErrorCode:
                        type: string
                        description: >-
                          (Tag 562): Code indicating the specific error or
                          reason for rejecting the

                          request.
                      text:
                        type: string
                        title: >-
                          (Tag 58): Additional free-text description or
                          information related to the

                          rejection
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Security Definition Request Rejeect with fields, tags and
                      descriptions.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: securityReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/security/list:
    get:
      operationId: Jim380ReFixSecurityListAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SecurityList:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    securityListRequest:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: >-
                            (Tag 320): Unique identifier assigned by the
                            requester to the security

                            List Request message
                        securityListRequestType:
                          type: string
                          title: (559) Type of Security List Request (x) being made
                        noUnderlyings:
                          type: string
                          title: "(711) Undly\tN\tNumber of underlyings"
                        noLegs:
                          type: string
                          title: (555) Number of legs that make up the Security
                        currency:
                          type: string
                          title: (15)
                        text:
                          type: string
                          description: "(58)\tComment, instructions, or other identifying information."
                        encodedTextLen:
                          type: string
                          description: >-
                            (354) Must be set if EncodedText (355) field is
                            specified and must

                            immediately precede it.
                        encodedText:
                          type: string
                          description: >-
                            (355) Encoded (non-ASCII characters) representation
                            of the Text (58) field

                            in the encoded format specified via the
                            MessageEncoding (347) field.
                        tradingSessionID:
                          type: string
                          description: >-
                            (336) Optional Trading Session Identifier to specify
                            a particular trading

                            session for which you want to obtain a list of
                            securities that are

                            tradeable.
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        subscriptionRequestType:
                          type: string
                          description: >-
                            (263) Subscribe or unsubscribe for security status
                            to security specified in

                            request.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Security List Request with fields, tags and descriptions
                        and MsgType = x
                    SecurityListResponse:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: >-
                            (Tag 320): Unique identifier assigned by the
                            requester to the security

                            List Request message
                        securityResponseID:
                          type: string
                          title: (322) Identifier for the Security List (y) message
                        securityRequestResult:
                          type: string
                          title: >-
                            (560) Result of the Security Request identified by
                            the SecurityReqID (320)
                        totNoRelatedSym:
                          type: string
                          description: >-
                            (393) Used to indicate if the total number of
                            securities being returned for

                            this request. Used in the event that message
                            fragmentation is required.
                        lastFragment:
                          type: string
                          title: >-
                            string (893) Indicates if this message in a
                            fragmented response
                        noRelatedSym:
                          type: string
                          title: >-
                            (146) Specifies the number of repeating symbols
                            (instruments) specified
                        noUnderlyings:
                          type: string
                          title: (711) Number of underlyings
                        currency:
                          type: string
                          title: (15)
                        noLegs:
                          type: string
                          title: (555) Number of legs that make up the Security
                        roundLot:
                          type: string
                          title: (561)
                        minTradeVol:
                          type: string
                          title: (562)
                        tradingSessionID:
                          type: string
                          title: (336)
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        expirationCycle:
                          type: string
                          title: (827)
                        text:
                          type: string
                          description: >-
                            (58) Comment, instructions, or other identifying
                            information.
                        encodedTextLen:
                          type: string
                          description: >-
                            (354) Must be set if EncodedText (355) field is
                            specified and must

                            immediately precede it.
                        encodedText:
                          type: string
                          title: >-
                            (355) Encoded (non-ASCII characters) representation
                            of the Text (58) field

                            in the encoded format specified via the
                            MessageEncoding (347) field
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Security List Response  with fields, tags and
                        descriptions and MsgType = y
                    securityListRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: >-
                            (Tag 320): Unique identifier assigned by the
                            requester to the security

                            List Request message
                        securityListRequestType:
                          type: string
                          title: (559) Type of security list request being made
                        securityRequestResult:
                          type: string
                          title: "(560)\tResult of the security list request"
                        text:
                          type: string
                          title: "(58)\tComment, instructions, or other identifying information"
                        encodedTextLen:
                          type: string
                          title: >-
                            (354)  Must be set if EncodedText (355) field is
                            specified and must

                            immediately precede it
                        encodedText:
                          type: string
                          title: "(355)\tEncoded (non-ASCII characters) representation of the Text (58)\nfield"
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Security List Request Reject with fields, tags and
                        descriptions and MsgType =

                        y
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/security/list/{securityReqID}:
    get:
      summary: Queries a list of SecurityList items.
      operationId: Jim380ReFixSecurityList
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SecurityList:
                type: object
                properties:
                  sessionID:
                    type: string
                  securityListRequest:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: >-
                          (Tag 320): Unique identifier assigned by the requester
                          to the security

                          List Request message
                      securityListRequestType:
                        type: string
                        title: (559) Type of Security List Request (x) being made
                      noUnderlyings:
                        type: string
                        title: "(711) Undly\tN\tNumber of underlyings"
                      noLegs:
                        type: string
                        title: (555) Number of legs that make up the Security
                      currency:
                        type: string
                        title: (15)
                      text:
                        type: string
                        description: "(58)\tComment, instructions, or other identifying information."
                      encodedTextLen:
                        type: string
                        description: >-
                          (354) Must be set if EncodedText (355) field is
                          specified and must

                          immediately precede it.
                      encodedText:
                        type: string
                        description: >-
                          (355) Encoded (non-ASCII characters) representation of
                          the Text (58) field

                          in the encoded format specified via the
                          MessageEncoding (347) field.
                      tradingSessionID:
                        type: string
                        description: >-
                          (336) Optional Trading Session Identifier to specify a
                          particular trading

                          session for which you want to obtain a list of
                          securities that are

                          tradeable.
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      subscriptionRequestType:
                        type: string
                        description: >-
                          (263) Subscribe or unsubscribe for security status to
                          security specified in

                          request.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Security List Request with fields, tags and descriptions
                      and MsgType = x
                  SecurityListResponse:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: >-
                          (Tag 320): Unique identifier assigned by the requester
                          to the security

                          List Request message
                      securityResponseID:
                        type: string
                        title: (322) Identifier for the Security List (y) message
                      securityRequestResult:
                        type: string
                        title: >-
                          (560) Result of the Security Request identified by the
                          SecurityReqID (320)
                      totNoRelatedSym:
                        type: string
                        description: >-
                          (393) Used to indicate if the total number of
                          securities being returned for

                          this request. Used in the event that message
                          fragmentation is required.
                      lastFragment:
                        type: string
                        title: >-
                          string (893) Indicates if this message in a fragmented
                          response
                      noRelatedSym:
                        type: string
                        title: >-
                          (146) Specifies the number of repeating symbols
                          (instruments) specified
                      noUnderlyings:
                        type: string
                        title: (711) Number of underlyings
                      currency:
                        type: string
                        title: (15)
                      noLegs:
                        type: string
                        title: (555) Number of legs that make up the Security
                      roundLot:
                        type: string
                        title: (561)
                      minTradeVol:
                        type: string
                        title: (562)
                      tradingSessionID:
                        type: string
                        title: (336)
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      expirationCycle:
                        type: string
                        title: (827)
                      text:
                        type: string
                        description: >-
                          (58) Comment, instructions, or other identifying
                          information.
                      encodedTextLen:
                        type: string
                        description: >-
                          (354) Must be set if EncodedText (355) field is
                          specified and must

                          immediately precede it.
                      encodedText:
                        type: string
                        title: >-
                          (355) Encoded (non-ASCII characters) representation of
                          the Text (58) field

                          in the encoded format specified via the
                          MessageEncoding (347) field
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Security List Response  with fields, tags and descriptions
                      and MsgType = y
                  securityListRequestReject:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: >-
                          (Tag 320): Unique identifier assigned by the requester
                          to the security

                          List Request message
                      securityListRequestType:
                        type: string
                        title: (559) Type of security list request being made
                      securityRequestResult:
                        type: string
                        title: "(560)\tResult of the security list request"
                      text:
                        type: string
                        title: "(58)\tComment, instructions, or other identifying information"
                      encodedTextLen:
                        type: string
                        title: >-
                          (354)  Must be set if EncodedText (355) field is
                          specified and must

                          immediately precede it
                      encodedText:
                        type: string
                        title: "(355)\tEncoded (non-ASCII characters) representation of the Text (58)\nfield"
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Security List Request Reject with fields, tags and
                      descriptions and MsgType =

                      y
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: securityReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/security/status:
    get:
      operationId: Jim380ReFixSecurityStatusAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SecurityStatus:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    securityStatusRequest:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        SecurityStatusReqID:
                          type: string
                          description: >-
                            (324) Must be unique, or the ID of previous Security
                            Status Request (e) to

                            disable if SubscriptionRequestType (263) = Disable
                            previous Snapshot +

                            Updates Request (2).
                        instrument:
                          type: string
                        noUnderlyings:
                          type: string
                          title: (711) Number of underlyings
                        underlyingInstrument:
                          type: string
                          title: Must be provided if Number of underlyings > 0
                        noLegs:
                          type: string
                          title: (555) Number of legs that make up the Security
                        instrumentLeg:
                          type: string
                          title: Required if NoLegs (555) > 0
                        currency:
                          type: string
                          title: (15)
                        subscriptionRequestType:
                          type: string
                          title: >-
                            (263) SubscriptionRequestType indicates to the other
                            party what type of

                            response is expected. A snapshot request only asks
                            for current information.

                            A subscribe request asks for updates as the status
                            changes. Unsubscribe

                            will cancel any future update messages from the
                            counter party.)
                        tradingSessionID:
                          type: string
                          title: (336)
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Security Status Request with fields, tags and
                        descriptions and MsgType = e
                    securityStatusResponse:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityStatusReqID:
                          type: string
                          title: (324)
                        noUnderlyings:
                          type: string
                          title: (711) Number of underlyings
                        underlyingInstrument:
                          type: string
                          title: Must be provided if Number of underlyings > 0
                        noLegs:
                          type: string
                          title: (555) Required for multileg quotes
                        instrumentLeg:
                          type: string
                          title: Required if NoLegs (555) > 0
                        currency:
                          type: string
                          title: (15)
                        tradingSessionID:
                          type: string
                          title: (336)
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        unsolicitedIndicator:
                          type: string
                          title: >-
                            (325) Set to 'Y' if message is sent as a result of a
                            subscription request

                            not a snapshot request
                        securityTradingStatus:
                          type: string
                          description: >-
                            (326) Identifies the trading status applicable to
                            the transaction.
                        financialStatus:
                          type: string
                          title: (291)
                        corporateAction:
                          type: string
                          title: (292)
                        haltReason:
                          type: string
                          description: >-
                            (327) Denotes the reason for the Opening Delay or
                            Trading Halt.
                        inViewOfCommon:
                          type: string
                          title: (328)
                        dueToRelated:
                          type: string
                          title: (329)
                        buyVolume:
                          type: string
                          title: (330)
                        sellVolume:
                          type: string
                          title: (331)
                        highPx:
                          type: string
                          title: (332)
                        lowPx:
                          type: string
                          title: (333)
                        lastPx:
                          type: string
                          description: >-
                            (31) Represents the last price for that security
                            either on a Consolidated

                            or an individual participant basis at the time it is
                            disseminated.
                        transactTime:
                          type: string
                          title: (60) Trade Dissemination Time
                        adjustment:
                          type: string
                          title: (334)
                        text:
                          type: string
                          description: >-
                            (58) Comment, instructions, or other identifying
                            information.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Security Status Response with fields, tags and
                        descriptions and MsgType = f
                    securityStatusRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityStatusReqID:
                          type: string
                          title: (324)
                        securityRejectReason:
                          type: string
                          title: >-
                            (560) Reason for rejecting the Security Status
                            Request, The

                            SecurityRejectReason field (Tag 560) in the Security
                            Status Request Reject

                            message (MsgType = AJ) indicates the reason for
                            rejecting the Security

                            Status Request. The values for the
                            SecurityRejectReason field can vary

                            depending on the implementation and version of the
                            FIX protocol. Here are

                            some common values that may be used: 0: Unknown
                            symbol 1: Exchange closed

                            2: Order exceeded limit

                            3: Invalid request

                            4: Unsupported request

                            5: Unauthorized request

                            6: Duplicate request

                            7: System unavailable

                            8: Security not found

                            9: Other
                        text:
                          type: string
                          title: >-
                            (58) Additional text or comment regarding the
                            rejection
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Security Status Request Reject with fields, tags and
                        descriptions and MsgType

                        = AJ
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/security/status/{securityStatusReqID}:
    get:
      summary: Queries a list of SecurityStatus items.
      operationId: Jim380ReFixSecurityStatus
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SecurityStatus:
                type: object
                properties:
                  sessionID:
                    type: string
                  securityStatusRequest:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      SecurityStatusReqID:
                        type: string
                        description: >-
                          (324) Must be unique, or the ID of previous Security
                          Status Request (e) to

                          disable if SubscriptionRequestType (263) = Disable
                          previous Snapshot +

                          Updates Request (2).
                      instrument:
                        type: string
                      noUnderlyings:
                        type: string
                        title: (711) Number of underlyings
                      underlyingInstrument:
                        type: string
                        title: Must be provided if Number of underlyings > 0
                      noLegs:
                        type: string
                        title: (555) Number of legs that make up the Security
                      instrumentLeg:
                        type: string
                        title: Required if NoLegs (555) > 0
                      currency:
                        type: string
                        title: (15)
                      subscriptionRequestType:
                        type: string
                        title: >-
                          (263) SubscriptionRequestType indicates to the other
                          party what type of

                          response is expected. A snapshot request only asks for
                          current information.

                          A subscribe request asks for updates as the status
                          changes. Unsubscribe

                          will cancel any future update messages from the
                          counter party.)
                      tradingSessionID:
                        type: string
                        title: (336)
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Security Status Request with fields, tags and descriptions
                      and MsgType = e
                  securityStatusResponse:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityStatusReqID:
                        type: string
                        title: (324)
                      noUnderlyings:
                        type: string
                        title: (711) Number of underlyings
                      underlyingInstrument:
                        type: string
                        title: Must be provided if Number of underlyings > 0
                      noLegs:
                        type: string
                        title: (555) Required for multileg quotes
                      instrumentLeg:
                        type: string
                        title: Required if NoLegs (555) > 0
                      currency:
                        type: string
                        title: (15)
                      tradingSessionID:
                        type: string
                        title: (336)
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      unsolicitedIndicator:
                        type: string
                        title: >-
                          (325) Set to 'Y' if message is sent as a result of a
                          subscription request

                          not a snapshot request
                      securityTradingStatus:
                        type: string
                        description: >-
                          (326) Identifies the trading status applicable to the
                          transaction.
                      financialStatus:
                        type: string
                        title: (291)
                      corporateAction:
                        type: string
                        title: (292)
                      haltReason:
                        type: string
                        description: >-
                          (327) Denotes the reason for the Opening Delay or
                          Trading Halt.
                      inViewOfCommon:
                        type: string
                        title: (328)
                      dueToRelated:
                        type: string
                        title: (329)
                      buyVolume:
                        type: string
                        title: (330)
                      sellVolume:
                        type: string
                        title: (331)
                      highPx:
                        type: string
                        title: (332)
                      lowPx:
                        type: string
                        title: (333)
                      lastPx:
                        type: string
                        description: >-
                          (31) Represents the last price for that security
                          either on a Consolidated

                          or an individual participant basis at the time it is
                          disseminated.
                      transactTime:
                        type: string
                        title: (60) Trade Dissemination Time
                      adjustment:
                        type: string
                        title: (334)
                      text:
                        type: string
                        description: >-
                          (58) Comment, instructions, or other identifying
                          information.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Security Status Response with fields, tags and
                      descriptions and MsgType = f
                  securityStatusRequestReject:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityStatusReqID:
                        type: string
                        title: (324)
                      securityRejectReason:
                        type: string
                        title: >-
                          (560) Reason for rejecting the Security Status
                          Request, The

                          SecurityRejectReason field (Tag 560) in the Security
                          Status Request Reject

                          message (MsgType = AJ) indicates the reason for
                          rejecting the Security

                          Status Request. The values for the
                          SecurityRejectReason field can vary

                          depending on the implementation and version of the FIX
                          protocol. Here are

                          some common values that may be used: 0: Unknown symbol
                          1: Exchange closed

                          2: Order exceeded limit

                          3: Invalid request

                          4: Unsupported request

                          5: Unauthorized request

                          6: Duplicate request

                          7: System unavailable

                          8: Security not found

                          9: Other
                      text:
                        type: string
                        title: >-
                          (58) Additional text or comment regarding the
                          rejection
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Security Status Request Reject with fields, tags and
                      descriptions and MsgType

                      = AJ
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: securityStatusReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/security/types:
    get:
      operationId: Jim380ReFixSecurityTypesAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SecurityTypes:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    securityTypesRequest:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: (320)
                        text:
                          type: string
                          description: >-
                            (58) Comment, instructions, or other identifying
                            information.
                        tradingSessionID:
                          type: string
                          description: >-
                            (336) Optional Trading Session Identifier to specify
                            a particular trading

                            session for which you want to obtain a list of
                            securities that are

                            tradeable.
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        product:
                          type: string
                          title: >-
                            (460) Used to qualify which security types are
                            returned
                        securityType:
                          type: string
                          title: >-
                            (167) Used to qualify which security type is
                            returned
                        securitySubType:
                          type: string
                          title: >-
                            (762) Used to qualify which security types are
                            returned
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Security Types Request with fields, tags and
                        descriptions.
                    SecurityTypesResponse:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: (320)
                        securityResponseID:
                          type: string
                          title: (322) Identifier for the security response message
                        securityResponseType:
                          type: string
                          title: >-
                            (323) The result of the security request identified
                            by SecurityReqID (320)
                        totNoSecurityTypes:
                          type: string
                          title: >-
                            (557) Indicates total number of security types in
                            the event that multiple

                            Security Type messages are used to return results
                        lastFragment:
                          type: string
                          title: >-
                            (893) Indicates if this message in a fragmented
                            response
                        noSecurityTypes:
                          type: string
                          title: (558)
                        securityType:
                          type: string
                          title: (167) Required if NoSecurityTypes (558) > 0
                        securitySubType:
                          type: string
                          title: (762)
                        product:
                          type: string
                          title: (460)
                        cFICode:
                          type: string
                          title: >-
                            (461) Indicates the type of security using ISO 10962
                            standard,

                            Classification of Financial Instruments (CFI code)
                            values. ISO 10962 is

                            maintained by ANNA (Association of National
                            Numbering Agencies) acting as

                            Registration Authority
                        text:
                          type: string
                          description: >-
                            (58) Comment, instructions, or other identifying
                            information.
                        tradingSessionID:
                          type: string
                          description: >-
                            (336) Optional Trading Session Identifier to specify
                            a particular trading

                            session for which you want to obtain a list of
                            securities that are

                            tradeable.
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        subscriptionRequestType:
                          type: string
                          description: >-
                            (263) Subscribe or unsubscribe for security status
                            to security specified in

                            request.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Security Types Response with fields, tags and
                        descriptions.
                    SecurityTypesRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        securityReqID:
                          type: string
                          title: >-
                            (320) Identifier for the security request message
                            that was rejected
                        rejectReason:
                          type: string
                          title: (350) Reason for rejecting the security request
                        text:
                          type: string
                          title: >-
                            (58) Comment, instructions, or other identifying
                            information
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Security Types Request Reject with fields, tags and
                        descriptions.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/security/types/{securityReqID}:
    get:
      summary: Queries a list of SecurityTypes items.
      operationId: Jim380ReFixSecurityTypes
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SecurityTypes:
                type: object
                properties:
                  sessionID:
                    type: string
                  securityTypesRequest:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: (320)
                      text:
                        type: string
                        description: >-
                          (58) Comment, instructions, or other identifying
                          information.
                      tradingSessionID:
                        type: string
                        description: >-
                          (336) Optional Trading Session Identifier to specify a
                          particular trading

                          session for which you want to obtain a list of
                          securities that are

                          tradeable.
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      product:
                        type: string
                        title: >-
                          (460) Used to qualify which security types are
                          returned
                      securityType:
                        type: string
                        title: (167) Used to qualify which security type is returned
                      securitySubType:
                        type: string
                        title: >-
                          (762) Used to qualify which security types are
                          returned
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: Security Types Request with fields, tags and descriptions.
                  SecurityTypesResponse:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: (320)
                      securityResponseID:
                        type: string
                        title: (322) Identifier for the security response message
                      securityResponseType:
                        type: string
                        title: >-
                          (323) The result of the security request identified by
                          SecurityReqID (320)
                      totNoSecurityTypes:
                        type: string
                        title: >-
                          (557) Indicates total number of security types in the
                          event that multiple

                          Security Type messages are used to return results
                      lastFragment:
                        type: string
                        title: >-
                          (893) Indicates if this message in a fragmented
                          response
                      noSecurityTypes:
                        type: string
                        title: (558)
                      securityType:
                        type: string
                        title: (167) Required if NoSecurityTypes (558) > 0
                      securitySubType:
                        type: string
                        title: (762)
                      product:
                        type: string
                        title: (460)
                      cFICode:
                        type: string
                        title: >-
                          (461) Indicates the type of security using ISO 10962
                          standard,

                          Classification of Financial Instruments (CFI code)
                          values. ISO 10962 is

                          maintained by ANNA (Association of National Numbering
                          Agencies) acting as

                          Registration Authority
                      text:
                        type: string
                        description: >-
                          (58) Comment, instructions, or other identifying
                          information.
                      tradingSessionID:
                        type: string
                        description: >-
                          (336) Optional Trading Session Identifier to specify a
                          particular trading

                          session for which you want to obtain a list of
                          securities that are

                          tradeable.
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      subscriptionRequestType:
                        type: string
                        description: >-
                          (263) Subscribe or unsubscribe for security status to
                          security specified in

                          request.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Security Types Response with fields, tags and
                      descriptions.
                  SecurityTypesRequestReject:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      securityReqID:
                        type: string
                        title: >-
                          (320) Identifier for the security request message that
                          was rejected
                      rejectReason:
                        type: string
                        title: (350) Reason for rejecting the security request
                      text:
                        type: string
                        title: >-
                          (58) Comment, instructions, or other identifying
                          information
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Security Types Request Reject with fields, tags and
                      descriptions.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: securityReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/session/logout/{sessionID}:
    get:
      summary: Queries a list of SessionLogout items.
      operationId: Jim380ReFixSessionLogout
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SessionLogout:
                type: object
                properties:
                  sessionID:
                    type: string
                    title: A string that identifies the session being logged out of
                  sessionLogoutInitiator:
                    title: The message sent by the party that initiates the logout
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                      text:
                        type: string
                        title: >-
                          A free-form text field that can be used to provide
                          additional information

                          about the logout
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                  sessionLogoutAcceptor:
                    title: The message sent by the party that confirms the logout
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                      text:
                        type: string
                        title: >-
                          A free-form text field that can be used to provide
                          additional information

                          about the logout
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                title: >-
                  This message is used to initiate a logout session between two
                  parties
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: sessionID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/session/logouts:
    get:
      operationId: Jim380ReFixSessionLogoutAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SessionLogout:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                      title: A string that identifies the session being logged out of
                    sessionLogoutInitiator:
                      title: The message sent by the party that initiates the logout
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                        text:
                          type: string
                          title: >-
                            A free-form text field that can be used to provide
                            additional information

                            about the logout
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                    sessionLogoutAcceptor:
                      title: The message sent by the party that confirms the logout
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                        text:
                          type: string
                          title: >-
                            A free-form text field that can be used to provide
                            additional information

                            about the logout
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                  title: >-
                    This message is used to initiate a logout session between
                    two parties
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/session/reject/{sessionID}:
    get:
      summary: Queries a list of SessionReject items.
      operationId: Jim380ReFixSessionReject
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SessionReject:
                type: object
                properties:
                  sessionID:
                    type: string
                    description: >-
                      A string that identifies the session to which the rejected
                      message belongs.
                  header:
                    type: object
                    properties:
                      beginString:
                        type: string
                        description: >-
                          This field specifies the version of the FIX protocol
                          being used. For

                          example, "FIX.4.4" indicates version 4.4 of the
                          protocol.
                      bodyLength:
                        type: string
                        format: int64
                        description: >-
                          This field specifies the length of the message body in
                          bytes.
                      msgType:
                        type: string
                        title: >-
                          This field identifies the type of message being sent.
                          For example, "D"

                          indicates a New Order Single message
                      senderCompID:
                        type: string
                        title: >-
                          This field identifies the sender of the message. This
                          is typically a unique

                          identifier assigned to each party that uses the FIX
                          protocol
                      targetCompID:
                        type: string
                        description: This field identifies the recipient of the message.
                      msgSeqNum:
                        type: string
                        format: int64
                        title: >-
                          Is a field in the FIX protocol message header that is
                          used to assign a

                          unique sequence number to each message
                      sendingTime:
                        type: string
                        title: >-
                          This field specifies the time that the message was
                          sent
                    title: >-
                      This message header contains fields that identify the
                      message being sent and

                      its sender and recipient
                  text:
                    type: string
                    title: >-
                      A free-form text field that provides information about the
                      rejection, such

                      as the reason for the rejection or a description of the
                      error
                  trailer:
                    type: object
                    properties:
                      checkSum:
                        type: string
                        format: int64
                        description: >-
                          The checksum value is calculated by summing the ASCII
                          values of all

                          characters in the message (excluding the SOH (start of
                          header) and ETX (end

                          of text) characters), taking the sum modulo 256, and
                          converting the result

                          to a two-character hexadecimal string.
                    title: >-
                      This message trailer contains a checksum field that is
                      used to ensure message

                      integrity
                title: This message is used to reject a FIX session
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: sessionID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/session/rejects:
    get:
      operationId: Jim380ReFixSessionRejectAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              SessionReject:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                      description: >-
                        A string that identifies the session to which the
                        rejected message belongs.
                    header:
                      type: object
                      properties:
                        beginString:
                          type: string
                          description: >-
                            This field specifies the version of the FIX protocol
                            being used. For

                            example, "FIX.4.4" indicates version 4.4 of the
                            protocol.
                        bodyLength:
                          type: string
                          format: int64
                          description: >-
                            This field specifies the length of the message body
                            in bytes.
                        msgType:
                          type: string
                          title: >-
                            This field identifies the type of message being
                            sent. For example, "D"

                            indicates a New Order Single message
                        senderCompID:
                          type: string
                          title: >-
                            This field identifies the sender of the message.
                            This is typically a unique

                            identifier assigned to each party that uses the FIX
                            protocol
                        targetCompID:
                          type: string
                          description: This field identifies the recipient of the message.
                        msgSeqNum:
                          type: string
                          format: int64
                          title: >-
                            Is a field in the FIX protocol message header that
                            is used to assign a

                            unique sequence number to each message
                        sendingTime:
                          type: string
                          title: >-
                            This field specifies the time that the message was
                            sent
                      title: >-
                        This message header contains fields that identify the
                        message being sent and

                        its sender and recipient
                    text:
                      type: string
                      title: >-
                        A free-form text field that provides information about
                        the rejection, such

                        as the reason for the rejection or a description of the
                        error
                    trailer:
                      type: object
                      properties:
                        checkSum:
                          type: string
                          format: int64
                          description: >-
                            The checksum value is calculated by summing the
                            ASCII values of all

                            characters in the message (excluding the SOH (start
                            of header) and ETX (end

                            of text) characters), taking the sum modulo 256, and
                            converting the result

                            to a two-character hexadecimal string.
                      title: >-
                        This message trailer contains a checksum field that is
                        used to ensure message

                        integrity
                  title: This message is used to reject a FIX session
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/sessions:
    get:
      operationId: Jim380ReFixSessionsAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Sessions:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    logonInitiator:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                        encryptMethod:
                          type: string
                          format: int64
                          title: >-
                            An integer value indicating the encryption method to
                            be used for the

                            session
                        heartBtInt:
                          type: string
                          format: int64
                          title: >-
                            An integer value indicating the number of seconds
                            between heartbeats that

                            will be sent during the session. This is used to
                            monitor the connection

                            between the two parties
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                      title: >-
                        This message is used by the initiator of a FIX session
                        to initiate a

                        connection with the acceptor
                    logonAcceptor:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                        encryptMethod:
                          type: string
                          format: int64
                          title: >-
                            An integer value indicating the encryption method to
                            be used for the

                            session
                        heartBtInt:
                          type: string
                          format: int64
                          title: >-
                            An integer value indicating the number of seconds
                            between heartbeats that

                            will be sent during the session. This is used to
                            monitor the connection

                            between the two parties
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                      title: >-
                        This message is used by the acceptor of a FIX session to
                        acknowledge the

                        initiation of the connection by the initiator
                    status:
                      type: string
                    IsAccepted:
                      type: boolean
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/sessions/{sessionID}:
    get:
      summary: Queries a list of Sessions items.
      operationId: Jim380ReFixSessions
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              Sessions:
                type: object
                properties:
                  sessionID:
                    type: string
                  logonInitiator:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                      encryptMethod:
                        type: string
                        format: int64
                        title: >-
                          An integer value indicating the encryption method to
                          be used for the

                          session
                      heartBtInt:
                        type: string
                        format: int64
                        title: >-
                          An integer value indicating the number of seconds
                          between heartbeats that

                          will be sent during the session. This is used to
                          monitor the connection

                          between the two parties
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                    title: >-
                      This message is used by the initiator of a FIX session to
                      initiate a

                      connection with the acceptor
                  logonAcceptor:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                      encryptMethod:
                        type: string
                        format: int64
                        title: >-
                          An integer value indicating the encryption method to
                          be used for the

                          session
                      heartBtInt:
                        type: string
                        format: int64
                        title: >-
                          An integer value indicating the number of seconds
                          between heartbeats that

                          will be sent during the session. This is used to
                          monitor the connection

                          between the two parties
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                    title: >-
                      This message is used by the acceptor of a FIX session to
                      acknowledge the

                      initiation of the connection by the initiator
                  status:
                    type: string
                  IsAccepted:
                    type: boolean
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: sessionID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/trade/capture/{tradeReportID}:
    get:
      summary: Queries a list of TradeCapture items.
      operationId: Jim380ReFixTradeCapture
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              TradeCapture:
                type: object
                properties:
                  sessionID:
                    type: string
                  tradeCaptureReport:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradeReportID:
                        type: string
                        description: (571) Unique identifier for the trade report.
                      tradeReportTransType:
                        type: string
                        description: (487) Type of trade report (new, cancel, correction).
                      tradeReportType:
                        type: string
                        description: (856) Type of trade report (real-time, end-of-day).
                      trdType:
                        type: string
                        description: >-
                          Trade details

                          (828) Type of the trade (Block Trade, Exchange for
                          Physical).
                      trdSubType:
                        type: string
                        description: (829) Further information about the trade type.
                      side:
                        type: string
                        description: (54) Buy or sell.
                      orderQty:
                        type: string
                        description: (38) Quantity of the order involved in the trade.
                      lastQty:
                        type: string
                        description: (32) Quantity of the last execution in the trade.
                      lastPx:
                        type: string
                        description: (31) Price of the last execution in the trade.
                      grossTradeAmt:
                        type: string
                        description: >-
                          (381) Total amount of the trade, including any
                          commissions and fees.
                      execID:
                        type: string
                        description: |-
                          Trade identifiers
                          (17) Identifier for the execution of the trade.
                      orderID:
                        type: string
                        description: >-
                          (37) Identifier for the order associated with the
                          trade.
                      tradeID:
                        type: string
                        description: (1003) Unique identifier for the trade.
                      origTradeID:
                        type: string
                        description: >-
                          (1126) Identifier for the original trade, in the case
                          of a trade

                          correction.
                      symbol:
                        type: string
                        description: >-
                          Instrument details

                          (55) Symbol or code for the financial instrument
                          traded.
                      securityID:
                        type: string
                        description: (48) Identifier for the security traded.
                      securityIDSource:
                        type: string
                        description: (22) Source of the security identifier.
                      tradeDate:
                        type: string
                        description: |-
                          Trade dates and settlement
                          (75) Date of the trade.
                      transactTime:
                        type: string
                        description: (60) Time at which the trade occurred.
                      settlType:
                        type: string
                        description: (63) Settlement type of the trade.
                      settlDate:
                        type: string
                        description: (64) Settlement date of the trade.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: Trade Capture Report with fields, tags and descriptions.
                  tradeCaptureReportAcknowledgement:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradeReportID:
                        type: string
                        description: >-
                          Trade report details

                          (571) Identifier for the trade report being
                          acknowledged.
                      tradeID:
                        type: string
                        description: (1003) Unique identifier for the trade.
                      secondaryTradeID:
                        type: string
                        description: (1040) Alternative identifier for the trade.
                      tradeReportType:
                        type: string
                        description: (856) Type of trade report (real-time, end-of-day).
                      trdType:
                        type: string
                        description: >-
                          (828) Type of the trade (Block Trade, Exchange for
                          Physical).
                      trdSubType:
                        type: string
                        description: (829) Further information about the trade type.
                      execType:
                        type: string
                        description: >-
                          (150) Status of the trade report (new, cancelled,
                          corrected, etc.).
                      tradeReportRefID:
                        type: string
                        description: >-
                          (572) Identifier for the previous trade report being
                          referred to.
                      secondaryTradeReportID:
                        type: string
                        description: (818) Alternative identifier for the trade report.
                      tradeReportStatus:
                        type: string
                        description: >-
                          (939) Status of the trade report (accepted, rejected,
                          etc.).
                      tradeTransType:
                        type: string
                        description: >-
                          (487) Type of trade transaction (new, cancel,
                          correction).
                      tradeReportRejectReason:
                        type: string
                        format: int64
                        description: (751) Reason why the trade report was rejected.
                      text:
                        type: string
                        description: >-
                          Additional information

                          (58) Additional information about the trade report or
                          acknowledgement.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Trade Capture Report Acknowledgement with fields, tags and
                      descriptions.
                  tradeCaptureReportRejection:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradeReportID:
                        type: string
                        description: >-
                          (571) The identifier for the trade report being
                          rejected.
                      tradeReportRejectReason:
                        type: string
                        format: int64
                        description: >-
                          (751) A code indicating why the trade report was
                          rejected.
                      tradeReportRejectRefID:
                        type: string
                        description: >-
                          (754) The identifier of the previous message (e.g.,
                          Trade Capture Report)

                          to which this message refers.
                      text:
                        type: string
                        description: >-
                          (58) A description of the reason for the trade report
                          rejection.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Trade Capture Report Rejection with fields, tags and
                      descriptions.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: tradeReportID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/trade/captures:
    get:
      operationId: Jim380ReFixTradeCaptureAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              TradeCapture:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    tradeCaptureReport:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradeReportID:
                          type: string
                          description: (571) Unique identifier for the trade report.
                        tradeReportTransType:
                          type: string
                          description: >-
                            (487) Type of trade report (new, cancel,
                            correction).
                        tradeReportType:
                          type: string
                          description: (856) Type of trade report (real-time, end-of-day).
                        trdType:
                          type: string
                          description: >-
                            Trade details

                            (828) Type of the trade (Block Trade, Exchange for
                            Physical).
                        trdSubType:
                          type: string
                          description: (829) Further information about the trade type.
                        side:
                          type: string
                          description: (54) Buy or sell.
                        orderQty:
                          type: string
                          description: (38) Quantity of the order involved in the trade.
                        lastQty:
                          type: string
                          description: (32) Quantity of the last execution in the trade.
                        lastPx:
                          type: string
                          description: (31) Price of the last execution in the trade.
                        grossTradeAmt:
                          type: string
                          description: >-
                            (381) Total amount of the trade, including any
                            commissions and fees.
                        execID:
                          type: string
                          description: |-
                            Trade identifiers
                            (17) Identifier for the execution of the trade.
                        orderID:
                          type: string
                          description: >-
                            (37) Identifier for the order associated with the
                            trade.
                        tradeID:
                          type: string
                          description: (1003) Unique identifier for the trade.
                        origTradeID:
                          type: string
                          description: >-
                            (1126) Identifier for the original trade, in the
                            case of a trade

                            correction.
                        symbol:
                          type: string
                          description: >-
                            Instrument details

                            (55) Symbol or code for the financial instrument
                            traded.
                        securityID:
                          type: string
                          description: (48) Identifier for the security traded.
                        securityIDSource:
                          type: string
                          description: (22) Source of the security identifier.
                        tradeDate:
                          type: string
                          description: |-
                            Trade dates and settlement
                            (75) Date of the trade.
                        transactTime:
                          type: string
                          description: (60) Time at which the trade occurred.
                        settlType:
                          type: string
                          description: (63) Settlement type of the trade.
                        settlDate:
                          type: string
                          description: (64) Settlement date of the trade.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: Trade Capture Report with fields, tags and descriptions.
                    tradeCaptureReportAcknowledgement:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradeReportID:
                          type: string
                          description: >-
                            Trade report details

                            (571) Identifier for the trade report being
                            acknowledged.
                        tradeID:
                          type: string
                          description: (1003) Unique identifier for the trade.
                        secondaryTradeID:
                          type: string
                          description: (1040) Alternative identifier for the trade.
                        tradeReportType:
                          type: string
                          description: (856) Type of trade report (real-time, end-of-day).
                        trdType:
                          type: string
                          description: >-
                            (828) Type of the trade (Block Trade, Exchange for
                            Physical).
                        trdSubType:
                          type: string
                          description: (829) Further information about the trade type.
                        execType:
                          type: string
                          description: >-
                            (150) Status of the trade report (new, cancelled,
                            corrected, etc.).
                        tradeReportRefID:
                          type: string
                          description: >-
                            (572) Identifier for the previous trade report being
                            referred to.
                        secondaryTradeReportID:
                          type: string
                          description: (818) Alternative identifier for the trade report.
                        tradeReportStatus:
                          type: string
                          description: >-
                            (939) Status of the trade report (accepted,
                            rejected, etc.).
                        tradeTransType:
                          type: string
                          description: >-
                            (487) Type of trade transaction (new, cancel,
                            correction).
                        tradeReportRejectReason:
                          type: string
                          format: int64
                          description: (751) Reason why the trade report was rejected.
                        text:
                          type: string
                          description: >-
                            Additional information

                            (58) Additional information about the trade report
                            or acknowledgement.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Trade Capture Report Acknowledgement with fields, tags
                        and descriptions.
                    tradeCaptureReportRejection:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradeReportID:
                          type: string
                          description: >-
                            (571) The identifier for the trade report being
                            rejected.
                        tradeReportRejectReason:
                          type: string
                          format: int64
                          description: >-
                            (751) A code indicating why the trade report was
                            rejected.
                        tradeReportRejectRefID:
                          type: string
                          description: >-
                            (754) The identifier of the previous message (e.g.,
                            Trade Capture Report)

                            to which this message refers.
                        text:
                          type: string
                          description: >-
                            (58) A description of the reason for the trade
                            report rejection.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Trade Capture Report Rejection with fields, tags and
                        descriptions.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/trading/session:
    get:
      operationId: Jim380ReFixTradingSessionAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              TradingSession:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    tradingSessionStatusRequest:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradingSessionID:
                          type: string
                          title: "(336)\tIdentifies the specific trading session for which status is\nrequested"
                        tradingSessionSubID:
                          type: string
                          title: "(625)\tIdentifies a specific sub-session or sub-segment within a\ntrading session"
                        tradSesReqID:
                          type: string
                          title: "(335)\tUnique identifier assigned by the party generating the request"
                        marketID:
                          type: string
                          title: "(1301)\tIdentifies the market or exchange for which the trading session\nstatus is requested"
                        subscriptionRequest:
                          type: string
                          title: >-
                            (263) Indicates whether the request is for a
                            one-time snapshot or

                            subscription for updates
                        securityID:
                          type: string
                          title: "(48)\tIdentifier for the security being traded in the session"
                        securityIDSource:
                          type: string
                          title: "(22)\tIdentifies the source of the security identifier"
                        symbol:
                          type: string
                          title: "(55)\tSymbol representing the security being traded in the session"
                        securityExchange:
                          type: string
                          title: "207\tExchange where the security is listed"
                        marketSegmentID:
                          type: string
                          title: "(1300)\tIdentifies the specific market segment or sector within the\ntrading session"
                        tradSesReqType:
                          type: integer
                          format: int32
                          title: (263) Type of trading session status request
                        tradSesSubReqType:
                          type: integer
                          format: int32
                          title: "(123)\tSub-type of trading session status request"
                        tradSesMode:
                          type: integer
                          format: int32
                          title: "(338)\tMethod used to determine the trading session"
                        tradingSessionDate:
                          type: string
                          title: >-
                            (336) Date of the trading session for which status
                            is requested
                        tradingSessionTime:
                          type: string
                          title: >-
                            (338)Time of the trading session for which status is
                            requested
                        tradingSessionSubTime:
                          type: string
                          title: >-
                            (1147) Time of the sub-session or sub-segment within
                            a trading session
                        expirationDate:
                          type: string
                          title: >-
                            (432) Date and time when the trading session status
                            request is no longer

                            valid and should be disregarded
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Trading Session Status Request with fields, tags and
                        descriptions.
                    tradingSessionStatus:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradSesReqID:
                          type: string
                          title: "(335)\tUnique identifier assigned by the party generating the request"
                        tradingSessionID:
                          type: string
                          title: (336) Identifies the specific trading session
                        tradSesStatus:
                          type: integer
                          format: int32
                          title: >-
                            (340) Indicates the current status of the trading
                            session
                        tradSesStatusRejReason:
                          type: integer
                          format: int32
                          title: >-
                            (567) Provides a reason for rejecting or
                            invalidating a trading session

                            status
                        tradSesStartTime:
                          type: string
                          title: >-
                            (341) Time at which the trading session is scheduled
                            to start
                        tradSesOpenTime:
                          type: string
                          title: (342) Time at which the trading session opens
                        tradSesPreCloseTime:
                          type: string
                          title: "(343)\tTime at which the trading session pre-closes"
                        tradSesCloseTime:
                          type: string
                          title: "(344)\tTime at which the trading session closes"
                        tradSesEndTime:
                          type: string
                          title: >-
                            (345) Time at which the trading session is scheduled
                            to end
                        totalVolumeTraded:
                          type: integer
                          format: int32
                          title: >-
                            (387) Total quantity of contracts or shares traded
                            during the trading

                            session
                        tradSesHighPx:
                          type: string
                          title: "(1149)\tHighest price traded during the trading session"
                        tradSesLowPx:
                          type: string
                          title: "(1148)\tLowest price traded during the trading session"
                        securityID:
                          type: string
                          title: "(48)\tIdentifier for the security being traded in the session"
                        securityIDSource:
                          type: string
                          title: "(22)\tIdentifies the source of the security identifier"
                        symbol:
                          type: string
                          title: >-
                            (55) Symbol representing the security being traded
                            in the session
                        securityExchange:
                          type: string
                          title: "(207)\tExchange where the security is listed"
                        marketSegmentID:
                          type: string
                          title: "1300\tIdentifies the specific market segment or sector within the\ntrading session"
                        marketID:
                          type: string
                          title: "1301\tIdentifies the market or exchange for the trading session"
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Trading Session Status with fields, tags and
                        descriptions.
                    tradingSessionStatusRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        refSeqNum:
                          type: string
                          title: "(45)\tReference id of the rejected request message"
                        refMsgType:
                          type: string
                          title: "(372)\tMessage type of the rejected request"
                        sessionRejectReason:
                          type: integer
                          format: int32
                          title: "(373)\tCode indicating the reason for rejecting the trading session\nstatus request"
                        text:
                          type: string
                          title: "58\tFree-form text providing additional information about the rejection"
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      description: >-
                        Trading Session Status Request Reject with fields, tags
                        and descriptions.
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/trading/session/list:
    get:
      operationId: Jim380ReFixTradingSessionListAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              TradingSessionList:
                type: array
                items:
                  type: object
                  properties:
                    sessionID:
                      type: string
                    tradingSessionListRequest:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradSesReqID:
                          type: string
                          description: "(335)\tMust be unique, or the ID of previous Trading Session Status\nRequest (g) to disable if SubscriptionRequestType (263) = Disable previous\nSnapshot + Update Request (2)."
                        tradingSessionID:
                          type: string
                          title: >-
                            (336) Trading Session for which status is being
                            requested
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        securityExchange:
                          type: string
                          title: (207)
                        tradSesMethod:
                          type: string
                          title: "(338) \tMethod of Trading"
                        tradSesMode:
                          type: string
                          title: (339) Trading Session Mode
                        subscriptionRequestType:
                          type: string
                          title: (263)
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Trading Session List Request with fields, tags and
                        descriptions. MsgType = BI
                    tradingSessionListResponse:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradSesReqID:
                          type: string
                          title: "(335)\tProvided for a response to a specific Trading Session List\nRequest (BI) message (snapshot)"
                        noTradingSessions:
                          type: string
                          title: (386)
                        tradingSessionID:
                          type: string
                          title: (336) Identifier for Trading Session
                        tradingSessionSubID:
                          type: string
                          title: (625)
                        securityExchange:
                          type: string
                          title: (207)
                        tradSesMethod:
                          type: string
                          title: (338) Method of Trading
                        tradSesMode:
                          type: string
                          title: "(339) \tTrading Session Mode"
                        unsolicitedIndicator:
                          type: string
                          title: >-
                            (325) "Y" if message is sent unsolicited as a result
                            of a previous

                            subscription request
                        tradSesStatus:
                          type: string
                          description: (340) State of trading session.
                        tradSesStatusRejReason:
                          type: string
                          description: >-
                            (567) Used with TradSesStatus (340) = "Request
                            Rejected".
                        tradSesStartTime:
                          type: string
                          title: (341) Starting time of trading session
                        tradSesOpenTime:
                          type: string
                          title: (342) Time of the opening of the trading session
                        tradSesPreCloseTime:
                          type: string
                          title: (343) Time of pre-close of trading session
                        tradSesCloseTime:
                          type: string
                          title: (344) Closing time of trading session
                        tradSesEndTime:
                          type: string
                          title: (345)
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Trading Session List Response with fields, tags and
                        descriptions. MsgType =

                        BJ
                    tradingSessionListRequestReject:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            beginString:
                              type: string
                              description: >-
                                This field specifies the version of the FIX
                                protocol being used. For

                                example, "FIX.4.4" indicates version 4.4 of the
                                protocol.
                            bodyLength:
                              type: string
                              format: int64
                              description: >-
                                This field specifies the length of the message
                                body in bytes.
                            msgType:
                              type: string
                              title: >-
                                This field identifies the type of message being
                                sent. For example, "D"

                                indicates a New Order Single message
                            senderCompID:
                              type: string
                              title: >-
                                This field identifies the sender of the message.
                                This is typically a unique

                                identifier assigned to each party that uses the
                                FIX protocol
                            targetCompID:
                              type: string
                              description: >-
                                This field identifies the recipient of the
                                message.
                            msgSeqNum:
                              type: string
                              format: int64
                              title: >-
                                Is a field in the FIX protocol message header
                                that is used to assign a

                                unique sequence number to each message
                            sendingTime:
                              type: string
                              title: >-
                                This field specifies the time that the message
                                was sent
                          title: >-
                            This message header contains fields that identify
                            the message being sent and

                            its sender and recipient
                          description: Standard FIX message header.
                        tradSesReqID:
                          type: string
                          description: "(335)\tMatches the ID of the rejected Trading Session List Request (BI)\nmessage."
                        tradSesStatus:
                          type: string
                          description: "(340)\tIndicates the status of the trading session request. Set to \"0\"\n(Rejected) for a request reject message."
                        tradSesStatusRejReason:
                          type: string
                          description: >-
                            (567) Reason for rejecting the trading session
                            request.
                        text:
                          type: string
                          description: >-
                            (58) Optional additional text providing further
                            details about the

                            rejection.
                        trailer:
                          type: object
                          properties:
                            checkSum:
                              type: string
                              format: int64
                              description: >-
                                The checksum value is calculated by summing the
                                ASCII values of all

                                characters in the message (excluding the SOH
                                (start of header) and ETX (end

                                of text) characters), taking the sum modulo 256,
                                and converting the result

                                to a two-character hexadecimal string.
                          title: >-
                            This message trailer contains a checksum field that
                            is used to ensure message

                            integrity
                          description: Standard FIX message trailer.
                      title: >-
                        Trading Session List Request Reject with fields, tags
                        and descriptions.

                        MsgType = BK
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/fix/trading/session/list/{tradSesReqID}:
    get:
      summary: Queries a list of TradingSessionList items.
      operationId: Jim380ReFixTradingSessionList
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              TradingSessionList:
                type: object
                properties:
                  sessionID:
                    type: string
                  tradingSessionListRequest:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradSesReqID:
                        type: string
                        description: "(335)\tMust be unique, or the ID of previous Trading Session Status\nRequest (g) to disable if SubscriptionRequestType (263) = Disable previous\nSnapshot + Update Request (2)."
                      tradingSessionID:
                        type: string
                        title: >-
                          (336) Trading Session for which status is being
                          requested
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      securityExchange:
                        type: string
                        title: (207)
                      tradSesMethod:
                        type: string
                        title: "(338) \tMethod of Trading"
                      tradSesMode:
                        type: string
                        title: (339) Trading Session Mode
                      subscriptionRequestType:
                        type: string
                        title: (263)
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Trading Session List Request with fields, tags and
                      descriptions. MsgType = BI
                  tradingSessionListResponse:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradSesReqID:
                        type: string
                        title: "(335)\tProvided for a response to a specific Trading Session List\nRequest (BI) message (snapshot)"
                      noTradingSessions:
                        type: string
                        title: (386)
                      tradingSessionID:
                        type: string
                        title: (336) Identifier for Trading Session
                      tradingSessionSubID:
                        type: string
                        title: (625)
                      securityExchange:
                        type: string
                        title: (207)
                      tradSesMethod:
                        type: string
                        title: (338) Method of Trading
                      tradSesMode:
                        type: string
                        title: "(339) \tTrading Session Mode"
                      unsolicitedIndicator:
                        type: string
                        title: >-
                          (325) "Y" if message is sent unsolicited as a result
                          of a previous

                          subscription request
                      tradSesStatus:
                        type: string
                        description: (340) State of trading session.
                      tradSesStatusRejReason:
                        type: string
                        description: >-
                          (567) Used with TradSesStatus (340) = "Request
                          Rejected".
                      tradSesStartTime:
                        type: string
                        title: (341) Starting time of trading session
                      tradSesOpenTime:
                        type: string
                        title: (342) Time of the opening of the trading session
                      tradSesPreCloseTime:
                        type: string
                        title: (343) Time of pre-close of trading session
                      tradSesCloseTime:
                        type: string
                        title: (344) Closing time of trading session
                      tradSesEndTime:
                        type: string
                        title: (345)
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Trading Session List Response with fields, tags and
                      descriptions. MsgType =

                      BJ
                  tradingSessionListRequestReject:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradSesReqID:
                        type: string
                        description: "(335)\tMatches the ID of the rejected Trading Session List Request (BI)\nmessage."
                      tradSesStatus:
                        type: string
                        description: "(340)\tIndicates the status of the trading session request. Set to \"0\"\n(Rejected) for a request reject message."
                      tradSesStatusRejReason:
                        type: string
                        description: >-
                          (567) Reason for rejecting the trading session
                          request.
                      text:
                        type: string
                        description: >-
                          (58) Optional additional text providing further
                          details about the

                          rejection.
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    title: >-
                      Trading Session List Request Reject with fields, tags and
                      descriptions.

                      MsgType = BK
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: tradSesReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/fix/trading/session/{tradSesReqID}:
    get:
      summary: Queries a list of TradingSession items.
      operationId: Jim380ReFixTradingSession
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              TradingSession:
                type: object
                properties:
                  sessionID:
                    type: string
                  tradingSessionStatusRequest:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradingSessionID:
                        type: string
                        title: "(336)\tIdentifies the specific trading session for which status is\nrequested"
                      tradingSessionSubID:
                        type: string
                        title: "(625)\tIdentifies a specific sub-session or sub-segment within a\ntrading session"
                      tradSesReqID:
                        type: string
                        title: "(335)\tUnique identifier assigned by the party generating the request"
                      marketID:
                        type: string
                        title: "(1301)\tIdentifies the market or exchange for which the trading session\nstatus is requested"
                      subscriptionRequest:
                        type: string
                        title: >-
                          (263) Indicates whether the request is for a one-time
                          snapshot or

                          subscription for updates
                      securityID:
                        type: string
                        title: "(48)\tIdentifier for the security being traded in the session"
                      securityIDSource:
                        type: string
                        title: "(22)\tIdentifies the source of the security identifier"
                      symbol:
                        type: string
                        title: "(55)\tSymbol representing the security being traded in the session"
                      securityExchange:
                        type: string
                        title: "207\tExchange where the security is listed"
                      marketSegmentID:
                        type: string
                        title: "(1300)\tIdentifies the specific market segment or sector within the\ntrading session"
                      tradSesReqType:
                        type: integer
                        format: int32
                        title: (263) Type of trading session status request
                      tradSesSubReqType:
                        type: integer
                        format: int32
                        title: "(123)\tSub-type of trading session status request"
                      tradSesMode:
                        type: integer
                        format: int32
                        title: "(338)\tMethod used to determine the trading session"
                      tradingSessionDate:
                        type: string
                        title: >-
                          (336) Date of the trading session for which status is
                          requested
                      tradingSessionTime:
                        type: string
                        title: >-
                          (338)Time of the trading session for which status is
                          requested
                      tradingSessionSubTime:
                        type: string
                        title: >-
                          (1147) Time of the sub-session or sub-segment within a
                          trading session
                      expirationDate:
                        type: string
                        title: >-
                          (432) Date and time when the trading session status
                          request is no longer

                          valid and should be disregarded
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Trading Session Status Request with fields, tags and
                      descriptions.
                  tradingSessionStatus:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      tradSesReqID:
                        type: string
                        title: "(335)\tUnique identifier assigned by the party generating the request"
                      tradingSessionID:
                        type: string
                        title: (336) Identifies the specific trading session
                      tradSesStatus:
                        type: integer
                        format: int32
                        title: >-
                          (340) Indicates the current status of the trading
                          session
                      tradSesStatusRejReason:
                        type: integer
                        format: int32
                        title: >-
                          (567) Provides a reason for rejecting or invalidating
                          a trading session

                          status
                      tradSesStartTime:
                        type: string
                        title: >-
                          (341) Time at which the trading session is scheduled
                          to start
                      tradSesOpenTime:
                        type: string
                        title: (342) Time at which the trading session opens
                      tradSesPreCloseTime:
                        type: string
                        title: "(343)\tTime at which the trading session pre-closes"
                      tradSesCloseTime:
                        type: string
                        title: "(344)\tTime at which the trading session closes"
                      tradSesEndTime:
                        type: string
                        title: >-
                          (345) Time at which the trading session is scheduled
                          to end
                      totalVolumeTraded:
                        type: integer
                        format: int32
                        title: >-
                          (387) Total quantity of contracts or shares traded
                          during the trading

                          session
                      tradSesHighPx:
                        type: string
                        title: "(1149)\tHighest price traded during the trading session"
                      tradSesLowPx:
                        type: string
                        title: "(1148)\tLowest price traded during the trading session"
                      securityID:
                        type: string
                        title: "(48)\tIdentifier for the security being traded in the session"
                      securityIDSource:
                        type: string
                        title: "(22)\tIdentifies the source of the security identifier"
                      symbol:
                        type: string
                        title: >-
                          (55) Symbol representing the security being traded in
                          the session
                      securityExchange:
                        type: string
                        title: "(207)\tExchange where the security is listed"
                      marketSegmentID:
                        type: string
                        title: "1300\tIdentifies the specific market segment or sector within the\ntrading session"
                      marketID:
                        type: string
                        title: "1301\tIdentifies the market or exchange for the trading session"
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: Trading Session Status with fields, tags and descriptions.
                  tradingSessionStatusRequestReject:
                    type: object
                    properties:
                      header:
                        type: object
                        properties:
                          beginString:
                            type: string
                            description: >-
                              This field specifies the version of the FIX
                              protocol being used. For

                              example, "FIX.4.4" indicates version 4.4 of the
                              protocol.
                          bodyLength:
                            type: string
                            format: int64
                            description: >-
                              This field specifies the length of the message
                              body in bytes.
                          msgType:
                            type: string
                            title: >-
                              This field identifies the type of message being
                              sent. For example, "D"

                              indicates a New Order Single message
                          senderCompID:
                            type: string
                            title: >-
                              This field identifies the sender of the message.
                              This is typically a unique

                              identifier assigned to each party that uses the
                              FIX protocol
                          targetCompID:
                            type: string
                            description: >-
                              This field identifies the recipient of the
                              message.
                          msgSeqNum:
                            type: string
                            format: int64
                            title: >-
                              Is a field in the FIX protocol message header that
                              is used to assign a

                              unique sequence number to each message
                          sendingTime:
                            type: string
                            title: >-
                              This field specifies the time that the message was
                              sent
                        title: >-
                          This message header contains fields that identify the
                          message being sent and

                          its sender and recipient
                        description: Standard FIX message header.
                      refSeqNum:
                        type: string
                        title: "(45)\tReference id of the rejected request message"
                      refMsgType:
                        type: string
                        title: "(372)\tMessage type of the rejected request"
                      sessionRejectReason:
                        type: integer
                        format: int32
                        title: "(373)\tCode indicating the reason for rejecting the trading session\nstatus request"
                      text:
                        type: string
                        title: "58\tFree-form text providing additional information about the rejection"
                      trailer:
                        type: object
                        properties:
                          checkSum:
                            type: string
                            format: int64
                            description: >-
                              The checksum value is calculated by summing the
                              ASCII values of all

                              characters in the message (excluding the SOH
                              (start of header) and ETX (end

                              of text) characters), taking the sum modulo 256,
                              and converting the result

                              to a two-character hexadecimal string.
                        title: >-
                          This message trailer contains a checksum field that is
                          used to ensure message

                          integrity
                        description: Standard FIX message trailer.
                    description: >-
                      Trading Session Status Request Reject with fields, tags
                      and descriptions.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: tradSesReqID
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/mic/market_identification_code/{MIC}:
    get:
      summary: Queries a list of MarketIdentificationCode items.
      operationId: Jim380ReMicMarketIdentificationCode
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              MarketIdentificationCode:
                type: object
                properties:
                  MIC:
                    type: string
                    description: >-
                      Market Identifier Code allocated to the market named in
                      ‘Market

                      Name-Institution Description’.
                  operating_MIC:
                    type: string
                    description: >-
                      Entity operating an exchange/market/trade reporting
                      facility in a specific

                      market/country.
                  OPRT_SGMT:
                    type: string
                    description: >-
                      Indicates whether the MIC is an operating MIC or a market
                      segment MIC.
                  market_name:
                    type: string
                    description: 'Institution Description: name of the market.'
                  legal_entity_name:
                    type: string
                    description: Legal name of the entity owning the market.
                  legal_entity_identifier:
                    type: string
                    description: Legal Entity Identifier (LEI) see ISO 17442-1.
                  market_category:
                    type: string
                    description: >-
                      Specifies the type of market. The list of market types is
                      predefined (1).

                      The list can be updated upon request to the RA, which will
                      validate the

                      request.
                  acronym:
                    type: string
                    description: Known acronym of the market.
                  ISO_country_code:
                    type: string
                    description: >-
                      Alpha-2 code of the country where the market is
                      registered.
                  city:
                    type: string
                    description: City where the market is located.
                  website:
                    type: string
                    description: Website of the market.
                  status:
                    type: string
                    description: >-
                      Active, updated (since last publication), expired (=
                      deactivated).
                  creation_date:
                    type: string
                    description: Date indicating when the MIC was originally created.
                  last_update_date:
                    type: string
                    description: Date indicating when the MIC was last modified.
                  last_validation_date:
                    type: string
                    description: >-
                      Date indicating when the MIC was last reviewed for
                      correctness.
                  expiry_date:
                    type: string
                    description: >-
                      The expiry date is populated when the MIC is deactivated;
                      upon request from

                      the MIC owner; following market research (user request) or
                      maintenance. The

                      expiry date field is left blank when a MIC is created.
                  comments:
                    type: string
                    description: >-
                      Any additional information worth mentioning to help users
                      with identifying

                      the exchange or understanding a modification.
                  creator:
                    type: string
                    description: Address for MIC creator.
                title: Definition of MarketIdentificationCode message
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: MIC
          in: path
          required: true
          type: string
      tags:
        - Query
  /jim380/Re/mic/market_identification_codes:
    get:
      operationId: Jim380ReMicMarketIdentificationCodeAll
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              MarketIdentificationCode:
                type: array
                items:
                  type: object
                  properties:
                    MIC:
                      type: string
                      description: >-
                        Market Identifier Code allocated to the market named in
                        ‘Market

                        Name-Institution Description’.
                    operating_MIC:
                      type: string
                      description: >-
                        Entity operating an exchange/market/trade reporting
                        facility in a specific

                        market/country.
                    OPRT_SGMT:
                      type: string
                      description: >-
                        Indicates whether the MIC is an operating MIC or a
                        market segment MIC.
                    market_name:
                      type: string
                      description: 'Institution Description: name of the market.'
                    legal_entity_name:
                      type: string
                      description: Legal name of the entity owning the market.
                    legal_entity_identifier:
                      type: string
                      description: Legal Entity Identifier (LEI) see ISO 17442-1.
                    market_category:
                      type: string
                      description: >-
                        Specifies the type of market. The list of market types
                        is predefined (1).

                        The list can be updated upon request to the RA, which
                        will validate the

                        request.
                    acronym:
                      type: string
                      description: Known acronym of the market.
                    ISO_country_code:
                      type: string
                      description: >-
                        Alpha-2 code of the country where the market is
                        registered.
                    city:
                      type: string
                      description: City where the market is located.
                    website:
                      type: string
                      description: Website of the market.
                    status:
                      type: string
                      description: >-
                        Active, updated (since last publication), expired (=
                        deactivated).
                    creation_date:
                      type: string
                      description: Date indicating when the MIC was originally created.
                    last_update_date:
                      type: string
                      description: Date indicating when the MIC was last modified.
                    last_validation_date:
                      type: string
                      description: >-
                        Date indicating when the MIC was last reviewed for
                        correctness.
                    expiry_date:
                      type: string
                      description: >-
                        The expiry date is populated when the MIC is
                        deactivated; upon request from

                        the MIC owner; following market research (user request)
                        or maintenance. The

                        expiry date field is left blank when a MIC is created.
                    comments:
                      type: string
                      description: >-
                        Any additional information worth mentioning to help
                        users with identifying

                        the exchange or understanding a modification.
                    creator:
                      type: string
                      description: Address for MIC creator.
                  title: Definition of MarketIdentificationCode message
              pagination:
                type: object
                properties:
                  next_key:
                    type: string
                    format: byte
                    title: |-
                      next_key is the key to be passed to PageRequest.key to
                      query the next page most efficiently
                  total:
                    type: string
                    format: uint64
                    title: >-
                      total is total number of results available if
                      PageRequest.count_total

                      was set, its value is undefined otherwise
                description: >-
                  PageResponse is to be embedded in gRPC response messages where
                  the

                  corresponding request message has used PageRequest.

                   message SomeResponse {
                           repeated Bar results = 1;
                           PageResponse page = 2;
                   }
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: pagination.key
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          required: false
          type: string
          format: byte
        - name: pagination.offset
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.limit
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          required: false
          type: string
          format: uint64
        - name: pagination.count_total
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          required: false
          type: boolean
        - name: pagination.reverse
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          required: false
          type: boolean
      tags:
        - Query
  /jim380/Re/did/dids/{did_base64}:
    get:
      summary: DID returns a DID Document with a sequence number.
      operationId: ReDidDID
      responses:
        '200':
          description: A successful response.
          schema:
            type: object
            properties:
              did_document_with_seq:
                type: object
                properties:
                  document:
                    type: object
                    properties:
                      contexts:
                        type: object
                        properties:
                          values:
                            type: array
                            items:
                              type: string
                        description: >-
                          Strings defines a JSON-LD string array format which is
                          marshalled to a single

                          string if the array length is 1.
                      id:
                        type: string
                      controller:
                        type: object
                        properties:
                          values:
                            type: array
                            items:
                              type: string
                        description: >-
                          Strings defines a JSON-LD string array format which is
                          marshalled to a single

                          string if the array length is 1.
                      verification_methods:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            type:
                              type: string
                            controller:
                              type: string
                            public_key_base58:
                              type: string
                          title: VerificationMethod defines a W3C verification method
                      authentications:
                        type: array
                        items:
                          type: object
                          properties:
                            verification_method_id:
                              type: string
                            verification_method:
                              type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                controller:
                                  type: string
                                public_key_base58:
                                  type: string
                              title: >-
                                VerificationMethod defines a W3C verification
                                method
                          title: >-
                            VerificationRelationship defines a W3C verification
                            relationship
                        title: |-
                          TODO: the repeated gogoproto.customtype has an issue:
                          https://github.com/gogo/protobuf/issues/478
                      assertion_methods:
                        type: array
                        items:
                          type: object
                          properties:
                            verification_method_id:
                              type: string
                            verification_method:
                              type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                controller:
                                  type: string
                                public_key_base58:
                                  type: string
                              title: >-
                                VerificationMethod defines a W3C verification
                                method
                          title: >-
                            VerificationRelationship defines a W3C verification
                            relationship
                      key_agreements:
                        type: array
                        items:
                          type: object
                          properties:
                            verification_method_id:
                              type: string
                            verification_method:
                              type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                controller:
                                  type: string
                                public_key_base58:
                                  type: string
                              title: >-
                                VerificationMethod defines a W3C verification
                                method
                          title: >-
                            VerificationRelationship defines a W3C verification
                            relationship
                      capability_invocations:
                        type: array
                        items:
                          type: object
                          properties:
                            verification_method_id:
                              type: string
                            verification_method:
                              type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                controller:
                                  type: string
                                public_key_base58:
                                  type: string
                              title: >-
                                VerificationMethod defines a W3C verification
                                method
                          title: >-
                            VerificationRelationship defines a W3C verification
                            relationship
                      capability_delegations:
                        type: array
                        items:
                          type: object
                          properties:
                            verification_method_id:
                              type: string
                            verification_method:
                              type: object
                              properties:
                                id:
                                  type: string
                                type:
                                  type: string
                                controller:
                                  type: string
                                public_key_base58:
                                  type: string
                              title: >-
                                VerificationMethod defines a W3C verification
                                method
                          title: >-
                            VerificationRelationship defines a W3C verification
                            relationship
                      services:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            type:
                              type: string
                            service_endpoint:
                              type: string
                          description: Service defines a service in the W3C DID Document.
                    description: >-
                      NOTE: All 'json_name' and 'gogoproto.customtype' tags are
                      for Re to unmarshal

                      the v1.3 genesis which is in the W3C JSON-LD format.
                            On the other hand, the Re and cosmos-sdk don't use those tags to
                            marshal result to JSON (via grpc-gateway).
                    title: DIDDocument defines a W3C DID Document
                  sequence:
                    type: string
                    format: uint64
                  creator:
                    type: string
                description: >-
                  DIDDocumentWithSeq defines a message for DID Document with a
                  sequence number

                  for preventing replay attacks.
            description: >-
              QueryDIDResponse is the response type for the
              Query/DIDDocumentWithSeq RPC

              method.
        default:
          description: An unexpected error response.
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
              details:
                type: array
                items:
                  type: object
                  properties:
                    '@type':
                      type: string
                  additionalProperties: {}
      parameters:
        - name: did_base64
          description: 'NOTE: Using base64 due to the URI path cannot contain colons.'
          in: path
          required: true
          type: string
      tags:
        - Query
definitions:
  cosmos.adminmodule.adminmodule.MsgAddAdminResponse:
    type: object
  cosmos.adminmodule.adminmodule.MsgDeleteAdminResponse:
    type: object
  cosmos.adminmodule.adminmodule.MsgSubmitProposalResponse:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
    description: MsgSubmitProposalResponse defines the Msg/SubmitProposal response type.
  cosmos.adminmodule.adminmodule.QueryAdminsResponse:
    type: object
    properties:
      admins:
        type: array
        items:
          type: string
  cosmos.adminmodule.adminmodule.QueryArchivedProposalsResponse:
    type: object
    properties:
      proposals:
        type: array
        items:
          type: object
          properties:
            proposal_id:
              type: string
              format: uint64
            content:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            status:
              type: string
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              default: PROPOSAL_STATUS_UNSPECIFIED
              description: |-
                ProposalStatus enumerates the valid statuses of a proposal.

                 - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                 - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                period.
                 - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                period.
                 - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                passed.
                 - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                been rejected.
                 - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                failed.
            final_tally_result:
              type: object
              properties:
                'yes':
                  type: string
                abstain:
                  type: string
                'no':
                  type: string
                no_with_veto:
                  type: string
              description: TallyResult defines a standard tally for a governance proposal.
            submit_time:
              type: string
              format: date-time
            deposit_end_time:
              type: string
              format: date-time
            total_deposit:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
            voting_start_time:
              type: string
              format: date-time
            voting_end_time:
              type: string
              format: date-time
          description: Proposal defines the core field members of a governance proposal.
  cosmos.base.v1beta1.Coin:
    type: object
    properties:
      denom:
        type: string
      amount:
        type: string
    description: |-
      Coin defines a token with a denomination and an amount.

      NOTE: The amount field is an Int which implements the custom method
      signatures required by gogoproto.
  cosmos.gov.v1beta1.Proposal:
    type: object
    properties:
      proposal_id:
        type: string
        format: uint64
      content:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      status:
        type: string
        enum:
          - PROPOSAL_STATUS_UNSPECIFIED
          - PROPOSAL_STATUS_DEPOSIT_PERIOD
          - PROPOSAL_STATUS_VOTING_PERIOD
          - PROPOSAL_STATUS_PASSED
          - PROPOSAL_STATUS_REJECTED
          - PROPOSAL_STATUS_FAILED
        default: PROPOSAL_STATUS_UNSPECIFIED
        description: |-
          ProposalStatus enumerates the valid statuses of a proposal.

           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
          period.
           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
          period.
           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
          passed.
           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
          been rejected.
           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
          failed.
      final_tally_result:
        type: object
        properties:
          'yes':
            type: string
          abstain:
            type: string
          'no':
            type: string
          no_with_veto:
            type: string
        description: TallyResult defines a standard tally for a governance proposal.
      submit_time:
        type: string
        format: date-time
      deposit_end_time:
        type: string
        format: date-time
      total_deposit:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
      voting_start_time:
        type: string
        format: date-time
      voting_end_time:
        type: string
        format: date-time
    description: Proposal defines the core field members of a governance proposal.
  cosmos.gov.v1beta1.ProposalStatus:
    type: string
    enum:
      - PROPOSAL_STATUS_UNSPECIFIED
      - PROPOSAL_STATUS_DEPOSIT_PERIOD
      - PROPOSAL_STATUS_VOTING_PERIOD
      - PROPOSAL_STATUS_PASSED
      - PROPOSAL_STATUS_REJECTED
      - PROPOSAL_STATUS_FAILED
    default: PROPOSAL_STATUS_UNSPECIFIED
    description: |-
      ProposalStatus enumerates the valid statuses of a proposal.

       - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
       - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
      period.
       - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
      period.
       - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
      passed.
       - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
      been rejected.
       - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
      failed.
  cosmos.gov.v1beta1.TallyResult:
    type: object
    properties:
      'yes':
        type: string
      abstain:
        type: string
      'no':
        type: string
      no_with_veto:
        type: string
    description: TallyResult defines a standard tally for a governance proposal.
  google.protobuf.Any:
    type: object
    properties:
      '@type':
        type: string
        description: >-
          A URL/resource name that uniquely identifies the type of the
          serialized

          protocol buffer message. This string must contain at least

          one "/" character. The last segment of the URL's path must represent

          the fully qualified name of the type (as in

          `path/google.protobuf.Duration`). The name should be in a canonical
          form

          (e.g., leading "." is not accepted).


          In practice, teams usually precompile into the binary all types that
          they

          expect it to use in the context of Any. However, for URLs which use
          the

          scheme `http`, `https`, or no scheme, one can optionally set up a type

          server that maps type URLs to message definitions as follows:


          * If no scheme is provided, `https` is assumed.

          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official

          protobuf release, and it is not used for type URLs beginning with

          type.googleapis.com.


          Schemes other than `http`, `https` (or the empty scheme) might be

          used with implementation specific semantics.
    additionalProperties: {}
    description: >-
      `Any` contains an arbitrary serialized protocol buffer message along with
      a

      URL that describes the type of the serialized message.


      Protobuf library provides support to pack/unpack Any values in the form

      of utility functions or additional generated methods of the Any type.


      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use

      'type.googleapis.com/full.type.name' as the type URL and the unpack

      methods only use the fully qualified type name after the last '/'

      in the type URL, for example "foo.bar.com/x/y.z" will yield type

      name "y.z".



      JSON

      ====

      The JSON representation of an `Any` value uses the regular

      representation of the deserialized, embedded message, with an

      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON

      representation, that representation will be embedded adding a field

      `value` which holds the custom JSON in addition to the `@type`

      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  google.rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
  cosmos.auth.v1beta1.Params:
    type: object
    properties:
      max_memo_characters:
        type: string
        format: uint64
      tx_sig_limit:
        type: string
        format: uint64
      tx_size_cost_per_byte:
        type: string
        format: uint64
      sig_verify_cost_ed25519:
        type: string
        format: uint64
      sig_verify_cost_secp256k1:
        type: string
        format: uint64
    description: Params defines the parameters for the auth module.
  cosmos.auth.v1beta1.QueryAccountResponse:
    type: object
    properties:
      account:
        description: account defines the account of the corresponding address.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: >-
      QueryAccountResponse is the response type for the Query/Account RPC
      method.
  cosmos.auth.v1beta1.QueryAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: accounts are the existing accounts
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAccountsResponse is the response type for the Query/Accounts RPC
      method.


      Since: cosmos-sdk 0.43
  cosmos.auth.v1beta1.QueryModuleAccountByNameResponse:
    type: object
    properties:
      account:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      QueryModuleAccountByNameResponse is the response type for the
      Query/ModuleAccountByName RPC method.
  cosmos.auth.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          max_memo_characters:
            type: string
            format: uint64
          tx_sig_limit:
            type: string
            format: uint64
          tx_size_cost_per_byte:
            type: string
            format: uint64
          sig_verify_cost_ed25519:
            type: string
            format: uint64
          sig_verify_cost_secp256k1:
            type: string
            format: uint64
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmos.base.query.v1beta1.PageRequest:
    type: object
    properties:
      key:
        type: string
        format: byte
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
      offset:
        type: string
        format: uint64
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
      limit:
        type: string
        format: uint64
        description: >-
          limit is the total number of results to be returned in the result
          page.

          If left empty it will default to a value to be set by each app.
      count_total:
        type: boolean
        description: >-
          count_total is set to true  to indicate that the result set should
          include

          a count of the total number of items available for pagination in UIs.

          count_total is only respected when offset is used. It is ignored when
          key

          is set.
      reverse:
        type: boolean
        description: >-
          reverse is set to true if results are to be returned in the descending
          order.


          Since: cosmos-sdk 0.43
    description: |-
      message SomeRequest {
               Foo some_parameter = 1;
               PageRequest pagination = 2;
       }
    title: |-
      PageRequest is to be embedded in gRPC request messages for efficient
      pagination. Ex:
  cosmos.base.query.v1beta1.PageResponse:
    type: object
    properties:
      next_key:
        type: string
        format: byte
        title: |-
          next_key is the key to be passed to PageRequest.key to
          query the next page most efficiently
      total:
        type: string
        format: uint64
        title: |-
          total is total number of results available if PageRequest.count_total
          was set, its value is undefined otherwise
    description: |-
      PageResponse is to be embedded in gRPC response messages where the
      corresponding request message has used PageRequest.

       message SomeResponse {
               repeated Bar results = 1;
               PageResponse page = 2;
       }
  cosmos.authz.v1beta1.Grant:
    type: object
    properties:
      authorization:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      expiration:
        type: string
        format: date-time
    description: |-
      Grant gives permissions to execute
      the provide method with expiration time.
  cosmos.authz.v1beta1.GrantAuthorization:
    type: object
    properties:
      granter:
        type: string
      grantee:
        type: string
      authorization:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      expiration:
        type: string
        format: date-time
    description: 'Since: cosmos-sdk 0.45.2'
    title: >-
      GrantAuthorization extends a grant with both the addresses of the grantee
      and granter.

      It is used in genesis.proto and query.proto
  cosmos.authz.v1beta1.MsgExecResponse:
    type: object
    properties:
      results:
        type: array
        items:
          type: string
          format: byte
    description: MsgExecResponse defines the Msg/MsgExecResponse response type.
  cosmos.authz.v1beta1.MsgGrantResponse:
    type: object
    description: MsgGrantResponse defines the Msg/MsgGrant response type.
  cosmos.authz.v1beta1.MsgRevokeResponse:
    type: object
    description: MsgRevokeResponse defines the Msg/MsgRevokeResponse response type.
  cosmos.authz.v1beta1.QueryGranteeGrantsResponse:
    type: object
    properties:
      grants:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
            grantee:
              type: string
            authorization:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            expiration:
              type: string
              format: date-time
          description: 'Since: cosmos-sdk 0.45.2'
          title: >-
            GrantAuthorization extends a grant with both the addresses of the
            grantee and granter.

            It is used in genesis.proto and query.proto
        description: grants is a list of grants granted to the grantee.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGranteeGrantsResponse is the response type for the
      Query/GranteeGrants RPC method.
  cosmos.authz.v1beta1.QueryGranterGrantsResponse:
    type: object
    properties:
      grants:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
            grantee:
              type: string
            authorization:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            expiration:
              type: string
              format: date-time
          description: 'Since: cosmos-sdk 0.45.2'
          title: >-
            GrantAuthorization extends a grant with both the addresses of the
            grantee and granter.

            It is used in genesis.proto and query.proto
        description: grants is a list of grants granted by the granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGranterGrantsResponse is the response type for the
      Query/GranterGrants RPC method.
  cosmos.authz.v1beta1.QueryGrantsResponse:
    type: object
    properties:
      grants:
        type: array
        items:
          type: object
          properties:
            authorization:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            expiration:
              type: string
              format: date-time
          description: |-
            Grant gives permissions to execute
            the provide method with expiration time.
        description: authorizations is a list of grants granted for grantee by granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryGrantsResponse is the response type for the Query/Authorizations RPC
      method.
  cosmos.bank.v1beta1.DenomUnit:
    type: object
    properties:
      denom:
        type: string
        description: denom represents the string name of the given denom unit (e.g uatom).
      exponent:
        type: integer
        format: int64
        description: >-
          exponent represents power of 10 exponent that one must

          raise the base_denom to in order to equal the given DenomUnit's denom

          1 denom = 1^exponent base_denom

          (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom'
          with

          exponent = 6, thus: 1 atom = 10^6 uatom).
      aliases:
        type: array
        items:
          type: string
        title: aliases is a list of string aliases for the given denom
    description: |-
      DenomUnit represents a struct that describes a given
      denomination unit of the basic token.
  cosmos.bank.v1beta1.Input:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Input models transaction input.
  cosmos.bank.v1beta1.Metadata:
    type: object
    properties:
      description:
        type: string
      denom_units:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
              description: >-
                denom represents the string name of the given denom unit (e.g
                uatom).
            exponent:
              type: integer
              format: int64
              description: >-
                exponent represents power of 10 exponent that one must

                raise the base_denom to in order to equal the given DenomUnit's
                denom

                1 denom = 1^exponent base_denom

                (e.g. with a base_denom of uatom, one can create a DenomUnit of
                'atom' with

                exponent = 6, thus: 1 atom = 10^6 uatom).
            aliases:
              type: array
              items:
                type: string
              title: aliases is a list of string aliases for the given denom
          description: |-
            DenomUnit represents a struct that describes a given
            denomination unit of the basic token.
        title: denom_units represents the list of DenomUnit's for a given coin
      base:
        type: string
        description: >-
          base represents the base denom (should be the DenomUnit with exponent
          = 0).
      display:
        type: string
        description: |-
          display indicates the suggested denom that should be
          displayed in clients.
      name:
        type: string
        description: 'Since: cosmos-sdk 0.43'
        title: 'name defines the name of the token (eg: Cosmos Atom)'
      symbol:
        type: string
        description: >-
          symbol is the token symbol usually shown on exchanges (eg: ATOM). This
          can

          be the same as the display.


          Since: cosmos-sdk 0.43
    description: |-
      Metadata represents a struct that describes
      a basic token.
  cosmos.bank.v1beta1.MsgMultiSendResponse:
    type: object
    description: MsgMultiSendResponse defines the Msg/MultiSend response type.
  cosmos.bank.v1beta1.MsgSendResponse:
    type: object
    description: MsgSendResponse defines the Msg/Send response type.
  cosmos.bank.v1beta1.Output:
    type: object
    properties:
      address:
        type: string
      coins:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
    description: Output models transaction outputs.
  cosmos.bank.v1beta1.Params:
    type: object
    properties:
      send_enabled:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            enabled:
              type: boolean
          description: >-
            SendEnabled maps coin denom to a send_enabled status (whether a
            denom is

            sendable).
      default_send_enabled:
        type: boolean
    description: Params defines the parameters for the bank module.
  cosmos.bank.v1beta1.QueryAllBalancesResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: balances is the balances of all the coins.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllBalancesResponse is the response type for the Query/AllBalances
      RPC

      method.
  cosmos.bank.v1beta1.QueryBalanceResponse:
    type: object
    properties:
      balance:
        description: balance is the balance of the coin.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
    description: >-
      QueryBalanceResponse is the response type for the Query/Balance RPC
      method.
  cosmos.bank.v1beta1.QueryDenomMetadataResponse:
    type: object
    properties:
      metadata:
        description: >-
          metadata describes and provides all the client information for the
          requested token.
        type: object
        properties:
          description:
            type: string
          denom_units:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                  description: >-
                    denom represents the string name of the given denom unit
                    (e.g uatom).
                exponent:
                  type: integer
                  format: int64
                  description: >-
                    exponent represents power of 10 exponent that one must

                    raise the base_denom to in order to equal the given
                    DenomUnit's denom

                    1 denom = 1^exponent base_denom

                    (e.g. with a base_denom of uatom, one can create a DenomUnit
                    of 'atom' with

                    exponent = 6, thus: 1 atom = 10^6 uatom).
                aliases:
                  type: array
                  items:
                    type: string
                  title: aliases is a list of string aliases for the given denom
              description: |-
                DenomUnit represents a struct that describes a given
                denomination unit of the basic token.
            title: denom_units represents the list of DenomUnit's for a given coin
          base:
            type: string
            description: >-
              base represents the base denom (should be the DenomUnit with
              exponent = 0).
          display:
            type: string
            description: |-
              display indicates the suggested denom that should be
              displayed in clients.
          name:
            type: string
            description: 'Since: cosmos-sdk 0.43'
            title: 'name defines the name of the token (eg: Cosmos Atom)'
          symbol:
            type: string
            description: >-
              symbol is the token symbol usually shown on exchanges (eg: ATOM).
              This can

              be the same as the display.


              Since: cosmos-sdk 0.43
    description: >-
      QueryDenomMetadataResponse is the response type for the
      Query/DenomMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
    type: object
    properties:
      metadatas:
        type: array
        items:
          type: object
          properties:
            description:
              type: string
            denom_units:
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                    description: >-
                      denom represents the string name of the given denom unit
                      (e.g uatom).
                  exponent:
                    type: integer
                    format: int64
                    description: >-
                      exponent represents power of 10 exponent that one must

                      raise the base_denom to in order to equal the given
                      DenomUnit's denom

                      1 denom = 1^exponent base_denom

                      (e.g. with a base_denom of uatom, one can create a
                      DenomUnit of 'atom' with

                      exponent = 6, thus: 1 atom = 10^6 uatom).
                  aliases:
                    type: array
                    items:
                      type: string
                    title: aliases is a list of string aliases for the given denom
                description: |-
                  DenomUnit represents a struct that describes a given
                  denomination unit of the basic token.
              title: denom_units represents the list of DenomUnit's for a given coin
            base:
              type: string
              description: >-
                base represents the base denom (should be the DenomUnit with
                exponent = 0).
            display:
              type: string
              description: |-
                display indicates the suggested denom that should be
                displayed in clients.
            name:
              type: string
              description: 'Since: cosmos-sdk 0.43'
              title: 'name defines the name of the token (eg: Cosmos Atom)'
            symbol:
              type: string
              description: >-
                symbol is the token symbol usually shown on exchanges (eg:
                ATOM). This can

                be the same as the display.


                Since: cosmos-sdk 0.43
          description: |-
            Metadata represents a struct that describes
            a basic token.
        description: >-
          metadata provides the client information for all the registered
          tokens.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryDenomsMetadataResponse is the response type for the
      Query/DenomsMetadata RPC

      method.
  cosmos.bank.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          send_enabled:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                enabled:
                  type: boolean
              description: >-
                SendEnabled maps coin denom to a send_enabled status (whether a
                denom is

                sendable).
          default_send_enabled:
            type: boolean
        description: Params defines the parameters for the bank module.
    description: >-
      QueryParamsResponse defines the response type for querying x/bank
      parameters.
  cosmos.bank.v1beta1.QuerySpendableBalancesResponse:
    type: object
    properties:
      balances:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        description: balances is the spendable balances of all the coins.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QuerySpendableBalancesResponse defines the gRPC response structure for
      querying

      an account's spendable balances.
  cosmos.bank.v1beta1.QuerySupplyOfResponse:
    type: object
    properties:
      amount:
        description: amount is the supply of the coin.
        type: object
        properties:
          denom:
            type: string
          amount:
            type: string
    description: >-
      QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
      method.
  cosmos.bank.v1beta1.QueryTotalSupplyResponse:
    type: object
    properties:
      supply:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: supply is the supply of the coins
      pagination:
        description: |-
          pagination defines the pagination in the response.

          Since: cosmos-sdk 0.43
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: >-
      QueryTotalSupplyResponse is the response type for the Query/TotalSupply
      RPC

      method
  cosmos.bank.v1beta1.SendEnabled:
    type: object
    properties:
      denom:
        type: string
      enabled:
        type: boolean
    description: |-
      SendEnabled maps coin denom to a send_enabled status (whether a denom is
      sendable).
  cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                description: commit from validators from the last block
                title: hashes of block data
              data_hash:
                type: string
                format: byte
                title: transactions
              validators_hash:
                type: string
                format: byte
                description: validators for the current block
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
                title: validators for the next block
              consensus_hash:
                type: string
                format: byte
                title: consensus params for current block
              app_hash:
                type: string
                format: byte
                title: state after txs from the previous block
              last_results_hash:
                type: string
                format: byte
                title: root hash of all results from the txs from the previous block
              evidence_hash:
                type: string
                format: byte
                description: evidence included in the block
                title: consensus info
              proposer_address:
                type: string
                format: byte
                title: original proposer of the block
            description: Header defines the structure of a block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                              description: zero if vote is nil.
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                              description: zero if vote is nil.
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      description: >-
                                        commit from validators from the last
                                        block
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                      title: transactions
                                    validators_hash:
                                      type: string
                                      format: byte
                                      description: validators for the current block
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                      title: validators for the next block
                                    consensus_hash:
                                      type: string
                                      format: byte
                                      title: consensus params for current block
                                    app_hash:
                                      type: string
                                      format: byte
                                      title: state after txs from the previous block
                                    last_results_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        root hash of all results from the txs
                                        from the previous block
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      description: evidence included in the block
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                      title: original proposer of the block
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
    description: >-
      GetBlockByHeightResponse is the response type for the
      Query/GetBlockByHeight RPC method.
  cosmos.base.tendermint.v1beta1.GetLatestBlockResponse:
    type: object
    properties:
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                description: commit from validators from the last block
                title: hashes of block data
              data_hash:
                type: string
                format: byte
                title: transactions
              validators_hash:
                type: string
                format: byte
                description: validators for the current block
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
                title: validators for the next block
              consensus_hash:
                type: string
                format: byte
                title: consensus params for current block
              app_hash:
                type: string
                format: byte
                title: state after txs from the previous block
              last_results_hash:
                type: string
                format: byte
                title: root hash of all results from the txs from the previous block
              evidence_hash:
                type: string
                format: byte
                description: evidence included in the block
                title: consensus info
              proposer_address:
                type: string
                format: byte
                title: original proposer of the block
            description: Header defines the structure of a block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                              description: zero if vote is nil.
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                              description: zero if vote is nil.
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      description: >-
                                        commit from validators from the last
                                        block
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                      title: transactions
                                    validators_hash:
                                      type: string
                                      format: byte
                                      description: validators for the current block
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                      title: validators for the next block
                                    consensus_hash:
                                      type: string
                                      format: byte
                                      title: consensus params for current block
                                    app_hash:
                                      type: string
                                      format: byte
                                      title: state after txs from the previous block
                                    last_results_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        root hash of all results from the txs
                                        from the previous block
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      description: evidence included in the block
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                      title: original proposer of the block
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
    description: >-
      GetLatestBlockResponse is the response type for the Query/GetLatestBlock
      RPC method.
  cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetLatestValidatorSetResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.GetNodeInfoResponse:
    type: object
    properties:
      default_node_info:
        type: object
        properties:
          protocol_version:
            type: object
            properties:
              p2p:
                type: string
                format: uint64
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
          default_node_id:
            type: string
          listen_addr:
            type: string
          network:
            type: string
          version:
            type: string
          channels:
            type: string
            format: byte
          moniker:
            type: string
          other:
            type: object
            properties:
              tx_index:
                type: string
              rpc_address:
                type: string
      application_version:
        type: object
        properties:
          name:
            type: string
          app_name:
            type: string
          version:
            type: string
          git_commit:
            type: string
          build_tags:
            type: string
          go_version:
            type: string
          build_deps:
            type: array
            items:
              type: object
              properties:
                path:
                  type: string
                  title: module path
                version:
                  type: string
                  title: module version
                sum:
                  type: string
                  title: checksum
              title: Module is the type for VersionInfo
          cosmos_sdk_version:
            type: string
            title: 'Since: cosmos-sdk 0.43'
        description: VersionInfo is the type for the GetNodeInfoResponse message.
    description: >-
      GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC
      method.
  cosmos.base.tendermint.v1beta1.GetSyncingResponse:
    type: object
    properties:
      syncing:
        type: boolean
    description: >-
      GetSyncingResponse is the response type for the Query/GetSyncing RPC
      method.
  cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse:
    type: object
    properties:
      block_height:
        type: string
        format: int64
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            pub_key:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
          description: Validator is the type for the validator-set.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetValidatorSetByHeightResponse is the response type for the
      Query/GetValidatorSetByHeight RPC method.
  cosmos.base.tendermint.v1beta1.Module:
    type: object
    properties:
      path:
        type: string
        title: module path
      version:
        type: string
        title: module version
      sum:
        type: string
        title: checksum
    title: Module is the type for VersionInfo
  cosmos.base.tendermint.v1beta1.Validator:
    type: object
    properties:
      address:
        type: string
      pub_key:
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
    description: Validator is the type for the validator-set.
  cosmos.base.tendermint.v1beta1.VersionInfo:
    type: object
    properties:
      name:
        type: string
      app_name:
        type: string
      version:
        type: string
      git_commit:
        type: string
      build_tags:
        type: string
      go_version:
        type: string
      build_deps:
        type: array
        items:
          type: object
          properties:
            path:
              type: string
              title: module path
            version:
              type: string
              title: module version
            sum:
              type: string
              title: checksum
          title: Module is the type for VersionInfo
      cosmos_sdk_version:
        type: string
        title: 'Since: cosmos-sdk 0.43'
    description: VersionInfo is the type for the GetNodeInfoResponse message.
  tendermint.crypto.PublicKey:
    type: object
    properties:
      ed25519:
        type: string
        format: byte
      secp256k1:
        type: string
        format: byte
    title: PublicKey defines the keys available for use with Validators
  tendermint.p2p.DefaultNodeInfo:
    type: object
    properties:
      protocol_version:
        type: object
        properties:
          p2p:
            type: string
            format: uint64
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
      default_node_id:
        type: string
      listen_addr:
        type: string
      network:
        type: string
      version:
        type: string
      channels:
        type: string
        format: byte
      moniker:
        type: string
      other:
        type: object
        properties:
          tx_index:
            type: string
          rpc_address:
            type: string
  tendermint.p2p.DefaultNodeInfoOther:
    type: object
    properties:
      tx_index:
        type: string
      rpc_address:
        type: string
  tendermint.p2p.ProtocolVersion:
    type: object
    properties:
      p2p:
        type: string
        format: uint64
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
  tendermint.types.Block:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            description: commit from validators from the last block
            title: hashes of block data
          data_hash:
            type: string
            format: byte
            title: transactions
          validators_hash:
            type: string
            format: byte
            description: validators for the current block
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
            title: validators for the next block
          consensus_hash:
            type: string
            format: byte
            title: consensus params for current block
          app_hash:
            type: string
            format: byte
            title: state after txs from the previous block
          last_results_hash:
            type: string
            format: byte
            title: root hash of all results from the txs from the previous block
          evidence_hash:
            type: string
            format: byte
            description: evidence included in the block
            title: consensus info
          proposer_address:
            type: string
            format: byte
            title: original proposer of the block
        description: Header defines the structure of a block header.
      data:
        type: object
        properties:
          txs:
            type: array
            items:
              type: string
              format: byte
            description: >-
              Txs that will be applied by state @ block.Height+1.

              NOTE: not all txs here are valid.  We're just agreeing on the
              order first.

              This means that block.AppHash does not include these txs.
        title: Data contains the set of transactions included in the block
      evidence:
        type: object
        properties:
          evidence:
            type: array
            items:
              type: object
              properties:
                duplicate_vote_evidence:
                  type: object
                  properties:
                    vote_a:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                          description: zero if vote is nil.
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    vote_b:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - SIGNED_MSG_TYPE_UNKNOWN
                            - SIGNED_MSG_TYPE_PREVOTE
                            - SIGNED_MSG_TYPE_PRECOMMIT
                            - SIGNED_MSG_TYPE_PROPOSAL
                          default: SIGNED_MSG_TYPE_UNKNOWN
                          description: >-
                            SignedMsgType is a type of signed message in the
                            consensus.

                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        height:
                          type: string
                          format: int64
                        round:
                          type: integer
                          format: int32
                        block_id:
                          type: object
                          properties:
                            hash:
                              type: string
                              format: byte
                            part_set_header:
                              type: object
                              properties:
                                total:
                                  type: integer
                                  format: int64
                                hash:
                                  type: string
                                  format: byte
                              title: PartsetHeader
                          title: BlockID
                          description: zero if vote is nil.
                        timestamp:
                          type: string
                          format: date-time
                        validator_address:
                          type: string
                          format: byte
                        validator_index:
                          type: integer
                          format: int32
                        signature:
                          type: string
                          format: byte
                      description: >-
                        Vote represents a prevote, precommit, or commit vote
                        from validators for

                        consensus.
                    total_voting_power:
                      type: string
                      format: int64
                    validator_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    DuplicateVoteEvidence contains evidence of a validator
                    signed two conflicting votes.
                light_client_attack_evidence:
                  type: object
                  properties:
                    conflicting_block:
                      type: object
                      properties:
                        signed_header:
                          type: object
                          properties:
                            header:
                              type: object
                              properties:
                                version:
                                  title: basic block info
                                  type: object
                                  properties:
                                    block:
                                      type: string
                                      format: uint64
                                    app:
                                      type: string
                                      format: uint64
                                  description: >-
                                    Consensus captures the consensus rules for
                                    processing a block in the blockchain,

                                    including all blockchain data structures and
                                    the rules of the application's

                                    state transition machine.
                                chain_id:
                                  type: string
                                height:
                                  type: string
                                  format: int64
                                time:
                                  type: string
                                  format: date-time
                                last_block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                last_commit_hash:
                                  type: string
                                  format: byte
                                  description: commit from validators from the last block
                                  title: hashes of block data
                                data_hash:
                                  type: string
                                  format: byte
                                  title: transactions
                                validators_hash:
                                  type: string
                                  format: byte
                                  description: validators for the current block
                                  title: >-
                                    hashes from the app output from the prev
                                    block
                                next_validators_hash:
                                  type: string
                                  format: byte
                                  title: validators for the next block
                                consensus_hash:
                                  type: string
                                  format: byte
                                  title: consensus params for current block
                                app_hash:
                                  type: string
                                  format: byte
                                  title: state after txs from the previous block
                                last_results_hash:
                                  type: string
                                  format: byte
                                  title: >-
                                    root hash of all results from the txs from
                                    the previous block
                                evidence_hash:
                                  type: string
                                  format: byte
                                  description: evidence included in the block
                                  title: consensus info
                                proposer_address:
                                  type: string
                                  format: byte
                                  title: original proposer of the block
                              description: Header defines the structure of a block header.
                            commit:
                              type: object
                              properties:
                                height:
                                  type: string
                                  format: int64
                                round:
                                  type: integer
                                  format: int32
                                block_id:
                                  type: object
                                  properties:
                                    hash:
                                      type: string
                                      format: byte
                                    part_set_header:
                                      type: object
                                      properties:
                                        total:
                                          type: integer
                                          format: int64
                                        hash:
                                          type: string
                                          format: byte
                                      title: PartsetHeader
                                  title: BlockID
                                signatures:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      block_id_flag:
                                        type: string
                                        enum:
                                          - BLOCK_ID_FLAG_UNKNOWN
                                          - BLOCK_ID_FLAG_ABSENT
                                          - BLOCK_ID_FLAG_COMMIT
                                          - BLOCK_ID_FLAG_NIL
                                        default: BLOCK_ID_FLAG_UNKNOWN
                                        title: >-
                                          BlockIdFlag indicates which BlcokID the
                                          signature is for
                                      validator_address:
                                        type: string
                                        format: byte
                                      timestamp:
                                        type: string
                                        format: date-time
                                      signature:
                                        type: string
                                        format: byte
                                    description: >-
                                      CommitSig is a part of the Vote included
                                      in a Commit.
                              description: >-
                                Commit contains the evidence that a block was
                                committed by a set of validators.
                        validator_set:
                          type: object
                          properties:
                            validators:
                              type: array
                              items:
                                type: object
                                properties:
                                  address:
                                    type: string
                                    format: byte
                                  pub_key:
                                    type: object
                                    properties:
                                      ed25519:
                                        type: string
                                        format: byte
                                      secp256k1:
                                        type: string
                                        format: byte
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Validators
                                  voting_power:
                                    type: string
                                    format: int64
                                  proposer_priority:
                                    type: string
                                    format: int64
                            proposer:
                              type: object
                              properties:
                                address:
                                  type: string
                                  format: byte
                                pub_key:
                                  type: object
                                  properties:
                                    ed25519:
                                      type: string
                                      format: byte
                                    secp256k1:
                                      type: string
                                      format: byte
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                voting_power:
                                  type: string
                                  format: int64
                                proposer_priority:
                                  type: string
                                  format: int64
                            total_voting_power:
                              type: string
                              format: int64
                    common_height:
                      type: string
                      format: int64
                    byzantine_validators:
                      type: array
                      items:
                        type: object
                        properties:
                          address:
                            type: string
                            format: byte
                          pub_key:
                            type: object
                            properties:
                              ed25519:
                                type: string
                                format: byte
                              secp256k1:
                                type: string
                                format: byte
                            title: >-
                              PublicKey defines the keys available for use with
                              Validators
                          voting_power:
                            type: string
                            format: int64
                          proposer_priority:
                            type: string
                            format: int64
                    total_voting_power:
                      type: string
                      format: int64
                    timestamp:
                      type: string
                      format: date-time
                  description: >-
                    LightClientAttackEvidence contains evidence of a set of
                    validators attempting to mislead a light client.
      last_commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.BlockID:
    type: object
    properties:
      hash:
        type: string
        format: byte
      part_set_header:
        type: object
        properties:
          total:
            type: integer
            format: int64
          hash:
            type: string
            format: byte
        title: PartsetHeader
    title: BlockID
  tendermint.types.BlockIDFlag:
    type: string
    enum:
      - BLOCK_ID_FLAG_UNKNOWN
      - BLOCK_ID_FLAG_ABSENT
      - BLOCK_ID_FLAG_COMMIT
      - BLOCK_ID_FLAG_NIL
    default: BLOCK_ID_FLAG_UNKNOWN
    title: BlockIdFlag indicates which BlcokID the signature is for
  tendermint.types.Commit:
    type: object
    properties:
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      signatures:
        type: array
        items:
          type: object
          properties:
            block_id_flag:
              type: string
              enum:
                - BLOCK_ID_FLAG_UNKNOWN
                - BLOCK_ID_FLAG_ABSENT
                - BLOCK_ID_FLAG_COMMIT
                - BLOCK_ID_FLAG_NIL
              default: BLOCK_ID_FLAG_UNKNOWN
              title: BlockIdFlag indicates which BlcokID the signature is for
            validator_address:
              type: string
              format: byte
            timestamp:
              type: string
              format: date-time
            signature:
              type: string
              format: byte
          description: CommitSig is a part of the Vote included in a Commit.
    description: >-
      Commit contains the evidence that a block was committed by a set of
      validators.
  tendermint.types.CommitSig:
    type: object
    properties:
      block_id_flag:
        type: string
        enum:
          - BLOCK_ID_FLAG_UNKNOWN
          - BLOCK_ID_FLAG_ABSENT
          - BLOCK_ID_FLAG_COMMIT
          - BLOCK_ID_FLAG_NIL
        default: BLOCK_ID_FLAG_UNKNOWN
        title: BlockIdFlag indicates which BlcokID the signature is for
      validator_address:
        type: string
        format: byte
      timestamp:
        type: string
        format: date-time
      signature:
        type: string
        format: byte
    description: CommitSig is a part of the Vote included in a Commit.
  tendermint.types.Data:
    type: object
    properties:
      txs:
        type: array
        items:
          type: string
          format: byte
        description: >-
          Txs that will be applied by state @ block.Height+1.

          NOTE: not all txs here are valid.  We're just agreeing on the order
          first.

          This means that block.AppHash does not include these txs.
    title: Data contains the set of transactions included in the block
  tendermint.types.DuplicateVoteEvidence:
    type: object
    properties:
      vote_a:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
            description: zero if vote is nil.
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      vote_b:
        type: object
        properties:
          type:
            type: string
            enum:
              - SIGNED_MSG_TYPE_UNKNOWN
              - SIGNED_MSG_TYPE_PREVOTE
              - SIGNED_MSG_TYPE_PRECOMMIT
              - SIGNED_MSG_TYPE_PROPOSAL
            default: SIGNED_MSG_TYPE_UNKNOWN
            description: |-
              SignedMsgType is a type of signed message in the consensus.

               - SIGNED_MSG_TYPE_PREVOTE: Votes
               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
            description: zero if vote is nil.
          timestamp:
            type: string
            format: date-time
          validator_address:
            type: string
            format: byte
          validator_index:
            type: integer
            format: int32
          signature:
            type: string
            format: byte
        description: >-
          Vote represents a prevote, precommit, or commit vote from validators
          for

          consensus.
      total_voting_power:
        type: string
        format: int64
      validator_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      DuplicateVoteEvidence contains evidence of a validator signed two
      conflicting votes.
  tendermint.types.Evidence:
    type: object
    properties:
      duplicate_vote_evidence:
        type: object
        properties:
          vote_a:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
                description: zero if vote is nil.
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          vote_b:
            type: object
            properties:
              type:
                type: string
                enum:
                  - SIGNED_MSG_TYPE_UNKNOWN
                  - SIGNED_MSG_TYPE_PREVOTE
                  - SIGNED_MSG_TYPE_PRECOMMIT
                  - SIGNED_MSG_TYPE_PROPOSAL
                default: SIGNED_MSG_TYPE_UNKNOWN
                description: |-
                  SignedMsgType is a type of signed message in the consensus.

                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
                description: zero if vote is nil.
              timestamp:
                type: string
                format: date-time
              validator_address:
                type: string
                format: byte
              validator_index:
                type: integer
                format: int32
              signature:
                type: string
                format: byte
            description: >-
              Vote represents a prevote, precommit, or commit vote from
              validators for

              consensus.
          total_voting_power:
            type: string
            format: int64
          validator_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          DuplicateVoteEvidence contains evidence of a validator signed two
          conflicting votes.
      light_client_attack_evidence:
        type: object
        properties:
          conflicting_block:
            type: object
            properties:
              signed_header:
                type: object
                properties:
                  header:
                    type: object
                    properties:
                      version:
                        title: basic block info
                        type: object
                        properties:
                          block:
                            type: string
                            format: uint64
                          app:
                            type: string
                            format: uint64
                        description: >-
                          Consensus captures the consensus rules for processing
                          a block in the blockchain,

                          including all blockchain data structures and the rules
                          of the application's

                          state transition machine.
                      chain_id:
                        type: string
                      height:
                        type: string
                        format: int64
                      time:
                        type: string
                        format: date-time
                      last_block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      last_commit_hash:
                        type: string
                        format: byte
                        description: commit from validators from the last block
                        title: hashes of block data
                      data_hash:
                        type: string
                        format: byte
                        title: transactions
                      validators_hash:
                        type: string
                        format: byte
                        description: validators for the current block
                        title: hashes from the app output from the prev block
                      next_validators_hash:
                        type: string
                        format: byte
                        title: validators for the next block
                      consensus_hash:
                        type: string
                        format: byte
                        title: consensus params for current block
                      app_hash:
                        type: string
                        format: byte
                        title: state after txs from the previous block
                      last_results_hash:
                        type: string
                        format: byte
                        title: >-
                          root hash of all results from the txs from the
                          previous block
                      evidence_hash:
                        type: string
                        format: byte
                        description: evidence included in the block
                        title: consensus info
                      proposer_address:
                        type: string
                        format: byte
                        title: original proposer of the block
                    description: Header defines the structure of a block header.
                  commit:
                    type: object
                    properties:
                      height:
                        type: string
                        format: int64
                      round:
                        type: integer
                        format: int32
                      block_id:
                        type: object
                        properties:
                          hash:
                            type: string
                            format: byte
                          part_set_header:
                            type: object
                            properties:
                              total:
                                type: integer
                                format: int64
                              hash:
                                type: string
                                format: byte
                            title: PartsetHeader
                        title: BlockID
                      signatures:
                        type: array
                        items:
                          type: object
                          properties:
                            block_id_flag:
                              type: string
                              enum:
                                - BLOCK_ID_FLAG_UNKNOWN
                                - BLOCK_ID_FLAG_ABSENT
                                - BLOCK_ID_FLAG_COMMIT
                                - BLOCK_ID_FLAG_NIL
                              default: BLOCK_ID_FLAG_UNKNOWN
                              title: >-
                                BlockIdFlag indicates which BlcokID the
                                signature is for
                            validator_address:
                              type: string
                              format: byte
                            timestamp:
                              type: string
                              format: date-time
                            signature:
                              type: string
                              format: byte
                          description: >-
                            CommitSig is a part of the Vote included in a
                            Commit.
                    description: >-
                      Commit contains the evidence that a block was committed by
                      a set of validators.
              validator_set:
                type: object
                properties:
                  validators:
                    type: array
                    items:
                      type: object
                      properties:
                        address:
                          type: string
                          format: byte
                        pub_key:
                          type: object
                          properties:
                            ed25519:
                              type: string
                              format: byte
                            secp256k1:
                              type: string
                              format: byte
                          title: >-
                            PublicKey defines the keys available for use with
                            Validators
                        voting_power:
                          type: string
                          format: int64
                        proposer_priority:
                          type: string
                          format: int64
                  proposer:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                  total_voting_power:
                    type: string
                    format: int64
          common_height:
            type: string
            format: int64
          byzantine_validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: PublicKey defines the keys available for use with Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          total_voting_power:
            type: string
            format: int64
          timestamp:
            type: string
            format: date-time
        description: >-
          LightClientAttackEvidence contains evidence of a set of validators
          attempting to mislead a light client.
  tendermint.types.EvidenceList:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            duplicate_vote_evidence:
              type: object
              properties:
                vote_a:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                      description: zero if vote is nil.
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                vote_b:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - SIGNED_MSG_TYPE_UNKNOWN
                        - SIGNED_MSG_TYPE_PREVOTE
                        - SIGNED_MSG_TYPE_PRECOMMIT
                        - SIGNED_MSG_TYPE_PROPOSAL
                      default: SIGNED_MSG_TYPE_UNKNOWN
                      description: >-
                        SignedMsgType is a type of signed message in the
                        consensus.

                         - SIGNED_MSG_TYPE_PREVOTE: Votes
                         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                    height:
                      type: string
                      format: int64
                    round:
                      type: integer
                      format: int32
                    block_id:
                      type: object
                      properties:
                        hash:
                          type: string
                          format: byte
                        part_set_header:
                          type: object
                          properties:
                            total:
                              type: integer
                              format: int64
                            hash:
                              type: string
                              format: byte
                          title: PartsetHeader
                      title: BlockID
                      description: zero if vote is nil.
                    timestamp:
                      type: string
                      format: date-time
                    validator_address:
                      type: string
                      format: byte
                    validator_index:
                      type: integer
                      format: int32
                    signature:
                      type: string
                      format: byte
                  description: >-
                    Vote represents a prevote, precommit, or commit vote from
                    validators for

                    consensus.
                total_voting_power:
                  type: string
                  format: int64
                validator_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                DuplicateVoteEvidence contains evidence of a validator signed
                two conflicting votes.
            light_client_attack_evidence:
              type: object
              properties:
                conflicting_block:
                  type: object
                  properties:
                    signed_header:
                      type: object
                      properties:
                        header:
                          type: object
                          properties:
                            version:
                              title: basic block info
                              type: object
                              properties:
                                block:
                                  type: string
                                  format: uint64
                                app:
                                  type: string
                                  format: uint64
                              description: >-
                                Consensus captures the consensus rules for
                                processing a block in the blockchain,

                                including all blockchain data structures and the
                                rules of the application's

                                state transition machine.
                            chain_id:
                              type: string
                            height:
                              type: string
                              format: int64
                            time:
                              type: string
                              format: date-time
                            last_block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            last_commit_hash:
                              type: string
                              format: byte
                              description: commit from validators from the last block
                              title: hashes of block data
                            data_hash:
                              type: string
                              format: byte
                              title: transactions
                            validators_hash:
                              type: string
                              format: byte
                              description: validators for the current block
                              title: hashes from the app output from the prev block
                            next_validators_hash:
                              type: string
                              format: byte
                              title: validators for the next block
                            consensus_hash:
                              type: string
                              format: byte
                              title: consensus params for current block
                            app_hash:
                              type: string
                              format: byte
                              title: state after txs from the previous block
                            last_results_hash:
                              type: string
                              format: byte
                              title: >-
                                root hash of all results from the txs from the
                                previous block
                            evidence_hash:
                              type: string
                              format: byte
                              description: evidence included in the block
                              title: consensus info
                            proposer_address:
                              type: string
                              format: byte
                              title: original proposer of the block
                          description: Header defines the structure of a block header.
                        commit:
                          type: object
                          properties:
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                            signatures:
                              type: array
                              items:
                                type: object
                                properties:
                                  block_id_flag:
                                    type: string
                                    enum:
                                      - BLOCK_ID_FLAG_UNKNOWN
                                      - BLOCK_ID_FLAG_ABSENT
                                      - BLOCK_ID_FLAG_COMMIT
                                      - BLOCK_ID_FLAG_NIL
                                    default: BLOCK_ID_FLAG_UNKNOWN
                                    title: >-
                                      BlockIdFlag indicates which BlcokID the
                                      signature is for
                                  validator_address:
                                    type: string
                                    format: byte
                                  timestamp:
                                    type: string
                                    format: date-time
                                  signature:
                                    type: string
                                    format: byte
                                description: >-
                                  CommitSig is a part of the Vote included in a
                                  Commit.
                          description: >-
                            Commit contains the evidence that a block was
                            committed by a set of validators.
                    validator_set:
                      type: object
                      properties:
                        validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        proposer:
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                            pub_key:
                              type: object
                              properties:
                                ed25519:
                                  type: string
                                  format: byte
                                secp256k1:
                                  type: string
                                  format: byte
                              title: >-
                                PublicKey defines the keys available for use
                                with Validators
                            voting_power:
                              type: string
                              format: int64
                            proposer_priority:
                              type: string
                              format: int64
                        total_voting_power:
                          type: string
                          format: int64
                common_height:
                  type: string
                  format: int64
                byzantine_validators:
                  type: array
                  items:
                    type: object
                    properties:
                      address:
                        type: string
                        format: byte
                      pub_key:
                        type: object
                        properties:
                          ed25519:
                            type: string
                            format: byte
                          secp256k1:
                            type: string
                            format: byte
                        title: >-
                          PublicKey defines the keys available for use with
                          Validators
                      voting_power:
                        type: string
                        format: int64
                      proposer_priority:
                        type: string
                        format: int64
                total_voting_power:
                  type: string
                  format: int64
                timestamp:
                  type: string
                  format: date-time
              description: >-
                LightClientAttackEvidence contains evidence of a set of
                validators attempting to mislead a light client.
  tendermint.types.Header:
    type: object
    properties:
      version:
        title: basic block info
        type: object
        properties:
          block:
            type: string
            format: uint64
          app:
            type: string
            format: uint64
        description: >-
          Consensus captures the consensus rules for processing a block in the
          blockchain,

          including all blockchain data structures and the rules of the
          application's

          state transition machine.
      chain_id:
        type: string
      height:
        type: string
        format: int64
      time:
        type: string
        format: date-time
      last_block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      last_commit_hash:
        type: string
        format: byte
        description: commit from validators from the last block
        title: hashes of block data
      data_hash:
        type: string
        format: byte
        title: transactions
      validators_hash:
        type: string
        format: byte
        description: validators for the current block
        title: hashes from the app output from the prev block
      next_validators_hash:
        type: string
        format: byte
        title: validators for the next block
      consensus_hash:
        type: string
        format: byte
        title: consensus params for current block
      app_hash:
        type: string
        format: byte
        title: state after txs from the previous block
      last_results_hash:
        type: string
        format: byte
        title: root hash of all results from the txs from the previous block
      evidence_hash:
        type: string
        format: byte
        description: evidence included in the block
        title: consensus info
      proposer_address:
        type: string
        format: byte
        title: original proposer of the block
    description: Header defines the structure of a block header.
  tendermint.types.LightBlock:
    type: object
    properties:
      signed_header:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                description: commit from validators from the last block
                title: hashes of block data
              data_hash:
                type: string
                format: byte
                title: transactions
              validators_hash:
                type: string
                format: byte
                description: validators for the current block
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
                title: validators for the next block
              consensus_hash:
                type: string
                format: byte
                title: consensus params for current block
              app_hash:
                type: string
                format: byte
                title: state after txs from the previous block
              last_results_hash:
                type: string
                format: byte
                title: root hash of all results from the txs from the previous block
              evidence_hash:
                type: string
                format: byte
                description: evidence included in the block
                title: consensus info
              proposer_address:
                type: string
                format: byte
                title: original proposer of the block
            description: Header defines the structure of a block header.
          commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      validator_set:
        type: object
        properties:
          validators:
            type: array
            items:
              type: object
              properties:
                address:
                  type: string
                  format: byte
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: PublicKey defines the keys available for use with Validators
                voting_power:
                  type: string
                  format: int64
                proposer_priority:
                  type: string
                  format: int64
          proposer:
            type: object
            properties:
              address:
                type: string
                format: byte
              pub_key:
                type: object
                properties:
                  ed25519:
                    type: string
                    format: byte
                  secp256k1:
                    type: string
                    format: byte
                title: PublicKey defines the keys available for use with Validators
              voting_power:
                type: string
                format: int64
              proposer_priority:
                type: string
                format: int64
          total_voting_power:
            type: string
            format: int64
  tendermint.types.LightClientAttackEvidence:
    type: object
    properties:
      conflicting_block:
        type: object
        properties:
          signed_header:
            type: object
            properties:
              header:
                type: object
                properties:
                  version:
                    title: basic block info
                    type: object
                    properties:
                      block:
                        type: string
                        format: uint64
                      app:
                        type: string
                        format: uint64
                    description: >-
                      Consensus captures the consensus rules for processing a
                      block in the blockchain,

                      including all blockchain data structures and the rules of
                      the application's

                      state transition machine.
                  chain_id:
                    type: string
                  height:
                    type: string
                    format: int64
                  time:
                    type: string
                    format: date-time
                  last_block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  last_commit_hash:
                    type: string
                    format: byte
                    description: commit from validators from the last block
                    title: hashes of block data
                  data_hash:
                    type: string
                    format: byte
                    title: transactions
                  validators_hash:
                    type: string
                    format: byte
                    description: validators for the current block
                    title: hashes from the app output from the prev block
                  next_validators_hash:
                    type: string
                    format: byte
                    title: validators for the next block
                  consensus_hash:
                    type: string
                    format: byte
                    title: consensus params for current block
                  app_hash:
                    type: string
                    format: byte
                    title: state after txs from the previous block
                  last_results_hash:
                    type: string
                    format: byte
                    title: >-
                      root hash of all results from the txs from the previous
                      block
                  evidence_hash:
                    type: string
                    format: byte
                    description: evidence included in the block
                    title: consensus info
                  proposer_address:
                    type: string
                    format: byte
                    title: original proposer of the block
                description: Header defines the structure of a block header.
              commit:
                type: object
                properties:
                  height:
                    type: string
                    format: int64
                  round:
                    type: integer
                    format: int32
                  block_id:
                    type: object
                    properties:
                      hash:
                        type: string
                        format: byte
                      part_set_header:
                        type: object
                        properties:
                          total:
                            type: integer
                            format: int64
                          hash:
                            type: string
                            format: byte
                        title: PartsetHeader
                    title: BlockID
                  signatures:
                    type: array
                    items:
                      type: object
                      properties:
                        block_id_flag:
                          type: string
                          enum:
                            - BLOCK_ID_FLAG_UNKNOWN
                            - BLOCK_ID_FLAG_ABSENT
                            - BLOCK_ID_FLAG_COMMIT
                            - BLOCK_ID_FLAG_NIL
                          default: BLOCK_ID_FLAG_UNKNOWN
                          title: >-
                            BlockIdFlag indicates which BlcokID the signature is
                            for
                        validator_address:
                          type: string
                          format: byte
                        timestamp:
                          type: string
                          format: date-time
                        signature:
                          type: string
                          format: byte
                      description: CommitSig is a part of the Vote included in a Commit.
                description: >-
                  Commit contains the evidence that a block was committed by a
                  set of validators.
          validator_set:
            type: object
            properties:
              validators:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                    pub_key:
                      type: object
                      properties:
                        ed25519:
                          type: string
                          format: byte
                        secp256k1:
                          type: string
                          format: byte
                      title: >-
                        PublicKey defines the keys available for use with
                        Validators
                    voting_power:
                      type: string
                      format: int64
                    proposer_priority:
                      type: string
                      format: int64
              proposer:
                type: object
                properties:
                  address:
                    type: string
                    format: byte
                  pub_key:
                    type: object
                    properties:
                      ed25519:
                        type: string
                        format: byte
                      secp256k1:
                        type: string
                        format: byte
                    title: >-
                      PublicKey defines the keys available for use with
                      Validators
                  voting_power:
                    type: string
                    format: int64
                  proposer_priority:
                    type: string
                    format: int64
              total_voting_power:
                type: string
                format: int64
      common_height:
        type: string
        format: int64
      byzantine_validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: PublicKey defines the keys available for use with Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      total_voting_power:
        type: string
        format: int64
      timestamp:
        type: string
        format: date-time
    description: >-
      LightClientAttackEvidence contains evidence of a set of validators
      attempting to mislead a light client.
  tendermint.types.PartSetHeader:
    type: object
    properties:
      total:
        type: integer
        format: int64
      hash:
        type: string
        format: byte
    title: PartsetHeader
  tendermint.types.SignedHeader:
    type: object
    properties:
      header:
        type: object
        properties:
          version:
            title: basic block info
            type: object
            properties:
              block:
                type: string
                format: uint64
              app:
                type: string
                format: uint64
            description: >-
              Consensus captures the consensus rules for processing a block in
              the blockchain,

              including all blockchain data structures and the rules of the
              application's

              state transition machine.
          chain_id:
            type: string
          height:
            type: string
            format: int64
          time:
            type: string
            format: date-time
          last_block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          last_commit_hash:
            type: string
            format: byte
            description: commit from validators from the last block
            title: hashes of block data
          data_hash:
            type: string
            format: byte
            title: transactions
          validators_hash:
            type: string
            format: byte
            description: validators for the current block
            title: hashes from the app output from the prev block
          next_validators_hash:
            type: string
            format: byte
            title: validators for the next block
          consensus_hash:
            type: string
            format: byte
            title: consensus params for current block
          app_hash:
            type: string
            format: byte
            title: state after txs from the previous block
          last_results_hash:
            type: string
            format: byte
            title: root hash of all results from the txs from the previous block
          evidence_hash:
            type: string
            format: byte
            description: evidence included in the block
            title: consensus info
          proposer_address:
            type: string
            format: byte
            title: original proposer of the block
        description: Header defines the structure of a block header.
      commit:
        type: object
        properties:
          height:
            type: string
            format: int64
          round:
            type: integer
            format: int32
          block_id:
            type: object
            properties:
              hash:
                type: string
                format: byte
              part_set_header:
                type: object
                properties:
                  total:
                    type: integer
                    format: int64
                  hash:
                    type: string
                    format: byte
                title: PartsetHeader
            title: BlockID
          signatures:
            type: array
            items:
              type: object
              properties:
                block_id_flag:
                  type: string
                  enum:
                    - BLOCK_ID_FLAG_UNKNOWN
                    - BLOCK_ID_FLAG_ABSENT
                    - BLOCK_ID_FLAG_COMMIT
                    - BLOCK_ID_FLAG_NIL
                  default: BLOCK_ID_FLAG_UNKNOWN
                  title: BlockIdFlag indicates which BlcokID the signature is for
                validator_address:
                  type: string
                  format: byte
                timestamp:
                  type: string
                  format: date-time
                signature:
                  type: string
                  format: byte
              description: CommitSig is a part of the Vote included in a Commit.
        description: >-
          Commit contains the evidence that a block was committed by a set of
          validators.
  tendermint.types.SignedMsgType:
    type: string
    enum:
      - SIGNED_MSG_TYPE_UNKNOWN
      - SIGNED_MSG_TYPE_PREVOTE
      - SIGNED_MSG_TYPE_PRECOMMIT
      - SIGNED_MSG_TYPE_PROPOSAL
    default: SIGNED_MSG_TYPE_UNKNOWN
    description: |-
      SignedMsgType is a type of signed message in the consensus.

       - SIGNED_MSG_TYPE_PREVOTE: Votes
       - SIGNED_MSG_TYPE_PROPOSAL: Proposals
  tendermint.types.Validator:
    type: object
    properties:
      address:
        type: string
        format: byte
      pub_key:
        type: object
        properties:
          ed25519:
            type: string
            format: byte
          secp256k1:
            type: string
            format: byte
        title: PublicKey defines the keys available for use with Validators
      voting_power:
        type: string
        format: int64
      proposer_priority:
        type: string
        format: int64
  tendermint.types.ValidatorSet:
    type: object
    properties:
      validators:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
              format: byte
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: PublicKey defines the keys available for use with Validators
            voting_power:
              type: string
              format: int64
            proposer_priority:
              type: string
              format: int64
      proposer:
        type: object
        properties:
          address:
            type: string
            format: byte
          pub_key:
            type: object
            properties:
              ed25519:
                type: string
                format: byte
              secp256k1:
                type: string
                format: byte
            title: PublicKey defines the keys available for use with Validators
          voting_power:
            type: string
            format: int64
          proposer_priority:
            type: string
            format: int64
      total_voting_power:
        type: string
        format: int64
  tendermint.types.Vote:
    type: object
    properties:
      type:
        type: string
        enum:
          - SIGNED_MSG_TYPE_UNKNOWN
          - SIGNED_MSG_TYPE_PREVOTE
          - SIGNED_MSG_TYPE_PRECOMMIT
          - SIGNED_MSG_TYPE_PROPOSAL
        default: SIGNED_MSG_TYPE_UNKNOWN
        description: |-
          SignedMsgType is a type of signed message in the consensus.

           - SIGNED_MSG_TYPE_PREVOTE: Votes
           - SIGNED_MSG_TYPE_PROPOSAL: Proposals
      height:
        type: string
        format: int64
      round:
        type: integer
        format: int32
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
        description: zero if vote is nil.
      timestamp:
        type: string
        format: date-time
      validator_address:
        type: string
        format: byte
      validator_index:
        type: integer
        format: int32
      signature:
        type: string
        format: byte
    description: |-
      Vote represents a prevote, precommit, or commit vote from validators for
      consensus.
  tendermint.version.Consensus:
    type: object
    properties:
      block:
        type: string
        format: uint64
      app:
        type: string
        format: uint64
    description: >-
      Consensus captures the consensus rules for processing a block in the
      blockchain,

      including all blockchain data structures and the rules of the
      application's

      state transition machine.
  cosmos.crisis.v1beta1.MsgVerifyInvariantResponse:
    type: object
    description: MsgVerifyInvariantResponse defines the Msg/VerifyInvariant response type.
  cosmos.evidence.v1beta1.MsgSubmitEvidenceResponse:
    type: object
    properties:
      hash:
        type: string
        format: byte
        description: hash defines the hash of the evidence.
    description: MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type.
  cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
    type: object
    properties:
      evidence:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: evidence returns all evidences.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllEvidenceResponse is the response type for the Query/AllEvidence
      RPC

      method.
  cosmos.evidence.v1beta1.QueryEvidenceResponse:
    type: object
    properties:
      evidence:
        description: evidence returns the requested evidence.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: >-
      QueryEvidenceResponse is the response type for the Query/Evidence RPC
      method.
  cosmos.feegrant.v1beta1.Grant:
    type: object
    properties:
      granter:
        type: string
        description: >-
          granter is the address of the user granting an allowance of their
          funds.
      grantee:
        type: string
        description: >-
          grantee is the address of the user being granted an allowance of
          another user's funds.
      allowance:
        description: allowance can be any of basic and filtered fee allowance.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    title: Grant is stored in the KVStore to record a grant with full context
  cosmos.feegrant.v1beta1.MsgGrantAllowanceResponse:
    type: object
    description: >-
      MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response
      type.
  cosmos.feegrant.v1beta1.MsgRevokeAllowanceResponse:
    type: object
    description: >-
      MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse
      response type.
  cosmos.feegrant.v1beta1.QueryAllowanceResponse:
    type: object
    properties:
      allowance:
        description: allowance is a allowance granted for grantee by granter.
        type: object
        properties:
          granter:
            type: string
            description: >-
              granter is the address of the user granting an allowance of their
              funds.
          grantee:
            type: string
            description: >-
              grantee is the address of the user being granted an allowance of
              another user's funds.
          allowance:
            description: allowance can be any of basic and filtered fee allowance.
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
        title: Grant is stored in the KVStore to record a grant with full context
    description: >-
      QueryAllowanceResponse is the response type for the Query/Allowance RPC
      method.
  cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse:
    type: object
    properties:
      allowances:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
              description: >-
                granter is the address of the user granting an allowance of
                their funds.
            grantee:
              type: string
              description: >-
                grantee is the address of the user being granted an allowance of
                another user's funds.
            allowance:
              description: allowance can be any of basic and filtered fee allowance.
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
          title: Grant is stored in the KVStore to record a grant with full context
        description: allowances that have been issued by the granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllowancesByGranterResponse is the response type for the
      Query/AllowancesByGranter RPC method.
  cosmos.feegrant.v1beta1.QueryAllowancesResponse:
    type: object
    properties:
      allowances:
        type: array
        items:
          type: object
          properties:
            granter:
              type: string
              description: >-
                granter is the address of the user granting an allowance of
                their funds.
            grantee:
              type: string
              description: >-
                grantee is the address of the user being granted an allowance of
                another user's funds.
            allowance:
              description: allowance can be any of basic and filtered fee allowance.
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
          title: Grant is stored in the KVStore to record a grant with full context
        description: allowances are allowance's granted for grantee by granter.
      pagination:
        description: pagination defines an pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryAllowancesResponse is the response type for the Query/Allowances RPC
      method.
  cosmos.params.v1beta1.ParamChange:
    type: object
    properties:
      subspace:
        type: string
      key:
        type: string
      value:
        type: string
    description: |-
      ParamChange defines an individual parameter change, for use in
      ParameterChangeProposal.
  cosmos.params.v1beta1.QueryParamsResponse:
    type: object
    properties:
      param:
        description: param defines the queried parameter.
        type: object
        properties:
          subspace:
            type: string
          key:
            type: string
          value:
            type: string
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.slashing.v1beta1.MsgUnjailResponse:
    type: object
    title: MsgUnjailResponse defines the Msg/Unjail response type
  cosmos.slashing.v1beta1.Params:
    type: object
    properties:
      signed_blocks_window:
        type: string
        format: int64
      min_signed_per_window:
        type: string
        format: byte
      downtime_jail_duration:
        type: string
      slash_fraction_double_sign:
        type: string
        format: byte
      slash_fraction_downtime:
        type: string
        format: byte
    description: Params represents the parameters used for by the slashing module.
  cosmos.slashing.v1beta1.QueryParamsResponse:
    type: object
    properties:
      params:
        type: object
        properties:
          signed_blocks_window:
            type: string
            format: int64
          min_signed_per_window:
            type: string
            format: byte
          downtime_jail_duration:
            type: string
          slash_fraction_double_sign:
            type: string
            format: byte
          slash_fraction_downtime:
            type: string
            format: byte
        description: Params represents the parameters used for by the slashing module.
    title: QueryParamsResponse is the response type for the Query/Params RPC method
  cosmos.slashing.v1beta1.QuerySigningInfoResponse:
    type: object
    properties:
      val_signing_info:
        title: val_signing_info is the signing info of requested val cons address
        type: object
        properties:
          address:
            type: string
          start_height:
            type: string
            format: int64
            title: Height at which validator was first a candidate OR was unjailed
          index_offset:
            type: string
            format: int64
            description: >-
              Index which is incremented each time the validator was a bonded

              in a block and may have signed a precommit or not. This in
              conjunction with the

              `SignedBlocksWindow` param determines the index in the
              `MissedBlocksBitArray`.
          jailed_until:
            type: string
            format: date-time
            description: >-
              Timestamp until which the validator is jailed due to liveness
              downtime.
          tombstoned:
            type: boolean
            description: >-
              Whether or not a validator has been tombstoned (killed out of
              validator set). It is set

              once the validator commits an equivocation or for any other
              configured misbehiavor.
          missed_blocks_counter:
            type: string
            format: int64
            description: >-
              A counter kept to avoid unnecessary array reads.

              Note that `Sum(MissedBlocksBitArray)` always equals
              `MissedBlocksCounter`.
        description: >-
          ValidatorSigningInfo defines a validator's signing info for monitoring
          their

          liveness activity.
    title: >-
      QuerySigningInfoResponse is the response type for the Query/SigningInfo
      RPC

      method
  cosmos.slashing.v1beta1.QuerySigningInfosResponse:
    type: object
    properties:
      info:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            start_height:
              type: string
              format: int64
              title: Height at which validator was first a candidate OR was unjailed
            index_offset:
              type: string
              format: int64
              description: >-
                Index which is incremented each time the validator was a bonded

                in a block and may have signed a precommit or not. This in
                conjunction with the

                `SignedBlocksWindow` param determines the index in the
                `MissedBlocksBitArray`.
            jailed_until:
              type: string
              format: date-time
              description: >-
                Timestamp until which the validator is jailed due to liveness
                downtime.
            tombstoned:
              type: boolean
              description: >-
                Whether or not a validator has been tombstoned (killed out of
                validator set). It is set

                once the validator commits an equivocation or for any other
                configured misbehiavor.
            missed_blocks_counter:
              type: string
              format: int64
              description: >-
                A counter kept to avoid unnecessary array reads.

                Note that `Sum(MissedBlocksBitArray)` always equals
                `MissedBlocksCounter`.
          description: >-
            ValidatorSigningInfo defines a validator's signing info for
            monitoring their

            liveness activity.
        title: info is the signing info of all validators
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: >-
      QuerySigningInfosResponse is the response type for the Query/SigningInfos
      RPC

      method
  cosmos.slashing.v1beta1.ValidatorSigningInfo:
    type: object
    properties:
      address:
        type: string
      start_height:
        type: string
        format: int64
        title: Height at which validator was first a candidate OR was unjailed
      index_offset:
        type: string
        format: int64
        description: >-
          Index which is incremented each time the validator was a bonded

          in a block and may have signed a precommit or not. This in conjunction
          with the

          `SignedBlocksWindow` param determines the index in the
          `MissedBlocksBitArray`.
      jailed_until:
        type: string
        format: date-time
        description: >-
          Timestamp until which the validator is jailed due to liveness
          downtime.
      tombstoned:
        type: boolean
        description: >-
          Whether or not a validator has been tombstoned (killed out of
          validator set). It is set

          once the validator commits an equivocation or for any other configured
          misbehiavor.
      missed_blocks_counter:
        type: string
        format: int64
        description: >-
          A counter kept to avoid unnecessary array reads.

          Note that `Sum(MissedBlocksBitArray)` always equals
          `MissedBlocksCounter`.
    description: >-
      ValidatorSigningInfo defines a validator's signing info for monitoring
      their

      liveness activity.
  cosmos.base.abci.v1beta1.ABCIMessageLog:
    type: object
    properties:
      msg_index:
        type: integer
        format: int64
      log:
        type: string
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
                description: >-
                  Attribute defines an attribute wrapper where the key and value
                  are

                  strings instead of raw bytes.
          description: |-
            StringEvent defines en Event object wrapper where all the attributes
            contain key/value pairs that are strings instead of raw bytes.
        description: |-
          Events contains a slice of Event objects that were emitted during some
          execution.
    description: >-
      ABCIMessageLog defines a structure containing an indexed tx ABCI message
      log.
  cosmos.base.abci.v1beta1.Attribute:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
    description: |-
      Attribute defines an attribute wrapper where the key and value are
      strings instead of raw bytes.
  cosmos.base.abci.v1beta1.GasInfo:
    type: object
    properties:
      gas_wanted:
        type: string
        format: uint64
        description: GasWanted is the maximum units of work we allow this tx to perform.
      gas_used:
        type: string
        format: uint64
        description: GasUsed is the amount of gas actually consumed.
    description: GasInfo defines tx execution gas context.
  cosmos.base.abci.v1beta1.Result:
    type: object
    properties:
      data:
        type: string
        format: byte
        description: >-
          Data is any data returned from message or handler execution. It MUST
          be

          length prefixed in order to separate data from multiple message
          executions.
      log:
        type: string
        description: Log contains the log information from message or handler execution.
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    format: byte
                  value:
                    type: string
                    format: byte
                  index:
                    type: boolean
                    title: nondeterministic
                description: >-
                  EventAttribute is a single key-value pair, associated with an
                  event.
          description: >-
            Event allows application developers to attach additional information
            to

            ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
            ResponseDeliverTx.

            Later, transactions may be queried using these events.
        description: >-
          Events contains a slice of Event objects that were emitted during
          message

          or handler execution.
    description: Result is the union of ResponseFormat and ResponseCheckTx.
  cosmos.base.abci.v1beta1.StringEvent:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
          description: |-
            Attribute defines an attribute wrapper where the key and value are
            strings instead of raw bytes.
    description: |-
      StringEvent defines en Event object wrapper where all the attributes
      contain key/value pairs that are strings instead of raw bytes.
  cosmos.base.abci.v1beta1.TxResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        title: The block height
      txhash:
        type: string
        description: The transaction hash.
      codespace:
        type: string
        title: Namespace for the Code
      code:
        type: integer
        format: int64
        description: Response code.
      data:
        type: string
        description: Result bytes, if any.
      raw_log:
        type: string
        description: |-
          The output of the application's logger (raw string). May be
          non-deterministic.
      logs:
        type: array
        items:
          type: object
          properties:
            msg_index:
              type: integer
              format: int64
            log:
              type: string
            events:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      description: >-
                        Attribute defines an attribute wrapper where the key and
                        value are

                        strings instead of raw bytes.
                description: >-
                  StringEvent defines en Event object wrapper where all the
                  attributes

                  contain key/value pairs that are strings instead of raw bytes.
              description: >-
                Events contains a slice of Event objects that were emitted
                during some

                execution.
          description: >-
            ABCIMessageLog defines a structure containing an indexed tx ABCI
            message log.
        description: >-
          The output of the application's logger (typed). May be
          non-deterministic.
      info:
        type: string
        description: Additional information. May be non-deterministic.
      gas_wanted:
        type: string
        format: int64
        description: Amount of gas requested for transaction.
      gas_used:
        type: string
        format: int64
        description: Amount of gas consumed by transaction.
      tx:
        description: The request transaction bytes.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      timestamp:
        type: string
        description: >-
          Time of the previous block. For heights > 1, it's the weighted median
          of

          the timestamps of the valid votes in the block.LastCommit. For height
          == 1,

          it's genesis time.
      events:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
            attributes:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                    format: byte
                  value:
                    type: string
                    format: byte
                  index:
                    type: boolean
                    title: nondeterministic
                description: >-
                  EventAttribute is a single key-value pair, associated with an
                  event.
          description: >-
            Event allows application developers to attach additional information
            to

            ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
            ResponseDeliverTx.

            Later, transactions may be queried using these events.
        description: >-
          Events defines all the events emitted by processing a transaction.
          Note,

          these events include those emitted by processing all the messages and
          those

          emitted from the ante handler. Whereas Logs contains the events, with

          additional metadata, emitted only by processing the messages.


          Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
    description: >-
      TxResponse defines a structure containing relevant tx data and metadata.
      The

      tags are stringified and the log is JSON decoded.
  cosmos.crypto.multisig.v1beta1.CompactBitArray:
    type: object
    properties:
      extra_bits_stored:
        type: integer
        format: int64
      elems:
        type: string
        format: byte
    description: |-
      CompactBitArray is an implementation of a space efficient bit array.
      This is used to ensure that the encoded data takes up a minimal amount of
      space after proto encoding.
      This is not thread safe, and is not intended for concurrent usage.
  cosmos.tx.signing.v1beta1.SignMode:
    type: string
    enum:
      - SIGN_MODE_UNSPECIFIED
      - SIGN_MODE_DIRECT
      - SIGN_MODE_TEXTUAL
      - SIGN_MODE_LEGACY_AMINO_JSON
      - SIGN_MODE_EIP_191
    default: SIGN_MODE_UNSPECIFIED
    description: |-
      SignMode represents a signing mode with its own security guarantees.

       - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
      rejected
       - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
      verified with raw bytes from Tx
       - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
      human-readable textual representation on top of the binary representation
      from SIGN_MODE_DIRECT
       - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
      Amino JSON and will be removed in the future
       - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
      SDK. Ref: https://eips.ethereum.org/EIPS/eip-191

      Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,
      but is not implemented on the SDK by default. To enable EIP-191, you need
      to pass a custom `TxConfig` that has an implementation of
      `SignModeHandler` for EIP-191. The SDK may decide to fully support
      EIP-191 in the future.

      Since: cosmos-sdk 0.45.2
  cosmos.tx.v1beta1.AuthInfo:
    type: object
    properties:
      signer_infos:
        type: array
        items:
          type: object
          $ref: '#/definitions/cosmos.tx.v1beta1.SignerInfo'
        description: >-
          signer_infos defines the signing modes for the required signers. The
          number

          and order of elements must match the required signers from TxBody's

          messages. The first element is the primary signer and the one which
          pays

          the fee.
      fee:
        description: >-
          Fee is the fee and gas limit for the transaction. The first signer is
          the

          primary signer and the one which pays the fee. The fee can be
          calculated

          based on the cost of evaluating the body and doing signature
          verification

          of the signers. This can be estimated via simulation.
        type: object
        properties:
          amount:
            type: array
            items:
              type: object
              properties:
                denom:
                  type: string
                amount:
                  type: string
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
            title: amount is the amount of coins to be paid as a fee
          gas_limit:
            type: string
            format: uint64
            title: >-
              gas_limit is the maximum gas that can be used in transaction
              processing

              before an out of gas error occurs
          payer:
            type: string
            description: >-
              if unset, the first signer is responsible for paying the fees. If
              set, the specified account must pay the fees.

              the payer must be a tx signer (and thus have signed this field in
              AuthInfo).

              setting this field does *not* change the ordering of required
              signers for the transaction.
          granter:
            type: string
            title: >-
              if set, the fee payer (either the first signer or the value of the
              payer field) requests that a fee grant be used

              to pay fees instead of the fee payer's own balance. If an
              appropriate fee grant does not exist or the chain does

              not support fee grants, this will fail
    description: |-
      AuthInfo describes the fee and signer modes that are used to sign a
      transaction.
  cosmos.tx.v1beta1.BroadcastMode:
    type: string
    enum:
      - BROADCAST_MODE_UNSPECIFIED
      - BROADCAST_MODE_BLOCK
      - BROADCAST_MODE_SYNC
      - BROADCAST_MODE_ASYNC
    default: BROADCAST_MODE_UNSPECIFIED
    description: >-
      BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC
      method.

       - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
       - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
      the tx to be committed in a block.
       - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
      a CheckTx execution response only.
       - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
      immediately.
  cosmos.tx.v1beta1.BroadcastTxRequest:
    type: object
    properties:
      tx_bytes:
        type: string
        format: byte
        description: tx_bytes is the raw transaction.
      mode:
        type: string
        enum:
          - BROADCAST_MODE_UNSPECIFIED
          - BROADCAST_MODE_BLOCK
          - BROADCAST_MODE_SYNC
          - BROADCAST_MODE_ASYNC
        default: BROADCAST_MODE_UNSPECIFIED
        description: >-
          BroadcastMode specifies the broadcast mode for the TxService.Broadcast
          RPC method.

           - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
           - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
          the tx to be committed in a block.
           - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
          a CheckTx execution response only.
           - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
          immediately.
    description: |-
      BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
      RPC method.
  cosmos.tx.v1beta1.BroadcastTxResponse:
    type: object
    properties:
      tx_response:
        description: tx_response is the queried TxResponses.
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: Result bytes, if any.
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            description: The request transaction bytes.
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                        title: nondeterministic
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events defines all the events emitted by processing a transaction.
              Note,

              these events include those emitted by processing all the messages
              and those

              emitted from the ante handler. Whereas Logs contains the events,
              with

              additional metadata, emitted only by processing the messages.


              Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
    description: |-
      BroadcastTxResponse is the response type for the
      Service.BroadcastTx method.
  cosmos.tx.v1beta1.Fee:
    type: object
    properties:
      amount:
        type: array
        items:
          type: object
          properties:
            denom:
              type: string
            amount:
              type: string
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
        title: amount is the amount of coins to be paid as a fee
      gas_limit:
        type: string
        format: uint64
        title: >-
          gas_limit is the maximum gas that can be used in transaction
          processing

          before an out of gas error occurs
      payer:
        type: string
        description: >-
          if unset, the first signer is responsible for paying the fees. If set,
          the specified account must pay the fees.

          the payer must be a tx signer (and thus have signed this field in
          AuthInfo).

          setting this field does *not* change the ordering of required signers
          for the transaction.
      granter:
        type: string
        title: >-
          if set, the fee payer (either the first signer or the value of the
          payer field) requests that a fee grant be used

          to pay fees instead of the fee payer's own balance. If an appropriate
          fee grant does not exist or the chain does

          not support fee grants, this will fail
    description: >-
      Fee includes the amount of coins paid in fees and the maximum

      gas to be used by the transaction. The ratio yields an effective
      "gasprice",

      which must be above some miminum to be accepted into the mempool.
  cosmos.tx.v1beta1.GetBlockWithTxsResponse:
    type: object
    properties:
      txs:
        type: array
        items:
          type: object
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: txs are the transactions in the block.
      block_id:
        type: object
        properties:
          hash:
            type: string
            format: byte
          part_set_header:
            type: object
            properties:
              total:
                type: integer
                format: int64
              hash:
                type: string
                format: byte
            title: PartsetHeader
        title: BlockID
      block:
        type: object
        properties:
          header:
            type: object
            properties:
              version:
                title: basic block info
                type: object
                properties:
                  block:
                    type: string
                    format: uint64
                  app:
                    type: string
                    format: uint64
                description: >-
                  Consensus captures the consensus rules for processing a block
                  in the blockchain,

                  including all blockchain data structures and the rules of the
                  application's

                  state transition machine.
              chain_id:
                type: string
              height:
                type: string
                format: int64
              time:
                type: string
                format: date-time
              last_block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              last_commit_hash:
                type: string
                format: byte
                description: commit from validators from the last block
                title: hashes of block data
              data_hash:
                type: string
                format: byte
                title: transactions
              validators_hash:
                type: string
                format: byte
                description: validators for the current block
                title: hashes from the app output from the prev block
              next_validators_hash:
                type: string
                format: byte
                title: validators for the next block
              consensus_hash:
                type: string
                format: byte
                title: consensus params for current block
              app_hash:
                type: string
                format: byte
                title: state after txs from the previous block
              last_results_hash:
                type: string
                format: byte
                title: root hash of all results from the txs from the previous block
              evidence_hash:
                type: string
                format: byte
                description: evidence included in the block
                title: consensus info
              proposer_address:
                type: string
                format: byte
                title: original proposer of the block
            description: Header defines the structure of a block header.
          data:
            type: object
            properties:
              txs:
                type: array
                items:
                  type: string
                  format: byte
                description: >-
                  Txs that will be applied by state @ block.Height+1.

                  NOTE: not all txs here are valid.  We're just agreeing on the
                  order first.

                  This means that block.AppHash does not include these txs.
            title: Data contains the set of transactions included in the block
          evidence:
            type: object
            properties:
              evidence:
                type: array
                items:
                  type: object
                  properties:
                    duplicate_vote_evidence:
                      type: object
                      properties:
                        vote_a:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                              description: zero if vote is nil.
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        vote_b:
                          type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - SIGNED_MSG_TYPE_UNKNOWN
                                - SIGNED_MSG_TYPE_PREVOTE
                                - SIGNED_MSG_TYPE_PRECOMMIT
                                - SIGNED_MSG_TYPE_PROPOSAL
                              default: SIGNED_MSG_TYPE_UNKNOWN
                              description: >-
                                SignedMsgType is a type of signed message in the
                                consensus.

                                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            height:
                              type: string
                              format: int64
                            round:
                              type: integer
                              format: int32
                            block_id:
                              type: object
                              properties:
                                hash:
                                  type: string
                                  format: byte
                                part_set_header:
                                  type: object
                                  properties:
                                    total:
                                      type: integer
                                      format: int64
                                    hash:
                                      type: string
                                      format: byte
                                  title: PartsetHeader
                              title: BlockID
                              description: zero if vote is nil.
                            timestamp:
                              type: string
                              format: date-time
                            validator_address:
                              type: string
                              format: byte
                            validator_index:
                              type: integer
                              format: int32
                            signature:
                              type: string
                              format: byte
                          description: >-
                            Vote represents a prevote, precommit, or commit vote
                            from validators for

                            consensus.
                        total_voting_power:
                          type: string
                          format: int64
                        validator_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        DuplicateVoteEvidence contains evidence of a validator
                        signed two conflicting votes.
                    light_client_attack_evidence:
                      type: object
                      properties:
                        conflicting_block:
                          type: object
                          properties:
                            signed_header:
                              type: object
                              properties:
                                header:
                                  type: object
                                  properties:
                                    version:
                                      title: basic block info
                                      type: object
                                      properties:
                                        block:
                                          type: string
                                          format: uint64
                                        app:
                                          type: string
                                          format: uint64
                                      description: >-
                                        Consensus captures the consensus rules
                                        for processing a block in the
                                        blockchain,

                                        including all blockchain data structures
                                        and the rules of the application's

                                        state transition machine.
                                    chain_id:
                                      type: string
                                    height:
                                      type: string
                                      format: int64
                                    time:
                                      type: string
                                      format: date-time
                                    last_block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    last_commit_hash:
                                      type: string
                                      format: byte
                                      description: >-
                                        commit from validators from the last
                                        block
                                      title: hashes of block data
                                    data_hash:
                                      type: string
                                      format: byte
                                      title: transactions
                                    validators_hash:
                                      type: string
                                      format: byte
                                      description: validators for the current block
                                      title: >-
                                        hashes from the app output from the prev
                                        block
                                    next_validators_hash:
                                      type: string
                                      format: byte
                                      title: validators for the next block
                                    consensus_hash:
                                      type: string
                                      format: byte
                                      title: consensus params for current block
                                    app_hash:
                                      type: string
                                      format: byte
                                      title: state after txs from the previous block
                                    last_results_hash:
                                      type: string
                                      format: byte
                                      title: >-
                                        root hash of all results from the txs
                                        from the previous block
                                    evidence_hash:
                                      type: string
                                      format: byte
                                      description: evidence included in the block
                                      title: consensus info
                                    proposer_address:
                                      type: string
                                      format: byte
                                      title: original proposer of the block
                                  description: >-
                                    Header defines the structure of a block
                                    header.
                                commit:
                                  type: object
                                  properties:
                                    height:
                                      type: string
                                      format: int64
                                    round:
                                      type: integer
                                      format: int32
                                    block_id:
                                      type: object
                                      properties:
                                        hash:
                                          type: string
                                          format: byte
                                        part_set_header:
                                          type: object
                                          properties:
                                            total:
                                              type: integer
                                              format: int64
                                            hash:
                                              type: string
                                              format: byte
                                          title: PartsetHeader
                                      title: BlockID
                                    signatures:
                                      type: array
                                      items:
                                        type: object
                                        properties:
                                          block_id_flag:
                                            type: string
                                            enum:
                                              - BLOCK_ID_FLAG_UNKNOWN
                                              - BLOCK_ID_FLAG_ABSENT
                                              - BLOCK_ID_FLAG_COMMIT
                                              - BLOCK_ID_FLAG_NIL
                                            default: BLOCK_ID_FLAG_UNKNOWN
                                            title: >-
                                              BlockIdFlag indicates which BlcokID the
                                              signature is for
                                          validator_address:
                                            type: string
                                            format: byte
                                          timestamp:
                                            type: string
                                            format: date-time
                                          signature:
                                            type: string
                                            format: byte
                                        description: >-
                                          CommitSig is a part of the Vote included
                                          in a Commit.
                                  description: >-
                                    Commit contains the evidence that a block
                                    was committed by a set of validators.
                            validator_set:
                              type: object
                              properties:
                                validators:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      address:
                                        type: string
                                        format: byte
                                      pub_key:
                                        type: object
                                        properties:
                                          ed25519:
                                            type: string
                                            format: byte
                                          secp256k1:
                                            type: string
                                            format: byte
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                      voting_power:
                                        type: string
                                        format: int64
                                      proposer_priority:
                                        type: string
                                        format: int64
                                proposer:
                                  type: object
                                  properties:
                                    address:
                                      type: string
                                      format: byte
                                    pub_key:
                                      type: object
                                      properties:
                                        ed25519:
                                          type: string
                                          format: byte
                                        secp256k1:
                                          type: string
                                          format: byte
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                    voting_power:
                                      type: string
                                      format: int64
                                    proposer_priority:
                                      type: string
                                      format: int64
                                total_voting_power:
                                  type: string
                                  format: int64
                        common_height:
                          type: string
                          format: int64
                        byzantine_validators:
                          type: array
                          items:
                            type: object
                            properties:
                              address:
                                type: string
                                format: byte
                              pub_key:
                                type: object
                                properties:
                                  ed25519:
                                    type: string
                                    format: byte
                                  secp256k1:
                                    type: string
                                    format: byte
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                              voting_power:
                                type: string
                                format: int64
                              proposer_priority:
                                type: string
                                format: int64
                        total_voting_power:
                          type: string
                          format: int64
                        timestamp:
                          type: string
                          format: date-time
                      description: >-
                        LightClientAttackEvidence contains evidence of a set of
                        validators attempting to mislead a light client.
          last_commit:
            type: object
            properties:
              height:
                type: string
                format: int64
              round:
                type: integer
                format: int32
              block_id:
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                  part_set_header:
                    type: object
                    properties:
                      total:
                        type: integer
                        format: int64
                      hash:
                        type: string
                        format: byte
                    title: PartsetHeader
                title: BlockID
              signatures:
                type: array
                items:
                  type: object
                  properties:
                    block_id_flag:
                      type: string
                      enum:
                        - BLOCK_ID_FLAG_UNKNOWN
                        - BLOCK_ID_FLAG_ABSENT
                        - BLOCK_ID_FLAG_COMMIT
                        - BLOCK_ID_FLAG_NIL
                      default: BLOCK_ID_FLAG_UNKNOWN
                      title: BlockIdFlag indicates which BlcokID the signature is for
                    validator_address:
                      type: string
                      format: byte
                    timestamp:
                      type: string
                      format: date-time
                    signature:
                      type: string
                      format: byte
                  description: CommitSig is a part of the Vote included in a Commit.
            description: >-
              Commit contains the evidence that a block was committed by a set
              of validators.
      pagination:
        description: pagination defines a pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      GetBlockWithTxsResponse is the response type for the
      Service.GetBlockWithTxs method.


      Since: cosmos-sdk 0.45.2
  cosmos.tx.v1beta1.GetTxResponse:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: tx is the queried transaction.
      tx_response:
        description: tx_response is the queried TxResponses.
        type: object
        properties:
          height:
            type: string
            format: int64
            title: The block height
          txhash:
            type: string
            description: The transaction hash.
          codespace:
            type: string
            title: Namespace for the Code
          code:
            type: integer
            format: int64
            description: Response code.
          data:
            type: string
            description: Result bytes, if any.
          raw_log:
            type: string
            description: |-
              The output of the application's logger (raw string). May be
              non-deterministic.
          logs:
            type: array
            items:
              type: object
              properties:
                msg_index:
                  type: integer
                  format: int64
                log:
                  type: string
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      attributes:
                        type: array
                        items:
                          type: object
                          properties:
                            key:
                              type: string
                            value:
                              type: string
                          description: >-
                            Attribute defines an attribute wrapper where the key
                            and value are

                            strings instead of raw bytes.
                    description: >-
                      StringEvent defines en Event object wrapper where all the
                      attributes

                      contain key/value pairs that are strings instead of raw
                      bytes.
                  description: >-
                    Events contains a slice of Event objects that were emitted
                    during some

                    execution.
              description: >-
                ABCIMessageLog defines a structure containing an indexed tx ABCI
                message log.
            description: >-
              The output of the application's logger (typed). May be
              non-deterministic.
          info:
            type: string
            description: Additional information. May be non-deterministic.
          gas_wanted:
            type: string
            format: int64
            description: Amount of gas requested for transaction.
          gas_used:
            type: string
            format: int64
            description: Amount of gas consumed by transaction.
          tx:
            description: The request transaction bytes.
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
          timestamp:
            type: string
            description: >-
              Time of the previous block. For heights > 1, it's the weighted
              median of

              the timestamps of the valid votes in the block.LastCommit. For
              height == 1,

              it's genesis time.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                        title: nondeterministic
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events defines all the events emitted by processing a transaction.
              Note,

              these events include those emitted by processing all the messages
              and those

              emitted from the ante handler. Whereas Logs contains the events,
              with

              additional metadata, emitted only by processing the messages.


              Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
    description: GetTxResponse is the response type for the Service.GetTx method.
  cosmos.tx.v1beta1.GetTxsEventResponse:
    type: object
    properties:
      txs:
        type: array
        items:
          type: object
          $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: txs is the list of queried transactions.
      tx_responses:
        type: array
        items:
          type: object
          properties:
            height:
              type: string
              format: int64
              title: The block height
            txhash:
              type: string
              description: The transaction hash.
            codespace:
              type: string
              title: Namespace for the Code
            code:
              type: integer
              format: int64
              description: Response code.
            data:
              type: string
              description: Result bytes, if any.
            raw_log:
              type: string
              description: |-
                The output of the application's logger (raw string). May be
                non-deterministic.
            logs:
              type: array
              items:
                type: object
                properties:
                  msg_index:
                    type: integer
                    format: int64
                  log:
                    type: string
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                        attributes:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                            description: >-
                              Attribute defines an attribute wrapper where the
                              key and value are

                              strings instead of raw bytes.
                      description: >-
                        StringEvent defines en Event object wrapper where all
                        the attributes

                        contain key/value pairs that are strings instead of raw
                        bytes.
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during some

                      execution.
                description: >-
                  ABCIMessageLog defines a structure containing an indexed tx
                  ABCI message log.
              description: >-
                The output of the application's logger (typed). May be
                non-deterministic.
            info:
              type: string
              description: Additional information. May be non-deterministic.
            gas_wanted:
              type: string
              format: int64
              description: Amount of gas requested for transaction.
            gas_used:
              type: string
              format: int64
              description: Amount of gas consumed by transaction.
            tx:
              description: The request transaction bytes.
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
            timestamp:
              type: string
              description: >-
                Time of the previous block. For heights > 1, it's the weighted
                median of

                the timestamps of the valid votes in the block.LastCommit. For
                height == 1,

                it's genesis time.
            events:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  attributes:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          format: byte
                        value:
                          type: string
                          format: byte
                        index:
                          type: boolean
                          title: nondeterministic
                      description: >-
                        EventAttribute is a single key-value pair, associated
                        with an event.
                description: >-
                  Event allows application developers to attach additional
                  information to

                  ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                  ResponseDeliverTx.

                  Later, transactions may be queried using these events.
              description: >-
                Events defines all the events emitted by processing a
                transaction. Note,

                these events include those emitted by processing all the
                messages and those

                emitted from the ante handler. Whereas Logs contains the events,
                with

                additional metadata, emitted only by processing the messages.


                Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
          description: >-
            TxResponse defines a structure containing relevant tx data and
            metadata. The

            tags are stringified and the log is JSON decoded.
        description: tx_responses is the list of queried TxResponses.
      pagination:
        description: pagination defines a pagination for the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      GetTxsEventResponse is the response type for the Service.TxsByEvents
      RPC method.
  cosmos.tx.v1beta1.ModeInfo:
    type: object
    properties:
      single:
        title: single represents a single signer
        type: object
        properties:
          mode:
            title: mode is the signing mode of the single signer
            type: string
            enum:
              - SIGN_MODE_UNSPECIFIED
              - SIGN_MODE_DIRECT
              - SIGN_MODE_TEXTUAL
              - SIGN_MODE_LEGACY_AMINO_JSON
              - SIGN_MODE_EIP_191
            default: SIGN_MODE_UNSPECIFIED
            description: >-
              SignMode represents a signing mode with its own security
              guarantees.

               - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
              rejected
               - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
              verified with raw bytes from Tx
               - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
              human-readable textual representation on top of the binary
              representation

              from SIGN_MODE_DIRECT
               - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
              Amino JSON and will be removed in the future
               - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
              SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


              Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum
              variant,

              but is not implemented on the SDK by default. To enable EIP-191,
              you need

              to pass a custom `TxConfig` that has an implementation of

              `SignModeHandler` for EIP-191. The SDK may decide to fully support

              EIP-191 in the future.


              Since: cosmos-sdk 0.45.2
      multi:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo.Multi'
        title: multi represents a nested multisig signer
    description: ModeInfo describes the signing mode of a single or nested multisig signer.
  cosmos.tx.v1beta1.ModeInfo.Multi:
    type: object
    properties:
      bitarray:
        title: bitarray specifies which keys within the multisig are signing
        type: object
        properties:
          extra_bits_stored:
            type: integer
            format: int64
          elems:
            type: string
            format: byte
        description: >-
          CompactBitArray is an implementation of a space efficient bit array.

          This is used to ensure that the encoded data takes up a minimal amount
          of

          space after proto encoding.

          This is not thread safe, and is not intended for concurrent usage.
      mode_infos:
        type: array
        items:
          type: object
          $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_infos is the corresponding modes of the signers of the multisig
          which could include nested multisig public keys
    title: Multi is the mode info for a multisig public key
  cosmos.tx.v1beta1.ModeInfo.Single:
    type: object
    properties:
      mode:
        title: mode is the signing mode of the single signer
        type: string
        enum:
          - SIGN_MODE_UNSPECIFIED
          - SIGN_MODE_DIRECT
          - SIGN_MODE_TEXTUAL
          - SIGN_MODE_LEGACY_AMINO_JSON
          - SIGN_MODE_EIP_191
        default: SIGN_MODE_UNSPECIFIED
        description: >-
          SignMode represents a signing mode with its own security guarantees.

           - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
          rejected
           - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
          verified with raw bytes from Tx
           - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
          human-readable textual representation on top of the binary
          representation

          from SIGN_MODE_DIRECT
           - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
          Amino JSON and will be removed in the future
           - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
          SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


          Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,

          but is not implemented on the SDK by default. To enable EIP-191, you
          need

          to pass a custom `TxConfig` that has an implementation of

          `SignModeHandler` for EIP-191. The SDK may decide to fully support

          EIP-191 in the future.


          Since: cosmos-sdk 0.45.2
    title: |-
      Single is the mode info for a single signer. It is structured as a message
      to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the
      future
  cosmos.tx.v1beta1.OrderBy:
    type: string
    enum:
      - ORDER_BY_UNSPECIFIED
      - ORDER_BY_ASC
      - ORDER_BY_DESC
    default: ORDER_BY_UNSPECIFIED
    description: >-
      - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting
      order. OrderBy defaults to ASC in this case.
       - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
       - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
    title: OrderBy defines the sorting order
  cosmos.tx.v1beta1.SignerInfo:
    type: object
    properties:
      public_key:
        description: >-
          public_key is the public key of the signer. It is optional for
          accounts

          that already exist in state. If unset, the verifier can use the
          required \

          signer address for this position and lookup the public key.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
      mode_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.ModeInfo'
        title: |-
          mode_info describes the signing mode of the signer and is a nested
          structure to support nested multisig pubkey's
      sequence:
        type: string
        format: uint64
        description: >-
          sequence is the sequence of the account, which describes the

          number of committed transactions signed by a given address. It is used
          to

          prevent replay attacks.
    description: |-
      SignerInfo describes the public key and signing mode of a single top-level
      signer.
  cosmos.tx.v1beta1.SimulateRequest:
    type: object
    properties:
      tx:
        $ref: '#/definitions/cosmos.tx.v1beta1.Tx'
        description: |-
          tx is the transaction to simulate.
          Deprecated. Send raw tx bytes instead.
      tx_bytes:
        type: string
        format: byte
        description: |-
          tx_bytes is the raw transaction.

          Since: cosmos-sdk 0.43
    description: |-
      SimulateRequest is the request type for the Service.Simulate
      RPC method.
  cosmos.tx.v1beta1.SimulateResponse:
    type: object
    properties:
      gas_info:
        description: gas_info is the information about gas used in the simulation.
        type: object
        properties:
          gas_wanted:
            type: string
            format: uint64
            description: >-
              GasWanted is the maximum units of work we allow this tx to
              perform.
          gas_used:
            type: string
            format: uint64
            description: GasUsed is the amount of gas actually consumed.
      result:
        description: result is the result of the simulation.
        type: object
        properties:
          data:
            type: string
            format: byte
            description: >-
              Data is any data returned from message or handler execution. It
              MUST be

              length prefixed in order to separate data from multiple message
              executions.
          log:
            type: string
            description: >-
              Log contains the log information from message or handler
              execution.
          events:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                attributes:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                        format: byte
                      value:
                        type: string
                        format: byte
                      index:
                        type: boolean
                        title: nondeterministic
                    description: >-
                      EventAttribute is a single key-value pair, associated with
                      an event.
              description: >-
                Event allows application developers to attach additional
                information to

                ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                ResponseDeliverTx.

                Later, transactions may be queried using these events.
            description: >-
              Events contains a slice of Event objects that were emitted during
              message

              or handler execution.
    description: |-
      SimulateResponse is the response type for the
      Service.SimulateRPC method.
  cosmos.tx.v1beta1.Tx:
    type: object
    properties:
      body:
        title: body is the processable content of the transaction
        type: object
        properties:
          messages:
            type: array
            items:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            description: >-
              messages is a list of messages to be executed. The required
              signers of

              those messages define the number and order of elements in
              AuthInfo's

              signer_infos and Tx's signatures. Each required signer address is
              added to

              the list only the first time it occurs.

              By convention, the first required signer (usually from the first
              message)

              is referred to as the primary signer and pays the fee for the
              whole

              transaction.
          memo:
            type: string
            description: >-
              memo is any arbitrary note/comment to be added to the transaction.

              WARNING: in clients, any publicly exposed text should not be
              called memo,

              but should be called `note` instead (see
              https://github.com/cosmos/cosmos-sdk/issues/9122).
          timeout_height:
            type: string
            format: uint64
            title: |-
              timeout is the block height after which this transaction will not
              be processed by the chain
          extension_options:
            type: array
            items:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, the transaction will be rejected
          non_critical_extension_options:
            type: array
            items:
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
            title: >-
              extension_options are arbitrary options that can be added by
              chains

              when the default options are not sufficient. If any of these are
              present

              and can't be handled, they will be ignored
        description: TxBody is the body of a transaction that all signers sign over.
      auth_info:
        $ref: '#/definitions/cosmos.tx.v1beta1.AuthInfo'
        title: |-
          auth_info is the authorization related content of the transaction,
          specifically signers, signer modes and fee
      signatures:
        type: array
        items:
          type: string
          format: byte
        description: >-
          signatures is a list of signatures that matches the length and order
          of

          AuthInfo's signer_infos to allow connecting signature meta information
          like

          public key and signing mode by position.
    description: Tx is the standard type used for broadcasting transactions.
  cosmos.tx.v1beta1.TxBody:
    type: object
    properties:
      messages:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        description: >-
          messages is a list of messages to be executed. The required signers of

          those messages define the number and order of elements in AuthInfo's

          signer_infos and Tx's signatures. Each required signer address is
          added to

          the list only the first time it occurs.

          By convention, the first required signer (usually from the first
          message)

          is referred to as the primary signer and pays the fee for the whole

          transaction.
      memo:
        type: string
        description: >-
          memo is any arbitrary note/comment to be added to the transaction.

          WARNING: in clients, any publicly exposed text should not be called
          memo,

          but should be called `note` instead (see
          https://github.com/cosmos/cosmos-sdk/issues/9122).
      timeout_height:
        type: string
        format: uint64
        title: |-
          timeout is the block height after which this transaction will not
          be processed by the chain
      extension_options:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, the transaction will be rejected
      non_critical_extension_options:
        type: array
        items:
          type: object
          properties:
            '@type':
              type: string
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
          additionalProperties: {}
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        title: >-
          extension_options are arbitrary options that can be added by chains

          when the default options are not sufficient. If any of these are
          present

          and can't be handled, they will be ignored
    description: TxBody is the body of a transaction that all signers sign over.
  tendermint.abci.Event:
    type: object
    properties:
      type:
        type: string
      attributes:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
              format: byte
            value:
              type: string
              format: byte
            index:
              type: boolean
              title: nondeterministic
          description: EventAttribute is a single key-value pair, associated with an event.
    description: >-
      Event allows application developers to attach additional information to

      ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
      ResponseDeliverTx.

      Later, transactions may be queried using these events.
  tendermint.abci.EventAttribute:
    type: object
    properties:
      key:
        type: string
        format: byte
      value:
        type: string
        format: byte
      index:
        type: boolean
        title: nondeterministic
    description: EventAttribute is a single key-value pair, associated with an event.
  cosmos.upgrade.v1beta1.ModuleVersion:
    type: object
    properties:
      name:
        type: string
        title: name of the app module
      version:
        type: string
        format: uint64
        title: consensus version of the app module
    description: |-
      ModuleVersion specifies a module and its consensus version.

      Since: cosmos-sdk 0.43
  cosmos.upgrade.v1beta1.Plan:
    type: object
    properties:
      name:
        type: string
        description: >-
          Sets the name for the upgrade. This name will be used by the upgraded

          version of the software to apply any special "on-upgrade" commands
          during

          the first BeginBlock method after the upgrade is applied. It is also
          used

          to detect whether a software version can handle a given upgrade. If no

          upgrade handler with this name has been set in the software, it will
          be

          assumed that the software is out-of-date when the upgrade Time or
          Height is

          reached and the software will exit.
      time:
        type: string
        format: date-time
        description: >-
          Deprecated: Time based upgrades have been deprecated. Time based
          upgrade logic

          has been removed from the SDK.

          If this field is not empty, an error will be thrown.
      height:
        type: string
        format: int64
        description: |-
          The height at which the upgrade must be performed.
          Only used if Time is not set.
      info:
        type: string
        title: |-
          Any application specific upgrade info to be included on-chain
          such as a git commit that validators could automatically upgrade to
      upgraded_client_state:
        description: >-
          Deprecated: UpgradedClientState field has been deprecated. IBC upgrade
          logic has been

          moved to the IBC module in the sub module 02-client.

          If this field is not empty, an error will be thrown.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    description: >-
      Plan specifies information about a planned upgrade and when it should
      occur.
  cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
    type: object
    properties:
      height:
        type: string
        format: int64
        description: height is the block height at which the plan was applied.
    description: >-
      QueryAppliedPlanResponse is the response type for the Query/AppliedPlan
      RPC

      method.
  cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
    type: object
    properties:
      plan:
        description: plan is the current upgrade plan.
        type: object
        properties:
          name:
            type: string
            description: >-
              Sets the name for the upgrade. This name will be used by the
              upgraded

              version of the software to apply any special "on-upgrade" commands
              during

              the first BeginBlock method after the upgrade is applied. It is
              also used

              to detect whether a software version can handle a given upgrade.
              If no

              upgrade handler with this name has been set in the software, it
              will be

              assumed that the software is out-of-date when the upgrade Time or
              Height is

              reached and the software will exit.
          time:
            type: string
            format: date-time
            description: >-
              Deprecated: Time based upgrades have been deprecated. Time based
              upgrade logic

              has been removed from the SDK.

              If this field is not empty, an error will be thrown.
          height:
            type: string
            format: int64
            description: |-
              The height at which the upgrade must be performed.
              Only used if Time is not set.
          info:
            type: string
            title: >-
              Any application specific upgrade info to be included on-chain

              such as a git commit that validators could automatically upgrade
              to
          upgraded_client_state:
            description: >-
              Deprecated: UpgradedClientState field has been deprecated. IBC
              upgrade logic has been

              moved to the IBC module in the sub module 02-client.

              If this field is not empty, an error will be thrown.
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
    description: >-
      QueryCurrentPlanResponse is the response type for the Query/CurrentPlan
      RPC

      method.
  cosmos.upgrade.v1beta1.QueryModuleVersionsResponse:
    type: object
    properties:
      module_versions:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              title: name of the app module
            version:
              type: string
              format: uint64
              title: consensus version of the app module
          description: |-
            ModuleVersion specifies a module and its consensus version.

            Since: cosmos-sdk 0.43
        description: >-
          module_versions is a list of module names with their consensus
          versions.
    description: >-
      QueryModuleVersionsResponse is the response type for the
      Query/ModuleVersions

      RPC method.


      Since: cosmos-sdk 0.43
  cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse:
    type: object
    properties:
      upgraded_consensus_state:
        type: string
        format: byte
        title: 'Since: cosmos-sdk 0.43'
    description: >-
      QueryUpgradedConsensusStateResponse is the response type for the
      Query/UpgradedConsensusState

      RPC method.
  cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse:
    type: object
    description: >-
      MsgCreateVestingAccountResponse defines the Msg/CreateVestingAccount
      response type.
  cosmwasm.wasm.v1.AbsoluteTxPosition:
    type: object
    properties:
      block_height:
        type: string
        format: uint64
        title: BlockHeight is the block the contract was created at
      tx_index:
        type: string
        format: uint64
        title: >-
          TxIndex is a monotonic counter within the block (actual transaction
          index,

          or gas consumed)
    description: |-
      AbsoluteTxPosition is a unique transaction position that allows for global
      ordering of transactions.
  cosmwasm.wasm.v1.AccessConfig:
    type: object
    properties:
      permission:
        type: string
        enum:
          - ACCESS_TYPE_UNSPECIFIED
          - ACCESS_TYPE_NOBODY
          - ACCESS_TYPE_ONLY_ADDRESS
          - ACCESS_TYPE_EVERYBODY
          - ACCESS_TYPE_ANY_OF_ADDRESSES
        default: ACCESS_TYPE_UNSPECIFIED
        description: >-
          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
          value
           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
           - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
          Deprecated: use AccessTypeAnyOfAddresses instead
           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
        title: AccessType permission types
      address:
        type: string
        title: |-
          Address
          Deprecated: replaced by addresses
      addresses:
        type: array
        items:
          type: string
    description: AccessConfig access control type.
  cosmwasm.wasm.v1.AccessType:
    type: string
    enum:
      - ACCESS_TYPE_UNSPECIFIED
      - ACCESS_TYPE_NOBODY
      - ACCESS_TYPE_ONLY_ADDRESS
      - ACCESS_TYPE_EVERYBODY
      - ACCESS_TYPE_ANY_OF_ADDRESSES
    default: ACCESS_TYPE_UNSPECIFIED
    description: >-
      - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
      value
       - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
       - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
      Deprecated: use AccessTypeAnyOfAddresses instead
       - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
       - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
    title: AccessType permission types
  cosmwasm.wasm.v1.CodeInfoResponse:
    type: object
    properties:
      code_id:
        type: string
        format: uint64
        title: id for legacy support
      creator:
        type: string
      data_hash:
        type: string
        format: byte
      instantiate_permission:
        type: object
        properties:
          permission:
            type: string
            enum:
              - ACCESS_TYPE_UNSPECIFIED
              - ACCESS_TYPE_NOBODY
              - ACCESS_TYPE_ONLY_ADDRESS
              - ACCESS_TYPE_EVERYBODY
              - ACCESS_TYPE_ANY_OF_ADDRESSES
            default: ACCESS_TYPE_UNSPECIFIED
            description: >-
              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
              empty value
               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
               - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
              Deprecated: use AccessTypeAnyOfAddresses instead
               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
            title: AccessType permission types
          address:
            type: string
            title: |-
              Address
              Deprecated: replaced by addresses
          addresses:
            type: array
            items:
              type: string
        description: AccessConfig access control type.
    title: CodeInfoResponse contains code meta data from CodeInfo
  cosmwasm.wasm.v1.ContractCodeHistoryEntry:
    type: object
    properties:
      operation:
        type: string
        enum:
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
        default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
        description: >-
          - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
          ContractCodeHistoryOperationTypeUnspecified placeholder for empty
          value
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
           - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
        title: ContractCodeHistoryOperationType actions that caused a code change
      code_id:
        type: string
        format: uint64
        title: CodeID is the reference to the stored WASM code
      updated:
        description: Updated Tx position when the operation was executed.
        type: object
        properties:
          block_height:
            type: string
            format: uint64
            title: BlockHeight is the block the contract was created at
          tx_index:
            type: string
            format: uint64
            title: >-
              TxIndex is a monotonic counter within the block (actual
              transaction index,

              or gas consumed)
      msg:
        type: string
        format: byte
    description: ContractCodeHistoryEntry metadata to a contract.
  cosmwasm.wasm.v1.ContractCodeHistoryOperationType:
    type: string
    enum:
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
    default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
    description: >-
      - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
      ContractCodeHistoryOperationTypeUnspecified placeholder for empty value
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
       - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
    title: ContractCodeHistoryOperationType actions that caused a code change
  cosmwasm.wasm.v1.ContractInfo:
    type: object
    properties:
      code_id:
        type: string
        format: uint64
        title: CodeID is the reference to the stored Wasm code
      creator:
        type: string
        title: Creator address who initially instantiated the contract
      admin:
        type: string
        title: Admin is an optional address that can execute migrations
      label:
        type: string
        description: Label is optional metadata to be stored with a contract instance.
      created:
        description: Created Tx position when the contract was instantiated.
        type: object
        properties:
          block_height:
            type: string
            format: uint64
            title: BlockHeight is the block the contract was created at
          tx_index:
            type: string
            format: uint64
            title: >-
              TxIndex is a monotonic counter within the block (actual
              transaction index,

              or gas consumed)
      ibc_port_id:
        type: string
      extension:
        description: |-
          Extension is an extension point to store custom metadata within the
          persistence model.
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
    title: ContractInfo stores a WASM contract instance
  cosmwasm.wasm.v1.Model:
    type: object
    properties:
      key:
        type: string
        format: byte
        title: hex-encode key to read it better (this is often ascii)
      value:
        type: string
        format: byte
        title: base64-encode raw value
    title: Model is a struct that holds a KV pair
  cosmwasm.wasm.v1.MsgClearAdminResponse:
    type: object
    title: MsgClearAdminResponse returns empty data
  cosmwasm.wasm.v1.MsgExecuteContractResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: Data contains bytes to returned from the contract
    description: MsgExecuteContractResponse returns execution result data.
  cosmwasm.wasm.v1.MsgInstantiateContract2Response:
    type: object
    properties:
      address:
        type: string
        description: Address is the bech32 address of the new contract instance.
      data:
        type: string
        format: byte
        title: Data contains bytes to returned from the contract
    title: MsgInstantiateContract2Response return instantiation result data
  cosmwasm.wasm.v1.MsgInstantiateContractResponse:
    type: object
    properties:
      address:
        type: string
        description: Address is the bech32 address of the new contract instance.
      data:
        type: string
        format: byte
        title: Data contains bytes to returned from the contract
    title: MsgInstantiateContractResponse return instantiation result data
  cosmwasm.wasm.v1.MsgMigrateContractResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: |-
          Data contains same raw bytes returned as data from the wasm contract.
          (May be empty)
    description: MsgMigrateContractResponse returns contract migration result data.
  cosmwasm.wasm.v1.MsgStoreCodeResponse:
    type: object
    properties:
      code_id:
        type: string
        format: uint64
        title: CodeID is the reference to the stored WASM code
      checksum:
        type: string
        format: byte
        title: Checksum is the sha256 hash of the stored code
    description: MsgStoreCodeResponse returns store result data.
  cosmwasm.wasm.v1.MsgUpdateAdminResponse:
    type: object
    title: MsgUpdateAdminResponse returns empty data
  cosmwasm.wasm.v1.MsgUpdateInstantiateConfigResponse:
    type: object
    title: MsgUpdateInstantiateConfigResponse returns empty data
  cosmwasm.wasm.v1.Params:
    type: object
    properties:
      code_upload_access:
        type: object
        properties:
          permission:
            type: string
            enum:
              - ACCESS_TYPE_UNSPECIFIED
              - ACCESS_TYPE_NOBODY
              - ACCESS_TYPE_ONLY_ADDRESS
              - ACCESS_TYPE_EVERYBODY
              - ACCESS_TYPE_ANY_OF_ADDRESSES
            default: ACCESS_TYPE_UNSPECIFIED
            description: >-
              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
              empty value
               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
               - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
              Deprecated: use AccessTypeAnyOfAddresses instead
               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
            title: AccessType permission types
          address:
            type: string
            title: |-
              Address
              Deprecated: replaced by addresses
          addresses:
            type: array
            items:
              type: string
        description: AccessConfig access control type.
      instantiate_default_permission:
        type: string
        enum:
          - ACCESS_TYPE_UNSPECIFIED
          - ACCESS_TYPE_NOBODY
          - ACCESS_TYPE_ONLY_ADDRESS
          - ACCESS_TYPE_EVERYBODY
          - ACCESS_TYPE_ANY_OF_ADDRESSES
        default: ACCESS_TYPE_UNSPECIFIED
        description: >-
          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
          value
           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
           - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
          Deprecated: use AccessTypeAnyOfAddresses instead
           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
        title: AccessType permission types
    description: Params defines the set of wasm parameters.
  cosmwasm.wasm.v1.QueryAllContractStateResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
              format: byte
              title: hex-encode key to read it better (this is often ascii)
            value:
              type: string
              format: byte
              title: base64-encode raw value
          title: Model is a struct that holds a KV pair
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryAllContractStateResponse is the response type for the
      Query/AllContractState RPC method
  cosmwasm.wasm.v1.QueryCodeResponse:
    type: object
    properties:
      code_info:
        type: object
        properties:
          code_id:
            type: string
            format: uint64
            title: id for legacy support
          creator:
            type: string
          data_hash:
            type: string
            format: byte
          instantiate_permission:
            type: object
            properties:
              permission:
                type: string
                enum:
                  - ACCESS_TYPE_UNSPECIFIED
                  - ACCESS_TYPE_NOBODY
                  - ACCESS_TYPE_ONLY_ADDRESS
                  - ACCESS_TYPE_EVERYBODY
                  - ACCESS_TYPE_ANY_OF_ADDRESSES
                default: ACCESS_TYPE_UNSPECIFIED
                description: >-
                  - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                  for empty value
                   - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                   - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                  Deprecated: use AccessTypeAnyOfAddresses instead
                   - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                   - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                title: AccessType permission types
              address:
                type: string
                title: |-
                  Address
                  Deprecated: replaced by addresses
              addresses:
                type: array
                items:
                  type: string
            description: AccessConfig access control type.
        title: CodeInfoResponse contains code meta data from CodeInfo
      data:
        type: string
        format: byte
    title: QueryCodeResponse is the response type for the Query/Code RPC method
  cosmwasm.wasm.v1.QueryCodesResponse:
    type: object
    properties:
      code_infos:
        type: array
        items:
          type: object
          properties:
            code_id:
              type: string
              format: uint64
              title: id for legacy support
            creator:
              type: string
            data_hash:
              type: string
              format: byte
            instantiate_permission:
              type: object
              properties:
                permission:
                  type: string
                  enum:
                    - ACCESS_TYPE_UNSPECIFIED
                    - ACCESS_TYPE_NOBODY
                    - ACCESS_TYPE_ONLY_ADDRESS
                    - ACCESS_TYPE_EVERYBODY
                    - ACCESS_TYPE_ANY_OF_ADDRESSES
                  default: ACCESS_TYPE_UNSPECIFIED
                  description: >-
                    - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                    for empty value
                     - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                     - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                    Deprecated: use AccessTypeAnyOfAddresses instead
                     - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                     - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                  title: AccessType permission types
                address:
                  type: string
                  title: |-
                    Address
                    Deprecated: replaced by addresses
                addresses:
                  type: array
                  items:
                    type: string
              description: AccessConfig access control type.
          title: CodeInfoResponse contains code meta data from CodeInfo
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: QueryCodesResponse is the response type for the Query/Codes RPC method
  cosmwasm.wasm.v1.QueryContractHistoryResponse:
    type: object
    properties:
      entries:
        type: array
        items:
          type: object
          properties:
            operation:
              type: string
              enum:
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
              default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
              description: >-
                - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                ContractCodeHistoryOperationTypeUnspecified placeholder for
                empty value
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                 - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
              title: >-
                ContractCodeHistoryOperationType actions that caused a code
                change
            code_id:
              type: string
              format: uint64
              title: CodeID is the reference to the stored WASM code
            updated:
              description: Updated Tx position when the operation was executed.
              type: object
              properties:
                block_height:
                  type: string
                  format: uint64
                  title: BlockHeight is the block the contract was created at
                tx_index:
                  type: string
                  format: uint64
                  title: >-
                    TxIndex is a monotonic counter within the block (actual
                    transaction index,

                    or gas consumed)
            msg:
              type: string
              format: byte
          description: ContractCodeHistoryEntry metadata to a contract.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryContractHistoryResponse is the response type for the
      Query/ContractHistory RPC method
  cosmwasm.wasm.v1.QueryContractInfoResponse:
    type: object
    properties:
      address:
        type: string
        title: address is the address of the contract
      contract_info:
        type: object
        properties:
          code_id:
            type: string
            format: uint64
            title: CodeID is the reference to the stored Wasm code
          creator:
            type: string
            title: Creator address who initially instantiated the contract
          admin:
            type: string
            title: Admin is an optional address that can execute migrations
          label:
            type: string
            description: Label is optional metadata to be stored with a contract instance.
          created:
            description: Created Tx position when the contract was instantiated.
            type: object
            properties:
              block_height:
                type: string
                format: uint64
                title: BlockHeight is the block the contract was created at
              tx_index:
                type: string
                format: uint64
                title: >-
                  TxIndex is a monotonic counter within the block (actual
                  transaction index,

                  or gas consumed)
          ibc_port_id:
            type: string
          extension:
            description: >-
              Extension is an extension point to store custom metadata within
              the

              persistence model.
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
        title: ContractInfo stores a WASM contract instance
    title: >-
      QueryContractInfoResponse is the response type for the Query/ContractInfo
      RPC

      method
  cosmwasm.wasm.v1.QueryContractsByCodeResponse:
    type: object
    properties:
      contracts:
        type: array
        items:
          type: string
        title: contracts are a set of contract addresses
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryContractsByCodeResponse is the response type for the
      Query/ContractsByCode RPC method
  cosmwasm.wasm.v1.QueryContractsByCreatorResponse:
    type: object
    properties:
      contract_addresses:
        type: array
        items:
          type: string
        title: ContractAddresses result set
      pagination:
        description: Pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: |-
      QueryContractsByCreatorResponse is the response type for the
      Query/ContractsByCreator RPC method.
  cosmwasm.wasm.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          code_upload_access:
            type: object
            properties:
              permission:
                type: string
                enum:
                  - ACCESS_TYPE_UNSPECIFIED
                  - ACCESS_TYPE_NOBODY
                  - ACCESS_TYPE_ONLY_ADDRESS
                  - ACCESS_TYPE_EVERYBODY
                  - ACCESS_TYPE_ANY_OF_ADDRESSES
                default: ACCESS_TYPE_UNSPECIFIED
                description: >-
                  - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                  for empty value
                   - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                   - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                  Deprecated: use AccessTypeAnyOfAddresses instead
                   - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                   - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                title: AccessType permission types
              address:
                type: string
                title: |-
                  Address
                  Deprecated: replaced by addresses
              addresses:
                type: array
                items:
                  type: string
            description: AccessConfig access control type.
          instantiate_default_permission:
            type: string
            enum:
              - ACCESS_TYPE_UNSPECIFIED
              - ACCESS_TYPE_NOBODY
              - ACCESS_TYPE_ONLY_ADDRESS
              - ACCESS_TYPE_EVERYBODY
              - ACCESS_TYPE_ANY_OF_ADDRESSES
            default: ACCESS_TYPE_UNSPECIFIED
            description: >-
              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
              empty value
               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
               - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
              Deprecated: use AccessTypeAnyOfAddresses instead
               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
            title: AccessType permission types
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  cosmwasm.wasm.v1.QueryPinnedCodesResponse:
    type: object
    properties:
      code_ids:
        type: array
        items:
          type: string
          format: uint64
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    title: |-
      QueryPinnedCodesResponse is the response type for the
      Query/PinnedCodes RPC method
  cosmwasm.wasm.v1.QueryRawContractStateResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: Data contains the raw store data
    title: |-
      QueryRawContractStateResponse is the response type for the
      Query/RawContractState RPC method
  cosmwasm.wasm.v1.QuerySmartContractStateResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: Data contains the json data returned from the smart contract
    title: |-
      QuerySmartContractStateResponse is the response type for the
      Query/SmartContractState RPC method
  ibc.applications.interchain_accounts.controller.v1.Params:
    type: object
    properties:
      controller_enabled:
        type: boolean
        description: controller_enabled enables or disables the controller submodule.
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the controller submodule.
  ibc.applications.interchain_accounts.controller.v1.QueryInterchainAccountResponse:
    type: object
    properties:
      address:
        type: string
    description: >-
      QueryInterchainAccountResponse the response type for the
      Query/InterchainAccount RPC method.
  ibc.applications.interchain_accounts.controller.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          controller_enabled:
            type: boolean
            description: controller_enabled enables or disables the controller submodule.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  ibc.applications.interchain_accounts.host.v1.Params:
    type: object
    properties:
      host_enabled:
        type: boolean
        description: host_enabled enables or disables the host submodule.
      allow_messages:
        type: array
        items:
          type: string
        description: >-
          allow_messages defines a list of sdk message typeURLs allowed to be
          executed on a host chain.
    description: |-
      Params defines the set of on-chain interchain accounts parameters.
      The following parameters may be used to disable the host submodule.
  ibc.applications.interchain_accounts.host.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          host_enabled:
            type: boolean
            description: host_enabled enables or disables the host submodule.
          allow_messages:
            type: array
            items:
              type: string
            description: >-
              allow_messages defines a list of sdk message typeURLs allowed to
              be executed on a host chain.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  ibc.applications.transfer.v1.DenomTrace:
    type: object
    properties:
      path:
        type: string
        description: >-
          path defines the chain of port/channel identifiers used for tracing
          the

          source of the fungible token.
      base_denom:
        type: string
        description: base denomination of the relayed fungible token.
    description: >-
      DenomTrace contains the base denomination for ICS20 fungible tokens and
      the

      source tracing information path.
  ibc.applications.transfer.v1.MsgTransferResponse:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
        title: sequence number of the transfer packet sent
    description: MsgTransferResponse defines the Msg/Transfer response type.
  ibc.applications.transfer.v1.Params:
    type: object
    properties:
      send_enabled:
        type: boolean
        description: >-
          send_enabled enables or disables all cross-chain token transfers from
          this

          chain.
      receive_enabled:
        type: boolean
        description: >-
          receive_enabled enables or disables all cross-chain token transfers to
          this

          chain.
    description: >-
      Params defines the set of IBC transfer parameters.

      NOTE: To prevent a single token from being transferred, set the

      TransfersEnabled parameter to true and then set the bank module's
      SendEnabled

      parameter for the denomination to false.
  ibc.applications.transfer.v1.QueryDenomHashResponse:
    type: object
    properties:
      hash:
        type: string
        description: hash (in hex format) of the denomination trace information.
    description: |-
      QueryDenomHashResponse is the response type for the Query/DenomHash RPC
      method.
  ibc.applications.transfer.v1.QueryDenomTraceResponse:
    type: object
    properties:
      denom_trace:
        description: denom_trace returns the requested denomination trace information.
        type: object
        properties:
          path:
            type: string
            description: >-
              path defines the chain of port/channel identifiers used for
              tracing the

              source of the fungible token.
          base_denom:
            type: string
            description: base denomination of the relayed fungible token.
    description: |-
      QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
      method.
  ibc.applications.transfer.v1.QueryDenomTracesResponse:
    type: object
    properties:
      denom_traces:
        type: array
        items:
          type: object
          properties:
            path:
              type: string
              description: >-
                path defines the chain of port/channel identifiers used for
                tracing the

                source of the fungible token.
            base_denom:
              type: string
              description: base denomination of the relayed fungible token.
          description: >-
            DenomTrace contains the base denomination for ICS20 fungible tokens
            and the

            source tracing information path.
        description: denom_traces returns all denominations trace information.
      pagination:
        description: pagination defines the pagination in the response.
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
    description: >-
      QueryConnectionsResponse is the response type for the Query/DenomTraces
      RPC

      method.
  ibc.applications.transfer.v1.QueryEscrowAddressResponse:
    type: object
    properties:
      escrow_address:
        type: string
        title: the escrow account address
    description: >-
      QueryEscrowAddressResponse is the response type of the EscrowAddress RPC
      method.
  ibc.applications.transfer.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          send_enabled:
            type: boolean
            description: >-
              send_enabled enables or disables all cross-chain token transfers
              from this

              chain.
          receive_enabled:
            type: boolean
            description: >-
              receive_enabled enables or disables all cross-chain token
              transfers to this

              chain.
    description: QueryParamsResponse is the response type for the Query/Params RPC method.
  ibc.core.client.v1.Height:
    type: object
    properties:
      revision_number:
        type: string
        format: uint64
        title: the revision that the client is currently on
      revision_height:
        type: string
        format: uint64
        title: the height within the given revision
    description: |-
      Normally the RevisionHeight is incremented at each height while keeping
      RevisionNumber the same. However some consensus algorithms may choose to
      reset the height in certain conditions e.g. hard forks, state-machine
      breaking changes In these cases, the RevisionNumber is incremented so that
      height continues to be monitonically increasing even as the RevisionHeight
      gets reset
    title: >-
      Height is a monotonically increasing data type

      that can be compared against another Height for the purposes of updating
      and

      freezing clients
  ibc.core.channel.v1.Channel:
    type: object
    properties:
      state:
        title: current state of the channel end
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        default: STATE_UNINITIALIZED_UNSPECIFIED
        description: |-
          State defines if a channel is in one of the following states:
          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
           - STATE_INIT: A channel has just started the opening handshake.
           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
           - STATE_OPEN: A channel has completed the handshake. Open channels are
          ready to send and receive packets.
           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
          packets.
      ordering:
        title: whether the channel is ordered or unordered
        type: string
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      counterparty:
        title: counterparty channel end
        type: object
        properties:
          port_id:
            type: string
            description: >-
              port on the counterparty chain which owns the other end of the
              channel.
          channel_id:
            type: string
            title: channel end on the counterparty chain
      connection_hops:
        type: array
        items:
          type: string
        title: |-
          list of connection identifiers, in order, along which packets sent on
          this channel will travel
      version:
        type: string
        title: opaque channel version, which is agreed upon during the handshake
    description: |-
      Channel defines pipeline for exactly-once packet delivery between specific
      modules on separate blockchains, which has at least one end capable of
      sending packets and one end capable of receiving packets.
  ibc.core.channel.v1.Counterparty:
    type: object
    properties:
      port_id:
        type: string
        description: >-
          port on the counterparty chain which owns the other end of the
          channel.
      channel_id:
        type: string
        title: channel end on the counterparty chain
    title: Counterparty defines a channel end counterparty
  ibc.core.channel.v1.IdentifiedChannel:
    type: object
    properties:
      state:
        title: current state of the channel end
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        default: STATE_UNINITIALIZED_UNSPECIFIED
        description: |-
          State defines if a channel is in one of the following states:
          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
           - STATE_INIT: A channel has just started the opening handshake.
           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
           - STATE_OPEN: A channel has completed the handshake. Open channels are
          ready to send and receive packets.
           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
          packets.
      ordering:
        title: whether the channel is ordered or unordered
        type: string
        enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        default: ORDER_NONE_UNSPECIFIED
        description: |-
          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
          which they were sent.
           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      counterparty:
        title: counterparty channel end
        type: object
        properties:
          port_id:
            type: string
            description: >-
              port on the counterparty chain which owns the other end of the
              channel.
          channel_id:
            type: string
            title: channel end on the counterparty chain
      connection_hops:
        type: array
        items:
          type: string
        title: |-
          list of connection identifiers, in order, along which packets sent on
          this channel will travel
      version:
        type: string
        title: opaque channel version, which is agreed upon during the handshake
      port_id:
        type: string
        title: port identifier
      channel_id:
        type: string
        title: channel identifier
    description: |-
      IdentifiedChannel defines a channel with additional port and channel
      identifier fields.
  ibc.core.channel.v1.MsgAcknowledgementResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgAcknowledgementResponse defines the Msg/Acknowledgement response type.
  ibc.core.channel.v1.MsgChannelCloseConfirmResponse:
    type: object
    description: >-
      MsgChannelCloseConfirmResponse defines the Msg/ChannelCloseConfirm
      response

      type.
  ibc.core.channel.v1.MsgChannelCloseInitResponse:
    type: object
    description: >-
      MsgChannelCloseInitResponse defines the Msg/ChannelCloseInit response
      type.
  ibc.core.channel.v1.MsgChannelOpenAckResponse:
    type: object
    description: MsgChannelOpenAckResponse defines the Msg/ChannelOpenAck response type.
  ibc.core.channel.v1.MsgChannelOpenConfirmResponse:
    type: object
    description: |-
      MsgChannelOpenConfirmResponse defines the Msg/ChannelOpenConfirm response
      type.
  ibc.core.channel.v1.MsgChannelOpenInitResponse:
    type: object
    properties:
      channel_id:
        type: string
      version:
        type: string
    description: MsgChannelOpenInitResponse defines the Msg/ChannelOpenInit response type.
  ibc.core.channel.v1.MsgChannelOpenTryResponse:
    type: object
    properties:
      version:
        type: string
    description: MsgChannelOpenTryResponse defines the Msg/ChannelOpenTry response type.
  ibc.core.channel.v1.MsgRecvPacketResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgRecvPacketResponse defines the Msg/RecvPacket response type.
  ibc.core.channel.v1.MsgTimeoutOnCloseResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgTimeoutOnCloseResponse defines the Msg/TimeoutOnClose response type.
  ibc.core.channel.v1.MsgTimeoutResponse:
    type: object
    properties:
      result:
        type: string
        enum:
          - RESPONSE_RESULT_TYPE_UNSPECIFIED
          - RESPONSE_RESULT_TYPE_NOOP
          - RESPONSE_RESULT_TYPE_SUCCESS
        default: RESPONSE_RESULT_TYPE_UNSPECIFIED
        description: |-
          - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
           - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
           - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
        title: >-
          ResponseResultType defines the possible outcomes of the execution of a
          message
    description: MsgTimeoutResponse defines the Msg/Timeout response type.
  ibc.core.channel.v1.Order:
    type: string
    enum:
      - ORDER_NONE_UNSPECIFIED
      - ORDER_UNORDERED
      - ORDER_ORDERED
    default: ORDER_NONE_UNSPECIFIED
    description: |-
      - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
       - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
      which they were sent.
       - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
    title: Order defines if a channel is ORDERED or UNORDERED
  ibc.core.channel.v1.Packet:
    type: object
    properties:
      sequence:
        type: string
        format: uint64
        description: >-
          number corresponds to the order of sends and receives, where a Packet

          with an earlier sequence number must be sent and received before a
          Packet

          with a later sequence number.
      source_port:
        type: string
        description: identifies the port on the sending chain.
      source_channel:
        type: string
        description: identifies the channel end on the sending chain.
      destination_port:
        type: string
        description: identifies the port on the receiving chain.
      destination_channel:
        type: string
        description: identifies the channel end on the receiving chain.
      data:
        type: string
        format: byte
        title: actual opaque bytes transferred directly to the application module
      timeout_height:
        title: block height after which the packet times out
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
      timeout_timestamp:
        type: string
        format: uint64
        title: block timestamp (in nanoseconds) after which the packet times out
    title: >-
      Packet defines a type that carries data across different chains through
      IBC
  ibc.core.channel.v1.PacketState:
    type: object
    properties:
      port_id:
        type: string
        description: channel port identifier.
      channel_id:
        type: string
        description: channel unique identifier.
      sequence:
        type: string
        format: uint64
        description: packet sequence.
      data:
        type: string
        format: byte
        description: embedded data that represents packet state.
    description: |-
      PacketState defines the generic type necessary to retrieve and store
      packet commitments, acknowledgements, and receipts.
      Caller is responsible for knowing the context necessary to interpret this
      state as a commitment, acknowledgement, or a receipt.
  ibc.core.channel.v1.QueryChannelClientStateResponse:
    type: object
    properties:
      identified_client_state:
        title: client state associated with the channel
        type: object
        properties:
          client_id:
            type: string
            title: client identifier
          client_state:
            title: client state
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
        description: |-
          IdentifiedClientState defines a client state with an additional client
          identifier field.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryChannelClientStateResponse is the Response type for the
      Query/QueryChannelClientState RPC method
  ibc.core.channel.v1.QueryChannelConsensusStateResponse:
    type: object
    properties:
      consensus_state:
        title: consensus state associated with the channel
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      client_id:
        type: string
        title: client ID associated with the consensus state
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryChannelClientStateResponse is the Response type for the
      Query/QueryChannelClientState RPC method
  ibc.core.channel.v1.QueryChannelResponse:
    type: object
    properties:
      channel:
        title: channel associated with the request identifiers
        type: object
        properties:
          state:
            title: current state of the channel end
            type: string
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
              - STATE_CLOSED
            default: STATE_UNINITIALIZED_UNSPECIFIED
            description: |-
              State defines if a channel is in one of the following states:
              CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

               - STATE_UNINITIALIZED_UNSPECIFIED: Default State
               - STATE_INIT: A channel has just started the opening handshake.
               - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
               - STATE_OPEN: A channel has completed the handshake. Open channels are
              ready to send and receive packets.
               - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
              packets.
          ordering:
            title: whether the channel is ordered or unordered
            type: string
            enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            default: ORDER_NONE_UNSPECIFIED
            description: |-
              - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
               - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
              which they were sent.
               - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          counterparty:
            title: counterparty channel end
            type: object
            properties:
              port_id:
                type: string
                description: >-
                  port on the counterparty chain which owns the other end of the
                  channel.
              channel_id:
                type: string
                title: channel end on the counterparty chain
          connection_hops:
            type: array
            items:
              type: string
            title: >-
              list of connection identifiers, in order, along which packets sent
              on

              this channel will travel
          version:
            type: string
            title: opaque channel version, which is agreed upon during the handshake
        description: >-
          Channel defines pipeline for exactly-once packet delivery between
          specific

          modules on separate blockchains, which has at least one end capable of

          sending packets and one end capable of receiving packets.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    description: >-
      QueryChannelResponse is the response type for the Query/Channel RPC
      method.

      Besides the Channel end, it includes a proof and the height from which the

      proof was retrieved.
  ibc.core.channel.v1.QueryChannelsResponse:
    type: object
    properties:
      channels:
        type: array
        items:
          type: object
          properties:
            state:
              title: current state of the channel end
              type: string
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: |-
                State defines if a channel is in one of the following states:
                CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
            ordering:
              title: whether the channel is ordered or unordered
              type: string
              enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              default: ORDER_NONE_UNSPECIFIED
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
            counterparty:
              title: counterparty channel end
              type: object
              properties:
                port_id:
                  type: string
                  description: >-
                    port on the counterparty chain which owns the other end of
                    the channel.
                channel_id:
                  type: string
                  title: channel end on the counterparty chain
            connection_hops:
              type: array
              items:
                type: string
              title: >-
                list of connection identifiers, in order, along which packets
                sent on

                this channel will travel
            version:
              type: string
              title: >-
                opaque channel version, which is agreed upon during the
                handshake
            port_id:
              type: string
              title: port identifier
            channel_id:
              type: string
              title: channel identifier
          description: |-
            IdentifiedChannel defines a channel with additional port and channel
            identifier fields.
        description: list of stored channels of the chain.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    description: >-
      QueryChannelsResponse is the response type for the Query/Channels RPC
      method.
  ibc.core.channel.v1.QueryConnectionChannelsResponse:
    type: object
    properties:
      channels:
        type: array
        items:
          type: object
          properties:
            state:
              title: current state of the channel end
              type: string
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: |-
                State defines if a channel is in one of the following states:
                CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
            ordering:
              title: whether the channel is ordered or unordered
              type: string
              enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              default: ORDER_NONE_UNSPECIFIED
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
            counterparty:
              title: counterparty channel end
              type: object
              properties:
                port_id:
                  type: string
                  description: >-
                    port on the counterparty chain which owns the other end of
                    the channel.
                channel_id:
                  type: string
                  title: channel end on the counterparty chain
            connection_hops:
              type: array
              items:
                type: string
              title: >-
                list of connection identifiers, in order, along which packets
                sent on

                this channel will travel
            version:
              type: string
              title: >-
                opaque channel version, which is agreed upon during the
                handshake
            port_id:
              type: string
              title: port identifier
            channel_id:
              type: string
              title: channel identifier
          description: |-
            IdentifiedChannel defines a channel with additional port and channel
            identifier fields.
        description: list of channels associated with a connection.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryConnectionChannelsResponse is the Response type for the
      Query/QueryConnectionChannels RPC method
  ibc.core.channel.v1.QueryNextSequenceReceiveResponse:
    type: object
    properties:
      next_sequence_receive:
        type: string
        format: uint64
        title: next sequence receive number
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QuerySequenceResponse is the request type for the
      Query/QueryNextSequenceReceiveResponse RPC method
  ibc.core.channel.v1.QueryPacketAcknowledgementResponse:
    type: object
    properties:
      acknowledgement:
        type: string
        format: byte
        title: packet associated with the request fields
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryPacketAcknowledgementResponse defines the client query response for a
      packet which also includes a proof and the height from which the
      proof was retrieved
  ibc.core.channel.v1.QueryPacketAcknowledgementsResponse:
    type: object
    properties:
      acknowledgements:
        type: array
        items:
          type: object
          properties:
            port_id:
              type: string
              description: channel port identifier.
            channel_id:
              type: string
              description: channel unique identifier.
            sequence:
              type: string
              format: uint64
              description: packet sequence.
            data:
              type: string
              format: byte
              description: embedded data that represents packet state.
          description: >-
            PacketState defines the generic type necessary to retrieve and store

            packet commitments, acknowledgements, and receipts.

            Caller is responsible for knowing the context necessary to interpret
            this

            state as a commitment, acknowledgement, or a receipt.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryPacketAcknowledgemetsResponse is the request type for the
      Query/QueryPacketAcknowledgements RPC method
  ibc.core.channel.v1.QueryPacketCommitmentResponse:
    type: object
    properties:
      commitment:
        type: string
        format: byte
        title: packet associated with the request fields
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: >-
      QueryPacketCommitmentResponse defines the client query response for a
      packet

      which also includes a proof and the height from which the proof was

      retrieved
  ibc.core.channel.v1.QueryPacketCommitmentsResponse:
    type: object
    properties:
      commitments:
        type: array
        items:
          type: object
          properties:
            port_id:
              type: string
              description: channel port identifier.
            channel_id:
              type: string
              description: channel unique identifier.
            sequence:
              type: string
              format: uint64
              description: packet sequence.
            data:
              type: string
              format: byte
              description: embedded data that represents packet state.
          description: >-
            PacketState defines the generic type necessary to retrieve and store

            packet commitments, acknowledgements, and receipts.

            Caller is responsible for knowing the context necessary to interpret
            this

            state as a commitment, acknowledgement, or a receipt.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryPacketCommitmentsResponse is the request type for the
      Query/QueryPacketCommitments RPC method
  ibc.core.channel.v1.QueryPacketReceiptResponse:
    type: object
    properties:
      received:
        type: boolean
        title: success flag for if receipt exists
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: >-
      QueryPacketReceiptResponse defines the client query response for a packet

      receipt which also includes a proof, and the height from which the proof
      was

      retrieved
  ibc.core.channel.v1.QueryUnreceivedAcksResponse:
    type: object
    properties:
      sequences:
        type: array
        items:
          type: string
          format: uint64
        title: list of unreceived acknowledgement sequences
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryUnreceivedAcksResponse is the response type for the
      Query/UnreceivedAcks RPC method
  ibc.core.channel.v1.QueryUnreceivedPacketsResponse:
    type: object
    properties:
      sequences:
        type: array
        items:
          type: string
          format: uint64
        title: list of unreceived packet sequences
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryUnreceivedPacketsResponse is the response type for the
      Query/UnreceivedPacketCommitments RPC method
  ibc.core.channel.v1.ResponseResultType:
    type: string
    enum:
      - RESPONSE_RESULT_TYPE_UNSPECIFIED
      - RESPONSE_RESULT_TYPE_NOOP
      - RESPONSE_RESULT_TYPE_SUCCESS
    default: RESPONSE_RESULT_TYPE_UNSPECIFIED
    description: |-
      - RESPONSE_RESULT_TYPE_UNSPECIFIED: Default zero value enumeration
       - RESPONSE_RESULT_TYPE_NOOP: The message did not call the IBC application callbacks (because, for example, the packet had already been relayed)
       - RESPONSE_RESULT_TYPE_SUCCESS: The message was executed successfully
    title: >-
      ResponseResultType defines the possible outcomes of the execution of a
      message
  ibc.core.channel.v1.State:
    type: string
    enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
      - STATE_CLOSED
    default: STATE_UNINITIALIZED_UNSPECIFIED
    description: |-
      State defines if a channel is in one of the following states:
      CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
       - STATE_INIT: A channel has just started the opening handshake.
       - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
       - STATE_OPEN: A channel has completed the handshake. Open channels are
      ready to send and receive packets.
       - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
      packets.
  ibc.core.client.v1.IdentifiedClientState:
    type: object
    properties:
      client_id:
        type: string
        title: client identifier
      client_state:
        title: client state
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: |-
      IdentifiedClientState defines a client state with an additional client
      identifier field.
  ibc.core.client.v1.ConsensusStateWithHeight:
    type: object
    properties:
      height:
        title: consensus state height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
      consensus_state:
        title: consensus state
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: >-
      ConsensusStateWithHeight defines a consensus state with an additional
      height

      field.
  ibc.core.client.v1.MsgCreateClientResponse:
    type: object
    description: MsgCreateClientResponse defines the Msg/CreateClient response type.
  ibc.core.client.v1.MsgSubmitMisbehaviourResponse:
    type: object
    description: |-
      MsgSubmitMisbehaviourResponse defines the Msg/SubmitMisbehaviour response
      type.
  ibc.core.client.v1.MsgUpdateClientResponse:
    type: object
    description: MsgUpdateClientResponse defines the Msg/UpdateClient response type.
  ibc.core.client.v1.MsgUpgradeClientResponse:
    type: object
    description: MsgUpgradeClientResponse defines the Msg/UpgradeClient response type.
  ibc.core.client.v1.Params:
    type: object
    properties:
      allowed_clients:
        type: array
        items:
          type: string
        description: allowed_clients defines the list of allowed client state types.
    description: Params defines the set of IBC light client parameters.
  ibc.core.client.v1.QueryClientParamsResponse:
    type: object
    properties:
      params:
        description: params defines the parameters of the module.
        type: object
        properties:
          allowed_clients:
            type: array
            items:
              type: string
            description: allowed_clients defines the list of allowed client state types.
    description: >-
      QueryClientParamsResponse is the response type for the Query/ClientParams
      RPC

      method.
  ibc.core.client.v1.QueryClientStateResponse:
    type: object
    properties:
      client_state:
        title: client state associated with the request identifier
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    description: >-
      QueryClientStateResponse is the response type for the Query/ClientState
      RPC

      method. Besides the client state, it includes a proof and the height from

      which the proof was retrieved.
  ibc.core.client.v1.QueryClientStatesResponse:
    type: object
    properties:
      client_states:
        type: array
        items:
          type: object
          properties:
            client_id:
              type: string
              title: client identifier
            client_state:
              title: client state
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: >-
            IdentifiedClientState defines a client state with an additional
            client

            identifier field.
        description: list of stored ClientStates of the chain.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    description: >-
      QueryClientStatesResponse is the response type for the Query/ClientStates
      RPC

      method.
  ibc.core.client.v1.QueryClientStatusResponse:
    type: object
    properties:
      status:
        type: string
    description: >-
      QueryClientStatusResponse is the response type for the Query/ClientStatus
      RPC

      method. It returns the current status of the IBC client.
  ibc.core.client.v1.QueryConsensusStateHeightsResponse:
    type: object
    properties:
      consensus_state_heights:
        type: array
        items:
          type: object
          properties:
            revision_number:
              type: string
              format: uint64
              title: the revision that the client is currently on
            revision_height:
              type: string
              format: uint64
              title: the height within the given revision
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
        title: consensus state heights
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryConsensusStateHeightsResponse is the response type for the
      Query/ConsensusStateHeights RPC method
  ibc.core.client.v1.QueryConsensusStateResponse:
    type: object
    properties:
      consensus_state:
        title: >-
          consensus state associated with the client identifier at the given
          height
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: >-
      QueryConsensusStateResponse is the response type for the
      Query/ConsensusState

      RPC method
  ibc.core.client.v1.QueryConsensusStatesResponse:
    type: object
    properties:
      consensus_states:
        type: array
        items:
          type: object
          properties:
            height:
              title: consensus state height
              type: object
              properties:
                revision_number:
                  type: string
                  format: uint64
                  title: the revision that the client is currently on
                revision_height:
                  type: string
                  format: uint64
                  title: the height within the given revision
              description: >-
                Normally the RevisionHeight is incremented at each height while
                keeping

                RevisionNumber the same. However some consensus algorithms may
                choose to

                reset the height in certain conditions e.g. hard forks,
                state-machine

                breaking changes In these cases, the RevisionNumber is
                incremented so that

                height continues to be monitonically increasing even as the
                RevisionHeight

                gets reset
            consensus_state:
              title: consensus state
              type: object
              properties:
                '@type':
                  type: string
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
              additionalProperties: {}
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: >-
            ConsensusStateWithHeight defines a consensus state with an
            additional height

            field.
        title: consensus states associated with the identifier
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
    title: |-
      QueryConsensusStatesResponse is the response type for the
      Query/ConsensusStates RPC method
  ibc.core.client.v1.QueryUpgradedClientStateResponse:
    type: object
    properties:
      upgraded_client_state:
        title: client state associated with the request identifier
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: |-
      QueryUpgradedClientStateResponse is the response type for the
      Query/UpgradedClientState RPC method.
  ibc.core.client.v1.QueryUpgradedConsensusStateResponse:
    type: object
    properties:
      upgraded_consensus_state:
        title: Consensus state associated with the request identifier
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
    description: |-
      QueryUpgradedConsensusStateResponse is the response type for the
      Query/UpgradedConsensusState RPC method.
  ibc.core.commitment.v1.MerklePrefix:
    type: object
    properties:
      key_prefix:
        type: string
        format: byte
    title: |-
      MerklePrefix is merkle path prefixed to the key.
      The constructed key from the Path and the key will be append(Path.KeyPath,
      append(Path.KeyPrefix, key...))
  ibc.core.connection.v1.ConnectionEnd:
    type: object
    properties:
      client_id:
        type: string
        description: client associated with this connection.
      versions:
        type: array
        items:
          type: object
          properties:
            identifier:
              type: string
              title: unique version identifier
            features:
              type: array
              items:
                type: string
              title: list of features compatible with the specified identifier
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
        description: >-
          IBC version which can be utilised to determine encodings or protocols
          for

          channels or packets utilising this connection.
      state:
        description: current state of the connection end.
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        default: STATE_UNINITIALIZED_UNSPECIFIED
      counterparty:
        description: counterparty chain associated with this connection.
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
      delay_period:
        type: string
        format: uint64
        description: >-
          delay period that must pass before a consensus state can be used for

          packet-verification NOTE: delay period logic is only implemented by
          some

          clients.
    description: |-
      ConnectionEnd defines a stateful object on a chain connected to another
      separate one.
      NOTE: there must only be 2 defined ConnectionEnds to establish
      a connection between two chains.
  ibc.core.connection.v1.Counterparty:
    type: object
    properties:
      client_id:
        type: string
        description: >-
          identifies the client on the counterparty chain associated with a
          given

          connection.
      connection_id:
        type: string
        description: >-
          identifies the connection end on the counterparty chain associated
          with a

          given connection.
      prefix:
        description: commitment merkle prefix of the counterparty chain.
        type: object
        properties:
          key_prefix:
            type: string
            format: byte
        title: >-
          MerklePrefix is merkle path prefixed to the key.

          The constructed key from the Path and the key will be
          append(Path.KeyPath,

          append(Path.KeyPrefix, key...))
    description: >-
      Counterparty defines the counterparty chain associated with a connection
      end.
  ibc.core.connection.v1.IdentifiedConnection:
    type: object
    properties:
      id:
        type: string
        description: connection identifier.
      client_id:
        type: string
        description: client associated with this connection.
      versions:
        type: array
        items:
          type: object
          properties:
            identifier:
              type: string
              title: unique version identifier
            features:
              type: array
              items:
                type: string
              title: list of features compatible with the specified identifier
          description: >-
            Version defines the versioning scheme used to negotiate the IBC
            verison in

            the connection handshake.
        title: >-
          IBC version which can be utilised to determine encodings or protocols
          for

          channels or packets utilising this connection
      state:
        description: current state of the connection end.
        type: string
        enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        default: STATE_UNINITIALIZED_UNSPECIFIED
      counterparty:
        description: counterparty chain associated with this connection.
        type: object
        properties:
          client_id:
            type: string
            description: >-
              identifies the client on the counterparty chain associated with a
              given

              connection.
          connection_id:
            type: string
            description: >-
              identifies the connection end on the counterparty chain associated
              with a

              given connection.
          prefix:
            description: commitment merkle prefix of the counterparty chain.
            type: object
            properties:
              key_prefix:
                type: string
                format: byte
            title: >-
              MerklePrefix is merkle path prefixed to the key.

              The constructed key from the Path and the key will be
              append(Path.KeyPath,

              append(Path.KeyPrefix, key...))
      delay_period:
        type: string
        format: uint64
        description: delay period associated with this connection.
    description: |-
      IdentifiedConnection defines a connection with additional connection
      identifier field.
  ibc.core.connection.v1.MsgConnectionOpenAckResponse:
    type: object
    description: >-
      MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck response
      type.
  ibc.core.connection.v1.MsgConnectionOpenConfirmResponse:
    type: object
    description: |-
      MsgConnectionOpenConfirmResponse defines the Msg/ConnectionOpenConfirm
      response type.
  ibc.core.connection.v1.MsgConnectionOpenInitResponse:
    type: object
    description: |-
      MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit response
      type.
  ibc.core.connection.v1.MsgConnectionOpenTryResponse:
    type: object
    description: >-
      MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry response
      type.
  ibc.core.connection.v1.QueryClientConnectionsResponse:
    type: object
    properties:
      connection_paths:
        type: array
        items:
          type: string
        description: slice of all the connection paths associated with a client.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was generated
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryClientConnectionsResponse is the response type for the
      Query/ClientConnections RPC method
  ibc.core.connection.v1.QueryConnectionClientStateResponse:
    type: object
    properties:
      identified_client_state:
        title: client state associated with the channel
        type: object
        properties:
          client_id:
            type: string
            title: client identifier
          client_state:
            title: client state
            type: object
            properties:
              '@type':
                type: string
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
            additionalProperties: {}
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
        description: |-
          IdentifiedClientState defines a client state with an additional client
          identifier field.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryConnectionClientStateResponse is the response type for the
      Query/ConnectionClientState RPC method
  ibc.core.connection.v1.QueryConnectionConsensusStateResponse:
    type: object
    properties:
      consensus_state:
        title: consensus state associated with the channel
        type: object
        properties:
          '@type':
            type: string
            description: >-
              A URL/resource name that uniquely identifies the type of the
              serialized

              protocol buffer message. This string must contain at least

              one "/" character. The last segment of the URL's path must
              represent

              the fully qualified name of the type (as in

              `path/google.protobuf.Duration`). The name should be in a
              canonical form

              (e.g., leading "." is not accepted).


              In practice, teams usually precompile into the binary all types
              that they

              expect it to use in the context of Any. However, for URLs which
              use the

              scheme `http`, `https`, or no scheme, one can optionally set up a
              type

              server that maps type URLs to message definitions as follows:


              * If no scheme is provided, `https` is assumed.

              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                value in binary format, or produce an error.
              * Applications are allowed to cache lookup results based on the
                URL, or have them precompiled into a binary to avoid any
                lookup. Therefore, binary compatibility needs to be preserved
                on changes to types. (Use versioned type names to manage
                breaking changes.)

              Note: this functionality is not currently available in the
              official

              protobuf release, and it is not used for type URLs beginning with

              type.googleapis.com.


              Schemes other than `http`, `https` (or the empty scheme) might be

              used with implementation specific semantics.
        additionalProperties: {}
        description: >-
          `Any` contains an arbitrary serialized protocol buffer message along
          with a

          URL that describes the type of the serialized message.


          Protobuf library provides support to pack/unpack Any values in the
          form

          of utility functions or additional generated methods of the Any type.


          Example 1: Pack and unpack a message in C++.

              Foo foo = ...;
              Any any;
              any.PackFrom(foo);
              ...
              if (any.UnpackTo(&foo)) {
                ...
              }

          Example 2: Pack and unpack a message in Java.

              Foo foo = ...;
              Any any = Any.pack(foo);
              ...
              if (any.is(Foo.class)) {
                foo = any.unpack(Foo.class);
              }

           Example 3: Pack and unpack a message in Python.

              foo = Foo(...)
              any = Any()
              any.Pack(foo)
              ...
              if any.Is(Foo.DESCRIPTOR):
                any.Unpack(foo)
                ...

           Example 4: Pack and unpack a message in Go

               foo := &pb.Foo{...}
               any, err := anypb.New(foo)
               if err != nil {
                 ...
               }
               ...
               foo := &pb.Foo{}
               if err := any.UnmarshalTo(foo); err != nil {
                 ...
               }

          The pack methods provided by protobuf library will by default use

          'type.googleapis.com/full.type.name' as the type URL and the unpack

          methods only use the fully qualified type name after the last '/'

          in the type URL, for example "foo.bar.com/x/y.z" will yield type

          name "y.z".



          JSON

          ====

          The JSON representation of an `Any` value uses the regular

          representation of the deserialized, embedded message, with an

          additional field `@type` which contains the type URL. Example:

              package google.profile;
              message Person {
                string first_name = 1;
                string last_name = 2;
              }

              {
                "@type": "type.googleapis.com/google.profile.Person",
                "firstName": <string>,
                "lastName": <string>
              }

          If the embedded message type is well-known and has a custom JSON

          representation, that representation will be embedded adding a field

          `value` which holds the custom JSON in addition to the `@type`

          field. Example (for message [google.protobuf.Duration][]):

              {
                "@type": "type.googleapis.com/google.protobuf.Duration",
                "value": "1.212s"
              }
      client_id:
        type: string
        title: client ID associated with the consensus state
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    title: |-
      QueryConnectionConsensusStateResponse is the response type for the
      Query/ConnectionConsensusState RPC method
  ibc.core.connection.v1.QueryConnectionResponse:
    type: object
    properties:
      connection:
        title: connection associated with the request identifier
        type: object
        properties:
          client_id:
            type: string
            description: client associated with this connection.
          versions:
            type: array
            items:
              type: object
              properties:
                identifier:
                  type: string
                  title: unique version identifier
                features:
                  type: array
                  items:
                    type: string
                  title: list of features compatible with the specified identifier
              description: >-
                Version defines the versioning scheme used to negotiate the IBC
                verison in

                the connection handshake.
            description: >-
              IBC version which can be utilised to determine encodings or
              protocols for

              channels or packets utilising this connection.
          state:
            description: current state of the connection end.
            type: string
            enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
            default: STATE_UNINITIALIZED_UNSPECIFIED
          counterparty:
            description: counterparty chain associated with this connection.
            type: object
            properties:
              client_id:
                type: string
                description: >-
                  identifies the client on the counterparty chain associated
                  with a given

                  connection.
              connection_id:
                type: string
                description: >-
                  identifies the connection end on the counterparty chain
                  associated with a

                  given connection.
              prefix:
                description: commitment merkle prefix of the counterparty chain.
                type: object
                properties:
                  key_prefix:
                    type: string
                    format: byte
                title: >-
                  MerklePrefix is merkle path prefixed to the key.

                  The constructed key from the Path and the key will be
                  append(Path.KeyPath,

                  append(Path.KeyPrefix, key...))
          delay_period:
            type: string
            format: uint64
            description: >-
              delay period that must pass before a consensus state can be used
              for

              packet-verification NOTE: delay period logic is only implemented
              by some

              clients.
        description: >-
          ConnectionEnd defines a stateful object on a chain connected to
          another

          separate one.

          NOTE: there must only be 2 defined ConnectionEnds to establish

          a connection between two chains.
      proof:
        type: string
        format: byte
        title: merkle proof of existence
      proof_height:
        title: height at which the proof was retrieved
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    description: >-
      QueryConnectionResponse is the response type for the Query/Connection RPC

      method. Besides the connection end, it includes a proof and the height
      from

      which the proof was retrieved.
  ibc.core.connection.v1.QueryConnectionsResponse:
    type: object
    properties:
      connections:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
              description: connection identifier.
            client_id:
              type: string
              description: client associated with this connection.
            versions:
              type: array
              items:
                type: object
                properties:
                  identifier:
                    type: string
                    title: unique version identifier
                  features:
                    type: array
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
              title: >-
                IBC version which can be utilised to determine encodings or
                protocols for

                channels or packets utilising this connection
            state:
              description: current state of the connection end.
              type: string
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
              default: STATE_UNINITIALIZED_UNSPECIFIED
            counterparty:
              description: counterparty chain associated with this connection.
              type: object
              properties:
                client_id:
                  type: string
                  description: >-
                    identifies the client on the counterparty chain associated
                    with a given

                    connection.
                connection_id:
                  type: string
                  description: >-
                    identifies the connection end on the counterparty chain
                    associated with a

                    given connection.
                prefix:
                  description: commitment merkle prefix of the counterparty chain.
                  type: object
                  properties:
                    key_prefix:
                      type: string
                      format: byte
                  title: >-
                    MerklePrefix is merkle path prefixed to the key.

                    The constructed key from the Path and the key will be
                    append(Path.KeyPath,

                    append(Path.KeyPrefix, key...))
            delay_period:
              type: string
              format: uint64
              description: delay period associated with this connection.
          description: |-
            IdentifiedConnection defines a connection with additional connection
            identifier field.
        description: list of stored connections of the chain.
      pagination:
        title: pagination response
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
      height:
        title: query block height
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
    description: >-
      QueryConnectionsResponse is the response type for the Query/Connections
      RPC

      method.
  ibc.core.connection.v1.State:
    type: string
    enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
    default: STATE_UNINITIALIZED_UNSPECIFIED
    description: |-
      State defines if a connection is in one of the following states:
      INIT, TRYOPEN, OPEN or UNINITIALIZED.

       - STATE_UNINITIALIZED_UNSPECIFIED: Default State
       - STATE_INIT: A connection end has just started the opening handshake.
       - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty
      chain.
       - STATE_OPEN: A connection end has completed the handshake.
  ibc.core.connection.v1.Version:
    type: object
    properties:
      identifier:
        type: string
        title: unique version identifier
      features:
        type: array
        items:
          type: string
        title: list of features compatible with the specified identifier
    description: |-
      Version defines the versioning scheme used to negotiate the IBC verison in
      the connection handshake.
  interchain_security.ccv.consumer.v1.NextFeeDistributionEstimate:
    type: object
    properties:
      currentHeight:
        type: string
        format: int64
        title: current block height at the time of querying
      lastHeight:
        type: string
        format: int64
        title: block height at which last distribution took place
      nextHeight:
        type: string
        format: int64
        title: block height at which next distribution will take place
      distribution_fraction:
        type: string
        title: ratio between consumer and provider fee distribution
      total:
        type: string
        title: total accruead fees at the time of querying
      toProvider:
        type: string
        title: amount distibuted to provider chain
      toConsumer:
        type: string
        title: amount distributed (kept) by consumer chain
    title: NextFeeDistributionEstimate holds information about next fee distribution
  interchain_security.ccv.consumer.v1.Params:
    type: object
    properties:
      enabled:
        type: boolean
        title: >-
          TODO: Remove enabled flag and find a better way to setup integration
          tests

          See: https://github.com/cosmos/interchain-security/issues/339
      blocks_per_distribution_transmission:
        type: string
        format: int64
        description: >-
          /////////////////////

          Distribution Params

          Number of blocks between ibc-token-transfers from the consumer chain
          to

          the provider chain. Note that at this transmission event a fraction of

          the accumulated tokens are divided and sent consumer redistribution

          address.
      distribution_transmission_channel:
        type: string
        description: >-
          Channel, and provider-chain receiving address to send distribution
          token

          transfers over. These parameters is auto-set during the consumer <->

          provider handshake procedure.
      provider_fee_pool_addr_str:
        type: string
      ccv_timeout_period:
        type: string
        title: Sent CCV related IBC packets will timeout after this duration
      transfer_timeout_period:
        type: string
        title: Sent transfer related IBC packets will timeout after this duration
      consumer_redistribution_fraction:
        type: string
        description: >-
          The fraction of tokens allocated to the consumer redistribution
          address

          during distribution events. The fraction is a string representing a

          decimal number. For example "0.75" would represent 75%.
      historical_entries:
        type: string
        format: int64
        description: >-
          The number of historical info entries to persist in store.

          This param is a part of the cosmos sdk staking module. In the case of 

          a ccv enabled consumer chain, the ccv module acts as the staking
          module.
      unbonding_period:
        type: string
        description: |-
          Unbonding period for the consumer,
          which should be smaller than that of the provider in general.
      soft_opt_out_threshold:
        type: string
        title: >-
          The threshold for the percentage of validators at the bottom of the
          set who

          can opt out of running the consumer chain without being punished. For
          example, a

          value of 0.05 means that the validators in the bottom 5% of the set
          can opt out
    title: Params defines the parameters for CCV consumer module
  interchain_security.ccv.consumer.v1.QueryNextFeeDistributionEstimateResponse:
    type: object
    properties:
      data:
        type: object
        properties:
          currentHeight:
            type: string
            format: int64
            title: current block height at the time of querying
          lastHeight:
            type: string
            format: int64
            title: block height at which last distribution took place
          nextHeight:
            type: string
            format: int64
            title: block height at which next distribution will take place
          distribution_fraction:
            type: string
            title: ratio between consumer and provider fee distribution
          total:
            type: string
            title: total accruead fees at the time of querying
          toProvider:
            type: string
            title: amount distibuted to provider chain
          toConsumer:
            type: string
            title: amount distributed (kept) by consumer chain
        title: >-
          NextFeeDistributionEstimate holds information about next fee
          distribution
  interchain_security.ccv.consumer.v1.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
        properties:
          enabled:
            type: boolean
            title: >-
              TODO: Remove enabled flag and find a better way to setup
              integration tests

              See: https://github.com/cosmos/interchain-security/issues/339
          blocks_per_distribution_transmission:
            type: string
            format: int64
            description: >-
              /////////////////////

              Distribution Params

              Number of blocks between ibc-token-transfers from the consumer
              chain to

              the provider chain. Note that at this transmission event a
              fraction of

              the accumulated tokens are divided and sent consumer
              redistribution

              address.
          distribution_transmission_channel:
            type: string
            description: >-
              Channel, and provider-chain receiving address to send distribution
              token

              transfers over. These parameters is auto-set during the consumer
              <->

              provider handshake procedure.
          provider_fee_pool_addr_str:
            type: string
          ccv_timeout_period:
            type: string
            title: Sent CCV related IBC packets will timeout after this duration
          transfer_timeout_period:
            type: string
            title: Sent transfer related IBC packets will timeout after this duration
          consumer_redistribution_fraction:
            type: string
            description: >-
              The fraction of tokens allocated to the consumer redistribution
              address

              during distribution events. The fraction is a string representing
              a

              decimal number. For example "0.75" would represent 75%.
          historical_entries:
            type: string
            format: int64
            description: >-
              The number of historical info entries to persist in store.

              This param is a part of the cosmos sdk staking module. In the case
              of 

              a ccv enabled consumer chain, the ccv module acts as the staking
              module.
          unbonding_period:
            type: string
            description: |-
              Unbonding period for the consumer,
              which should be smaller than that of the provider in general.
          soft_opt_out_threshold:
            type: string
            title: >-
              The threshold for the percentage of validators at the bottom of
              the set who

              can opt out of running the consumer chain without being punished.
              For example, a

              value of 0.05 means that the validators in the bottom 5% of the
              set can opt out
        title: Params defines the parameters for CCV consumer module
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  cosmos.staking.v1beta1.InfractionType:
    type: string
    enum:
      - INFRACTION_TYPE_UNSPECIFIED
      - INFRACTION_TYPE_DOUBLE_SIGN
      - INFRACTION_TYPE_DOWNTIME
    default: INFRACTION_TYPE_UNSPECIFIED
    description: |-
      InfractionType indicates the infraction type a validator commited.

       - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
       - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
       - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
  ibc.core.commitment.v1.MerkleRoot:
    type: object
    properties:
      hash:
        type: string
        format: byte
    description: |-
      MerkleRoot defines a merkle root hash.
      In the Cosmos SDK, the AppHash of a block header becomes the root.
  ibc.lightclients.tendermint.v1.ClientState:
    type: object
    properties:
      chain_id:
        type: string
      trust_level:
        type: object
        properties:
          numerator:
            type: string
            format: uint64
          denominator:
            type: string
            format: uint64
        description: >-
          Fraction defines the protobuf message type for tmmath.Fraction that
          only

          supports positive values.
      trusting_period:
        type: string
        title: |-
          duration of the period since the LastestTimestamp during which the
          submitted headers are valid for upgrade
      unbonding_period:
        type: string
        title: duration of the staking unbonding period
      max_clock_drift:
        type: string
        description: >-
          defines how much new (untrusted) header's Time can drift into the
          future.
      frozen_height:
        title: Block height when the client was frozen due to a misbehaviour
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
      latest_height:
        title: Latest height the client was updated to
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        description: >-
          Normally the RevisionHeight is incremented at each height while
          keeping

          RevisionNumber the same. However some consensus algorithms may choose
          to

          reset the height in certain conditions e.g. hard forks, state-machine

          breaking changes In these cases, the RevisionNumber is incremented so
          that

          height continues to be monitonically increasing even as the
          RevisionHeight

          gets reset
      proof_specs:
        type: array
        items:
          type: object
          properties:
            leaf_spec:
              title: >-
                any field in the ExistenceProof must be the same as in this
                spec.

                except Prefix, which is just the first bytes of prefix (spec can
                be longer)
              type: object
              properties:
                hash:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
                prehash_key:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
                prehash_value:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
                length:
                  type: string
                  enum:
                    - NO_PREFIX
                    - VAR_PROTO
                    - VAR_RLP
                    - FIXED32_BIG
                    - FIXED32_LITTLE
                    - FIXED64_BIG
                    - FIXED64_LITTLE
                    - REQUIRE_32_BYTES
                    - REQUIRE_64_BYTES
                  default: NO_PREFIX
                  description: |-
                    - NO_PREFIX: NO_PREFIX don't include any length info
                     - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                     - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                     - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                     - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                     - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                     - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                     - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                     - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                  title: >-
                    *

                    LengthOp defines how to process the key and value of the
                    LeafOp

                    to include length information. After encoding the length
                    with the given

                    algorithm, the length will be prepended to the key and value
                    bytes.

                    (Each one with it's own encoded length)
                prefix:
                  type: string
                  format: byte
                  description: >-
                    prefix is a fixed bytes that may optionally be included at
                    the beginning to differentiate

                    a leaf node from an inner node.
              description: >-
                *

                LeafOp represents the raw key-value data we wish to prove, and

                must be flexible to represent the internal transformation from

                the original key-value pairs into the basis hash, for many
                existing

                merkle trees.


                key and value are passed in. So that the signature of this
                operation is:

                leafOp(key, value) -> output


                To process this, first prehash the keys and values if needed
                (ANY means no hash in this case):

                hkey = prehashKey(key)

                hvalue = prehashValue(value)


                Then combine the bytes, and hash it

                output = hash(prefix || length(hkey) || hkey || length(hvalue)
                || hvalue)
            inner_spec:
              type: object
              properties:
                child_order:
                  type: array
                  items:
                    type: integer
                    format: int32
                  title: >-
                    Child order is the ordering of the children node, must count
                    from 0

                    iavl tree is [0, 1] (left then right)

                    merk is [0, 2, 1] (left, right, here)
                child_size:
                  type: integer
                  format: int32
                min_prefix_length:
                  type: integer
                  format: int32
                max_prefix_length:
                  type: integer
                  format: int32
                empty_child:
                  type: string
                  format: byte
                  title: >-
                    empty child is the prehash image that is used when one child
                    is nil (eg. 20 bytes of 0)
                hash:
                  type: string
                  enum:
                    - NO_HASH
                    - SHA256
                    - SHA512
                    - KECCAK
                    - RIPEMD160
                    - BITCOIN
                    - SHA512_256
                  default: NO_HASH
                  title: >-
                    - NO_HASH: NO_HASH is the default if no data passed. Note
                    this is an illegal argument some places.
                     - BITCOIN: ripemd160(sha256(x))
              description: >-
                InnerSpec contains all store-specific structure info to
                determine if two proofs from a

                given store are neighbors.


                This enables:


                isLeftMost(spec: InnerSpec, op: InnerOp)

                isRightMost(spec: InnerSpec, op: InnerOp)

                isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
            max_depth:
              type: integer
              format: int32
              title: >-
                max_depth (if > 0) is the maximum number of InnerOps allowed
                (mainly for fixed-depth tries)
            min_depth:
              type: integer
              format: int32
              title: >-
                min_depth (if > 0) is the minimum number of InnerOps allowed
                (mainly for fixed-depth tries)
          description: >-
            *

            ProofSpec defines what the expected parameters are for a given proof
            type.

            This can be stored in the client and used to validate any incoming
            proofs.


            verify(ProofSpec, Proof) -> Proof | Error


            As demonstrated in tests, if we don't fix the algorithm used to
            calculate the

            LeafHash for a given tree, there are many possible key-value pairs
            that can

            generate a given hash (by interpretting the preimage differently).

            We need this for proper security, requires client knows a priori
            what

            tree format server uses. But not in code, rather a configuration
            object.
        title: Proof specifications used in verifying counterparty state
      upgrade_path:
        type: array
        items:
          type: string
        title: >-
          Path at which next upgraded client will be committed.

          Each element corresponds to the key for a single CommitmentProof in
          the

          chained proof. NOTE: ClientState must stored under

          `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be
          stored

          under `{upgradepath}/{upgradeHeight}/consensusState` For SDK chains
          using

          the default upgrade module, upgrade_path should be []string{"upgrade",

          "upgradedIBCState"}`
      allow_update_after_expiry:
        type: boolean
        title: |-
          This flag, when set to true, will allow governance to recover a client
          which has expired
      allow_update_after_misbehaviour:
        type: boolean
        title: >-
          This flag, when set to true, will allow governance to unfreeze a
          client

          whose chain has experienced a misbehaviour event
    description: >-
      ClientState from Tendermint tracks the current validator set, latest
      height,

      and a possible frozen height.
  ibc.lightclients.tendermint.v1.ConsensusState:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
        description: >-
          timestamp that corresponds to the block height in which the
          ConsensusState

          was stored.
      root:
        title: commitment root (i.e app hash)
        type: object
        properties:
          hash:
            type: string
            format: byte
        description: |-
          MerkleRoot defines a merkle root hash.
          In the Cosmos SDK, the AppHash of a block header becomes the root.
      next_validators_hash:
        type: string
        format: byte
    description: ConsensusState defines the consensus state from Tendermint.
  ibc.lightclients.tendermint.v1.Fraction:
    type: object
    properties:
      numerator:
        type: string
        format: uint64
      denominator:
        type: string
        format: uint64
    description: |-
      Fraction defines the protobuf message type for tmmath.Fraction that only
      supports positive values.
  ics23.HashOp:
    type: string
    enum:
      - NO_HASH
      - SHA256
      - SHA512
      - KECCAK
      - RIPEMD160
      - BITCOIN
      - SHA512_256
    default: NO_HASH
    title: >-
      - NO_HASH: NO_HASH is the default if no data passed. Note this is an
      illegal argument some places.
       - BITCOIN: ripemd160(sha256(x))
  ics23.InnerSpec:
    type: object
    properties:
      child_order:
        type: array
        items:
          type: integer
          format: int32
        title: |-
          Child order is the ordering of the children node, must count from 0
          iavl tree is [0, 1] (left then right)
          merk is [0, 2, 1] (left, right, here)
      child_size:
        type: integer
        format: int32
      min_prefix_length:
        type: integer
        format: int32
      max_prefix_length:
        type: integer
        format: int32
      empty_child:
        type: string
        format: byte
        title: >-
          empty child is the prehash image that is used when one child is nil
          (eg. 20 bytes of 0)
      hash:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
    description: >-
      InnerSpec contains all store-specific structure info to determine if two
      proofs from a

      given store are neighbors.


      This enables:


      isLeftMost(spec: InnerSpec, op: InnerOp)

      isRightMost(spec: InnerSpec, op: InnerOp)

      isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
  ics23.LeafOp:
    type: object
    properties:
      hash:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
      prehash_key:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
      prehash_value:
        type: string
        enum:
          - NO_HASH
          - SHA256
          - SHA512
          - KECCAK
          - RIPEMD160
          - BITCOIN
          - SHA512_256
        default: NO_HASH
        title: >-
          - NO_HASH: NO_HASH is the default if no data passed. Note this is an
          illegal argument some places.
           - BITCOIN: ripemd160(sha256(x))
      length:
        type: string
        enum:
          - NO_PREFIX
          - VAR_PROTO
          - VAR_RLP
          - FIXED32_BIG
          - FIXED32_LITTLE
          - FIXED64_BIG
          - FIXED64_LITTLE
          - REQUIRE_32_BYTES
          - REQUIRE_64_BYTES
        default: NO_PREFIX
        description: |-
          - NO_PREFIX: NO_PREFIX don't include any length info
           - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
           - VAR_RLP: VAR_RLP uses rlp int encoding of the length
           - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
           - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
           - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
           - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
           - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
           - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
        title: >-
          *

          LengthOp defines how to process the key and value of the LeafOp

          to include length information. After encoding the length with the
          given

          algorithm, the length will be prepended to the key and value bytes.

          (Each one with it's own encoded length)
      prefix:
        type: string
        format: byte
        description: >-
          prefix is a fixed bytes that may optionally be included at the
          beginning to differentiate

          a leaf node from an inner node.
    description: >-
      *

      LeafOp represents the raw key-value data we wish to prove, and

      must be flexible to represent the internal transformation from

      the original key-value pairs into the basis hash, for many existing

      merkle trees.


      key and value are passed in. So that the signature of this operation is:

      leafOp(key, value) -> output


      To process this, first prehash the keys and values if needed (ANY means no
      hash in this case):

      hkey = prehashKey(key)

      hvalue = prehashValue(value)


      Then combine the bytes, and hash it

      output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
  ics23.LengthOp:
    type: string
    enum:
      - NO_PREFIX
      - VAR_PROTO
      - VAR_RLP
      - FIXED32_BIG
      - FIXED32_LITTLE
      - FIXED64_BIG
      - FIXED64_LITTLE
      - REQUIRE_32_BYTES
      - REQUIRE_64_BYTES
    default: NO_PREFIX
    description: |-
      - NO_PREFIX: NO_PREFIX don't include any length info
       - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
       - VAR_RLP: VAR_RLP uses rlp int encoding of the length
       - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
       - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
       - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
       - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
       - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
       - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
    title: |-
      *
      LengthOp defines how to process the key and value of the LeafOp
      to include length information. After encoding the length with the given
      algorithm, the length will be prepended to the key and value bytes.
      (Each one with it's own encoded length)
  ics23.ProofSpec:
    type: object
    properties:
      leaf_spec:
        title: >-
          any field in the ExistenceProof must be the same as in this spec.

          except Prefix, which is just the first bytes of prefix (spec can be
          longer)
        type: object
        properties:
          hash:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
          prehash_key:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
          prehash_value:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
          length:
            type: string
            enum:
              - NO_PREFIX
              - VAR_PROTO
              - VAR_RLP
              - FIXED32_BIG
              - FIXED32_LITTLE
              - FIXED64_BIG
              - FIXED64_LITTLE
              - REQUIRE_32_BYTES
              - REQUIRE_64_BYTES
            default: NO_PREFIX
            description: |-
              - NO_PREFIX: NO_PREFIX don't include any length info
               - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
               - VAR_RLP: VAR_RLP uses rlp int encoding of the length
               - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
               - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
               - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
               - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
               - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
               - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
            title: >-
              *

              LengthOp defines how to process the key and value of the LeafOp

              to include length information. After encoding the length with the
              given

              algorithm, the length will be prepended to the key and value
              bytes.

              (Each one with it's own encoded length)
          prefix:
            type: string
            format: byte
            description: >-
              prefix is a fixed bytes that may optionally be included at the
              beginning to differentiate

              a leaf node from an inner node.
        description: >-
          *

          LeafOp represents the raw key-value data we wish to prove, and

          must be flexible to represent the internal transformation from

          the original key-value pairs into the basis hash, for many existing

          merkle trees.


          key and value are passed in. So that the signature of this operation
          is:

          leafOp(key, value) -> output


          To process this, first prehash the keys and values if needed (ANY
          means no hash in this case):

          hkey = prehashKey(key)

          hvalue = prehashValue(value)


          Then combine the bytes, and hash it

          output = hash(prefix || length(hkey) || hkey || length(hvalue) ||
          hvalue)
      inner_spec:
        type: object
        properties:
          child_order:
            type: array
            items:
              type: integer
              format: int32
            title: >-
              Child order is the ordering of the children node, must count from
              0

              iavl tree is [0, 1] (left then right)

              merk is [0, 2, 1] (left, right, here)
          child_size:
            type: integer
            format: int32
          min_prefix_length:
            type: integer
            format: int32
          max_prefix_length:
            type: integer
            format: int32
          empty_child:
            type: string
            format: byte
            title: >-
              empty child is the prehash image that is used when one child is
              nil (eg. 20 bytes of 0)
          hash:
            type: string
            enum:
              - NO_HASH
              - SHA256
              - SHA512
              - KECCAK
              - RIPEMD160
              - BITCOIN
              - SHA512_256
            default: NO_HASH
            title: >-
              - NO_HASH: NO_HASH is the default if no data passed. Note this is
              an illegal argument some places.
               - BITCOIN: ripemd160(sha256(x))
        description: >-
          InnerSpec contains all store-specific structure info to determine if
          two proofs from a

          given store are neighbors.


          This enables:


          isLeftMost(spec: InnerSpec, op: InnerOp)

          isRightMost(spec: InnerSpec, op: InnerOp)

          isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
      max_depth:
        type: integer
        format: int32
        title: >-
          max_depth (if > 0) is the maximum number of InnerOps allowed (mainly
          for fixed-depth tries)
      min_depth:
        type: integer
        format: int32
        title: >-
          min_depth (if > 0) is the minimum number of InnerOps allowed (mainly
          for fixed-depth tries)
    description: >-
      *

      ProofSpec defines what the expected parameters are for a given proof type.

      This can be stored in the client and used to validate any incoming proofs.


      verify(ProofSpec, Proof) -> Proof | Error


      As demonstrated in tests, if we don't fix the algorithm used to calculate
      the

      LeafHash for a given tree, there are many possible key-value pairs that
      can

      generate a given hash (by interpretting the preimage differently).

      We need this for proper security, requires client knows a priori what

      tree format server uses. But not in code, rather a configuration object.
  interchain_security.ccv.consumer.v1.GenesisState:
    type: object
    properties:
      params:
        type: object
        properties:
          enabled:
            type: boolean
            title: >-
              TODO: Remove enabled flag and find a better way to setup
              integration tests

              See: https://github.com/cosmos/interchain-security/issues/339
          blocks_per_distribution_transmission:
            type: string
            format: int64
            description: >-
              /////////////////////

              Distribution Params

              Number of blocks between ibc-token-transfers from the consumer
              chain to

              the provider chain. Note that at this transmission event a
              fraction of

              the accumulated tokens are divided and sent consumer
              redistribution

              address.
          distribution_transmission_channel:
            type: string
            description: >-
              Channel, and provider-chain receiving address to send distribution
              token

              transfers over. These parameters is auto-set during the consumer
              <->

              provider handshake procedure.
          provider_fee_pool_addr_str:
            type: string
          ccv_timeout_period:
            type: string
            title: Sent CCV related IBC packets will timeout after this duration
          transfer_timeout_period:
            type: string
            title: Sent transfer related IBC packets will timeout after this duration
          consumer_redistribution_fraction:
            type: string
            description: >-
              The fraction of tokens allocated to the consumer redistribution
              address

              during distribution events. The fraction is a string representing
              a

              decimal number. For example "0.75" would represent 75%.
          historical_entries:
            type: string
            format: int64
            description: >-
              The number of historical info entries to persist in store.

              This param is a part of the cosmos sdk staking module. In the case
              of 

              a ccv enabled consumer chain, the ccv module acts as the staking
              module.
          unbonding_period:
            type: string
            description: |-
              Unbonding period for the consumer,
              which should be smaller than that of the provider in general.
          soft_opt_out_threshold:
            type: string
            title: >-
              The threshold for the percentage of validators at the bottom of
              the set who

              can opt out of running the consumer chain without being punished.
              For example, a

              value of 0.05 means that the validators in the bottom 5% of the
              set can opt out
        title: Params defines the parameters for CCV consumer module
      provider_client_id:
        type: string
        description: empty for a new chain, filled in on restart.
      provider_channel_id:
        type: string
        description: empty for a new chain, filled in on restart.
      new_chain:
        type: boolean
        description: true for new chain GenesisState, false for chain restart.
      provider_client_state:
        description: ProviderClientState filled in on new chain, nil on restart.
        type: object
        properties:
          chain_id:
            type: string
          trust_level:
            type: object
            properties:
              numerator:
                type: string
                format: uint64
              denominator:
                type: string
                format: uint64
            description: >-
              Fraction defines the protobuf message type for tmmath.Fraction
              that only

              supports positive values.
          trusting_period:
            type: string
            title: |-
              duration of the period since the LastestTimestamp during which the
              submitted headers are valid for upgrade
          unbonding_period:
            type: string
            title: duration of the staking unbonding period
          max_clock_drift:
            type: string
            description: >-
              defines how much new (untrusted) header's Time can drift into the
              future.
          frozen_height:
            title: Block height when the client was frozen due to a misbehaviour
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          latest_height:
            title: Latest height the client was updated to
            type: object
            properties:
              revision_number:
                type: string
                format: uint64
                title: the revision that the client is currently on
              revision_height:
                type: string
                format: uint64
                title: the height within the given revision
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
          proof_specs:
            type: array
            items:
              type: object
              properties:
                leaf_spec:
                  title: >-
                    any field in the ExistenceProof must be the same as in this
                    spec.

                    except Prefix, which is just the first bytes of prefix (spec
                    can be longer)
                  type: object
                  properties:
                    hash:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                    prehash_key:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                    prehash_value:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                    length:
                      type: string
                      enum:
                        - NO_PREFIX
                        - VAR_PROTO
                        - VAR_RLP
                        - FIXED32_BIG
                        - FIXED32_LITTLE
                        - FIXED64_BIG
                        - FIXED64_LITTLE
                        - REQUIRE_32_BYTES
                        - REQUIRE_64_BYTES
                      default: NO_PREFIX
                      description: |-
                        - NO_PREFIX: NO_PREFIX don't include any length info
                         - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                         - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                         - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                         - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                         - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                         - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                         - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                         - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                      title: >-
                        *

                        LengthOp defines how to process the key and value of the
                        LeafOp

                        to include length information. After encoding the length
                        with the given

                        algorithm, the length will be prepended to the key and
                        value bytes.

                        (Each one with it's own encoded length)
                    prefix:
                      type: string
                      format: byte
                      description: >-
                        prefix is a fixed bytes that may optionally be included
                        at the beginning to differentiate

                        a leaf node from an inner node.
                  description: >-
                    *

                    LeafOp represents the raw key-value data we wish to prove,
                    and

                    must be flexible to represent the internal transformation
                    from

                    the original key-value pairs into the basis hash, for many
                    existing

                    merkle trees.


                    key and value are passed in. So that the signature of this
                    operation is:

                    leafOp(key, value) -> output


                    To process this, first prehash the keys and values if needed
                    (ANY means no hash in this case):

                    hkey = prehashKey(key)

                    hvalue = prehashValue(value)


                    Then combine the bytes, and hash it

                    output = hash(prefix || length(hkey) || hkey ||
                    length(hvalue) || hvalue)
                inner_spec:
                  type: object
                  properties:
                    child_order:
                      type: array
                      items:
                        type: integer
                        format: int32
                      title: >-
                        Child order is the ordering of the children node, must
                        count from 0

                        iavl tree is [0, 1] (left then right)

                        merk is [0, 2, 1] (left, right, here)
                    child_size:
                      type: integer
                      format: int32
                    min_prefix_length:
                      type: integer
                      format: int32
                    max_prefix_length:
                      type: integer
                      format: int32
                    empty_child:
                      type: string
                      format: byte
                      title: >-
                        empty child is the prehash image that is used when one
                        child is nil (eg. 20 bytes of 0)
                    hash:
                      type: string
                      enum:
                        - NO_HASH
                        - SHA256
                        - SHA512
                        - KECCAK
                        - RIPEMD160
                        - BITCOIN
                        - SHA512_256
                      default: NO_HASH
                      title: >-
                        - NO_HASH: NO_HASH is the default if no data passed.
                        Note this is an illegal argument some places.
                         - BITCOIN: ripemd160(sha256(x))
                  description: >-
                    InnerSpec contains all store-specific structure info to
                    determine if two proofs from a

                    given store are neighbors.


                    This enables:


                    isLeftMost(spec: InnerSpec, op: InnerOp)

                    isRightMost(spec: InnerSpec, op: InnerOp)

                    isLeftNeighbor(spec: InnerSpec, left: InnerOp, right:
                    InnerOp)
                max_depth:
                  type: integer
                  format: int32
                  title: >-
                    max_depth (if > 0) is the maximum number of InnerOps allowed
                    (mainly for fixed-depth tries)
                min_depth:
                  type: integer
                  format: int32
                  title: >-
                    min_depth (if > 0) is the minimum number of InnerOps allowed
                    (mainly for fixed-depth tries)
              description: >-
                *

                ProofSpec defines what the expected parameters are for a given
                proof type.

                This can be stored in the client and used to validate any
                incoming proofs.


                verify(ProofSpec, Proof) -> Proof | Error


                As demonstrated in tests, if we don't fix the algorithm used to
                calculate the

                LeafHash for a given tree, there are many possible key-value
                pairs that can

                generate a given hash (by interpretting the preimage
                differently).

                We need this for proper security, requires client knows a priori
                what

                tree format server uses. But not in code, rather a configuration
                object.
            title: Proof specifications used in verifying counterparty state
          upgrade_path:
            type: array
            items:
              type: string
            title: >-
              Path at which next upgraded client will be committed.

              Each element corresponds to the key for a single CommitmentProof
              in the

              chained proof. NOTE: ClientState must stored under

              `{upgradePath}/{upgradeHeight}/clientState` ConsensusState must be
              stored

              under `{upgradepath}/{upgradeHeight}/consensusState` For SDK
              chains using

              the default upgrade module, upgrade_path should be
              []string{"upgrade",

              "upgradedIBCState"}`
          allow_update_after_expiry:
            type: boolean
            title: >-
              This flag, when set to true, will allow governance to recover a
              client

              which has expired
          allow_update_after_misbehaviour:
            type: boolean
            title: >-
              This flag, when set to true, will allow governance to unfreeze a
              client

              whose chain has experienced a misbehaviour event
      provider_consensus_state:
        description: ProviderConsensusState filled in on new chain, nil on restart.
        type: object
        properties:
          timestamp:
            type: string
            format: date-time
            description: >-
              timestamp that corresponds to the block height in which the
              ConsensusState

              was stored.
          root:
            title: commitment root (i.e app hash)
            type: object
            properties:
              hash:
                type: string
                format: byte
            description: |-
              MerkleRoot defines a merkle root hash.
              In the Cosmos SDK, the AppHash of a block header becomes the root.
          next_validators_hash:
            type: string
            format: byte
      maturing_packets:
        type: array
        items:
          type: object
          properties:
            vscId:
              type: string
              format: uint64
            maturity_time:
              type: string
              format: date-time
          title: MaturingVSCPacket contains the maturing time of a received VSCPacket
        description: MaturingPackets nil on new chain, filled in on restart.
      initial_val_set:
        type: array
        items:
          type: object
          properties:
            pub_key:
              type: object
              properties:
                ed25519:
                  type: string
                  format: byte
                secp256k1:
                  type: string
                  format: byte
              title: >-
                PublicKey defines the keys available for use with Tendermint
                Validators
            power:
              type: string
              format: int64
          title: ValidatorUpdate
        description: InitialValset filled in on new chain and on restart.
      height_to_valset_update_id:
        type: array
        items:
          type: object
          properties:
            height:
              type: string
              format: uint64
            valset_update_id:
              type: string
              format: uint64
          title: >-
            HeightValsetUpdateID defines the genesis information for the
            mapping 

            of each block height to a valset update id
        description: HeightToValsetUpdateId nil on new chain, filled in on restart.
      outstanding_downtime_slashing:
        type: array
        items:
          type: object
          properties:
            validator_consensus_address:
              type: string
          description: >-
            OutstandingDowntime defines the genesis information for each
            validator

            flagged with an outstanding downtime slashing.
        description: OutstandingDowntimes nil on new chain, filled  in on restart.
      pending_consumer_packets:
        description: PendingConsumerPackets nil on new chain, filled in on restart.
        type: object
        properties:
          list:
            type: array
            items:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - CONSUMER_PACKET_TYPE_UNSPECIFIED
                    - CONSUMER_PACKET_TYPE_SLASH
                    - CONSUMER_PACKET_TYPE_VSCM
                  default: CONSUMER_PACKET_TYPE_UNSPECIFIED
                  description: >-
                    ConsumerPacketType indicates interchain security specific
                    packet types.

                     - CONSUMER_PACKET_TYPE_UNSPECIFIED: UNSPECIFIED packet type
                     - CONSUMER_PACKET_TYPE_SLASH: Slash packet
                     - CONSUMER_PACKET_TYPE_VSCM: VSCMatured packet
                slashPacketData:
                  type: object
                  properties:
                    validator:
                      type: object
                      properties:
                        address:
                          type: string
                          format: byte
                          title: The first 20 bytes of SHA256(public key)
                        power:
                          type: string
                          format: int64
                          description: The voting power
                          title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
                      title: Validator
                    valset_update_id:
                      type: string
                      format: uint64
                      title: map to the infraction block height on the provider
                    infraction:
                      title: >-
                        tell if the slashing is for a downtime or a
                        double-signing infraction
                      type: string
                      enum:
                        - INFRACTION_TYPE_UNSPECIFIED
                        - INFRACTION_TYPE_DOUBLE_SIGN
                        - INFRACTION_TYPE_DOWNTIME
                      default: INFRACTION_TYPE_UNSPECIFIED
                      description: >-
                        InfractionType indicates the infraction type a validator
                        commited.

                         - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                         - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                         - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
                  description: >-
                    This packet is sent from the consumer chain to the provider
                    chain

                    to request the slashing of a validator as a result of an
                    infraction

                    committed on the consumer chain.
                vscMaturedPacketData:
                  type: object
                  properties:
                    valset_update_id:
                      type: string
                      format: uint64
                      title: the id of the VSC packet that reached maturity
                  description: >-
                    This packet is sent from the consumer chain to the provider
                    chain

                    to notify that a VSC packet reached maturity on the consumer
                    chain.
              title: >-
                ConsumerPacketData contains a consumer packet data and a type
                tag
      last_transmission_block_height:
        description: LastTransmissionBlockHeight nil on new chain, filled in on restart.
        type: object
        properties:
          height:
            type: string
            format: int64
        title: |-
          LastTransmissionBlockHeight is the last time validator holding
          pools were transmitted to the provider chain
      preCCV:
        type: boolean
        title: >-
          flag indicating whether the consumer CCV module starts in pre-CCV
          state
    title: GenesisState defines the CCV consumer chain genesis state
  interchain_security.ccv.consumer.v1.HeightToValsetUpdateID:
    type: object
    properties:
      height:
        type: string
        format: uint64
      valset_update_id:
        type: string
        format: uint64
    title: |-
      HeightValsetUpdateID defines the genesis information for the mapping 
      of each block height to a valset update id
  interchain_security.ccv.consumer.v1.LastTransmissionBlockHeight:
    type: object
    properties:
      height:
        type: string
        format: int64
    title: |-
      LastTransmissionBlockHeight is the last time validator holding
      pools were transmitted to the provider chain
  interchain_security.ccv.consumer.v1.MaturingVSCPacket:
    type: object
    properties:
      vscId:
        type: string
        format: uint64
      maturity_time:
        type: string
        format: date-time
    title: MaturingVSCPacket contains the maturing time of a received VSCPacket
  interchain_security.ccv.consumer.v1.OutstandingDowntime:
    type: object
    properties:
      validator_consensus_address:
        type: string
    description: |-
      OutstandingDowntime defines the genesis information for each validator
      flagged with an outstanding downtime slashing.
  interchain_security.ccv.provider.v1.Chain:
    type: object
    properties:
      chain_id:
        type: string
      client_id:
        type: string
  interchain_security.ccv.provider.v1.ConsumerAdditionProposal:
    type: object
    properties:
      title:
        type: string
        title: the title of the proposal
      description:
        type: string
        title: the description of the proposal
      chain_id:
        type: string
        description: >-
          the proposed chain-id of the new consumer chain, must be different
          from all other consumer chain ids of the executing

          provider chain.
      initial_height:
        description: >-
          the proposed initial height of new consumer chain.

          For a completely new chain, this will be {0,1}. However, it may be
          different if this is a chain that is converting to a consumer chain.
        type: object
        properties:
          revision_number:
            type: string
            format: uint64
            title: the revision that the client is currently on
          revision_height:
            type: string
            format: uint64
            title: the height within the given revision
        title: >-
          Height is a monotonically increasing data type

          that can be compared against another Height for the purposes of
          updating and

          freezing clients
      genesis_hash:
        type: string
        format: byte
        description: >-
          The hash of the consumer chain genesis state without the consumer CCV
          module genesis params. 

          It is used for off-chain confirmation of genesis.json validity by
          validators and other parties.
      binary_hash:
        type: string
        format: byte
        description: >-
          The hash of the consumer chain binary that should be run by validators
          on chain initialization.

          It is used for off-chain confirmation of binary validity by validators
          and other parties.
      spawn_time:
        type: string
        format: date-time
        description: >-
          spawn time is the time on the provider chain at which the consumer
          chain genesis is finalized and all validators

          will be responsible for starting their consumer chain validator node.
      unbonding_period:
        type: string
        description: |-
          Unbonding period for the consumer,
          which should be smaller than that of the provider in general.
      ccv_timeout_period:
        type: string
        title: Sent CCV related IBC packets will timeout after this duration
      transfer_timeout_period:
        type: string
        title: Sent transfer related IBC packets will timeout after this duration
      consumer_redistribution_fraction:
        type: string
        description: >-
          The fraction of tokens allocated to the consumer redistribution
          address

          during distribution events. The fraction is a string representing a

          decimal number. For example "0.75" would represent 75%.
      blocks_per_distribution_transmission:
        type: string
        format: int64
        description: >-
          BlocksPerDistributionTransmission is the number of blocks between
          ibc-token-transfers from the consumer chain to the provider chain.

          On sending transmission event, `consumer_redistribution_fraction` of
          the accumulated tokens are sent to the consumer redistribution
          address.
      historical_entries:
        type: string
        format: int64
        description: >-
          The number of historical info entries to persist in store.

          This param is a part of the cosmos sdk staking module. In the case of 

          a ccv enabled consumer chain, the ccv module acts as the staking
          module.
    description: >-
      ConsumerAdditionProposal is a governance proposal on the provider chain to
      spawn a new consumer chain.

      If it passes, then all validators on the provider chain are expected to
      validate the consumer chain at spawn time

      or get slashed. It is recommended that spawn time occurs after the
      proposal end time.
  interchain_security.ccv.provider.v1.ConsumerAdditionProposals:
    type: object
    properties:
      pending:
        type: array
        items:
          type: object
          properties:
            title:
              type: string
              title: the title of the proposal
            description:
              type: string
              title: the description of the proposal
            chain_id:
              type: string
              description: >-
                the proposed chain-id of the new consumer chain, must be
                different from all other consumer chain ids of the executing

                provider chain.
            initial_height:
              description: >-
                the proposed initial height of new consumer chain.

                For a completely new chain, this will be {0,1}. However, it may
                be different if this is a chain that is converting to a consumer
                chain.
              type: object
              properties:
                revision_number:
                  type: string
                  format: uint64
                  title: the revision that the client is currently on
                revision_height:
                  type: string
                  format: uint64
                  title: the height within the given revision
              title: >-
                Height is a monotonically increasing data type

                that can be compared against another Height for the purposes of
                updating and

                freezing clients
            genesis_hash:
              type: string
              format: byte
              description: >-
                The hash of the consumer chain genesis state without the
                consumer CCV module genesis params. 

                It is used for off-chain confirmation of genesis.json validity
                by validators and other parties.
            binary_hash:
              type: string
              format: byte
              description: >-
                The hash of the consumer chain binary that should be run by
                validators on chain initialization.

                It is used for off-chain confirmation of binary validity by
                validators and other parties.
            spawn_time:
              type: string
              format: date-time
              description: >-
                spawn time is the time on the provider chain at which the
                consumer chain genesis is finalized and all validators

                will be responsible for starting their consumer chain validator
                node.
            unbonding_period:
              type: string
              description: |-
                Unbonding period for the consumer,
                which should be smaller than that of the provider in general.
            ccv_timeout_period:
              type: string
              title: Sent CCV related IBC packets will timeout after this duration
            transfer_timeout_period:
              type: string
              title: >-
                Sent transfer related IBC packets will timeout after this
                duration
            consumer_redistribution_fraction:
              type: string
              description: >-
                The fraction of tokens allocated to the consumer redistribution
                address

                during distribution events. The fraction is a string
                representing a

                decimal number. For example "0.75" would represent 75%.
            blocks_per_distribution_transmission:
              type: string
              format: int64
              description: >-
                BlocksPerDistributionTransmission is the number of blocks
                between ibc-token-transfers from the consumer chain to the
                provider chain.

                On sending transmission event,
                `consumer_redistribution_fraction` of the accumulated tokens are
                sent to the consumer redistribution address.
            historical_entries:
              type: string
              format: int64
              description: >-
                The number of historical info entries to persist in store.

                This param is a part of the cosmos sdk staking module. In the
                case of 

                a ccv enabled consumer chain, the ccv module acts as the staking
                module.
          description: >-
            ConsumerAdditionProposal is a governance proposal on the provider
            chain to spawn a new consumer chain.

            If it passes, then all validators on the provider chain are expected
            to validate the consumer chain at spawn time

            or get slashed. It is recommended that spawn time occurs after the
            proposal end time.
        title: proposals waiting for spawn_time to pass
    description: >-
      ConsumerAdditionProposals holds pending governance proposals on the
      provider chain to spawn a new chain.
  interchain_security.ccv.provider.v1.ConsumerRemovalProposal:
    type: object
    properties:
      title:
        type: string
        title: the title of the proposal
      description:
        type: string
        title: the description of the proposal
      chain_id:
        type: string
        title: the chain-id of the consumer chain to be stopped
      stop_time:
        type: string
        format: date-time
        title: >-
          the time on the provider chain at which all validators are responsible
          to stop their consumer chain validator node
    description: >-
      ConsumerRemovalProposal is a governance proposal on the provider chain to
      remove (and stop) a consumer chain.

      If it passes, all the consumer chain's state is removed from the provider
      chain. The outstanding unbonding

      operation funds are released.
  interchain_security.ccv.provider.v1.ConsumerRemovalProposals:
    type: object
    properties:
      pending:
        type: array
        items:
          type: object
          properties:
            title:
              type: string
              title: the title of the proposal
            description:
              type: string
              title: the description of the proposal
            chain_id:
              type: string
              title: the chain-id of the consumer chain to be stopped
            stop_time:
              type: string
              format: date-time
              title: >-
                the time on the provider chain at which all validators are
                responsible to stop their consumer chain validator node
          description: >-
            ConsumerRemovalProposal is a governance proposal on the provider
            chain to remove (and stop) a consumer chain.

            If it passes, all the consumer chain's state is removed from the
            provider chain. The outstanding unbonding

            operation funds are released.
        title: proposals waiting for stop_time to pass
    description: >-
      ConsumerRemovalProposals holds pending governance proposals on the
      provider chain to remove (and stop) a consumer chain.
  interchain_security.ccv.provider.v1.GlobalSlashEntry:
    type: object
    properties:
      recv_time:
        type: string
        format: date-time
        description: |-
          Block time that slash packet was received by provider chain.
          This field is used for store key iteration ordering.
      consumer_chain_id:
        type: string
        description: The consumer that sent a slash packet.
      ibc_seq_num:
        type: string
        format: uint64
        description: |-
          The IBC sequence number of the recv packet.  
          This field is used in the store key to ensure uniqueness.
      provider_val_cons_addr:
        description: >-
          The provider's consensus address of the validator being slashed. 

          This field is used to obtain validator power in HandleThrottleQueues.


          This field is not used in the store key, but is persisted in value
          bytes, see QueueGlobalSlashEntry.
        type: object
        properties:
          address:
            type: string
            format: byte
        title: A validator's consensus address on the provider chain
    description: >-
      A persisted queue entry indicating that a slash packet data instance needs
      to be handled.

      This type belongs in the "global" queue, to coordinate slash packet
      handling times between consumers.
  interchain_security.ccv.provider.v1.MsgAssignConsumerKeyResponse:
    type: object
  interchain_security.ccv.provider.v1.ProviderConsAddress:
    type: object
    properties:
      address:
        type: string
        format: byte
    title: A validator's consensus address on the provider chain
  interchain_security.ccv.provider.v1.QueryConsumerChainStartProposalsResponse:
    type: object
    properties:
      proposals:
        type: object
        properties:
          pending:
            type: array
            items:
              type: object
              properties:
                title:
                  type: string
                  title: the title of the proposal
                description:
                  type: string
                  title: the description of the proposal
                chain_id:
                  type: string
                  description: >-
                    the proposed chain-id of the new consumer chain, must be
                    different from all other consumer chain ids of the executing

                    provider chain.
                initial_height:
                  description: >-
                    the proposed initial height of new consumer chain.

                    For a completely new chain, this will be {0,1}. However, it
                    may be different if this is a chain that is converting to a
                    consumer chain.
                  type: object
                  properties:
                    revision_number:
                      type: string
                      format: uint64
                      title: the revision that the client is currently on
                    revision_height:
                      type: string
                      format: uint64
                      title: the height within the given revision
                  title: >-
                    Height is a monotonically increasing data type

                    that can be compared against another Height for the purposes
                    of updating and

                    freezing clients
                genesis_hash:
                  type: string
                  format: byte
                  description: >-
                    The hash of the consumer chain genesis state without the
                    consumer CCV module genesis params. 

                    It is used for off-chain confirmation of genesis.json
                    validity by validators and other parties.
                binary_hash:
                  type: string
                  format: byte
                  description: >-
                    The hash of the consumer chain binary that should be run by
                    validators on chain initialization.

                    It is used for off-chain confirmation of binary validity by
                    validators and other parties.
                spawn_time:
                  type: string
                  format: date-time
                  description: >-
                    spawn time is the time on the provider chain at which the
                    consumer chain genesis is finalized and all validators

                    will be responsible for starting their consumer chain
                    validator node.
                unbonding_period:
                  type: string
                  description: >-
                    Unbonding period for the consumer,

                    which should be smaller than that of the provider in
                    general.
                ccv_timeout_period:
                  type: string
                  title: >-
                    Sent CCV related IBC packets will timeout after this
                    duration
                transfer_timeout_period:
                  type: string
                  title: >-
                    Sent transfer related IBC packets will timeout after this
                    duration
                consumer_redistribution_fraction:
                  type: string
                  description: >-
                    The fraction of tokens allocated to the consumer
                    redistribution address

                    during distribution events. The fraction is a string
                    representing a

                    decimal number. For example "0.75" would represent 75%.
                blocks_per_distribution_transmission:
                  type: string
                  format: int64
                  description: >-
                    BlocksPerDistributionTransmission is the number of blocks
                    between ibc-token-transfers from the consumer chain to the
                    provider chain.

                    On sending transmission event,
                    `consumer_redistribution_fraction` of the accumulated tokens
                    are sent to the consumer redistribution address.
                historical_entries:
                  type: string
                  format: int64
                  description: >-
                    The number of historical info entries to persist in store.

                    This param is a part of the cosmos sdk staking module. In
                    the case of 

                    a ccv enabled consumer chain, the ccv module acts as the
                    staking module.
              description: >-
                ConsumerAdditionProposal is a governance proposal on the
                provider chain to spawn a new consumer chain.

                If it passes, then all validators on the provider chain are
                expected to validate the consumer chain at spawn time

                or get slashed. It is recommended that spawn time occurs after
                the proposal end time.
            title: proposals waiting for spawn_time to pass
        description: >-
          ConsumerAdditionProposals holds pending governance proposals on the
          provider chain to spawn a new chain.
  interchain_security.ccv.provider.v1.QueryConsumerChainStopProposalsResponse:
    type: object
    properties:
      proposals:
        type: object
        properties:
          pending:
            type: array
            items:
              type: object
              properties:
                title:
                  type: string
                  title: the title of the proposal
                description:
                  type: string
                  title: the description of the proposal
                chain_id:
                  type: string
                  title: the chain-id of the consumer chain to be stopped
                stop_time:
                  type: string
                  format: date-time
                  title: >-
                    the time on the provider chain at which all validators are
                    responsible to stop their consumer chain validator node
              description: >-
                ConsumerRemovalProposal is a governance proposal on the provider
                chain to remove (and stop) a consumer chain.

                If it passes, all the consumer chain's state is removed from the
                provider chain. The outstanding unbonding

                operation funds are released.
            title: proposals waiting for stop_time to pass
        description: >-
          ConsumerRemovalProposals holds pending governance proposals on the
          provider chain to remove (and stop) a consumer chain.
  interchain_security.ccv.provider.v1.QueryConsumerChainsResponse:
    type: object
    properties:
      chains:
        type: array
        items:
          type: object
          properties:
            chain_id:
              type: string
            client_id:
              type: string
  interchain_security.ccv.provider.v1.QueryConsumerGenesisResponse:
    type: object
    properties:
      genesis_state:
        type: object
        properties:
          params:
            type: object
            properties:
              enabled:
                type: boolean
                title: >-
                  TODO: Remove enabled flag and find a better way to setup
                  integration tests

                  See: https://github.com/cosmos/interchain-security/issues/339
              blocks_per_distribution_transmission:
                type: string
                format: int64
                description: >-
                  /////////////////////

                  Distribution Params

                  Number of blocks between ibc-token-transfers from the consumer
                  chain to

                  the provider chain. Note that at this transmission event a
                  fraction of

                  the accumulated tokens are divided and sent consumer
                  redistribution

                  address.
              distribution_transmission_channel:
                type: string
                description: >-
                  Channel, and provider-chain receiving address to send
                  distribution token

                  transfers over. These parameters is auto-set during the
                  consumer <->

                  provider handshake procedure.
              provider_fee_pool_addr_str:
                type: string
              ccv_timeout_period:
                type: string
                title: Sent CCV related IBC packets will timeout after this duration
              transfer_timeout_period:
                type: string
                title: >-
                  Sent transfer related IBC packets will timeout after this
                  duration
              consumer_redistribution_fraction:
                type: string
                description: >-
                  The fraction of tokens allocated to the consumer
                  redistribution address

                  during distribution events. The fraction is a string
                  representing a

                  decimal number. For example "0.75" would represent 75%.
              historical_entries:
                type: string
                format: int64
                description: >-
                  The number of historical info entries to persist in store.

                  This param is a part of the cosmos sdk staking module. In the
                  case of 

                  a ccv enabled consumer chain, the ccv module acts as the
                  staking module.
              unbonding_period:
                type: string
                description: |-
                  Unbonding period for the consumer,
                  which should be smaller than that of the provider in general.
              soft_opt_out_threshold:
                type: string
                title: >-
                  The threshold for the percentage of validators at the bottom
                  of the set who

                  can opt out of running the consumer chain without being
                  punished. For example, a

                  value of 0.05 means that the validators in the bottom 5% of
                  the set can opt out
            title: Params defines the parameters for CCV consumer module
          provider_client_id:
            type: string
            description: empty for a new chain, filled in on restart.
          provider_channel_id:
            type: string
            description: empty for a new chain, filled in on restart.
          new_chain:
            type: boolean
            description: true for new chain GenesisState, false for chain restart.
          provider_client_state:
            description: ProviderClientState filled in on new chain, nil on restart.
            type: object
            properties:
              chain_id:
                type: string
              trust_level:
                type: object
                properties:
                  numerator:
                    type: string
                    format: uint64
                  denominator:
                    type: string
                    format: uint64
                description: >-
                  Fraction defines the protobuf message type for tmmath.Fraction
                  that only

                  supports positive values.
              trusting_period:
                type: string
                title: >-
                  duration of the period since the LastestTimestamp during which
                  the

                  submitted headers are valid for upgrade
              unbonding_period:
                type: string
                title: duration of the staking unbonding period
              max_clock_drift:
                type: string
                description: >-
                  defines how much new (untrusted) header's Time can drift into
                  the future.
              frozen_height:
                title: Block height when the client was frozen due to a misbehaviour
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
              latest_height:
                title: Latest height the client was updated to
                type: object
                properties:
                  revision_number:
                    type: string
                    format: uint64
                    title: the revision that the client is currently on
                  revision_height:
                    type: string
                    format: uint64
                    title: the height within the given revision
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
              proof_specs:
                type: array
                items:
                  type: object
                  properties:
                    leaf_spec:
                      title: >-
                        any field in the ExistenceProof must be the same as in
                        this spec.

                        except Prefix, which is just the first bytes of prefix
                        (spec can be longer)
                      type: object
                      properties:
                        hash:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                        prehash_key:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                        prehash_value:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                        length:
                          type: string
                          enum:
                            - NO_PREFIX
                            - VAR_PROTO
                            - VAR_RLP
                            - FIXED32_BIG
                            - FIXED32_LITTLE
                            - FIXED64_BIG
                            - FIXED64_LITTLE
                            - REQUIRE_32_BYTES
                            - REQUIRE_64_BYTES
                          default: NO_PREFIX
                          description: |-
                            - NO_PREFIX: NO_PREFIX don't include any length info
                             - VAR_PROTO: VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
                             - VAR_RLP: VAR_RLP uses rlp int encoding of the length
                             - FIXED32_BIG: FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
                             - FIXED32_LITTLE: FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
                             - FIXED64_BIG: FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
                             - FIXED64_LITTLE: FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
                             - REQUIRE_32_BYTES: REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
                             - REQUIRE_64_BYTES: REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
                          title: >-
                            *

                            LengthOp defines how to process the key and value of
                            the LeafOp

                            to include length information. After encoding the
                            length with the given

                            algorithm, the length will be prepended to the key
                            and value bytes.

                            (Each one with it's own encoded length)
                        prefix:
                          type: string
                          format: byte
                          description: >-
                            prefix is a fixed bytes that may optionally be
                            included at the beginning to differentiate

                            a leaf node from an inner node.
                      description: >-
                        *

                        LeafOp represents the raw key-value data we wish to
                        prove, and

                        must be flexible to represent the internal
                        transformation from

                        the original key-value pairs into the basis hash, for
                        many existing

                        merkle trees.


                        key and value are passed in. So that the signature of
                        this operation is:

                        leafOp(key, value) -> output


                        To process this, first prehash the keys and values if
                        needed (ANY means no hash in this case):

                        hkey = prehashKey(key)

                        hvalue = prehashValue(value)


                        Then combine the bytes, and hash it

                        output = hash(prefix || length(hkey) || hkey ||
                        length(hvalue) || hvalue)
                    inner_spec:
                      type: object
                      properties:
                        child_order:
                          type: array
                          items:
                            type: integer
                            format: int32
                          title: >-
                            Child order is the ordering of the children node,
                            must count from 0

                            iavl tree is [0, 1] (left then right)

                            merk is [0, 2, 1] (left, right, here)
                        child_size:
                          type: integer
                          format: int32
                        min_prefix_length:
                          type: integer
                          format: int32
                        max_prefix_length:
                          type: integer
                          format: int32
                        empty_child:
                          type: string
                          format: byte
                          title: >-
                            empty child is the prehash image that is used when
                            one child is nil (eg. 20 bytes of 0)
                        hash:
                          type: string
                          enum:
                            - NO_HASH
                            - SHA256
                            - SHA512
                            - KECCAK
                            - RIPEMD160
                            - BITCOIN
                            - SHA512_256
                          default: NO_HASH
                          title: >-
                            - NO_HASH: NO_HASH is the default if no data passed.
                            Note this is an illegal argument some places.
                             - BITCOIN: ripemd160(sha256(x))
                      description: >-
                        InnerSpec contains all store-specific structure info to
                        determine if two proofs from a

                        given store are neighbors.


                        This enables:


                        isLeftMost(spec: InnerSpec, op: InnerOp)

                        isRightMost(spec: InnerSpec, op: InnerOp)

                        isLeftNeighbor(spec: InnerSpec, left: InnerOp, right:
                        InnerOp)
                    max_depth:
                      type: integer
                      format: int32
                      title: >-
                        max_depth (if > 0) is the maximum number of InnerOps
                        allowed (mainly for fixed-depth tries)
                    min_depth:
                      type: integer
                      format: int32
                      title: >-
                        min_depth (if > 0) is the minimum number of InnerOps
                        allowed (mainly for fixed-depth tries)
                  description: >-
                    *

                    ProofSpec defines what the expected parameters are for a
                    given proof type.

                    This can be stored in the client and used to validate any
                    incoming proofs.


                    verify(ProofSpec, Proof) -> Proof | Error


                    As demonstrated in tests, if we don't fix the algorithm used
                    to calculate the

                    LeafHash for a given tree, there are many possible key-value
                    pairs that can

                    generate a given hash (by interpretting the preimage
                    differently).

                    We need this for proper security, requires client knows a
                    priori what

                    tree format server uses. But not in code, rather a
                    configuration object.
                title: Proof specifications used in verifying counterparty state
              upgrade_path:
                type: array
                items:
                  type: string
                title: >-
                  Path at which next upgraded client will be committed.

                  Each element corresponds to the key for a single
                  CommitmentProof in the

                  chained proof. NOTE: ClientState must stored under

                  `{upgradePath}/{upgradeHeight}/clientState` ConsensusState
                  must be stored

                  under `{upgradepath}/{upgradeHeight}/consensusState` For SDK
                  chains using

                  the default upgrade module, upgrade_path should be
                  []string{"upgrade",

                  "upgradedIBCState"}`
              allow_update_after_expiry:
                type: boolean
                title: >-
                  This flag, when set to true, will allow governance to recover
                  a client

                  which has expired
              allow_update_after_misbehaviour:
                type: boolean
                title: >-
                  This flag, when set to true, will allow governance to unfreeze
                  a client

                  whose chain has experienced a misbehaviour event
          provider_consensus_state:
            description: ProviderConsensusState filled in on new chain, nil on restart.
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
                description: >-
                  timestamp that corresponds to the block height in which the
                  ConsensusState

                  was stored.
              root:
                title: commitment root (i.e app hash)
                type: object
                properties:
                  hash:
                    type: string
                    format: byte
                description: >-
                  MerkleRoot defines a merkle root hash.

                  In the Cosmos SDK, the AppHash of a block header becomes the
                  root.
              next_validators_hash:
                type: string
                format: byte
          maturing_packets:
            type: array
            items:
              type: object
              properties:
                vscId:
                  type: string
                  format: uint64
                maturity_time:
                  type: string
                  format: date-time
              title: >-
                MaturingVSCPacket contains the maturing time of a received
                VSCPacket
            description: MaturingPackets nil on new chain, filled in on restart.
          initial_val_set:
            type: array
            items:
              type: object
              properties:
                pub_key:
                  type: object
                  properties:
                    ed25519:
                      type: string
                      format: byte
                    secp256k1:
                      type: string
                      format: byte
                  title: >-
                    PublicKey defines the keys available for use with Tendermint
                    Validators
                power:
                  type: string
                  format: int64
              title: ValidatorUpdate
            description: InitialValset filled in on new chain and on restart.
          height_to_valset_update_id:
            type: array
            items:
              type: object
              properties:
                height:
                  type: string
                  format: uint64
                valset_update_id:
                  type: string
                  format: uint64
              title: >-
                HeightValsetUpdateID defines the genesis information for the
                mapping 

                of each block height to a valset update id
            description: HeightToValsetUpdateId nil on new chain, filled in on restart.
          outstanding_downtime_slashing:
            type: array
            items:
              type: object
              properties:
                validator_consensus_address:
                  type: string
              description: >-
                OutstandingDowntime defines the genesis information for each
                validator

                flagged with an outstanding downtime slashing.
            description: OutstandingDowntimes nil on new chain, filled  in on restart.
          pending_consumer_packets:
            description: PendingConsumerPackets nil on new chain, filled in on restart.
            type: object
            properties:
              list:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - CONSUMER_PACKET_TYPE_UNSPECIFIED
                        - CONSUMER_PACKET_TYPE_SLASH
                        - CONSUMER_PACKET_TYPE_VSCM
                      default: CONSUMER_PACKET_TYPE_UNSPECIFIED
                      description: >-
                        ConsumerPacketType indicates interchain security
                        specific packet types.

                         - CONSUMER_PACKET_TYPE_UNSPECIFIED: UNSPECIFIED packet type
                         - CONSUMER_PACKET_TYPE_SLASH: Slash packet
                         - CONSUMER_PACKET_TYPE_VSCM: VSCMatured packet
                    slashPacketData:
                      type: object
                      properties:
                        validator:
                          type: object
                          properties:
                            address:
                              type: string
                              format: byte
                              title: The first 20 bytes of SHA256(public key)
                            power:
                              type: string
                              format: int64
                              description: The voting power
                              title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
                          title: Validator
                        valset_update_id:
                          type: string
                          format: uint64
                          title: map to the infraction block height on the provider
                        infraction:
                          title: >-
                            tell if the slashing is for a downtime or a
                            double-signing infraction
                          type: string
                          enum:
                            - INFRACTION_TYPE_UNSPECIFIED
                            - INFRACTION_TYPE_DOUBLE_SIGN
                            - INFRACTION_TYPE_DOWNTIME
                          default: INFRACTION_TYPE_UNSPECIFIED
                          description: >-
                            InfractionType indicates the infraction type a
                            validator commited.

                             - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                             - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                             - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
                      description: >-
                        This packet is sent from the consumer chain to the
                        provider chain

                        to request the slashing of a validator as a result of an
                        infraction

                        committed on the consumer chain.
                    vscMaturedPacketData:
                      type: object
                      properties:
                        valset_update_id:
                          type: string
                          format: uint64
                          title: the id of the VSC packet that reached maturity
                      description: >-
                        This packet is sent from the consumer chain to the
                        provider chain

                        to notify that a VSC packet reached maturity on the
                        consumer chain.
                  title: >-
                    ConsumerPacketData contains a consumer packet data and a
                    type tag
          last_transmission_block_height:
            description: >-
              LastTransmissionBlockHeight nil on new chain, filled in on
              restart.
            type: object
            properties:
              height:
                type: string
                format: int64
            title: |-
              LastTransmissionBlockHeight is the last time validator holding
              pools were transmitted to the provider chain
          preCCV:
            type: boolean
            title: >-
              flag indicating whether the consumer CCV module starts in pre-CCV
              state
        title: GenesisState defines the CCV consumer chain genesis state
  interchain_security.ccv.provider.v1.QueryThrottleStateResponse:
    type: object
    properties:
      slash_meter:
        type: string
        format: int64
        title: current slash_meter state
      slash_meter_allowance:
        type: string
        format: int64
        description: >-
          allowance of voting power units (int) that the slash meter is given
          per replenish period

          this also serves as the max value for the meter.
      next_replenish_candidate:
        type: string
        format: date-time
        title: >-
          next time the slash meter could potentially be replenished, iff it's
          not full
      packets:
        type: array
        items:
          type: object
          properties:
            global_entry:
              type: object
              properties:
                recv_time:
                  type: string
                  format: date-time
                  description: |-
                    Block time that slash packet was received by provider chain.
                    This field is used for store key iteration ordering.
                consumer_chain_id:
                  type: string
                  description: The consumer that sent a slash packet.
                ibc_seq_num:
                  type: string
                  format: uint64
                  description: |-
                    The IBC sequence number of the recv packet.  
                    This field is used in the store key to ensure uniqueness.
                provider_val_cons_addr:
                  description: >-
                    The provider's consensus address of the validator being
                    slashed. 

                    This field is used to obtain validator power in
                    HandleThrottleQueues.


                    This field is not used in the store key, but is persisted in
                    value bytes, see QueueGlobalSlashEntry.
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                  title: A validator's consensus address on the provider chain
              description: >-
                A persisted queue entry indicating that a slash packet data
                instance needs to be handled.

                This type belongs in the "global" queue, to coordinate slash
                packet handling times between consumers.
            data:
              type: object
              properties:
                validator:
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                      title: The first 20 bytes of SHA256(public key)
                    power:
                      type: string
                      format: int64
                      description: The voting power
                      title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
                  title: Validator
                valset_update_id:
                  type: string
                  format: uint64
                  title: map to the infraction block height on the provider
                infraction:
                  title: >-
                    tell if the slashing is for a downtime or a double-signing
                    infraction
                  type: string
                  enum:
                    - INFRACTION_TYPE_UNSPECIFIED
                    - INFRACTION_TYPE_DOUBLE_SIGN
                    - INFRACTION_TYPE_DOWNTIME
                  default: INFRACTION_TYPE_UNSPECIFIED
                  description: >-
                    InfractionType indicates the infraction type a validator
                    commited.

                     - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                     - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                     - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
              description: >-
                This packet is sent from the consumer chain to the provider
                chain

                to request the slashing of a validator as a result of an
                infraction

                committed on the consumer chain.
          description: >-
            A query wrapper type for the global entry and data relevant to a
            throttled slash packet.
        title: data relevant to currently throttled slash packets
  interchain_security.ccv.provider.v1.QueryThrottledConsumerPacketDataResponse:
    type: object
    properties:
      chain_id:
        type: string
      size:
        type: string
        format: uint64
      packetDataInstances:
        type: array
        items:
          type: object
          properties:
            slash_packet:
              type: object
              properties:
                validator:
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                      title: The first 20 bytes of SHA256(public key)
                    power:
                      type: string
                      format: int64
                      description: The voting power
                      title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
                  title: Validator
                valset_update_id:
                  type: string
                  format: uint64
                  title: map to the infraction block height on the provider
                infraction:
                  title: >-
                    tell if the slashing is for a downtime or a double-signing
                    infraction
                  type: string
                  enum:
                    - INFRACTION_TYPE_UNSPECIFIED
                    - INFRACTION_TYPE_DOUBLE_SIGN
                    - INFRACTION_TYPE_DOWNTIME
                  default: INFRACTION_TYPE_UNSPECIFIED
                  description: >-
                    InfractionType indicates the infraction type a validator
                    commited.

                     - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                     - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                     - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
              description: >-
                This packet is sent from the consumer chain to the provider
                chain

                to request the slashing of a validator as a result of an
                infraction

                committed on the consumer chain.
            vsc_matured_packet:
              type: object
              properties:
                valset_update_id:
                  type: string
                  format: uint64
                  title: the id of the VSC packet that reached maturity
              description: >-
                This packet is sent from the consumer chain to the provider
                chain

                to notify that a VSC packet reached maturity on the consumer
                chain.
          title: >-
            ThrottledPacketDataWrapper contains either SlashPacketData or
            VSCMaturedPacketData
  interchain_security.ccv.provider.v1.QueryValidatorConsumerAddrResponse:
    type: object
    properties:
      consumer_address:
        type: string
        title: The address of the validator on the consumer chain
  interchain_security.ccv.provider.v1.QueryValidatorProviderAddrResponse:
    type: object
    properties:
      provider_address:
        type: string
        title: The address of the validator on the provider chain
  interchain_security.ccv.provider.v1.ThrottledPacketDataWrapper:
    type: object
    properties:
      slash_packet:
        type: object
        properties:
          validator:
            type: object
            properties:
              address:
                type: string
                format: byte
                title: The first 20 bytes of SHA256(public key)
              power:
                type: string
                format: int64
                description: The voting power
                title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
            title: Validator
          valset_update_id:
            type: string
            format: uint64
            title: map to the infraction block height on the provider
          infraction:
            title: >-
              tell if the slashing is for a downtime or a double-signing
              infraction
            type: string
            enum:
              - INFRACTION_TYPE_UNSPECIFIED
              - INFRACTION_TYPE_DOUBLE_SIGN
              - INFRACTION_TYPE_DOWNTIME
            default: INFRACTION_TYPE_UNSPECIFIED
            description: |-
              InfractionType indicates the infraction type a validator commited.

               - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
               - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
               - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
        description: |-
          This packet is sent from the consumer chain to the provider chain
          to request the slashing of a validator as a result of an infraction
          committed on the consumer chain.
      vsc_matured_packet:
        type: object
        properties:
          valset_update_id:
            type: string
            format: uint64
            title: the id of the VSC packet that reached maturity
        description: |-
          This packet is sent from the consumer chain to the provider chain
          to notify that a VSC packet reached maturity on the consumer chain.
    title: >-
      ThrottledPacketDataWrapper contains either SlashPacketData or
      VSCMaturedPacketData
  interchain_security.ccv.provider.v1.ThrottledSlashPacket:
    type: object
    properties:
      global_entry:
        type: object
        properties:
          recv_time:
            type: string
            format: date-time
            description: |-
              Block time that slash packet was received by provider chain.
              This field is used for store key iteration ordering.
          consumer_chain_id:
            type: string
            description: The consumer that sent a slash packet.
          ibc_seq_num:
            type: string
            format: uint64
            description: |-
              The IBC sequence number of the recv packet.  
              This field is used in the store key to ensure uniqueness.
          provider_val_cons_addr:
            description: >-
              The provider's consensus address of the validator being slashed. 

              This field is used to obtain validator power in
              HandleThrottleQueues.


              This field is not used in the store key, but is persisted in value
              bytes, see QueueGlobalSlashEntry.
            type: object
            properties:
              address:
                type: string
                format: byte
            title: A validator's consensus address on the provider chain
        description: >-
          A persisted queue entry indicating that a slash packet data instance
          needs to be handled.

          This type belongs in the "global" queue, to coordinate slash packet
          handling times between consumers.
      data:
        type: object
        properties:
          validator:
            type: object
            properties:
              address:
                type: string
                format: byte
                title: The first 20 bytes of SHA256(public key)
              power:
                type: string
                format: int64
                description: The voting power
                title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
            title: Validator
          valset_update_id:
            type: string
            format: uint64
            title: map to the infraction block height on the provider
          infraction:
            title: >-
              tell if the slashing is for a downtime or a double-signing
              infraction
            type: string
            enum:
              - INFRACTION_TYPE_UNSPECIFIED
              - INFRACTION_TYPE_DOUBLE_SIGN
              - INFRACTION_TYPE_DOWNTIME
            default: INFRACTION_TYPE_UNSPECIFIED
            description: |-
              InfractionType indicates the infraction type a validator commited.

               - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
               - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
               - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
        description: |-
          This packet is sent from the consumer chain to the provider chain
          to request the slashing of a validator as a result of an infraction
          committed on the consumer chain.
    description: >-
      A query wrapper type for the global entry and data relevant to a throttled
      slash packet.
  interchain_security.ccv.v1.ConsumerPacketData:
    type: object
    properties:
      type:
        type: string
        enum:
          - CONSUMER_PACKET_TYPE_UNSPECIFIED
          - CONSUMER_PACKET_TYPE_SLASH
          - CONSUMER_PACKET_TYPE_VSCM
        default: CONSUMER_PACKET_TYPE_UNSPECIFIED
        description: >-
          ConsumerPacketType indicates interchain security specific packet
          types.

           - CONSUMER_PACKET_TYPE_UNSPECIFIED: UNSPECIFIED packet type
           - CONSUMER_PACKET_TYPE_SLASH: Slash packet
           - CONSUMER_PACKET_TYPE_VSCM: VSCMatured packet
      slashPacketData:
        type: object
        properties:
          validator:
            type: object
            properties:
              address:
                type: string
                format: byte
                title: The first 20 bytes of SHA256(public key)
              power:
                type: string
                format: int64
                description: The voting power
                title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
            title: Validator
          valset_update_id:
            type: string
            format: uint64
            title: map to the infraction block height on the provider
          infraction:
            title: >-
              tell if the slashing is for a downtime or a double-signing
              infraction
            type: string
            enum:
              - INFRACTION_TYPE_UNSPECIFIED
              - INFRACTION_TYPE_DOUBLE_SIGN
              - INFRACTION_TYPE_DOWNTIME
            default: INFRACTION_TYPE_UNSPECIFIED
            description: |-
              InfractionType indicates the infraction type a validator commited.

               - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
               - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
               - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
        description: |-
          This packet is sent from the consumer chain to the provider chain
          to request the slashing of a validator as a result of an infraction
          committed on the consumer chain.
      vscMaturedPacketData:
        type: object
        properties:
          valset_update_id:
            type: string
            format: uint64
            title: the id of the VSC packet that reached maturity
        description: |-
          This packet is sent from the consumer chain to the provider chain
          to notify that a VSC packet reached maturity on the consumer chain.
    title: ConsumerPacketData contains a consumer packet data and a type tag
  interchain_security.ccv.v1.ConsumerPacketDataList:
    type: object
    properties:
      list:
        type: array
        items:
          type: object
          properties:
            type:
              type: string
              enum:
                - CONSUMER_PACKET_TYPE_UNSPECIFIED
                - CONSUMER_PACKET_TYPE_SLASH
                - CONSUMER_PACKET_TYPE_VSCM
              default: CONSUMER_PACKET_TYPE_UNSPECIFIED
              description: >-
                ConsumerPacketType indicates interchain security specific packet
                types.

                 - CONSUMER_PACKET_TYPE_UNSPECIFIED: UNSPECIFIED packet type
                 - CONSUMER_PACKET_TYPE_SLASH: Slash packet
                 - CONSUMER_PACKET_TYPE_VSCM: VSCMatured packet
            slashPacketData:
              type: object
              properties:
                validator:
                  type: object
                  properties:
                    address:
                      type: string
                      format: byte
                      title: The first 20 bytes of SHA256(public key)
                    power:
                      type: string
                      format: int64
                      description: The voting power
                      title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
                  title: Validator
                valset_update_id:
                  type: string
                  format: uint64
                  title: map to the infraction block height on the provider
                infraction:
                  title: >-
                    tell if the slashing is for a downtime or a double-signing
                    infraction
                  type: string
                  enum:
                    - INFRACTION_TYPE_UNSPECIFIED
                    - INFRACTION_TYPE_DOUBLE_SIGN
                    - INFRACTION_TYPE_DOWNTIME
                  default: INFRACTION_TYPE_UNSPECIFIED
                  description: >-
                    InfractionType indicates the infraction type a validator
                    commited.

                     - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
                     - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
                     - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
              description: >-
                This packet is sent from the consumer chain to the provider
                chain

                to request the slashing of a validator as a result of an
                infraction

                committed on the consumer chain.
            vscMaturedPacketData:
              type: object
              properties:
                valset_update_id:
                  type: string
                  format: uint64
                  title: the id of the VSC packet that reached maturity
              description: >-
                This packet is sent from the consumer chain to the provider
                chain

                to notify that a VSC packet reached maturity on the consumer
                chain.
          title: ConsumerPacketData contains a consumer packet data and a type tag
    description: ConsumerPacketDataList is a list of consumer packet data packets.
  interchain_security.ccv.v1.ConsumerPacketDataType:
    type: string
    enum:
      - CONSUMER_PACKET_TYPE_UNSPECIFIED
      - CONSUMER_PACKET_TYPE_SLASH
      - CONSUMER_PACKET_TYPE_VSCM
    default: CONSUMER_PACKET_TYPE_UNSPECIFIED
    description: |-
      ConsumerPacketType indicates interchain security specific packet types.

       - CONSUMER_PACKET_TYPE_UNSPECIFIED: UNSPECIFIED packet type
       - CONSUMER_PACKET_TYPE_SLASH: Slash packet
       - CONSUMER_PACKET_TYPE_VSCM: VSCMatured packet
  interchain_security.ccv.v1.SlashPacketData:
    type: object
    properties:
      validator:
        type: object
        properties:
          address:
            type: string
            format: byte
            title: The first 20 bytes of SHA256(public key)
          power:
            type: string
            format: int64
            description: The voting power
            title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
        title: Validator
      valset_update_id:
        type: string
        format: uint64
        title: map to the infraction block height on the provider
      infraction:
        title: tell if the slashing is for a downtime or a double-signing infraction
        type: string
        enum:
          - INFRACTION_TYPE_UNSPECIFIED
          - INFRACTION_TYPE_DOUBLE_SIGN
          - INFRACTION_TYPE_DOWNTIME
        default: INFRACTION_TYPE_UNSPECIFIED
        description: |-
          InfractionType indicates the infraction type a validator commited.

           - INFRACTION_TYPE_UNSPECIFIED: UNSPECIFIED defines an empty infraction type.
           - INFRACTION_TYPE_DOUBLE_SIGN: DOUBLE_SIGN defines a validator that double-signs a block.
           - INFRACTION_TYPE_DOWNTIME: DOWNTIME defines a validator that missed signing too many blocks.
    description: |-
      This packet is sent from the consumer chain to the provider chain
      to request the slashing of a validator as a result of an infraction
      committed on the consumer chain.
  interchain_security.ccv.v1.VSCMaturedPacketData:
    type: object
    properties:
      valset_update_id:
        type: string
        format: uint64
        title: the id of the VSC packet that reached maturity
    description: |-
      This packet is sent from the consumer chain to the provider chain
      to notify that a VSC packet reached maturity on the consumer chain.
  tendermint.abci.Validator:
    type: object
    properties:
      address:
        type: string
        format: byte
        title: The first 20 bytes of SHA256(public key)
      power:
        type: string
        format: int64
        description: The voting power
        title: PubKey pub_key = 2 [(gogoproto.nullable)=false];
    title: Validator
  tendermint.abci.ValidatorUpdate:
    type: object
    properties:
      pub_key:
        type: object
        properties:
          ed25519:
            type: string
            format: byte
          secp256k1:
            type: string
            format: byte
        title: >-
          PublicKey defines the keys available for use with Tendermint
          Validators
      power:
        type: string
        format: int64
    title: ValidatorUpdate
  jim380.re.fix.AccountRegistration:
    type: object
    properties:
      address:
        type: string
      companyName:
        type: string
      website:
        type: string
      socialMediaLinks:
        type: string
      createdAt:
        type: string
  jim380.re.fix.Header:
    type: object
    properties:
      beginString:
        type: string
        description: |-
          This field specifies the version of the FIX protocol being used. For
          example, "FIX.4.4" indicates version 4.4 of the protocol.
      bodyLength:
        type: string
        format: int64
        description: This field specifies the length of the message body in bytes.
      msgType:
        type: string
        title: |-
          This field identifies the type of message being sent. For example, "D"
          indicates a New Order Single message
      senderCompID:
        type: string
        title: >-
          This field identifies the sender of the message. This is typically a
          unique

          identifier assigned to each party that uses the FIX protocol
      targetCompID:
        type: string
        description: This field identifies the recipient of the message.
      msgSeqNum:
        type: string
        format: int64
        title: |-
          Is a field in the FIX protocol message header that is used to assign a
          unique sequence number to each message
      sendingTime:
        type: string
        title: This field specifies the time that the message was sent
    title: >-
      This message header contains fields that identify the message being sent
      and

      its sender and recipient
  jim380.re.fix.LogonAcceptor:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      encryptMethod:
        type: string
        format: int64
        title: |-
          An integer value indicating the encryption method to be used for the
          session
      heartBtInt:
        type: string
        format: int64
        title: >-
          An integer value indicating the number of seconds between heartbeats
          that

          will be sent during the session. This is used to monitor the
          connection

          between the two parties
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
    title: |-
      This message is used by the acceptor of a FIX session to acknowledge the
      initiation of the connection by the initiator
  jim380.re.fix.LogonInitiator:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      encryptMethod:
        type: string
        format: int64
        title: |-
          An integer value indicating the encryption method to be used for the
          session
      heartBtInt:
        type: string
        format: int64
        title: >-
          An integer value indicating the number of seconds between heartbeats
          that

          will be sent during the session. This is used to monitor the
          connection

          between the two parties
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
    title: |-
      This message is used by the initiator of a FIX session to initiate a
      connection with the acceptor
  jim380.re.fix.MDEntry:
    type: object
    properties:
      mdUpdateAction:
        type: string
        format: int64
        description: |-
          The type of update action that is being reported for the MDEntry.
          Possible values are "0" for new, "1" for change, and "2" for delete.
      mdEntryType:
        type: string
        format: int64
        title: 'The side of a quote: 0 — bid , 1 — ask'
      mdEntryPx:
        type: string
        title: The price for a market data entry
      mdEntrySize:
        type: string
        description: The quantity (tradeable volume) of a market data entry.
    title: Market Data Entry message
  jim380.re.fix.MarketData:
    type: object
    properties:
      sessionID:
        type: string
      marketDataRequest:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          mdReqID:
            type: string
            title: >-
              MDReqID field provides a unique identifier for the market data
              request

              message
          subscriptionRequestType:
            type: string
            format: int64
            description: >-
              subscriptionRequestType field corresponds to the FIX tag 263, and
              the

              values 0 and 1 respectively indicate snapshot and snapshot +
              incremental

              updates.
          marketDepth:
            type: string
            format: int64
            title: >-
              MarketDepth field is used to indicate the level of market data
              depth that

              is being requested. Specifically, it specifies how many levels of
              the order

              book should be included in the response to the request
          mdUpdateType:
            type: string
            format: int64
            title: >-
              The mdUpdateType field specifies the type of updates that the
              sender wants

              to receive in response to their request for market data. The
              possible

              values are "0" for full refresh, "1" for incremental refresh, and
              "2" for

              removing a single price level
          noRelatedSym:
            type: string
            format: int64
            title: >-
              The NoRelatedSym field in a Market Data Request message is used to
              indicate

              the number of symbols or instruments for which the market data is
              being

              requested
          symbol:
            type: string
            title: >-
              In the context of a Market Data Request message in the FIX
              protocol, the

              Symbol field refers to the security or financial instrument for
              which

              market data is being requested
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        title: Market Data Request message
      marketDataSnapShotFullRefresh:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          mdReqID:
            type: string
            title: >-
              The identifier of an originating market data request (corresponds
              to the

              MDReqID field specified in the Market Data Request message)
          symbol:
            type: string
            title: The ticker symbol that is being quoted (such as BTC/USDT)
          noMDEntries:
            type: string
            format: int64
            title: >-
              The number of market data entries (bids or offers) listed in a
              request
          mdEntries:
            type: array
            items:
              type: object
              properties:
                mdUpdateAction:
                  type: string
                  format: int64
                  description: >-
                    The type of update action that is being reported for the
                    MDEntry.

                    Possible values are "0" for new, "1" for change, and "2" for
                    delete.
                mdEntryType:
                  type: string
                  format: int64
                  title: 'The side of a quote: 0 — bid , 1 — ask'
                mdEntryPx:
                  type: string
                  title: The price for a market data entry
                mdEntrySize:
                  type: string
                  description: The quantity (tradeable volume) of a market data entry.
              title: Market Data Entry message
            title: The repeated group of MDEntry fields that provide multiple entries
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        title: Market Data Snapshot/Full Refresh message
      marketDataIncremental:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          mdReqID:
            type: string
            title: >-
              The identifier of an originating market data request (corresponds
              to the

              MDReqID field specified in the Market Data Request message)
          NoMDEntries:
            type: string
            format: int64
            title: >-
              The number of market data entries (bids or offers) listed in a
              request
          mdEntries:
            type: array
            items:
              type: object
              properties:
                mdUpdateAction:
                  type: string
                  format: int64
                  description: >-
                    The type of update action that is being reported for the
                    MDEntry.

                    Possible values are "0" for new, "1" for change, and "2" for
                    delete.
                mdEntryType:
                  type: string
                  format: int64
                  title: 'The side of a quote: 0 — bid , 1 — ask'
                mdEntryPx:
                  type: string
                  title: The price for a market data entry
                mdEntrySize:
                  type: string
                  description: The quantity (tradeable volume) of a market data entry.
              title: Market Data Entry message
            description: >-
              The repeated group of MDEntry fields that provide the incremental
              updates

              for the market data.
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        title: Market Data Incremental message
      marketDataRequestReject:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          mdReqID:
            type: string
            title: The identifier of a Market Data Request that has been rejected
          mdReqRejReason:
            type: string
            format: int64
            title: Indicates the reason why a request has been rejected
          text:
            type: string
            title: >-
              The detailed information (if available) on why a request has been
              rejected
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        title: Market Data Request Reject message
  jim380.re.fix.MarketDataIncremental:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      mdReqID:
        type: string
        title: >-
          The identifier of an originating market data request (corresponds to
          the

          MDReqID field specified in the Market Data Request message)
      NoMDEntries:
        type: string
        format: int64
        title: The number of market data entries (bids or offers) listed in a request
      mdEntries:
        type: array
        items:
          type: object
          properties:
            mdUpdateAction:
              type: string
              format: int64
              description: >-
                The type of update action that is being reported for the
                MDEntry.

                Possible values are "0" for new, "1" for change, and "2" for
                delete.
            mdEntryType:
              type: string
              format: int64
              title: 'The side of a quote: 0 — bid , 1 — ask'
            mdEntryPx:
              type: string
              title: The price for a market data entry
            mdEntrySize:
              type: string
              description: The quantity (tradeable volume) of a market data entry.
          title: Market Data Entry message
        description: >-
          The repeated group of MDEntry fields that provide the incremental
          updates

          for the market data.
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    title: Market Data Incremental message
  jim380.re.fix.MarketDataRequest:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      mdReqID:
        type: string
        title: |-
          MDReqID field provides a unique identifier for the market data request
          message
      subscriptionRequestType:
        type: string
        format: int64
        description: >-
          subscriptionRequestType field corresponds to the FIX tag 263, and the

          values 0 and 1 respectively indicate snapshot and snapshot +
          incremental

          updates.
      marketDepth:
        type: string
        format: int64
        title: >-
          MarketDepth field is used to indicate the level of market data depth
          that

          is being requested. Specifically, it specifies how many levels of the
          order

          book should be included in the response to the request
      mdUpdateType:
        type: string
        format: int64
        title: >-
          The mdUpdateType field specifies the type of updates that the sender
          wants

          to receive in response to their request for market data. The possible

          values are "0" for full refresh, "1" for incremental refresh, and "2"
          for

          removing a single price level
      noRelatedSym:
        type: string
        format: int64
        title: >-
          The NoRelatedSym field in a Market Data Request message is used to
          indicate

          the number of symbols or instruments for which the market data is
          being

          requested
      symbol:
        type: string
        title: >-
          In the context of a Market Data Request message in the FIX protocol,
          the

          Symbol field refers to the security or financial instrument for which

          market data is being requested
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    title: Market Data Request message
  jim380.re.fix.MarketDataRequestReject:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      mdReqID:
        type: string
        title: The identifier of a Market Data Request that has been rejected
      mdReqRejReason:
        type: string
        format: int64
        title: Indicates the reason why a request has been rejected
      text:
        type: string
        title: >-
          The detailed information (if available) on why a request has been
          rejected
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    title: Market Data Request Reject message
  jim380.re.fix.MarketDataSnapShotFullRefresh:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      mdReqID:
        type: string
        title: >-
          The identifier of an originating market data request (corresponds to
          the

          MDReqID field specified in the Market Data Request message)
      symbol:
        type: string
        title: The ticker symbol that is being quoted (such as BTC/USDT)
      noMDEntries:
        type: string
        format: int64
        title: The number of market data entries (bids or offers) listed in a request
      mdEntries:
        type: array
        items:
          type: object
          properties:
            mdUpdateAction:
              type: string
              format: int64
              description: >-
                The type of update action that is being reported for the
                MDEntry.

                Possible values are "0" for new, "1" for change, and "2" for
                delete.
            mdEntryType:
              type: string
              format: int64
              title: 'The side of a quote: 0 — bid , 1 — ask'
            mdEntryPx:
              type: string
              title: The price for a market data entry
            mdEntrySize:
              type: string
              description: The quantity (tradeable volume) of a market data entry.
          title: Market Data Entry message
        title: The repeated group of MDEntry fields that provide multiple entries
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    title: Market Data Snapshot/Full Refresh message
  jim380.re.fix.MsgDeleteAccountResponse:
    type: object
  jim380.re.fix.MsgLogonAcceptorResponse:
    type: object
  jim380.re.fix.MsgLogonInitiatorResponse:
    type: object
  jim380.re.fix.MsgLogonRejectResponse:
    type: object
  jim380.re.fix.MsgLogoutAcceptorResponse:
    type: object
  jim380.re.fix.MsgLogoutInitiatorResponse:
    type: object
  jim380.re.fix.MsgMarketDataIncrementalResponse:
    type: object
  jim380.re.fix.MsgMarketDataRequestRejectResponse:
    type: object
  jim380.re.fix.MsgMarketDataRequestResponse:
    type: object
  jim380.re.fix.MsgMarketDataSnapshotFullRefreshResponse:
    type: object
  jim380.re.fix.MsgNewOrderSingleResponse:
    type: object
  jim380.re.fix.MsgOrderCancelRejectResponse:
    type: object
  jim380.re.fix.MsgOrderCancelRequestResponse:
    type: object
  jim380.re.fix.MsgOrderExecutionReportResponse:
    type: object
  jim380.re.fix.MsgOrderMassStatusReportResponse:
    type: object
  jim380.re.fix.MsgOrderMassStatusRequestRejectResponse:
    type: object
  jim380.re.fix.MsgOrderMassStatusRequestResponse:
    type: object
  jim380.re.fix.MsgQuoteAcknowledgementResponse:
    type: object
  jim380.re.fix.MsgQuoteRequestRejectResponse:
    type: object
  jim380.re.fix.MsgQuoteRequestResponse:
    type: object
  jim380.re.fix.MsgRegisterAccountResponse:
    type: object
  jim380.re.fix.MsgSecurityDefinitionRequestRejectResponse:
    type: object
  jim380.re.fix.MsgSecurityDefinitionRequestResponse:
    type: object
  jim380.re.fix.MsgSecurityDefinitionResponse:
    type: object
  jim380.re.fix.MsgSecurityListRequestRejectResponse:
    type: object
  jim380.re.fix.MsgSecurityListRequestResponse:
    type: object
  jim380.re.fix.MsgSecurityListResponseResponse:
    type: object
  jim380.re.fix.MsgSecurityStatusRequestRejectResponse:
    type: object
  jim380.re.fix.MsgSecurityStatusRequestResponse:
    type: object
  jim380.re.fix.MsgSecurityStatusResponseResponse:
    type: object
  jim380.re.fix.MsgSecurityTypesRequestRejectResponse:
    type: object
  jim380.re.fix.MsgSecurityTypesRequestResponse:
    type: object
  jim380.re.fix.MsgSecurityTypesResponseResponse:
    type: object
  jim380.re.fix.MsgTerminateLogonResponse:
    type: object
  jim380.re.fix.MsgTradeCaptureReportAcknowledgementResponse:
    type: object
  jim380.re.fix.MsgTradeCaptureReportRejectionResponse:
    type: object
  jim380.re.fix.MsgTradeCaptureReportResponse:
    type: object
  jim380.re.fix.MsgTradingSessionListRequestRejectResponse:
    type: object
  jim380.re.fix.MsgTradingSessionListRequestResponse:
    type: object
  jim380.re.fix.MsgTradingSessionListResponseResponse:
    type: object
  jim380.re.fix.MsgTradingSessionStatusRequestRejectResponse:
    type: object
  jim380.re.fix.MsgTradingSessionStatusRequestResponse:
    type: object
  jim380.re.fix.MsgTradingSessionStatusResponse:
    type: object
  jim380.re.fix.MsgUpdateAccountResponse:
    type: object
  jim380.re.fix.OrderMassStatus:
    type: object
    properties:
      sessionID:
        type: string
      orderMassStatusRequest:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          massStatusReqID:
            type: string
            description: (586) The unique identifier for the status request.
          massStatusReqType:
            type: string
            description: >-
              (585) The type of status request. Valid values are "All" to
              request the

              status of all orders in the group, or "Partial" to request the
              status of a

              subset of orders in the group.
          clOrdID:
            type: string
            description: (49) The unique identifier for the group of orders.
          account:
            type: string
            description: (1) The account that the orders belong to.
          symbol:
            type: string
            description: (55) The symbol of the security that the orders are for.
          securityID:
            type: string
            description: >-
              (48) The security identifier of the security that the orders are
              for.
          tradingSessionID:
            type: string
            description: (336) The trading session that the orders are for.
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        description: Order Mass Status Request with fields, tags and descriptions.
      orderMassStatusReport:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          clOrdID:
            type: string
            description: (49) The unique identifier for the order.
          massStatusReqID:
            type: string
            description: (585) The unique identifier for the status request.
          account:
            type: string
            description: (1) The account that the order belongs to.
          symbol:
            type: string
            description: (55) The symbol of the security that the order is for.
          securityID:
            type: string
            description: >-
              (48) The security identifier of the security that the order is
              for.
          tradingSessionID:
            type: string
            description: (336) The trading session that the order is for.
          ordStatus:
            type: string
            description: |-
              (39)  The status of the order. Valid values are "New", "Pending",
              "PartiallyFilled", "Filled", "Cancelled", and "Expired".
          execType:
            type: string
            description: >-
              (150) The type of execution report. Valid values are "New",
              "Replace",

              "Cancel", and "Status".
          ordQty:
            type: string
            description: (38) The quantity of the order that has been executed.
          lastPx:
            type: string
            description: (31) The last price at which the order was executed.
          cumQty:
            type: string
            description: (44) The total quantity of the order that has been executed.
          avgPx:
            type: string
            description: (69) The average price at which the order has been executed.
          leavesQty:
            type: string
            description: (11) The quantity of the order that remains to be executed.
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        description: Order Mass Status Report with fields, tags and descriptions.
      OrderMassStatusRequestReject:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          refSeqID:
            type: string
            description: >-
              (34) The unique identifier for the rejected message.

              the RefSeqID field in the Order Mass Status Request Reject (AR)
              message

              will contain the same value as the MassStatusReqID field in the
              original

              Order Mass Status Request (AF) message.
          rejCode:
            type: string
            title: |-
              (587) The reason for the rejection. Valid values are:
              1: Invalid message type
              2: Invalid field
              3: Invalid value
              4: Unsupported feature
              5: Insufficient permissions
              6: Internal error
              7: Timeout
              8: Other
          text:
            type: string
            description: (588) A text description of the reason for the rejection.
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        description: Order Mass Status Request Reject with fields, tags and descriptions.
  jim380.re.fix.OrderMassStatusReport:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      clOrdID:
        type: string
        description: (49) The unique identifier for the order.
      massStatusReqID:
        type: string
        description: (585) The unique identifier for the status request.
      account:
        type: string
        description: (1) The account that the order belongs to.
      symbol:
        type: string
        description: (55) The symbol of the security that the order is for.
      securityID:
        type: string
        description: (48) The security identifier of the security that the order is for.
      tradingSessionID:
        type: string
        description: (336) The trading session that the order is for.
      ordStatus:
        type: string
        description: |-
          (39)  The status of the order. Valid values are "New", "Pending",
          "PartiallyFilled", "Filled", "Cancelled", and "Expired".
      execType:
        type: string
        description: |-
          (150) The type of execution report. Valid values are "New", "Replace",
          "Cancel", and "Status".
      ordQty:
        type: string
        description: (38) The quantity of the order that has been executed.
      lastPx:
        type: string
        description: (31) The last price at which the order was executed.
      cumQty:
        type: string
        description: (44) The total quantity of the order that has been executed.
      avgPx:
        type: string
        description: (69) The average price at which the order has been executed.
      leavesQty:
        type: string
        description: (11) The quantity of the order that remains to be executed.
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    description: Order Mass Status Report with fields, tags and descriptions.
  jim380.re.fix.OrderMassStatusRequest:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      massStatusReqID:
        type: string
        description: (586) The unique identifier for the status request.
      massStatusReqType:
        type: string
        description: >-
          (585) The type of status request. Valid values are "All" to request
          the

          status of all orders in the group, or "Partial" to request the status
          of a

          subset of orders in the group.
      clOrdID:
        type: string
        description: (49) The unique identifier for the group of orders.
      account:
        type: string
        description: (1) The account that the orders belong to.
      symbol:
        type: string
        description: (55) The symbol of the security that the orders are for.
      securityID:
        type: string
        description: (48) The security identifier of the security that the orders are for.
      tradingSessionID:
        type: string
        description: (336) The trading session that the orders are for.
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    description: Order Mass Status Request with fields, tags and descriptions.
  jim380.re.fix.OrderMassStatusRequestReject:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      refSeqID:
        type: string
        description: >-
          (34) The unique identifier for the rejected message.

          the RefSeqID field in the Order Mass Status Request Reject (AR)
          message

          will contain the same value as the MassStatusReqID field in the
          original

          Order Mass Status Request (AF) message.
      rejCode:
        type: string
        title: |-
          (587) The reason for the rejection. Valid values are:
          1: Invalid message type
          2: Invalid field
          3: Invalid value
          4: Unsupported feature
          5: Insufficient permissions
          6: Internal error
          7: Timeout
          8: Other
      text:
        type: string
        description: (588) A text description of the reason for the rejection.
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    description: Order Mass Status Request Reject with fields, tags and descriptions.
  jim380.re.fix.Orders:
    type: object
    properties:
      sessionID:
        type: string
        description: |-
          A string used to identify the trading session for which the message is
          intended.
      header:
        description: |-
          A FIX protocol header containing standard message fields such as
          beginString, bodyLength, msgType, etc.
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      clOrdID:
        type: string
        title: |-
          A unique identifier assigned by the client to the order. It is used to
          identify the order in future messages related to the order
      symbol:
        type: string
        description: The symbol or instrument that the order is for.
      side:
        type: string
        format: int64
        title: >-
          An integer indicating whether the order is a buy or a sell. The values
          are

          typically 1 for buy and 2 for sell
      orderQty:
        type: string
        title: The quantity of the instrument that the order is for
      ordType:
        type: string
        format: int64
        title: |-
          An integer indicating the type of order. Common values include 1 for
          market, 2 for limit, 3 for stop, and 4 for stop limit
      price:
        type: string
        title: >-
          The price at which the order should be executed. This field is
          required for

          limit and stop limit orders
      timeInForce:
        type: string
        format: int64
        title: >-
          An integer indicating how long the order should remain active. Common

          values include 0 for day, 1 for good till canceled, and 2 for fill or
          kill
      text:
        type: string
        description: >-
          A free-form text field that can be used to provide additional
          information

          about the order.
      transactTime:
        type: string
        title: The time the message was sent, expressed in UTC timestamp format
      trailer:
        title: >-
          A FIX protocol trailer containing standard message fields such as
          checkSum
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
    title: This message is used to represent orders in the FIX protocol
  jim380.re.fix.OrdersCancelReject:
    type: object
    properties:
      sessionID:
        type: string
        description: A string field that specifies the FIX session ID for the message.
      header:
        description: >-
          A Header field that contains standard header information for the
          message,

          such as the message type, sender and receiver identification, and
          sequence

          number.
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      orderID:
        type: string
        title: >-
          A string field that contains the ID of the order that was rejected.
          When an

          order is submitted to a trading venue or OMS, it assigns a unique
          orderID

          to that order to track and identify it within its system. If the order
          is

          subsequently rejected, the trading venue or OMS would typically
          provide the

          orderID associated with the rejected order in the OrdersCancelReject

          message
      origClOrdID:
        type: string
        description: >-
          A string field that contains the original client order ID for the
          order

          that was cancelled.
      clOrdID:
        type: string
        description: >-
          A string field that contains the client order ID for the order that
          was

          cancelled or modified.
      cxlRejReason:
        type: string
        format: int64
        title: >-
          An integer field that specifies the reason for the order cancellation

          rejection, using a standard set of values defined in the FIX protocol.

          Typically, the cxlRejReason field provides a numerical code or value
          that

          represents a specific reason for the order cancellation rejection.
          Examples

          of common cxlRejReason values in the FIX protocol include:
           0: Too Late to Cancel
           1: Unknown Order
           2: Broker/Exchange Option
           3: Order Already in Pending Cancel or Pending Replace Status
           4: Unable to Process Request
           5: Duplicate ClOrdID
           6: Unsupported Order Characteristic
           7: Other
      cxlRejResponseTo:
        type: string
        format: int64
        description: >-
          An integer field that specifies the message sequence number of the
          order

          cancellation request to which this message is responding. When an
          order

          cancellation request is submitted, it is assigned a unique message
          sequence

          number by the FIX engine or the trading system. This sequence number
          is

          used to track and identify specific messages within the order flow.
          The

          cxlRejResponseTo field in the OrdersCancelReject message is populated
          with

          the sequence number of the original order cancellation request message
          that

          resulted in the rejection.
      transactTime:
        type: string
        description: A string field that specifies the time of the transaction.
      trailer:
        description: >-
          A Trailer field that contains standard trailer information for the
          message,

          such as the message checksum.
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
  jim380.re.fix.OrdersCancelRequest:
    type: object
    properties:
      sessionID:
        type: string
        title: A string field that specifies the FIX session ID for the message
      header:
        title: >-
          A Header field that contains standard header information for the
          message,

          such as the message type, sender and receiver identification, and
          sequence

          number
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      origClOrdID:
        type: string
        title: >-
          A string field that contains the original client order ID for the
          order

          that was cancelled
      clOrdID:
        type: string
        title: >-
          A string field that contains the client order ID for the order that
          was

          cancelled or modified
      trailer:
        title: >-
          A Trailer field that contains standard trailer information for the
          message,

          such as the message checksum
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
  jim380.re.fix.OrdersExecutionReport:
    type: object
    properties:
      sessionID:
        type: string
        description: A string field that specifies the FIX session ID for the message.
      header:
        description: >-
          A Header field that contains standard header information for the
          message,

          such as the message type, sender and receiver identification, and
          sequence

          number.
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      clOrdID:
        type: string
        description: |-
          A string field that contains the client order ID for the order being
          reported.
      orderID:
        type: string
        title: >-
          A string field that contains the ID of the order being reported.
          OrderID is

          a string field that contains the unique identifier assigned to an
          order by

          the system or trading platform. It is typically generated by the
          system

          upon order submission and is used to uniquely identify the order
          within the

          system. The orderID is useful for internal system processes, such as
          order

          matching, order book management, and order status tracking
      execID:
        type: string
        title: >-
          A string field that contains the ID of the execution being reported,
          if

          any. It is a string field that contains the identifier assigned to a

          particular execution of an order. Each execution of an order typically
          has

          a separate execID associated with it. The execID can be used to
          uniquely

          identify and track a specific execution in the order execution report.
          It

          is useful for monitoring the status, details, and timing of individual

          executions within the overall order lifecycle. The execID field in the
          FIX

          protocol can be auto-generated by the trading venue or the FIX
          protocol

          software when responding with an execution report. The trading venue's

          execID serves as a local identifier within their own system to track
          and

          reference executions. It allows the trading venue to uniquely identify
          each

          execution and associate it with the relevant order and trade details.
          When

          sending an execution report to clients or counterparties via the FIX

          protocol, the trading venue includes its own generated execID value in
          the

          execution report message. This enables the recipient to correlate the

          execution report with the specific execution on the trading venue's
          side
      ordStatus:
        type: string
        description: |-
          A string field that indicates the current status of the order, such as
          "New", "Partially filled", "Filled", "Cancelled", "Pending Cancel",
          "Rejected", etc.
      execType:
        type: string
        description: >-
          A string field that indicates the type of the execution being
          reported,

          such as "New", "Partial fill", "Fill", "Done for day", "Cancelled",
          etc.
      symbol:
        type: string
        description: A string field that identifies the security being traded.
      side:
        type: string
        format: int64
        description: An integer field that specifies the side of the order (buy or sell).
      orderQty:
        type: string
        description: An integer field that specifies the quantity of the order.
      price:
        type: string
        description: An integer field that specifies the price of the order.
      timeInForce:
        type: string
        format: int64
        description: >-
          An integer field that specifies the time-in-force value for the order,
          such

          as "Day", "GTC" (Good 'Til Cancelled), "IOC" (Immediate or Cancel),
          etc.
      lastPx:
        type: string
        format: int64
        description: >-
          An integer field that specifies the price of the last execution, if
          any.
      lastQty:
        type: string
        format: int64
        description: >-
          An integer field that specifies the quantity of the last execution, if
          any.
      leavesQty:
        type: string
        format: int64
        description: >-
          An integer field that specifies the quantity of the order that remains
          open

          and has not yet been filled or cancelled.
      cumQty:
        type: string
        format: int64
        description: >-
          An integer field that specifies the total quantity of the order that
          has

          been filled.
      avgPx:
        type: string
        format: int64
        description: >-
          An integer field that specifies the average price of all executions
          that

          have occurred for the order.
      text:
        type: string
        description: >-
          A string field that provides additional information about the order
          status

          or execution, such as an error message or reason for rejection.
      transactTime:
        type: string
        description: A string field that specifies the time of the transaction.
      trailer:
        description: >-
          A Trailer field that contains standard trailer information for the
          message,

          such as the message checksum.
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
  jim380.re.fix.Params:
    type: object
    description: Params defines the parameters for the module.
  jim380.re.fix.QueryAllAccountRegistrationResponse:
    type: object
    properties:
      AccountRegistration:
        type: array
        items:
          type: object
          properties:
            address:
              type: string
            companyName:
              type: string
            website:
              type: string
            socialMediaLinks:
              type: string
            createdAt:
              type: string
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllMarketDataResponse:
    type: object
    properties:
      MarketData:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            marketDataRequest:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                mdReqID:
                  type: string
                  title: >-
                    MDReqID field provides a unique identifier for the market
                    data request

                    message
                subscriptionRequestType:
                  type: string
                  format: int64
                  description: >-
                    subscriptionRequestType field corresponds to the FIX tag
                    263, and the

                    values 0 and 1 respectively indicate snapshot and snapshot +
                    incremental

                    updates.
                marketDepth:
                  type: string
                  format: int64
                  title: >-
                    MarketDepth field is used to indicate the level of market
                    data depth that

                    is being requested. Specifically, it specifies how many
                    levels of the order

                    book should be included in the response to the request
                mdUpdateType:
                  type: string
                  format: int64
                  title: >-
                    The mdUpdateType field specifies the type of updates that
                    the sender wants

                    to receive in response to their request for market data. The
                    possible

                    values are "0" for full refresh, "1" for incremental
                    refresh, and "2" for

                    removing a single price level
                noRelatedSym:
                  type: string
                  format: int64
                  title: >-
                    The NoRelatedSym field in a Market Data Request message is
                    used to indicate

                    the number of symbols or instruments for which the market
                    data is being

                    requested
                symbol:
                  type: string
                  title: >-
                    In the context of a Market Data Request message in the FIX
                    protocol, the

                    Symbol field refers to the security or financial instrument
                    for which

                    market data is being requested
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
              title: Market Data Request message
            marketDataSnapShotFullRefresh:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                mdReqID:
                  type: string
                  title: >-
                    The identifier of an originating market data request
                    (corresponds to the

                    MDReqID field specified in the Market Data Request message)
                symbol:
                  type: string
                  title: The ticker symbol that is being quoted (such as BTC/USDT)
                noMDEntries:
                  type: string
                  format: int64
                  title: >-
                    The number of market data entries (bids or offers) listed in
                    a request
                mdEntries:
                  type: array
                  items:
                    type: object
                    properties:
                      mdUpdateAction:
                        type: string
                        format: int64
                        description: >-
                          The type of update action that is being reported for
                          the MDEntry.

                          Possible values are "0" for new, "1" for change, and
                          "2" for delete.
                      mdEntryType:
                        type: string
                        format: int64
                        title: 'The side of a quote: 0 — bid , 1 — ask'
                      mdEntryPx:
                        type: string
                        title: The price for a market data entry
                      mdEntrySize:
                        type: string
                        description: >-
                          The quantity (tradeable volume) of a market data
                          entry.
                    title: Market Data Entry message
                  title: >-
                    The repeated group of MDEntry fields that provide multiple
                    entries
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
              title: Market Data Snapshot/Full Refresh message
            marketDataIncremental:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                mdReqID:
                  type: string
                  title: >-
                    The identifier of an originating market data request
                    (corresponds to the

                    MDReqID field specified in the Market Data Request message)
                NoMDEntries:
                  type: string
                  format: int64
                  title: >-
                    The number of market data entries (bids or offers) listed in
                    a request
                mdEntries:
                  type: array
                  items:
                    type: object
                    properties:
                      mdUpdateAction:
                        type: string
                        format: int64
                        description: >-
                          The type of update action that is being reported for
                          the MDEntry.

                          Possible values are "0" for new, "1" for change, and
                          "2" for delete.
                      mdEntryType:
                        type: string
                        format: int64
                        title: 'The side of a quote: 0 — bid , 1 — ask'
                      mdEntryPx:
                        type: string
                        title: The price for a market data entry
                      mdEntrySize:
                        type: string
                        description: >-
                          The quantity (tradeable volume) of a market data
                          entry.
                    title: Market Data Entry message
                  description: >-
                    The repeated group of MDEntry fields that provide the
                    incremental updates

                    for the market data.
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
              title: Market Data Incremental message
            marketDataRequestReject:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                mdReqID:
                  type: string
                  title: >-
                    The identifier of a Market Data Request that has been
                    rejected
                mdReqRejReason:
                  type: string
                  format: int64
                  title: Indicates the reason why a request has been rejected
                text:
                  type: string
                  title: >-
                    The detailed information (if available) on why a request has
                    been rejected
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
              title: Market Data Request Reject message
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllOrderMassStatusResponse:
    type: object
    properties:
      OrderMassStatus:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            orderMassStatusRequest:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                massStatusReqID:
                  type: string
                  description: (586) The unique identifier for the status request.
                massStatusReqType:
                  type: string
                  description: >-
                    (585) The type of status request. Valid values are "All" to
                    request the

                    status of all orders in the group, or "Partial" to request
                    the status of a

                    subset of orders in the group.
                clOrdID:
                  type: string
                  description: (49) The unique identifier for the group of orders.
                account:
                  type: string
                  description: (1) The account that the orders belong to.
                symbol:
                  type: string
                  description: (55) The symbol of the security that the orders are for.
                securityID:
                  type: string
                  description: >-
                    (48) The security identifier of the security that the orders
                    are for.
                tradingSessionID:
                  type: string
                  description: (336) The trading session that the orders are for.
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
              description: Order Mass Status Request with fields, tags and descriptions.
            orderMassStatusReport:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                clOrdID:
                  type: string
                  description: (49) The unique identifier for the order.
                massStatusReqID:
                  type: string
                  description: (585) The unique identifier for the status request.
                account:
                  type: string
                  description: (1) The account that the order belongs to.
                symbol:
                  type: string
                  description: (55) The symbol of the security that the order is for.
                securityID:
                  type: string
                  description: >-
                    (48) The security identifier of the security that the order
                    is for.
                tradingSessionID:
                  type: string
                  description: (336) The trading session that the order is for.
                ordStatus:
                  type: string
                  description: >-
                    (39)  The status of the order. Valid values are "New",
                    "Pending",

                    "PartiallyFilled", "Filled", "Cancelled", and "Expired".
                execType:
                  type: string
                  description: >-
                    (150) The type of execution report. Valid values are "New",
                    "Replace",

                    "Cancel", and "Status".
                ordQty:
                  type: string
                  description: (38) The quantity of the order that has been executed.
                lastPx:
                  type: string
                  description: (31) The last price at which the order was executed.
                cumQty:
                  type: string
                  description: (44) The total quantity of the order that has been executed.
                avgPx:
                  type: string
                  description: (69) The average price at which the order has been executed.
                leavesQty:
                  type: string
                  description: (11) The quantity of the order that remains to be executed.
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
              description: Order Mass Status Report with fields, tags and descriptions.
            OrderMassStatusRequestReject:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                refSeqID:
                  type: string
                  description: >-
                    (34) The unique identifier for the rejected message.

                    the RefSeqID field in the Order Mass Status Request Reject
                    (AR) message

                    will contain the same value as the MassStatusReqID field in
                    the original

                    Order Mass Status Request (AF) message.
                rejCode:
                  type: string
                  title: |-
                    (587) The reason for the rejection. Valid values are:
                    1: Invalid message type
                    2: Invalid field
                    3: Invalid value
                    4: Unsupported feature
                    5: Insufficient permissions
                    6: Internal error
                    7: Timeout
                    8: Other
                text:
                  type: string
                  description: (588) A text description of the reason for the rejection.
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
              description: >-
                Order Mass Status Request Reject with fields, tags and
                descriptions.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllOrdersCancelRejectResponse:
    type: object
    properties:
      OrdersCancelReject:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
              description: >-
                A string field that specifies the FIX session ID for the
                message.
            header:
              description: >-
                A Header field that contains standard header information for the
                message,

                such as the message type, sender and receiver identification,
                and sequence

                number.
              type: object
              properties:
                beginString:
                  type: string
                  description: >-
                    This field specifies the version of the FIX protocol being
                    used. For

                    example, "FIX.4.4" indicates version 4.4 of the protocol.
                bodyLength:
                  type: string
                  format: int64
                  description: >-
                    This field specifies the length of the message body in
                    bytes.
                msgType:
                  type: string
                  title: >-
                    This field identifies the type of message being sent. For
                    example, "D"

                    indicates a New Order Single message
                senderCompID:
                  type: string
                  title: >-
                    This field identifies the sender of the message. This is
                    typically a unique

                    identifier assigned to each party that uses the FIX protocol
                targetCompID:
                  type: string
                  description: This field identifies the recipient of the message.
                msgSeqNum:
                  type: string
                  format: int64
                  title: >-
                    Is a field in the FIX protocol message header that is used
                    to assign a

                    unique sequence number to each message
                sendingTime:
                  type: string
                  title: This field specifies the time that the message was sent
              title: >-
                This message header contains fields that identify the message
                being sent and

                its sender and recipient
            orderID:
              type: string
              title: >-
                A string field that contains the ID of the order that was
                rejected. When an

                order is submitted to a trading venue or OMS, it assigns a
                unique orderID

                to that order to track and identify it within its system. If the
                order is

                subsequently rejected, the trading venue or OMS would typically
                provide the

                orderID associated with the rejected order in the
                OrdersCancelReject

                message
            origClOrdID:
              type: string
              description: >-
                A string field that contains the original client order ID for
                the order

                that was cancelled.
            clOrdID:
              type: string
              description: >-
                A string field that contains the client order ID for the order
                that was

                cancelled or modified.
            cxlRejReason:
              type: string
              format: int64
              title: >-
                An integer field that specifies the reason for the order
                cancellation

                rejection, using a standard set of values defined in the FIX
                protocol.

                Typically, the cxlRejReason field provides a numerical code or
                value that

                represents a specific reason for the order cancellation
                rejection. Examples

                of common cxlRejReason values in the FIX protocol include:
                 0: Too Late to Cancel
                 1: Unknown Order
                 2: Broker/Exchange Option
                 3: Order Already in Pending Cancel or Pending Replace Status
                 4: Unable to Process Request
                 5: Duplicate ClOrdID
                 6: Unsupported Order Characteristic
                 7: Other
            cxlRejResponseTo:
              type: string
              format: int64
              description: >-
                An integer field that specifies the message sequence number of
                the order

                cancellation request to which this message is responding. When
                an order

                cancellation request is submitted, it is assigned a unique
                message sequence

                number by the FIX engine or the trading system. This sequence
                number is

                used to track and identify specific messages within the order
                flow. The

                cxlRejResponseTo field in the OrdersCancelReject message is
                populated with

                the sequence number of the original order cancellation request
                message that

                resulted in the rejection.
            transactTime:
              type: string
              description: A string field that specifies the time of the transaction.
            trailer:
              description: >-
                A Trailer field that contains standard trailer information for
                the message,

                such as the message checksum.
              type: object
              properties:
                checkSum:
                  type: string
                  format: int64
                  description: >-
                    The checksum value is calculated by summing the ASCII values
                    of all

                    characters in the message (excluding the SOH (start of
                    header) and ETX (end

                    of text) characters), taking the sum modulo 256, and
                    converting the result

                    to a two-character hexadecimal string.
              title: >-
                This message trailer contains a checksum field that is used to
                ensure message

                integrity
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllOrdersCancelRequestResponse:
    type: object
    properties:
      OrdersCancelRequest:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
              title: A string field that specifies the FIX session ID for the message
            header:
              title: >-
                A Header field that contains standard header information for the
                message,

                such as the message type, sender and receiver identification,
                and sequence

                number
              type: object
              properties:
                beginString:
                  type: string
                  description: >-
                    This field specifies the version of the FIX protocol being
                    used. For

                    example, "FIX.4.4" indicates version 4.4 of the protocol.
                bodyLength:
                  type: string
                  format: int64
                  description: >-
                    This field specifies the length of the message body in
                    bytes.
                msgType:
                  type: string
                  title: >-
                    This field identifies the type of message being sent. For
                    example, "D"

                    indicates a New Order Single message
                senderCompID:
                  type: string
                  title: >-
                    This field identifies the sender of the message. This is
                    typically a unique

                    identifier assigned to each party that uses the FIX protocol
                targetCompID:
                  type: string
                  description: This field identifies the recipient of the message.
                msgSeqNum:
                  type: string
                  format: int64
                  title: >-
                    Is a field in the FIX protocol message header that is used
                    to assign a

                    unique sequence number to each message
                sendingTime:
                  type: string
                  title: This field specifies the time that the message was sent
            origClOrdID:
              type: string
              title: >-
                A string field that contains the original client order ID for
                the order

                that was cancelled
            clOrdID:
              type: string
              title: >-
                A string field that contains the client order ID for the order
                that was

                cancelled or modified
            trailer:
              title: >-
                A Trailer field that contains standard trailer information for
                the message,

                such as the message checksum
              type: object
              properties:
                checkSum:
                  type: string
                  format: int64
                  description: >-
                    The checksum value is calculated by summing the ASCII values
                    of all

                    characters in the message (excluding the SOH (start of
                    header) and ETX (end

                    of text) characters), taking the sum modulo 256, and
                    converting the result

                    to a two-character hexadecimal string.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllOrdersExecutionReportResponse:
    type: object
    properties:
      OrdersExecutionReport:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
              description: >-
                A string field that specifies the FIX session ID for the
                message.
            header:
              description: >-
                A Header field that contains standard header information for the
                message,

                such as the message type, sender and receiver identification,
                and sequence

                number.
              type: object
              properties:
                beginString:
                  type: string
                  description: >-
                    This field specifies the version of the FIX protocol being
                    used. For

                    example, "FIX.4.4" indicates version 4.4 of the protocol.
                bodyLength:
                  type: string
                  format: int64
                  description: >-
                    This field specifies the length of the message body in
                    bytes.
                msgType:
                  type: string
                  title: >-
                    This field identifies the type of message being sent. For
                    example, "D"

                    indicates a New Order Single message
                senderCompID:
                  type: string
                  title: >-
                    This field identifies the sender of the message. This is
                    typically a unique

                    identifier assigned to each party that uses the FIX protocol
                targetCompID:
                  type: string
                  description: This field identifies the recipient of the message.
                msgSeqNum:
                  type: string
                  format: int64
                  title: >-
                    Is a field in the FIX protocol message header that is used
                    to assign a

                    unique sequence number to each message
                sendingTime:
                  type: string
                  title: This field specifies the time that the message was sent
              title: >-
                This message header contains fields that identify the message
                being sent and

                its sender and recipient
            clOrdID:
              type: string
              description: >-
                A string field that contains the client order ID for the order
                being

                reported.
            orderID:
              type: string
              title: >-
                A string field that contains the ID of the order being reported.
                OrderID is

                a string field that contains the unique identifier assigned to
                an order by

                the system or trading platform. It is typically generated by the
                system

                upon order submission and is used to uniquely identify the order
                within the

                system. The orderID is useful for internal system processes,
                such as order

                matching, order book management, and order status tracking
            execID:
              type: string
              title: >-
                A string field that contains the ID of the execution being
                reported, if

                any. It is a string field that contains the identifier assigned
                to a

                particular execution of an order. Each execution of an order
                typically has

                a separate execID associated with it. The execID can be used to
                uniquely

                identify and track a specific execution in the order execution
                report. It

                is useful for monitoring the status, details, and timing of
                individual

                executions within the overall order lifecycle. The execID field
                in the FIX

                protocol can be auto-generated by the trading venue or the FIX
                protocol

                software when responding with an execution report. The trading
                venue's

                execID serves as a local identifier within their own system to
                track and

                reference executions. It allows the trading venue to uniquely
                identify each

                execution and associate it with the relevant order and trade
                details. When

                sending an execution report to clients or counterparties via the
                FIX

                protocol, the trading venue includes its own generated execID
                value in the

                execution report message. This enables the recipient to
                correlate the

                execution report with the specific execution on the trading
                venue's side
            ordStatus:
              type: string
              description: >-
                A string field that indicates the current status of the order,
                such as

                "New", "Partially filled", "Filled", "Cancelled", "Pending
                Cancel",

                "Rejected", etc.
            execType:
              type: string
              description: >-
                A string field that indicates the type of the execution being
                reported,

                such as "New", "Partial fill", "Fill", "Done for day",
                "Cancelled", etc.
            symbol:
              type: string
              description: A string field that identifies the security being traded.
            side:
              type: string
              format: int64
              description: >-
                An integer field that specifies the side of the order (buy or
                sell).
            orderQty:
              type: string
              description: An integer field that specifies the quantity of the order.
            price:
              type: string
              description: An integer field that specifies the price of the order.
            timeInForce:
              type: string
              format: int64
              description: >-
                An integer field that specifies the time-in-force value for the
                order, such

                as "Day", "GTC" (Good 'Til Cancelled), "IOC" (Immediate or
                Cancel), etc.
            lastPx:
              type: string
              format: int64
              description: >-
                An integer field that specifies the price of the last execution,
                if any.
            lastQty:
              type: string
              format: int64
              description: >-
                An integer field that specifies the quantity of the last
                execution, if any.
            leavesQty:
              type: string
              format: int64
              description: >-
                An integer field that specifies the quantity of the order that
                remains open

                and has not yet been filled or cancelled.
            cumQty:
              type: string
              format: int64
              description: >-
                An integer field that specifies the total quantity of the order
                that has

                been filled.
            avgPx:
              type: string
              format: int64
              description: >-
                An integer field that specifies the average price of all
                executions that

                have occurred for the order.
            text:
              type: string
              description: >-
                A string field that provides additional information about the
                order status

                or execution, such as an error message or reason for rejection.
            transactTime:
              type: string
              description: A string field that specifies the time of the transaction.
            trailer:
              description: >-
                A Trailer field that contains standard trailer information for
                the message,

                such as the message checksum.
              type: object
              properties:
                checkSum:
                  type: string
                  format: int64
                  description: >-
                    The checksum value is calculated by summing the ASCII values
                    of all

                    characters in the message (excluding the SOH (start of
                    header) and ETX (end

                    of text) characters), taking the sum modulo 256, and
                    converting the result

                    to a two-character hexadecimal string.
              title: >-
                This message trailer contains a checksum field that is used to
                ensure message

                integrity
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllOrdersResponse:
    type: object
    properties:
      Orders:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
              description: >-
                A string used to identify the trading session for which the
                message is

                intended.
            header:
              description: |-
                A FIX protocol header containing standard message fields such as
                beginString, bodyLength, msgType, etc.
              type: object
              properties:
                beginString:
                  type: string
                  description: >-
                    This field specifies the version of the FIX protocol being
                    used. For

                    example, "FIX.4.4" indicates version 4.4 of the protocol.
                bodyLength:
                  type: string
                  format: int64
                  description: >-
                    This field specifies the length of the message body in
                    bytes.
                msgType:
                  type: string
                  title: >-
                    This field identifies the type of message being sent. For
                    example, "D"

                    indicates a New Order Single message
                senderCompID:
                  type: string
                  title: >-
                    This field identifies the sender of the message. This is
                    typically a unique

                    identifier assigned to each party that uses the FIX protocol
                targetCompID:
                  type: string
                  description: This field identifies the recipient of the message.
                msgSeqNum:
                  type: string
                  format: int64
                  title: >-
                    Is a field in the FIX protocol message header that is used
                    to assign a

                    unique sequence number to each message
                sendingTime:
                  type: string
                  title: This field specifies the time that the message was sent
              title: >-
                This message header contains fields that identify the message
                being sent and

                its sender and recipient
            clOrdID:
              type: string
              title: >-
                A unique identifier assigned by the client to the order. It is
                used to

                identify the order in future messages related to the order
            symbol:
              type: string
              description: The symbol or instrument that the order is for.
            side:
              type: string
              format: int64
              title: >-
                An integer indicating whether the order is a buy or a sell. The
                values are

                typically 1 for buy and 2 for sell
            orderQty:
              type: string
              title: The quantity of the instrument that the order is for
            ordType:
              type: string
              format: int64
              title: >-
                An integer indicating the type of order. Common values include 1
                for

                market, 2 for limit, 3 for stop, and 4 for stop limit
            price:
              type: string
              title: >-
                The price at which the order should be executed. This field is
                required for

                limit and stop limit orders
            timeInForce:
              type: string
              format: int64
              title: >-
                An integer indicating how long the order should remain active.
                Common

                values include 0 for day, 1 for good till canceled, and 2 for
                fill or kill
            text:
              type: string
              description: >-
                A free-form text field that can be used to provide additional
                information

                about the order.
            transactTime:
              type: string
              title: The time the message was sent, expressed in UTC timestamp format
            trailer:
              title: >-
                A FIX protocol trailer containing standard message fields such
                as checkSum
              type: object
              properties:
                checkSum:
                  type: string
                  format: int64
                  description: >-
                    The checksum value is calculated by summing the ASCII values
                    of all

                    characters in the message (excluding the SOH (start of
                    header) and ETX (end

                    of text) characters), taking the sum modulo 256, and
                    converting the result

                    to a two-character hexadecimal string.
          title: This message is used to represent orders in the FIX protocol
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllQuoteResponse:
    type: object
    properties:
      Quote:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            quoteRequest:
              type: object
              properties:
                header:
                  title: Standard header for the message
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                quoteReqID:
                  type: string
                  title: Unique identifier for the Quote Request message
                symbol:
                  type: string
                  title: >-
                    Ticker symbol or instrument code for the security being
                    quoted
                securityID:
                  type: string
                  title: Identifier for the security being quoted
                securityIDSource:
                  type: string
                  title: Specifies the source of the security identifier
                side:
                  type: string
                  title: Indicates whether the quote is for a buy or sell order
                orderQty:
                  type: string
                  title: Quantity of the security being quoted
                futSettDate:
                  type: string
                  title: Date of the future settlement
                settlDate2:
                  type: string
                  title: Secondary settlement date for the security
                account:
                  type: string
                  title: Account number for the order
                bidPx:
                  type: string
                  title: Price at which the buyer is willing to buy the security
                offerPx:
                  type: string
                  title: Price at which the seller is willing to sell the security
                currency:
                  type: string
                  title: Currency of the quoted price
                validUntilTime:
                  type: string
                  title: Time after which the quote is no longer valid
                expireTime:
                  type: string
                  title: Time at which the quote will expire
                quoteType:
                  type: string
                  title: Type of quote being requested (e.g. Indicative, Firm)
                bidSize:
                  type: string
                  title: Quantity of securities offered at the bid price
                offerSize:
                  type: string
                  title: Quantity of securities offered at the offer price
                mic:
                  type: string
                  title: Market identification code
                text:
                  type: string
                  description: Additional information or comments about the quote request.
                trailer:
                  title: Standard trailer for the message
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
            quoteAcknowledgement:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                quoteReqID:
                  type: string
                  title: Unique identifier for the original Quote Request message
                quoteID:
                  type: string
                  title: Unique identifier for the Quote
                quoteStatus:
                  type: string
                  title: Status of the Quote (e.g. Accepted, Rejected, Expired)
                quoteType:
                  type: string
                  title: Type of Quote (e.g. Indicative, Firm)
                securityID:
                  type: string
                  title: dentifier for the security being quoted
                securityIDSource:
                  type: string
                  title: Specifies the source of the security identifier
                symbol:
                  type: string
                  title: >-
                    Ticker symbol or instrument code for the security being
                    quoted
                side:
                  type: string
                  title: indicates whether the quote is for a buy or sell order
                orderQty:
                  type: string
                  title: Quantity of the security being quoted
                lastQty:
                  type: string
                  title: Quantity of the last trade
                lastPx:
                  type: string
                  title: Price of the last trade
                bidPx:
                  type: string
                  title: Price at which the buyer is willing to buy the security
                offerPx:
                  type: string
                  title: Price at which the seller is willing to sell the security
                currency:
                  type: string
                  title: Currency of the quoted price
                settlDate:
                  type: string
                  title: Settlement date for the security
                validUntilTime:
                  type: string
                  title: Time after which the quote is no longer valid
                expireTime:
                  type: string
                  title: Time at which the quote will expire
                text:
                  type: string
                  title: Additional information or comments about the quote
                noQuoteQualifiers:
                  type: string
                  title: Number of Quote Qualifiers
                quoteQualifier:
                  type: string
                  title: Additional information about the quote (e.g. Yield, Size)
                noLegs:
                  type: string
                  title: Number of legs in the security (for multi-legged securities)
                legSymbol:
                  type: string
                  title: >-
                    Ticker symbol or instrument code for each leg of the
                    security
                legSecurityID:
                  type: string
                  title: Identifier for each leg of the security
                legSecurityIDSource:
                  type: string
                  title: >-
                    Specifies the source of the identifier for each leg of the
                    security
                legRatioQty:
                  type: string
                  title: Ratio of one leg to the other in a multi-legged security
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
            quoteRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                quoteReqID:
                  type: string
                  title: >-
                    The ID of the original Quote Request message that is being
                    rejected
                quoteRequestRejectReason:
                  type: string
                  description: >-
                    A code indicating the reason for rejecting the Quote
                    Request, Examples

                    include "Invalid instrument requested", "Unknown
                    instrument", "Unsupported

                    request type", etc.
                text:
                  type: string
                  title: >-
                    A human-readable description of the reason for rejecting the
                    Quote Request
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllSecurityListResponse:
    type: object
    properties:
      SecurityList:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            securityListRequest:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: >-
                    (Tag 320): Unique identifier assigned by the requester to
                    the security

                    List Request message
                securityListRequestType:
                  type: string
                  title: (559) Type of Security List Request (x) being made
                noUnderlyings:
                  type: string
                  title: "(711) Undly\tN\tNumber of underlyings"
                noLegs:
                  type: string
                  title: (555) Number of legs that make up the Security
                currency:
                  type: string
                  title: (15)
                text:
                  type: string
                  description: "(58)\tComment, instructions, or other identifying information."
                encodedTextLen:
                  type: string
                  description: >-
                    (354) Must be set if EncodedText (355) field is specified
                    and must

                    immediately precede it.
                encodedText:
                  type: string
                  description: >-
                    (355) Encoded (non-ASCII characters) representation of the
                    Text (58) field

                    in the encoded format specified via the MessageEncoding
                    (347) field.
                tradingSessionID:
                  type: string
                  description: >-
                    (336) Optional Trading Session Identifier to specify a
                    particular trading

                    session for which you want to obtain a list of securities
                    that are

                    tradeable.
                tradingSessionSubID:
                  type: string
                  title: (625)
                subscriptionRequestType:
                  type: string
                  description: >-
                    (263) Subscribe or unsubscribe for security status to
                    security specified in

                    request.
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Security List Request with fields, tags and descriptions and
                MsgType = x
            SecurityListResponse:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: >-
                    (Tag 320): Unique identifier assigned by the requester to
                    the security

                    List Request message
                securityResponseID:
                  type: string
                  title: (322) Identifier for the Security List (y) message
                securityRequestResult:
                  type: string
                  title: >-
                    (560) Result of the Security Request identified by the
                    SecurityReqID (320)
                totNoRelatedSym:
                  type: string
                  description: >-
                    (393) Used to indicate if the total number of securities
                    being returned for

                    this request. Used in the event that message fragmentation
                    is required.
                lastFragment:
                  type: string
                  title: >-
                    string (893) Indicates if this message in a fragmented
                    response
                noRelatedSym:
                  type: string
                  title: >-
                    (146) Specifies the number of repeating symbols
                    (instruments) specified
                noUnderlyings:
                  type: string
                  title: (711) Number of underlyings
                currency:
                  type: string
                  title: (15)
                noLegs:
                  type: string
                  title: (555) Number of legs that make up the Security
                roundLot:
                  type: string
                  title: (561)
                minTradeVol:
                  type: string
                  title: (562)
                tradingSessionID:
                  type: string
                  title: (336)
                tradingSessionSubID:
                  type: string
                  title: (625)
                expirationCycle:
                  type: string
                  title: (827)
                text:
                  type: string
                  description: >-
                    (58) Comment, instructions, or other identifying
                    information.
                encodedTextLen:
                  type: string
                  description: >-
                    (354) Must be set if EncodedText (355) field is specified
                    and must

                    immediately precede it.
                encodedText:
                  type: string
                  title: >-
                    (355) Encoded (non-ASCII characters) representation of the
                    Text (58) field

                    in the encoded format specified via the MessageEncoding
                    (347) field
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Security List Response  with fields, tags and descriptions and
                MsgType = y
            securityListRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: >-
                    (Tag 320): Unique identifier assigned by the requester to
                    the security

                    List Request message
                securityListRequestType:
                  type: string
                  title: (559) Type of security list request being made
                securityRequestResult:
                  type: string
                  title: "(560)\tResult of the security list request"
                text:
                  type: string
                  title: "(58)\tComment, instructions, or other identifying information"
                encodedTextLen:
                  type: string
                  title: >-
                    (354)  Must be set if EncodedText (355) field is specified
                    and must

                    immediately precede it
                encodedText:
                  type: string
                  title: "(355)\tEncoded (non-ASCII characters) representation of the Text (58)\nfield"
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Security List Request Reject with fields, tags and descriptions
                and MsgType =

                y
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllSecurityResponse:
    type: object
    properties:
      Security:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            securityDefinitionRequest:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: >-
                    (Tag 320): Unique identifier assigned by the requester to
                    the security

                    definition request message
                securityRequestType:
                  type: string
                  title: >-
                    (Tag 321): Specifies the type of security definition being
                    requested (e.g.,

                    requesting all securities, by symbol, by security type,
                    etc.)
                symbol:
                  type: string
                  description: >-
                    (Tag 55): Unique identifier for the security being
                    requested.
                securityExchange:
                  type: string
                  description: >-
                    (Tag 207): Code or identifier representing the exchange
                    where the security

                    is listed.
                issuer:
                  type: string
                  description: >-
                    (Tag 106): Identifier of the issuer or issuer-specific
                    identifier for the

                    security.
                securityDesc:
                  type: string
                  title: '(Tag 107): Description or name of the security'
                securityType:
                  type: string
                  title: >-
                    (Tag 167): Type of the security (e.g., stock, bond, option,
                    future)
                currency:
                  type: string
                  title: '(Tag 15): Currency in which the security is denominated'
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: Security Definition Request with fields, tags and descriptions.
            securityDefinition:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  description: >-
                    (Tag 320): Unique identifier of the original security
                    definition request.
                securityResponseID:
                  type: string
                  title: >-
                    (Tag 322): Unique identifier assigned by the responder to
                    the security

                    definition message
                securityResponseType:
                  type: string
                  description: >-
                    (Tag 323): Type of response to the security definition
                    request (e.g.,

                    acceptance, rejection, etc.).
                symbol:
                  type: string
                  description: '(Tag 55): Unique identifier for the security.'
                securityExchange:
                  type: string
                  description: >-
                    (Tag 207): Code or identifier representing the exchange
                    where the security

                    is listed.
                issuer:
                  type: string
                  description: >-
                    (Tag 106): Identifier of the issuer or issuer-specific
                    identifier for the

                    security.
                SecurityDesc:
                  type: string
                  description: '(Tag 107): Description or name of the security.'
                SecurityType:
                  type: string
                  description: >-
                    (Tag 167): Type of the security (e.g., stock, bond, option,
                    future).
                currency:
                  type: string
                  description: '(Tag 15): Currency in which the security is denominated.'
                contractMultiplier:
                  type: string
                  description: >-
                    (Tag 231): Multiplier applied to the contract size to
                    calculate the actual

                    quantity.
                minPriceIncrement:
                  type: string
                  description: '(Tag 969): Minimum price increment for the security.'
                minPriceIncrementAmount:
                  type: string
                  description: >-
                    (Tag 1146): Minimum price increment expressed as a monetary
                    amount.
                unitOfMeasure:
                  type: string
                  description: '(Tag 996): Unit of measure for the contract size.'
                priceUnitOfMeasure:
                  type: string
                  description: '(Tag 1191): Unit of measure for the price.'
                settlType:
                  type: string
                  description: '(Tag 63): Type of settlement for the security.'
                settlDate:
                  type: string
                  description: '(Tag 64): Date of settlement for the security.'
                maturityMonthYear:
                  type: string
                  description: '(Tag 200): Month and year of maturity for the security.'
                couponRate:
                  type: string
                  description: '(Tag 223): Coupon rate or interest rate for the security.'
                factor:
                  type: string
                  description: >-
                    (Tag 228): Factor applied to the price to calculate the
                    actual value.
                creditRating:
                  type: string
                  description: '(Tag 255): Credit rating assigned to the security.'
                securityExchangeID:
                  type: string
                  description: '(Tag 2076): Unique identifier for the security exchange.'
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: Security Definition with fields, tags and descriptions.
            securityDefinitionRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: >-
                    (Tag 320): Unique identifier of the rejected security
                    definition request
                securityRequestResult:
                  type: string
                  title: >-
                    (Tag 560): Result of the security definition request (e.g.,
                    successful,

                    invalid security, etc.)
                securityRequestError:
                  type: string
                  description: >-
                    (Tag 561): Description of the error or reason for rejecting
                    the security

                    definition request.
                securityRequestErrorCode:
                  type: string
                  description: >-
                    (Tag 562): Code indicating the specific error or reason for
                    rejecting the

                    request.
                text:
                  type: string
                  title: >-
                    (Tag 58): Additional free-text description or information
                    related to the

                    rejection
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: >-
                Security Definition Request Rejeect with fields, tags and
                descriptions.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllSecurityStatusResponse:
    type: object
    properties:
      SecurityStatus:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            securityStatusRequest:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                SecurityStatusReqID:
                  type: string
                  description: >-
                    (324) Must be unique, or the ID of previous Security Status
                    Request (e) to

                    disable if SubscriptionRequestType (263) = Disable previous
                    Snapshot +

                    Updates Request (2).
                instrument:
                  type: string
                noUnderlyings:
                  type: string
                  title: (711) Number of underlyings
                underlyingInstrument:
                  type: string
                  title: Must be provided if Number of underlyings > 0
                noLegs:
                  type: string
                  title: (555) Number of legs that make up the Security
                instrumentLeg:
                  type: string
                  title: Required if NoLegs (555) > 0
                currency:
                  type: string
                  title: (15)
                subscriptionRequestType:
                  type: string
                  title: >-
                    (263) SubscriptionRequestType indicates to the other party
                    what type of

                    response is expected. A snapshot request only asks for
                    current information.

                    A subscribe request asks for updates as the status changes.
                    Unsubscribe

                    will cancel any future update messages from the counter
                    party.)
                tradingSessionID:
                  type: string
                  title: (336)
                tradingSessionSubID:
                  type: string
                  title: (625)
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Security Status Request with fields, tags and descriptions and
                MsgType = e
            securityStatusResponse:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityStatusReqID:
                  type: string
                  title: (324)
                noUnderlyings:
                  type: string
                  title: (711) Number of underlyings
                underlyingInstrument:
                  type: string
                  title: Must be provided if Number of underlyings > 0
                noLegs:
                  type: string
                  title: (555) Required for multileg quotes
                instrumentLeg:
                  type: string
                  title: Required if NoLegs (555) > 0
                currency:
                  type: string
                  title: (15)
                tradingSessionID:
                  type: string
                  title: (336)
                tradingSessionSubID:
                  type: string
                  title: (625)
                unsolicitedIndicator:
                  type: string
                  title: >-
                    (325) Set to 'Y' if message is sent as a result of a
                    subscription request

                    not a snapshot request
                securityTradingStatus:
                  type: string
                  description: >-
                    (326) Identifies the trading status applicable to the
                    transaction.
                financialStatus:
                  type: string
                  title: (291)
                corporateAction:
                  type: string
                  title: (292)
                haltReason:
                  type: string
                  description: >-
                    (327) Denotes the reason for the Opening Delay or Trading
                    Halt.
                inViewOfCommon:
                  type: string
                  title: (328)
                dueToRelated:
                  type: string
                  title: (329)
                buyVolume:
                  type: string
                  title: (330)
                sellVolume:
                  type: string
                  title: (331)
                highPx:
                  type: string
                  title: (332)
                lowPx:
                  type: string
                  title: (333)
                lastPx:
                  type: string
                  description: >-
                    (31) Represents the last price for that security either on a
                    Consolidated

                    or an individual participant basis at the time it is
                    disseminated.
                transactTime:
                  type: string
                  title: (60) Trade Dissemination Time
                adjustment:
                  type: string
                  title: (334)
                text:
                  type: string
                  description: >-
                    (58) Comment, instructions, or other identifying
                    information.
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Security Status Response with fields, tags and descriptions and
                MsgType = f
            securityStatusRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityStatusReqID:
                  type: string
                  title: (324)
                securityRejectReason:
                  type: string
                  title: >-
                    (560) Reason for rejecting the Security Status Request, The

                    SecurityRejectReason field (Tag 560) in the Security Status
                    Request Reject

                    message (MsgType = AJ) indicates the reason for rejecting
                    the Security

                    Status Request. The values for the SecurityRejectReason
                    field can vary

                    depending on the implementation and version of the FIX
                    protocol. Here are

                    some common values that may be used: 0: Unknown symbol 1:
                    Exchange closed

                    2: Order exceeded limit

                    3: Invalid request

                    4: Unsupported request

                    5: Unauthorized request

                    6: Duplicate request

                    7: System unavailable

                    8: Security not found

                    9: Other
                text:
                  type: string
                  title: (58) Additional text or comment regarding the rejection
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Security Status Request Reject with fields, tags and
                descriptions and MsgType

                = AJ
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllSecurityTypesResponse:
    type: object
    properties:
      SecurityTypes:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            securityTypesRequest:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: (320)
                text:
                  type: string
                  description: >-
                    (58) Comment, instructions, or other identifying
                    information.
                tradingSessionID:
                  type: string
                  description: >-
                    (336) Optional Trading Session Identifier to specify a
                    particular trading

                    session for which you want to obtain a list of securities
                    that are

                    tradeable.
                tradingSessionSubID:
                  type: string
                  title: (625)
                product:
                  type: string
                  title: (460) Used to qualify which security types are returned
                securityType:
                  type: string
                  title: (167) Used to qualify which security type is returned
                securitySubType:
                  type: string
                  title: (762) Used to qualify which security types are returned
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: Security Types Request with fields, tags and descriptions.
            SecurityTypesResponse:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: (320)
                securityResponseID:
                  type: string
                  title: (322) Identifier for the security response message
                securityResponseType:
                  type: string
                  title: >-
                    (323) The result of the security request identified by
                    SecurityReqID (320)
                totNoSecurityTypes:
                  type: string
                  title: >-
                    (557) Indicates total number of security types in the event
                    that multiple

                    Security Type messages are used to return results
                lastFragment:
                  type: string
                  title: (893) Indicates if this message in a fragmented response
                noSecurityTypes:
                  type: string
                  title: (558)
                securityType:
                  type: string
                  title: (167) Required if NoSecurityTypes (558) > 0
                securitySubType:
                  type: string
                  title: (762)
                product:
                  type: string
                  title: (460)
                cFICode:
                  type: string
                  title: >-
                    (461) Indicates the type of security using ISO 10962
                    standard,

                    Classification of Financial Instruments (CFI code) values.
                    ISO 10962 is

                    maintained by ANNA (Association of National Numbering
                    Agencies) acting as

                    Registration Authority
                text:
                  type: string
                  description: >-
                    (58) Comment, instructions, or other identifying
                    information.
                tradingSessionID:
                  type: string
                  description: >-
                    (336) Optional Trading Session Identifier to specify a
                    particular trading

                    session for which you want to obtain a list of securities
                    that are

                    tradeable.
                tradingSessionSubID:
                  type: string
                  title: (625)
                subscriptionRequestType:
                  type: string
                  description: >-
                    (263) Subscribe or unsubscribe for security status to
                    security specified in

                    request.
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: Security Types Response with fields, tags and descriptions.
            SecurityTypesRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                securityReqID:
                  type: string
                  title: >-
                    (320) Identifier for the security request message that was
                    rejected
                rejectReason:
                  type: string
                  title: (350) Reason for rejecting the security request
                text:
                  type: string
                  title: (58) Comment, instructions, or other identifying information
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: >-
                Security Types Request Reject with fields, tags and
                descriptions.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllSessionLogoutResponse:
    type: object
    properties:
      SessionLogout:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
              title: A string that identifies the session being logged out of
            sessionLogoutInitiator:
              title: The message sent by the party that initiates the logout
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                text:
                  type: string
                  title: >-
                    A free-form text field that can be used to provide
                    additional information

                    about the logout
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
            sessionLogoutAcceptor:
              title: The message sent by the party that confirms the logout
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                text:
                  type: string
                  title: >-
                    A free-form text field that can be used to provide
                    additional information

                    about the logout
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
          title: >-
            This message is used to initiate a logout session between two
            parties
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllSessionRejectResponse:
    type: object
    properties:
      SessionReject:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
              description: >-
                A string that identifies the session to which the rejected
                message belongs.
            header:
              type: object
              properties:
                beginString:
                  type: string
                  description: >-
                    This field specifies the version of the FIX protocol being
                    used. For

                    example, "FIX.4.4" indicates version 4.4 of the protocol.
                bodyLength:
                  type: string
                  format: int64
                  description: >-
                    This field specifies the length of the message body in
                    bytes.
                msgType:
                  type: string
                  title: >-
                    This field identifies the type of message being sent. For
                    example, "D"

                    indicates a New Order Single message
                senderCompID:
                  type: string
                  title: >-
                    This field identifies the sender of the message. This is
                    typically a unique

                    identifier assigned to each party that uses the FIX protocol
                targetCompID:
                  type: string
                  description: This field identifies the recipient of the message.
                msgSeqNum:
                  type: string
                  format: int64
                  title: >-
                    Is a field in the FIX protocol message header that is used
                    to assign a

                    unique sequence number to each message
                sendingTime:
                  type: string
                  title: This field specifies the time that the message was sent
              title: >-
                This message header contains fields that identify the message
                being sent and

                its sender and recipient
            text:
              type: string
              title: >-
                A free-form text field that provides information about the
                rejection, such

                as the reason for the rejection or a description of the error
            trailer:
              type: object
              properties:
                checkSum:
                  type: string
                  format: int64
                  description: >-
                    The checksum value is calculated by summing the ASCII values
                    of all

                    characters in the message (excluding the SOH (start of
                    header) and ETX (end

                    of text) characters), taking the sum modulo 256, and
                    converting the result

                    to a two-character hexadecimal string.
              title: >-
                This message trailer contains a checksum field that is used to
                ensure message

                integrity
          title: This message is used to reject a FIX session
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllSessionsResponse:
    type: object
    properties:
      Sessions:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            logonInitiator:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                encryptMethod:
                  type: string
                  format: int64
                  title: >-
                    An integer value indicating the encryption method to be used
                    for the

                    session
                heartBtInt:
                  type: string
                  format: int64
                  title: >-
                    An integer value indicating the number of seconds between
                    heartbeats that

                    will be sent during the session. This is used to monitor the
                    connection

                    between the two parties
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
              title: >-
                This message is used by the initiator of a FIX session to
                initiate a

                connection with the acceptor
            logonAcceptor:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                encryptMethod:
                  type: string
                  format: int64
                  title: >-
                    An integer value indicating the encryption method to be used
                    for the

                    session
                heartBtInt:
                  type: string
                  format: int64
                  title: >-
                    An integer value indicating the number of seconds between
                    heartbeats that

                    will be sent during the session. This is used to monitor the
                    connection

                    between the two parties
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
              title: >-
                This message is used by the acceptor of a FIX session to
                acknowledge the

                initiation of the connection by the initiator
            status:
              type: string
            IsAccepted:
              type: boolean
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllTradeCaptureResponse:
    type: object
    properties:
      TradeCapture:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            tradeCaptureReport:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradeReportID:
                  type: string
                  description: (571) Unique identifier for the trade report.
                tradeReportTransType:
                  type: string
                  description: (487) Type of trade report (new, cancel, correction).
                tradeReportType:
                  type: string
                  description: (856) Type of trade report (real-time, end-of-day).
                trdType:
                  type: string
                  description: >-
                    Trade details

                    (828) Type of the trade (Block Trade, Exchange for
                    Physical).
                trdSubType:
                  type: string
                  description: (829) Further information about the trade type.
                side:
                  type: string
                  description: (54) Buy or sell.
                orderQty:
                  type: string
                  description: (38) Quantity of the order involved in the trade.
                lastQty:
                  type: string
                  description: (32) Quantity of the last execution in the trade.
                lastPx:
                  type: string
                  description: (31) Price of the last execution in the trade.
                grossTradeAmt:
                  type: string
                  description: >-
                    (381) Total amount of the trade, including any commissions
                    and fees.
                execID:
                  type: string
                  description: |-
                    Trade identifiers
                    (17) Identifier for the execution of the trade.
                orderID:
                  type: string
                  description: (37) Identifier for the order associated with the trade.
                tradeID:
                  type: string
                  description: (1003) Unique identifier for the trade.
                origTradeID:
                  type: string
                  description: >-
                    (1126) Identifier for the original trade, in the case of a
                    trade

                    correction.
                symbol:
                  type: string
                  description: |-
                    Instrument details
                    (55) Symbol or code for the financial instrument traded.
                securityID:
                  type: string
                  description: (48) Identifier for the security traded.
                securityIDSource:
                  type: string
                  description: (22) Source of the security identifier.
                tradeDate:
                  type: string
                  description: |-
                    Trade dates and settlement
                    (75) Date of the trade.
                transactTime:
                  type: string
                  description: (60) Time at which the trade occurred.
                settlType:
                  type: string
                  description: (63) Settlement type of the trade.
                settlDate:
                  type: string
                  description: (64) Settlement date of the trade.
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: Trade Capture Report with fields, tags and descriptions.
            tradeCaptureReportAcknowledgement:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradeReportID:
                  type: string
                  description: |-
                    Trade report details
                    (571) Identifier for the trade report being acknowledged.
                tradeID:
                  type: string
                  description: (1003) Unique identifier for the trade.
                secondaryTradeID:
                  type: string
                  description: (1040) Alternative identifier for the trade.
                tradeReportType:
                  type: string
                  description: (856) Type of trade report (real-time, end-of-day).
                trdType:
                  type: string
                  description: >-
                    (828) Type of the trade (Block Trade, Exchange for
                    Physical).
                trdSubType:
                  type: string
                  description: (829) Further information about the trade type.
                execType:
                  type: string
                  description: >-
                    (150) Status of the trade report (new, cancelled, corrected,
                    etc.).
                tradeReportRefID:
                  type: string
                  description: >-
                    (572) Identifier for the previous trade report being
                    referred to.
                secondaryTradeReportID:
                  type: string
                  description: (818) Alternative identifier for the trade report.
                tradeReportStatus:
                  type: string
                  description: (939) Status of the trade report (accepted, rejected, etc.).
                tradeTransType:
                  type: string
                  description: (487) Type of trade transaction (new, cancel, correction).
                tradeReportRejectReason:
                  type: string
                  format: int64
                  description: (751) Reason why the trade report was rejected.
                text:
                  type: string
                  description: >-
                    Additional information

                    (58) Additional information about the trade report or
                    acknowledgement.
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: >-
                Trade Capture Report Acknowledgement with fields, tags and
                descriptions.
            tradeCaptureReportRejection:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradeReportID:
                  type: string
                  description: (571) The identifier for the trade report being rejected.
                tradeReportRejectReason:
                  type: string
                  format: int64
                  description: (751) A code indicating why the trade report was rejected.
                tradeReportRejectRefID:
                  type: string
                  description: >-
                    (754) The identifier of the previous message (e.g., Trade
                    Capture Report)

                    to which this message refers.
                text:
                  type: string
                  description: >-
                    (58) A description of the reason for the trade report
                    rejection.
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: >-
                Trade Capture Report Rejection with fields, tags and
                descriptions.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllTradingSessionListResponse:
    type: object
    properties:
      TradingSessionList:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            tradingSessionListRequest:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradSesReqID:
                  type: string
                  description: "(335)\tMust be unique, or the ID of previous Trading Session Status\nRequest (g) to disable if SubscriptionRequestType (263) = Disable previous\nSnapshot + Update Request (2)."
                tradingSessionID:
                  type: string
                  title: (336) Trading Session for which status is being requested
                tradingSessionSubID:
                  type: string
                  title: (625)
                securityExchange:
                  type: string
                  title: (207)
                tradSesMethod:
                  type: string
                  title: "(338) \tMethod of Trading"
                tradSesMode:
                  type: string
                  title: (339) Trading Session Mode
                subscriptionRequestType:
                  type: string
                  title: (263)
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Trading Session List Request with fields, tags and descriptions.
                MsgType = BI
            tradingSessionListResponse:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradSesReqID:
                  type: string
                  title: "(335)\tProvided for a response to a specific Trading Session List\nRequest (BI) message (snapshot)"
                noTradingSessions:
                  type: string
                  title: (386)
                tradingSessionID:
                  type: string
                  title: (336) Identifier for Trading Session
                tradingSessionSubID:
                  type: string
                  title: (625)
                securityExchange:
                  type: string
                  title: (207)
                tradSesMethod:
                  type: string
                  title: (338) Method of Trading
                tradSesMode:
                  type: string
                  title: "(339) \tTrading Session Mode"
                unsolicitedIndicator:
                  type: string
                  title: >-
                    (325) "Y" if message is sent unsolicited as a result of a
                    previous

                    subscription request
                tradSesStatus:
                  type: string
                  description: (340) State of trading session.
                tradSesStatusRejReason:
                  type: string
                  description: (567) Used with TradSesStatus (340) = "Request Rejected".
                tradSesStartTime:
                  type: string
                  title: (341) Starting time of trading session
                tradSesOpenTime:
                  type: string
                  title: (342) Time of the opening of the trading session
                tradSesPreCloseTime:
                  type: string
                  title: (343) Time of pre-close of trading session
                tradSesCloseTime:
                  type: string
                  title: (344) Closing time of trading session
                tradSesEndTime:
                  type: string
                  title: (345)
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Trading Session List Response with fields, tags and
                descriptions. MsgType =

                BJ
            tradingSessionListRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradSesReqID:
                  type: string
                  description: "(335)\tMatches the ID of the rejected Trading Session List Request (BI)\nmessage."
                tradSesStatus:
                  type: string
                  description: "(340)\tIndicates the status of the trading session request. Set to \"0\"\n(Rejected) for a request reject message."
                tradSesStatusRejReason:
                  type: string
                  description: (567) Reason for rejecting the trading session request.
                text:
                  type: string
                  description: >-
                    (58) Optional additional text providing further details
                    about the

                    rejection.
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              title: >-
                Trading Session List Request Reject with fields, tags and
                descriptions.

                MsgType = BK
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryAllTradingSessionResponse:
    type: object
    properties:
      TradingSession:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            tradingSessionStatusRequest:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradingSessionID:
                  type: string
                  title: "(336)\tIdentifies the specific trading session for which status is\nrequested"
                tradingSessionSubID:
                  type: string
                  title: "(625)\tIdentifies a specific sub-session or sub-segment within a\ntrading session"
                tradSesReqID:
                  type: string
                  title: "(335)\tUnique identifier assigned by the party generating the request"
                marketID:
                  type: string
                  title: "(1301)\tIdentifies the market or exchange for which the trading session\nstatus is requested"
                subscriptionRequest:
                  type: string
                  title: >-
                    (263) Indicates whether the request is for a one-time
                    snapshot or

                    subscription for updates
                securityID:
                  type: string
                  title: "(48)\tIdentifier for the security being traded in the session"
                securityIDSource:
                  type: string
                  title: "(22)\tIdentifies the source of the security identifier"
                symbol:
                  type: string
                  title: "(55)\tSymbol representing the security being traded in the session"
                securityExchange:
                  type: string
                  title: "207\tExchange where the security is listed"
                marketSegmentID:
                  type: string
                  title: "(1300)\tIdentifies the specific market segment or sector within the\ntrading session"
                tradSesReqType:
                  type: integer
                  format: int32
                  title: (263) Type of trading session status request
                tradSesSubReqType:
                  type: integer
                  format: int32
                  title: "(123)\tSub-type of trading session status request"
                tradSesMode:
                  type: integer
                  format: int32
                  title: "(338)\tMethod used to determine the trading session"
                tradingSessionDate:
                  type: string
                  title: >-
                    (336) Date of the trading session for which status is
                    requested
                tradingSessionTime:
                  type: string
                  title: >-
                    (338)Time of the trading session for which status is
                    requested
                tradingSessionSubTime:
                  type: string
                  title: >-
                    (1147) Time of the sub-session or sub-segment within a
                    trading session
                expirationDate:
                  type: string
                  title: >-
                    (432) Date and time when the trading session status request
                    is no longer

                    valid and should be disregarded
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: >-
                Trading Session Status Request with fields, tags and
                descriptions.
            tradingSessionStatus:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                tradSesReqID:
                  type: string
                  title: "(335)\tUnique identifier assigned by the party generating the request"
                tradingSessionID:
                  type: string
                  title: (336) Identifies the specific trading session
                tradSesStatus:
                  type: integer
                  format: int32
                  title: (340) Indicates the current status of the trading session
                tradSesStatusRejReason:
                  type: integer
                  format: int32
                  title: >-
                    (567) Provides a reason for rejecting or invalidating a
                    trading session

                    status
                tradSesStartTime:
                  type: string
                  title: >-
                    (341) Time at which the trading session is scheduled to
                    start
                tradSesOpenTime:
                  type: string
                  title: (342) Time at which the trading session opens
                tradSesPreCloseTime:
                  type: string
                  title: "(343)\tTime at which the trading session pre-closes"
                tradSesCloseTime:
                  type: string
                  title: "(344)\tTime at which the trading session closes"
                tradSesEndTime:
                  type: string
                  title: (345) Time at which the trading session is scheduled to end
                totalVolumeTraded:
                  type: integer
                  format: int32
                  title: >-
                    (387) Total quantity of contracts or shares traded during
                    the trading

                    session
                tradSesHighPx:
                  type: string
                  title: "(1149)\tHighest price traded during the trading session"
                tradSesLowPx:
                  type: string
                  title: "(1148)\tLowest price traded during the trading session"
                securityID:
                  type: string
                  title: "(48)\tIdentifier for the security being traded in the session"
                securityIDSource:
                  type: string
                  title: "(22)\tIdentifies the source of the security identifier"
                symbol:
                  type: string
                  title: >-
                    (55) Symbol representing the security being traded in the
                    session
                securityExchange:
                  type: string
                  title: "(207)\tExchange where the security is listed"
                marketSegmentID:
                  type: string
                  title: "1300\tIdentifies the specific market segment or sector within the\ntrading session"
                marketID:
                  type: string
                  title: "1301\tIdentifies the market or exchange for the trading session"
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: Trading Session Status with fields, tags and descriptions.
            tradingSessionStatusRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                  description: Standard FIX message header.
                refSeqNum:
                  type: string
                  title: "(45)\tReference id of the rejected request message"
                refMsgType:
                  type: string
                  title: "(372)\tMessage type of the rejected request"
                sessionRejectReason:
                  type: integer
                  format: int32
                  title: "(373)\tCode indicating the reason for rejecting the trading session\nstatus request"
                text:
                  type: string
                  title: "58\tFree-form text providing additional information about the rejection"
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
                  description: Standard FIX message trailer.
              description: >-
                Trading Session Status Request Reject with fields, tags and
                descriptions.
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.fix.QueryGetAccountRegistrationResponse:
    type: object
    properties:
      AccountRegistration:
        type: object
        properties:
          address:
            type: string
          companyName:
            type: string
          website:
            type: string
          socialMediaLinks:
            type: string
          createdAt:
            type: string
  jim380.re.fix.QueryGetMarketDataResponse:
    type: object
    properties:
      MarketData:
        type: object
        properties:
          sessionID:
            type: string
          marketDataRequest:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              mdReqID:
                type: string
                title: >-
                  MDReqID field provides a unique identifier for the market data
                  request

                  message
              subscriptionRequestType:
                type: string
                format: int64
                description: >-
                  subscriptionRequestType field corresponds to the FIX tag 263,
                  and the

                  values 0 and 1 respectively indicate snapshot and snapshot +
                  incremental

                  updates.
              marketDepth:
                type: string
                format: int64
                title: >-
                  MarketDepth field is used to indicate the level of market data
                  depth that

                  is being requested. Specifically, it specifies how many levels
                  of the order

                  book should be included in the response to the request
              mdUpdateType:
                type: string
                format: int64
                title: >-
                  The mdUpdateType field specifies the type of updates that the
                  sender wants

                  to receive in response to their request for market data. The
                  possible

                  values are "0" for full refresh, "1" for incremental refresh,
                  and "2" for

                  removing a single price level
              noRelatedSym:
                type: string
                format: int64
                title: >-
                  The NoRelatedSym field in a Market Data Request message is
                  used to indicate

                  the number of symbols or instruments for which the market data
                  is being

                  requested
              symbol:
                type: string
                title: >-
                  In the context of a Market Data Request message in the FIX
                  protocol, the

                  Symbol field refers to the security or financial instrument
                  for which

                  market data is being requested
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
            title: Market Data Request message
          marketDataSnapShotFullRefresh:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              mdReqID:
                type: string
                title: >-
                  The identifier of an originating market data request
                  (corresponds to the

                  MDReqID field specified in the Market Data Request message)
              symbol:
                type: string
                title: The ticker symbol that is being quoted (such as BTC/USDT)
              noMDEntries:
                type: string
                format: int64
                title: >-
                  The number of market data entries (bids or offers) listed in a
                  request
              mdEntries:
                type: array
                items:
                  type: object
                  properties:
                    mdUpdateAction:
                      type: string
                      format: int64
                      description: >-
                        The type of update action that is being reported for the
                        MDEntry.

                        Possible values are "0" for new, "1" for change, and "2"
                        for delete.
                    mdEntryType:
                      type: string
                      format: int64
                      title: 'The side of a quote: 0 — bid , 1 — ask'
                    mdEntryPx:
                      type: string
                      title: The price for a market data entry
                    mdEntrySize:
                      type: string
                      description: The quantity (tradeable volume) of a market data entry.
                  title: Market Data Entry message
                title: >-
                  The repeated group of MDEntry fields that provide multiple
                  entries
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
            title: Market Data Snapshot/Full Refresh message
          marketDataIncremental:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              mdReqID:
                type: string
                title: >-
                  The identifier of an originating market data request
                  (corresponds to the

                  MDReqID field specified in the Market Data Request message)
              NoMDEntries:
                type: string
                format: int64
                title: >-
                  The number of market data entries (bids or offers) listed in a
                  request
              mdEntries:
                type: array
                items:
                  type: object
                  properties:
                    mdUpdateAction:
                      type: string
                      format: int64
                      description: >-
                        The type of update action that is being reported for the
                        MDEntry.

                        Possible values are "0" for new, "1" for change, and "2"
                        for delete.
                    mdEntryType:
                      type: string
                      format: int64
                      title: 'The side of a quote: 0 — bid , 1 — ask'
                    mdEntryPx:
                      type: string
                      title: The price for a market data entry
                    mdEntrySize:
                      type: string
                      description: The quantity (tradeable volume) of a market data entry.
                  title: Market Data Entry message
                description: >-
                  The repeated group of MDEntry fields that provide the
                  incremental updates

                  for the market data.
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
            title: Market Data Incremental message
          marketDataRequestReject:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              mdReqID:
                type: string
                title: The identifier of a Market Data Request that has been rejected
              mdReqRejReason:
                type: string
                format: int64
                title: Indicates the reason why a request has been rejected
              text:
                type: string
                title: >-
                  The detailed information (if available) on why a request has
                  been rejected
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
            title: Market Data Request Reject message
  jim380.re.fix.QueryGetOrderMassStatusResponse:
    type: object
    properties:
      OrderMassStatus:
        type: object
        properties:
          sessionID:
            type: string
          orderMassStatusRequest:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              massStatusReqID:
                type: string
                description: (586) The unique identifier for the status request.
              massStatusReqType:
                type: string
                description: >-
                  (585) The type of status request. Valid values are "All" to
                  request the

                  status of all orders in the group, or "Partial" to request the
                  status of a

                  subset of orders in the group.
              clOrdID:
                type: string
                description: (49) The unique identifier for the group of orders.
              account:
                type: string
                description: (1) The account that the orders belong to.
              symbol:
                type: string
                description: (55) The symbol of the security that the orders are for.
              securityID:
                type: string
                description: >-
                  (48) The security identifier of the security that the orders
                  are for.
              tradingSessionID:
                type: string
                description: (336) The trading session that the orders are for.
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
            description: Order Mass Status Request with fields, tags and descriptions.
          orderMassStatusReport:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              clOrdID:
                type: string
                description: (49) The unique identifier for the order.
              massStatusReqID:
                type: string
                description: (585) The unique identifier for the status request.
              account:
                type: string
                description: (1) The account that the order belongs to.
              symbol:
                type: string
                description: (55) The symbol of the security that the order is for.
              securityID:
                type: string
                description: >-
                  (48) The security identifier of the security that the order is
                  for.
              tradingSessionID:
                type: string
                description: (336) The trading session that the order is for.
              ordStatus:
                type: string
                description: >-
                  (39)  The status of the order. Valid values are "New",
                  "Pending",

                  "PartiallyFilled", "Filled", "Cancelled", and "Expired".
              execType:
                type: string
                description: >-
                  (150) The type of execution report. Valid values are "New",
                  "Replace",

                  "Cancel", and "Status".
              ordQty:
                type: string
                description: (38) The quantity of the order that has been executed.
              lastPx:
                type: string
                description: (31) The last price at which the order was executed.
              cumQty:
                type: string
                description: (44) The total quantity of the order that has been executed.
              avgPx:
                type: string
                description: (69) The average price at which the order has been executed.
              leavesQty:
                type: string
                description: (11) The quantity of the order that remains to be executed.
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
            description: Order Mass Status Report with fields, tags and descriptions.
          OrderMassStatusRequestReject:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              refSeqID:
                type: string
                description: >-
                  (34) The unique identifier for the rejected message.

                  the RefSeqID field in the Order Mass Status Request Reject
                  (AR) message

                  will contain the same value as the MassStatusReqID field in
                  the original

                  Order Mass Status Request (AF) message.
              rejCode:
                type: string
                title: |-
                  (587) The reason for the rejection. Valid values are:
                  1: Invalid message type
                  2: Invalid field
                  3: Invalid value
                  4: Unsupported feature
                  5: Insufficient permissions
                  6: Internal error
                  7: Timeout
                  8: Other
              text:
                type: string
                description: (588) A text description of the reason for the rejection.
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
            description: >-
              Order Mass Status Request Reject with fields, tags and
              descriptions.
  jim380.re.fix.QueryGetOrdersCancelRejectResponse:
    type: object
    properties:
      OrdersCancelReject:
        type: object
        properties:
          sessionID:
            type: string
            description: A string field that specifies the FIX session ID for the message.
          header:
            description: >-
              A Header field that contains standard header information for the
              message,

              such as the message type, sender and receiver identification, and
              sequence

              number.
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          orderID:
            type: string
            title: >-
              A string field that contains the ID of the order that was
              rejected. When an

              order is submitted to a trading venue or OMS, it assigns a unique
              orderID

              to that order to track and identify it within its system. If the
              order is

              subsequently rejected, the trading venue or OMS would typically
              provide the

              orderID associated with the rejected order in the
              OrdersCancelReject

              message
          origClOrdID:
            type: string
            description: >-
              A string field that contains the original client order ID for the
              order

              that was cancelled.
          clOrdID:
            type: string
            description: >-
              A string field that contains the client order ID for the order
              that was

              cancelled or modified.
          cxlRejReason:
            type: string
            format: int64
            title: >-
              An integer field that specifies the reason for the order
              cancellation

              rejection, using a standard set of values defined in the FIX
              protocol.

              Typically, the cxlRejReason field provides a numerical code or
              value that

              represents a specific reason for the order cancellation rejection.
              Examples

              of common cxlRejReason values in the FIX protocol include:
               0: Too Late to Cancel
               1: Unknown Order
               2: Broker/Exchange Option
               3: Order Already in Pending Cancel or Pending Replace Status
               4: Unable to Process Request
               5: Duplicate ClOrdID
               6: Unsupported Order Characteristic
               7: Other
          cxlRejResponseTo:
            type: string
            format: int64
            description: >-
              An integer field that specifies the message sequence number of the
              order

              cancellation request to which this message is responding. When an
              order

              cancellation request is submitted, it is assigned a unique message
              sequence

              number by the FIX engine or the trading system. This sequence
              number is

              used to track and identify specific messages within the order
              flow. The

              cxlRejResponseTo field in the OrdersCancelReject message is
              populated with

              the sequence number of the original order cancellation request
              message that

              resulted in the rejection.
          transactTime:
            type: string
            description: A string field that specifies the time of the transaction.
          trailer:
            description: >-
              A Trailer field that contains standard trailer information for the
              message,

              such as the message checksum.
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
  jim380.re.fix.QueryGetOrdersCancelRequestResponse:
    type: object
    properties:
      OrdersCancelRequest:
        type: object
        properties:
          sessionID:
            type: string
            title: A string field that specifies the FIX session ID for the message
          header:
            title: >-
              A Header field that contains standard header information for the
              message,

              such as the message type, sender and receiver identification, and
              sequence

              number
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          origClOrdID:
            type: string
            title: >-
              A string field that contains the original client order ID for the
              order

              that was cancelled
          clOrdID:
            type: string
            title: >-
              A string field that contains the client order ID for the order
              that was

              cancelled or modified
          trailer:
            title: >-
              A Trailer field that contains standard trailer information for the
              message,

              such as the message checksum
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
  jim380.re.fix.QueryGetOrdersExecutionReportResponse:
    type: object
    properties:
      OrdersExecutionReport:
        type: object
        properties:
          sessionID:
            type: string
            description: A string field that specifies the FIX session ID for the message.
          header:
            description: >-
              A Header field that contains standard header information for the
              message,

              such as the message type, sender and receiver identification, and
              sequence

              number.
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          clOrdID:
            type: string
            description: >-
              A string field that contains the client order ID for the order
              being

              reported.
          orderID:
            type: string
            title: >-
              A string field that contains the ID of the order being reported.
              OrderID is

              a string field that contains the unique identifier assigned to an
              order by

              the system or trading platform. It is typically generated by the
              system

              upon order submission and is used to uniquely identify the order
              within the

              system. The orderID is useful for internal system processes, such
              as order

              matching, order book management, and order status tracking
          execID:
            type: string
            title: >-
              A string field that contains the ID of the execution being
              reported, if

              any. It is a string field that contains the identifier assigned to
              a

              particular execution of an order. Each execution of an order
              typically has

              a separate execID associated with it. The execID can be used to
              uniquely

              identify and track a specific execution in the order execution
              report. It

              is useful for monitoring the status, details, and timing of
              individual

              executions within the overall order lifecycle. The execID field in
              the FIX

              protocol can be auto-generated by the trading venue or the FIX
              protocol

              software when responding with an execution report. The trading
              venue's

              execID serves as a local identifier within their own system to
              track and

              reference executions. It allows the trading venue to uniquely
              identify each

              execution and associate it with the relevant order and trade
              details. When

              sending an execution report to clients or counterparties via the
              FIX

              protocol, the trading venue includes its own generated execID
              value in the

              execution report message. This enables the recipient to correlate
              the

              execution report with the specific execution on the trading
              venue's side
          ordStatus:
            type: string
            description: >-
              A string field that indicates the current status of the order,
              such as

              "New", "Partially filled", "Filled", "Cancelled", "Pending
              Cancel",

              "Rejected", etc.
          execType:
            type: string
            description: >-
              A string field that indicates the type of the execution being
              reported,

              such as "New", "Partial fill", "Fill", "Done for day",
              "Cancelled", etc.
          symbol:
            type: string
            description: A string field that identifies the security being traded.
          side:
            type: string
            format: int64
            description: >-
              An integer field that specifies the side of the order (buy or
              sell).
          orderQty:
            type: string
            description: An integer field that specifies the quantity of the order.
          price:
            type: string
            description: An integer field that specifies the price of the order.
          timeInForce:
            type: string
            format: int64
            description: >-
              An integer field that specifies the time-in-force value for the
              order, such

              as "Day", "GTC" (Good 'Til Cancelled), "IOC" (Immediate or
              Cancel), etc.
          lastPx:
            type: string
            format: int64
            description: >-
              An integer field that specifies the price of the last execution,
              if any.
          lastQty:
            type: string
            format: int64
            description: >-
              An integer field that specifies the quantity of the last
              execution, if any.
          leavesQty:
            type: string
            format: int64
            description: >-
              An integer field that specifies the quantity of the order that
              remains open

              and has not yet been filled or cancelled.
          cumQty:
            type: string
            format: int64
            description: >-
              An integer field that specifies the total quantity of the order
              that has

              been filled.
          avgPx:
            type: string
            format: int64
            description: >-
              An integer field that specifies the average price of all
              executions that

              have occurred for the order.
          text:
            type: string
            description: >-
              A string field that provides additional information about the
              order status

              or execution, such as an error message or reason for rejection.
          transactTime:
            type: string
            description: A string field that specifies the time of the transaction.
          trailer:
            description: >-
              A Trailer field that contains standard trailer information for the
              message,

              such as the message checksum.
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
  jim380.re.fix.QueryGetOrdersResponse:
    type: object
    properties:
      Orders:
        type: object
        properties:
          sessionID:
            type: string
            description: >-
              A string used to identify the trading session for which the
              message is

              intended.
          header:
            description: |-
              A FIX protocol header containing standard message fields such as
              beginString, bodyLength, msgType, etc.
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          clOrdID:
            type: string
            title: >-
              A unique identifier assigned by the client to the order. It is
              used to

              identify the order in future messages related to the order
          symbol:
            type: string
            description: The symbol or instrument that the order is for.
          side:
            type: string
            format: int64
            title: >-
              An integer indicating whether the order is a buy or a sell. The
              values are

              typically 1 for buy and 2 for sell
          orderQty:
            type: string
            title: The quantity of the instrument that the order is for
          ordType:
            type: string
            format: int64
            title: >-
              An integer indicating the type of order. Common values include 1
              for

              market, 2 for limit, 3 for stop, and 4 for stop limit
          price:
            type: string
            title: >-
              The price at which the order should be executed. This field is
              required for

              limit and stop limit orders
          timeInForce:
            type: string
            format: int64
            title: >-
              An integer indicating how long the order should remain active.
              Common

              values include 0 for day, 1 for good till canceled, and 2 for fill
              or kill
          text:
            type: string
            description: >-
              A free-form text field that can be used to provide additional
              information

              about the order.
          transactTime:
            type: string
            title: The time the message was sent, expressed in UTC timestamp format
          trailer:
            title: >-
              A FIX protocol trailer containing standard message fields such as
              checkSum
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
        title: This message is used to represent orders in the FIX protocol
  jim380.re.fix.QueryGetQuoteResponse:
    type: object
    properties:
      Quote:
        type: object
        properties:
          sessionID:
            type: string
          quoteRequest:
            type: object
            properties:
              header:
                title: Standard header for the message
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              quoteReqID:
                type: string
                title: Unique identifier for the Quote Request message
              symbol:
                type: string
                title: Ticker symbol or instrument code for the security being quoted
              securityID:
                type: string
                title: Identifier for the security being quoted
              securityIDSource:
                type: string
                title: Specifies the source of the security identifier
              side:
                type: string
                title: Indicates whether the quote is for a buy or sell order
              orderQty:
                type: string
                title: Quantity of the security being quoted
              futSettDate:
                type: string
                title: Date of the future settlement
              settlDate2:
                type: string
                title: Secondary settlement date for the security
              account:
                type: string
                title: Account number for the order
              bidPx:
                type: string
                title: Price at which the buyer is willing to buy the security
              offerPx:
                type: string
                title: Price at which the seller is willing to sell the security
              currency:
                type: string
                title: Currency of the quoted price
              validUntilTime:
                type: string
                title: Time after which the quote is no longer valid
              expireTime:
                type: string
                title: Time at which the quote will expire
              quoteType:
                type: string
                title: Type of quote being requested (e.g. Indicative, Firm)
              bidSize:
                type: string
                title: Quantity of securities offered at the bid price
              offerSize:
                type: string
                title: Quantity of securities offered at the offer price
              mic:
                type: string
                title: Market identification code
              text:
                type: string
                description: Additional information or comments about the quote request.
              trailer:
                title: Standard trailer for the message
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
          quoteAcknowledgement:
            type: object
            properties:
              header:
                title: standard Header
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
              quoteReqID:
                type: string
                title: Unique identifier for the original Quote Request message
              quoteID:
                type: string
                title: Unique identifier for the Quote
              quoteStatus:
                type: string
                title: Status of the Quote (e.g. Accepted, Rejected, Expired)
              quoteType:
                type: string
                title: Type of Quote (e.g. Indicative, Firm)
              securityID:
                type: string
                title: dentifier for the security being quoted
              securityIDSource:
                type: string
                title: Specifies the source of the security identifier
              symbol:
                type: string
                title: Ticker symbol or instrument code for the security being quoted
              side:
                type: string
                title: indicates whether the quote is for a buy or sell order
              orderQty:
                type: string
                title: Quantity of the security being quoted
              lastQty:
                type: string
                title: Quantity of the last trade
              lastPx:
                type: string
                title: Price of the last trade
              bidPx:
                type: string
                title: Price at which the buyer is willing to buy the security
              offerPx:
                type: string
                title: Price at which the seller is willing to sell the security
              currency:
                type: string
                title: Currency of the quoted price
              settlDate:
                type: string
                title: Settlement date for the security
              validUntilTime:
                type: string
                title: Time after which the quote is no longer valid
              expireTime:
                type: string
                title: Time at which the quote will expire
              text:
                type: string
                title: Additional information or comments about the quote
              noQuoteQualifiers:
                type: string
                title: Number of Quote Qualifiers
              quoteQualifier:
                type: string
                title: Additional information about the quote (e.g. Yield, Size)
              noLegs:
                type: string
                title: Number of legs in the security (for multi-legged securities)
              legSymbol:
                type: string
                title: Ticker symbol or instrument code for each leg of the security
              legSecurityID:
                type: string
                title: Identifier for each leg of the security
              legSecurityIDSource:
                type: string
                title: >-
                  Specifies the source of the identifier for each leg of the
                  security
              legRatioQty:
                type: string
                title: Ratio of one leg to the other in a multi-legged security
              trailer:
                title: standard Trailer
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
          quoteRequestReject:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
              quoteReqID:
                type: string
                title: >-
                  The ID of the original Quote Request message that is being
                  rejected
              quoteRequestRejectReason:
                type: string
                description: >-
                  A code indicating the reason for rejecting the Quote Request,
                  Examples

                  include "Invalid instrument requested", "Unknown instrument",
                  "Unsupported

                  request type", etc.
              text:
                type: string
                title: >-
                  A human-readable description of the reason for rejecting the
                  Quote Request
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
  jim380.re.fix.QueryGetSecurityListResponse:
    type: object
    properties:
      SecurityList:
        type: object
        properties:
          sessionID:
            type: string
          securityListRequest:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: >-
                  (Tag 320): Unique identifier assigned by the requester to the
                  security

                  List Request message
              securityListRequestType:
                type: string
                title: (559) Type of Security List Request (x) being made
              noUnderlyings:
                type: string
                title: "(711) Undly\tN\tNumber of underlyings"
              noLegs:
                type: string
                title: (555) Number of legs that make up the Security
              currency:
                type: string
                title: (15)
              text:
                type: string
                description: "(58)\tComment, instructions, or other identifying information."
              encodedTextLen:
                type: string
                description: >-
                  (354) Must be set if EncodedText (355) field is specified and
                  must

                  immediately precede it.
              encodedText:
                type: string
                description: >-
                  (355) Encoded (non-ASCII characters) representation of the
                  Text (58) field

                  in the encoded format specified via the MessageEncoding (347)
                  field.
              tradingSessionID:
                type: string
                description: >-
                  (336) Optional Trading Session Identifier to specify a
                  particular trading

                  session for which you want to obtain a list of securities that
                  are

                  tradeable.
              tradingSessionSubID:
                type: string
                title: (625)
              subscriptionRequestType:
                type: string
                description: >-
                  (263) Subscribe or unsubscribe for security status to security
                  specified in

                  request.
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Security List Request with fields, tags and descriptions and
              MsgType = x
          SecurityListResponse:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: >-
                  (Tag 320): Unique identifier assigned by the requester to the
                  security

                  List Request message
              securityResponseID:
                type: string
                title: (322) Identifier for the Security List (y) message
              securityRequestResult:
                type: string
                title: >-
                  (560) Result of the Security Request identified by the
                  SecurityReqID (320)
              totNoRelatedSym:
                type: string
                description: >-
                  (393) Used to indicate if the total number of securities being
                  returned for

                  this request. Used in the event that message fragmentation is
                  required.
              lastFragment:
                type: string
                title: >-
                  string (893) Indicates if this message in a fragmented
                  response
              noRelatedSym:
                type: string
                title: >-
                  (146) Specifies the number of repeating symbols (instruments)
                  specified
              noUnderlyings:
                type: string
                title: (711) Number of underlyings
              currency:
                type: string
                title: (15)
              noLegs:
                type: string
                title: (555) Number of legs that make up the Security
              roundLot:
                type: string
                title: (561)
              minTradeVol:
                type: string
                title: (562)
              tradingSessionID:
                type: string
                title: (336)
              tradingSessionSubID:
                type: string
                title: (625)
              expirationCycle:
                type: string
                title: (827)
              text:
                type: string
                description: (58) Comment, instructions, or other identifying information.
              encodedTextLen:
                type: string
                description: >-
                  (354) Must be set if EncodedText (355) field is specified and
                  must

                  immediately precede it.
              encodedText:
                type: string
                title: >-
                  (355) Encoded (non-ASCII characters) representation of the
                  Text (58) field

                  in the encoded format specified via the MessageEncoding (347)
                  field
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Security List Response  with fields, tags and descriptions and
              MsgType = y
          securityListRequestReject:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: >-
                  (Tag 320): Unique identifier assigned by the requester to the
                  security

                  List Request message
              securityListRequestType:
                type: string
                title: (559) Type of security list request being made
              securityRequestResult:
                type: string
                title: "(560)\tResult of the security list request"
              text:
                type: string
                title: "(58)\tComment, instructions, or other identifying information"
              encodedTextLen:
                type: string
                title: >-
                  (354)  Must be set if EncodedText (355) field is specified and
                  must

                  immediately precede it
              encodedText:
                type: string
                title: "(355)\tEncoded (non-ASCII characters) representation of the Text (58)\nfield"
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Security List Request Reject with fields, tags and descriptions
              and MsgType =

              y
  jim380.re.fix.QueryGetSecurityResponse:
    type: object
    properties:
      Security:
        type: object
        properties:
          sessionID:
            type: string
          securityDefinitionRequest:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: >-
                  (Tag 320): Unique identifier assigned by the requester to the
                  security

                  definition request message
              securityRequestType:
                type: string
                title: >-
                  (Tag 321): Specifies the type of security definition being
                  requested (e.g.,

                  requesting all securities, by symbol, by security type, etc.)
              symbol:
                type: string
                description: '(Tag 55): Unique identifier for the security being requested.'
              securityExchange:
                type: string
                description: >-
                  (Tag 207): Code or identifier representing the exchange where
                  the security

                  is listed.
              issuer:
                type: string
                description: >-
                  (Tag 106): Identifier of the issuer or issuer-specific
                  identifier for the

                  security.
              securityDesc:
                type: string
                title: '(Tag 107): Description or name of the security'
              securityType:
                type: string
                title: >-
                  (Tag 167): Type of the security (e.g., stock, bond, option,
                  future)
              currency:
                type: string
                title: '(Tag 15): Currency in which the security is denominated'
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Security Definition Request with fields, tags and descriptions.
          securityDefinition:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                description: >-
                  (Tag 320): Unique identifier of the original security
                  definition request.
              securityResponseID:
                type: string
                title: >-
                  (Tag 322): Unique identifier assigned by the responder to the
                  security

                  definition message
              securityResponseType:
                type: string
                description: >-
                  (Tag 323): Type of response to the security definition request
                  (e.g.,

                  acceptance, rejection, etc.).
              symbol:
                type: string
                description: '(Tag 55): Unique identifier for the security.'
              securityExchange:
                type: string
                description: >-
                  (Tag 207): Code or identifier representing the exchange where
                  the security

                  is listed.
              issuer:
                type: string
                description: >-
                  (Tag 106): Identifier of the issuer or issuer-specific
                  identifier for the

                  security.
              SecurityDesc:
                type: string
                description: '(Tag 107): Description or name of the security.'
              SecurityType:
                type: string
                description: >-
                  (Tag 167): Type of the security (e.g., stock, bond, option,
                  future).
              currency:
                type: string
                description: '(Tag 15): Currency in which the security is denominated.'
              contractMultiplier:
                type: string
                description: >-
                  (Tag 231): Multiplier applied to the contract size to
                  calculate the actual

                  quantity.
              minPriceIncrement:
                type: string
                description: '(Tag 969): Minimum price increment for the security.'
              minPriceIncrementAmount:
                type: string
                description: >-
                  (Tag 1146): Minimum price increment expressed as a monetary
                  amount.
              unitOfMeasure:
                type: string
                description: '(Tag 996): Unit of measure for the contract size.'
              priceUnitOfMeasure:
                type: string
                description: '(Tag 1191): Unit of measure for the price.'
              settlType:
                type: string
                description: '(Tag 63): Type of settlement for the security.'
              settlDate:
                type: string
                description: '(Tag 64): Date of settlement for the security.'
              maturityMonthYear:
                type: string
                description: '(Tag 200): Month and year of maturity for the security.'
              couponRate:
                type: string
                description: '(Tag 223): Coupon rate or interest rate for the security.'
              factor:
                type: string
                description: >-
                  (Tag 228): Factor applied to the price to calculate the actual
                  value.
              creditRating:
                type: string
                description: '(Tag 255): Credit rating assigned to the security.'
              securityExchangeID:
                type: string
                description: '(Tag 2076): Unique identifier for the security exchange.'
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Security Definition with fields, tags and descriptions.
          securityDefinitionRequestReject:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: >-
                  (Tag 320): Unique identifier of the rejected security
                  definition request
              securityRequestResult:
                type: string
                title: >-
                  (Tag 560): Result of the security definition request (e.g.,
                  successful,

                  invalid security, etc.)
              securityRequestError:
                type: string
                description: >-
                  (Tag 561): Description of the error or reason for rejecting
                  the security

                  definition request.
              securityRequestErrorCode:
                type: string
                description: >-
                  (Tag 562): Code indicating the specific error or reason for
                  rejecting the

                  request.
              text:
                type: string
                title: >-
                  (Tag 58): Additional free-text description or information
                  related to the

                  rejection
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: >-
              Security Definition Request Rejeect with fields, tags and
              descriptions.
  jim380.re.fix.QueryGetSecurityStatusResponse:
    type: object
    properties:
      SecurityStatus:
        type: object
        properties:
          sessionID:
            type: string
          securityStatusRequest:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              SecurityStatusReqID:
                type: string
                description: >-
                  (324) Must be unique, or the ID of previous Security Status
                  Request (e) to

                  disable if SubscriptionRequestType (263) = Disable previous
                  Snapshot +

                  Updates Request (2).
              instrument:
                type: string
              noUnderlyings:
                type: string
                title: (711) Number of underlyings
              underlyingInstrument:
                type: string
                title: Must be provided if Number of underlyings > 0
              noLegs:
                type: string
                title: (555) Number of legs that make up the Security
              instrumentLeg:
                type: string
                title: Required if NoLegs (555) > 0
              currency:
                type: string
                title: (15)
              subscriptionRequestType:
                type: string
                title: >-
                  (263) SubscriptionRequestType indicates to the other party
                  what type of

                  response is expected. A snapshot request only asks for current
                  information.

                  A subscribe request asks for updates as the status changes.
                  Unsubscribe

                  will cancel any future update messages from the counter
                  party.)
              tradingSessionID:
                type: string
                title: (336)
              tradingSessionSubID:
                type: string
                title: (625)
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Security Status Request with fields, tags and descriptions and
              MsgType = e
          securityStatusResponse:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityStatusReqID:
                type: string
                title: (324)
              noUnderlyings:
                type: string
                title: (711) Number of underlyings
              underlyingInstrument:
                type: string
                title: Must be provided if Number of underlyings > 0
              noLegs:
                type: string
                title: (555) Required for multileg quotes
              instrumentLeg:
                type: string
                title: Required if NoLegs (555) > 0
              currency:
                type: string
                title: (15)
              tradingSessionID:
                type: string
                title: (336)
              tradingSessionSubID:
                type: string
                title: (625)
              unsolicitedIndicator:
                type: string
                title: >-
                  (325) Set to 'Y' if message is sent as a result of a
                  subscription request

                  not a snapshot request
              securityTradingStatus:
                type: string
                description: >-
                  (326) Identifies the trading status applicable to the
                  transaction.
              financialStatus:
                type: string
                title: (291)
              corporateAction:
                type: string
                title: (292)
              haltReason:
                type: string
                description: >-
                  (327) Denotes the reason for the Opening Delay or Trading
                  Halt.
              inViewOfCommon:
                type: string
                title: (328)
              dueToRelated:
                type: string
                title: (329)
              buyVolume:
                type: string
                title: (330)
              sellVolume:
                type: string
                title: (331)
              highPx:
                type: string
                title: (332)
              lowPx:
                type: string
                title: (333)
              lastPx:
                type: string
                description: >-
                  (31) Represents the last price for that security either on a
                  Consolidated

                  or an individual participant basis at the time it is
                  disseminated.
              transactTime:
                type: string
                title: (60) Trade Dissemination Time
              adjustment:
                type: string
                title: (334)
              text:
                type: string
                description: (58) Comment, instructions, or other identifying information.
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Security Status Response with fields, tags and descriptions and
              MsgType = f
          securityStatusRequestReject:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityStatusReqID:
                type: string
                title: (324)
              securityRejectReason:
                type: string
                title: >-
                  (560) Reason for rejecting the Security Status Request, The

                  SecurityRejectReason field (Tag 560) in the Security Status
                  Request Reject

                  message (MsgType = AJ) indicates the reason for rejecting the
                  Security

                  Status Request. The values for the SecurityRejectReason field
                  can vary

                  depending on the implementation and version of the FIX
                  protocol. Here are

                  some common values that may be used: 0: Unknown symbol 1:
                  Exchange closed

                  2: Order exceeded limit

                  3: Invalid request

                  4: Unsupported request

                  5: Unauthorized request

                  6: Duplicate request

                  7: System unavailable

                  8: Security not found

                  9: Other
              text:
                type: string
                title: (58) Additional text or comment regarding the rejection
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Security Status Request Reject with fields, tags and descriptions
              and MsgType

              = AJ
  jim380.re.fix.QueryGetSecurityTypesResponse:
    type: object
    properties:
      SecurityTypes:
        type: object
        properties:
          sessionID:
            type: string
          securityTypesRequest:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: (320)
              text:
                type: string
                description: (58) Comment, instructions, or other identifying information.
              tradingSessionID:
                type: string
                description: >-
                  (336) Optional Trading Session Identifier to specify a
                  particular trading

                  session for which you want to obtain a list of securities that
                  are

                  tradeable.
              tradingSessionSubID:
                type: string
                title: (625)
              product:
                type: string
                title: (460) Used to qualify which security types are returned
              securityType:
                type: string
                title: (167) Used to qualify which security type is returned
              securitySubType:
                type: string
                title: (762) Used to qualify which security types are returned
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Security Types Request with fields, tags and descriptions.
          SecurityTypesResponse:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: (320)
              securityResponseID:
                type: string
                title: (322) Identifier for the security response message
              securityResponseType:
                type: string
                title: >-
                  (323) The result of the security request identified by
                  SecurityReqID (320)
              totNoSecurityTypes:
                type: string
                title: >-
                  (557) Indicates total number of security types in the event
                  that multiple

                  Security Type messages are used to return results
              lastFragment:
                type: string
                title: (893) Indicates if this message in a fragmented response
              noSecurityTypes:
                type: string
                title: (558)
              securityType:
                type: string
                title: (167) Required if NoSecurityTypes (558) > 0
              securitySubType:
                type: string
                title: (762)
              product:
                type: string
                title: (460)
              cFICode:
                type: string
                title: >-
                  (461) Indicates the type of security using ISO 10962 standard,

                  Classification of Financial Instruments (CFI code) values. ISO
                  10962 is

                  maintained by ANNA (Association of National Numbering
                  Agencies) acting as

                  Registration Authority
              text:
                type: string
                description: (58) Comment, instructions, or other identifying information.
              tradingSessionID:
                type: string
                description: >-
                  (336) Optional Trading Session Identifier to specify a
                  particular trading

                  session for which you want to obtain a list of securities that
                  are

                  tradeable.
              tradingSessionSubID:
                type: string
                title: (625)
              subscriptionRequestType:
                type: string
                description: >-
                  (263) Subscribe or unsubscribe for security status to security
                  specified in

                  request.
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Security Types Response with fields, tags and descriptions.
          SecurityTypesRequestReject:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              securityReqID:
                type: string
                title: >-
                  (320) Identifier for the security request message that was
                  rejected
              rejectReason:
                type: string
                title: (350) Reason for rejecting the security request
              text:
                type: string
                title: (58) Comment, instructions, or other identifying information
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Security Types Request Reject with fields, tags and descriptions.
  jim380.re.fix.QueryGetSessionLogoutResponse:
    type: object
    properties:
      SessionLogout:
        type: object
        properties:
          sessionID:
            type: string
            title: A string that identifies the session being logged out of
          sessionLogoutInitiator:
            title: The message sent by the party that initiates the logout
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
              text:
                type: string
                title: >-
                  A free-form text field that can be used to provide additional
                  information

                  about the logout
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
          sessionLogoutAcceptor:
            title: The message sent by the party that confirms the logout
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
              text:
                type: string
                title: >-
                  A free-form text field that can be used to provide additional
                  information

                  about the logout
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
        title: This message is used to initiate a logout session between two parties
  jim380.re.fix.QueryGetSessionRejectResponse:
    type: object
    properties:
      SessionReject:
        type: object
        properties:
          sessionID:
            type: string
            description: >-
              A string that identifies the session to which the rejected message
              belongs.
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          text:
            type: string
            title: >-
              A free-form text field that provides information about the
              rejection, such

              as the reason for the rejection or a description of the error
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
        title: This message is used to reject a FIX session
  jim380.re.fix.QueryGetSessionsResponse:
    type: object
    properties:
      Sessions:
        type: object
        properties:
          sessionID:
            type: string
          logonInitiator:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
              encryptMethod:
                type: string
                format: int64
                title: >-
                  An integer value indicating the encryption method to be used
                  for the

                  session
              heartBtInt:
                type: string
                format: int64
                title: >-
                  An integer value indicating the number of seconds between
                  heartbeats that

                  will be sent during the session. This is used to monitor the
                  connection

                  between the two parties
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
            title: >-
              This message is used by the initiator of a FIX session to initiate
              a

              connection with the acceptor
          logonAcceptor:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
              encryptMethod:
                type: string
                format: int64
                title: >-
                  An integer value indicating the encryption method to be used
                  for the

                  session
              heartBtInt:
                type: string
                format: int64
                title: >-
                  An integer value indicating the number of seconds between
                  heartbeats that

                  will be sent during the session. This is used to monitor the
                  connection

                  between the two parties
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
            title: >-
              This message is used by the acceptor of a FIX session to
              acknowledge the

              initiation of the connection by the initiator
          status:
            type: string
          IsAccepted:
            type: boolean
  jim380.re.fix.QueryGetTradeCaptureResponse:
    type: object
    properties:
      TradeCapture:
        type: object
        properties:
          sessionID:
            type: string
          tradeCaptureReport:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradeReportID:
                type: string
                description: (571) Unique identifier for the trade report.
              tradeReportTransType:
                type: string
                description: (487) Type of trade report (new, cancel, correction).
              tradeReportType:
                type: string
                description: (856) Type of trade report (real-time, end-of-day).
              trdType:
                type: string
                description: |-
                  Trade details
                  (828) Type of the trade (Block Trade, Exchange for Physical).
              trdSubType:
                type: string
                description: (829) Further information about the trade type.
              side:
                type: string
                description: (54) Buy or sell.
              orderQty:
                type: string
                description: (38) Quantity of the order involved in the trade.
              lastQty:
                type: string
                description: (32) Quantity of the last execution in the trade.
              lastPx:
                type: string
                description: (31) Price of the last execution in the trade.
              grossTradeAmt:
                type: string
                description: >-
                  (381) Total amount of the trade, including any commissions and
                  fees.
              execID:
                type: string
                description: |-
                  Trade identifiers
                  (17) Identifier for the execution of the trade.
              orderID:
                type: string
                description: (37) Identifier for the order associated with the trade.
              tradeID:
                type: string
                description: (1003) Unique identifier for the trade.
              origTradeID:
                type: string
                description: >-
                  (1126) Identifier for the original trade, in the case of a
                  trade

                  correction.
              symbol:
                type: string
                description: |-
                  Instrument details
                  (55) Symbol or code for the financial instrument traded.
              securityID:
                type: string
                description: (48) Identifier for the security traded.
              securityIDSource:
                type: string
                description: (22) Source of the security identifier.
              tradeDate:
                type: string
                description: |-
                  Trade dates and settlement
                  (75) Date of the trade.
              transactTime:
                type: string
                description: (60) Time at which the trade occurred.
              settlType:
                type: string
                description: (63) Settlement type of the trade.
              settlDate:
                type: string
                description: (64) Settlement date of the trade.
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Trade Capture Report with fields, tags and descriptions.
          tradeCaptureReportAcknowledgement:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradeReportID:
                type: string
                description: |-
                  Trade report details
                  (571) Identifier for the trade report being acknowledged.
              tradeID:
                type: string
                description: (1003) Unique identifier for the trade.
              secondaryTradeID:
                type: string
                description: (1040) Alternative identifier for the trade.
              tradeReportType:
                type: string
                description: (856) Type of trade report (real-time, end-of-day).
              trdType:
                type: string
                description: (828) Type of the trade (Block Trade, Exchange for Physical).
              trdSubType:
                type: string
                description: (829) Further information about the trade type.
              execType:
                type: string
                description: >-
                  (150) Status of the trade report (new, cancelled, corrected,
                  etc.).
              tradeReportRefID:
                type: string
                description: >-
                  (572) Identifier for the previous trade report being referred
                  to.
              secondaryTradeReportID:
                type: string
                description: (818) Alternative identifier for the trade report.
              tradeReportStatus:
                type: string
                description: (939) Status of the trade report (accepted, rejected, etc.).
              tradeTransType:
                type: string
                description: (487) Type of trade transaction (new, cancel, correction).
              tradeReportRejectReason:
                type: string
                format: int64
                description: (751) Reason why the trade report was rejected.
              text:
                type: string
                description: >-
                  Additional information

                  (58) Additional information about the trade report or
                  acknowledgement.
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: >-
              Trade Capture Report Acknowledgement with fields, tags and
              descriptions.
          tradeCaptureReportRejection:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradeReportID:
                type: string
                description: (571) The identifier for the trade report being rejected.
              tradeReportRejectReason:
                type: string
                format: int64
                description: (751) A code indicating why the trade report was rejected.
              tradeReportRejectRefID:
                type: string
                description: >-
                  (754) The identifier of the previous message (e.g., Trade
                  Capture Report)

                  to which this message refers.
              text:
                type: string
                description: >-
                  (58) A description of the reason for the trade report
                  rejection.
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Trade Capture Report Rejection with fields, tags and descriptions.
  jim380.re.fix.QueryGetTradingSessionListResponse:
    type: object
    properties:
      TradingSessionList:
        type: object
        properties:
          sessionID:
            type: string
          tradingSessionListRequest:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradSesReqID:
                type: string
                description: "(335)\tMust be unique, or the ID of previous Trading Session Status\nRequest (g) to disable if SubscriptionRequestType (263) = Disable previous\nSnapshot + Update Request (2)."
              tradingSessionID:
                type: string
                title: (336) Trading Session for which status is being requested
              tradingSessionSubID:
                type: string
                title: (625)
              securityExchange:
                type: string
                title: (207)
              tradSesMethod:
                type: string
                title: "(338) \tMethod of Trading"
              tradSesMode:
                type: string
                title: (339) Trading Session Mode
              subscriptionRequestType:
                type: string
                title: (263)
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Trading Session List Request with fields, tags and descriptions.
              MsgType = BI
          tradingSessionListResponse:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradSesReqID:
                type: string
                title: "(335)\tProvided for a response to a specific Trading Session List\nRequest (BI) message (snapshot)"
              noTradingSessions:
                type: string
                title: (386)
              tradingSessionID:
                type: string
                title: (336) Identifier for Trading Session
              tradingSessionSubID:
                type: string
                title: (625)
              securityExchange:
                type: string
                title: (207)
              tradSesMethod:
                type: string
                title: (338) Method of Trading
              tradSesMode:
                type: string
                title: "(339) \tTrading Session Mode"
              unsolicitedIndicator:
                type: string
                title: >-
                  (325) "Y" if message is sent unsolicited as a result of a
                  previous

                  subscription request
              tradSesStatus:
                type: string
                description: (340) State of trading session.
              tradSesStatusRejReason:
                type: string
                description: (567) Used with TradSesStatus (340) = "Request Rejected".
              tradSesStartTime:
                type: string
                title: (341) Starting time of trading session
              tradSesOpenTime:
                type: string
                title: (342) Time of the opening of the trading session
              tradSesPreCloseTime:
                type: string
                title: (343) Time of pre-close of trading session
              tradSesCloseTime:
                type: string
                title: (344) Closing time of trading session
              tradSesEndTime:
                type: string
                title: (345)
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Trading Session List Response with fields, tags and descriptions.
              MsgType =

              BJ
          tradingSessionListRequestReject:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradSesReqID:
                type: string
                description: "(335)\tMatches the ID of the rejected Trading Session List Request (BI)\nmessage."
              tradSesStatus:
                type: string
                description: "(340)\tIndicates the status of the trading session request. Set to \"0\"\n(Rejected) for a request reject message."
              tradSesStatusRejReason:
                type: string
                description: (567) Reason for rejecting the trading session request.
              text:
                type: string
                description: >-
                  (58) Optional additional text providing further details about
                  the

                  rejection.
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            title: >-
              Trading Session List Request Reject with fields, tags and
              descriptions.

              MsgType = BK
  jim380.re.fix.QueryGetTradingSessionResponse:
    type: object
    properties:
      TradingSession:
        type: object
        properties:
          sessionID:
            type: string
          tradingSessionStatusRequest:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradingSessionID:
                type: string
                title: "(336)\tIdentifies the specific trading session for which status is\nrequested"
              tradingSessionSubID:
                type: string
                title: "(625)\tIdentifies a specific sub-session or sub-segment within a\ntrading session"
              tradSesReqID:
                type: string
                title: "(335)\tUnique identifier assigned by the party generating the request"
              marketID:
                type: string
                title: "(1301)\tIdentifies the market or exchange for which the trading session\nstatus is requested"
              subscriptionRequest:
                type: string
                title: >-
                  (263) Indicates whether the request is for a one-time snapshot
                  or

                  subscription for updates
              securityID:
                type: string
                title: "(48)\tIdentifier for the security being traded in the session"
              securityIDSource:
                type: string
                title: "(22)\tIdentifies the source of the security identifier"
              symbol:
                type: string
                title: "(55)\tSymbol representing the security being traded in the session"
              securityExchange:
                type: string
                title: "207\tExchange where the security is listed"
              marketSegmentID:
                type: string
                title: "(1300)\tIdentifies the specific market segment or sector within the\ntrading session"
              tradSesReqType:
                type: integer
                format: int32
                title: (263) Type of trading session status request
              tradSesSubReqType:
                type: integer
                format: int32
                title: "(123)\tSub-type of trading session status request"
              tradSesMode:
                type: integer
                format: int32
                title: "(338)\tMethod used to determine the trading session"
              tradingSessionDate:
                type: string
                title: >-
                  (336) Date of the trading session for which status is
                  requested
              tradingSessionTime:
                type: string
                title: (338)Time of the trading session for which status is requested
              tradingSessionSubTime:
                type: string
                title: >-
                  (1147) Time of the sub-session or sub-segment within a trading
                  session
              expirationDate:
                type: string
                title: >-
                  (432) Date and time when the trading session status request is
                  no longer

                  valid and should be disregarded
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Trading Session Status Request with fields, tags and descriptions.
          tradingSessionStatus:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              tradSesReqID:
                type: string
                title: "(335)\tUnique identifier assigned by the party generating the request"
              tradingSessionID:
                type: string
                title: (336) Identifies the specific trading session
              tradSesStatus:
                type: integer
                format: int32
                title: (340) Indicates the current status of the trading session
              tradSesStatusRejReason:
                type: integer
                format: int32
                title: >-
                  (567) Provides a reason for rejecting or invalidating a
                  trading session

                  status
              tradSesStartTime:
                type: string
                title: (341) Time at which the trading session is scheduled to start
              tradSesOpenTime:
                type: string
                title: (342) Time at which the trading session opens
              tradSesPreCloseTime:
                type: string
                title: "(343)\tTime at which the trading session pre-closes"
              tradSesCloseTime:
                type: string
                title: "(344)\tTime at which the trading session closes"
              tradSesEndTime:
                type: string
                title: (345) Time at which the trading session is scheduled to end
              totalVolumeTraded:
                type: integer
                format: int32
                title: >-
                  (387) Total quantity of contracts or shares traded during the
                  trading

                  session
              tradSesHighPx:
                type: string
                title: "(1149)\tHighest price traded during the trading session"
              tradSesLowPx:
                type: string
                title: "(1148)\tLowest price traded during the trading session"
              securityID:
                type: string
                title: "(48)\tIdentifier for the security being traded in the session"
              securityIDSource:
                type: string
                title: "(22)\tIdentifies the source of the security identifier"
              symbol:
                type: string
                title: >-
                  (55) Symbol representing the security being traded in the
                  session
              securityExchange:
                type: string
                title: "(207)\tExchange where the security is listed"
              marketSegmentID:
                type: string
                title: "1300\tIdentifies the specific market segment or sector within the\ntrading session"
              marketID:
                type: string
                title: "1301\tIdentifies the market or exchange for the trading session"
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: Trading Session Status with fields, tags and descriptions.
          tradingSessionStatusRequestReject:
            type: object
            properties:
              header:
                type: object
                properties:
                  beginString:
                    type: string
                    description: >-
                      This field specifies the version of the FIX protocol being
                      used. For

                      example, "FIX.4.4" indicates version 4.4 of the protocol.
                  bodyLength:
                    type: string
                    format: int64
                    description: >-
                      This field specifies the length of the message body in
                      bytes.
                  msgType:
                    type: string
                    title: >-
                      This field identifies the type of message being sent. For
                      example, "D"

                      indicates a New Order Single message
                  senderCompID:
                    type: string
                    title: >-
                      This field identifies the sender of the message. This is
                      typically a unique

                      identifier assigned to each party that uses the FIX
                      protocol
                  targetCompID:
                    type: string
                    description: This field identifies the recipient of the message.
                  msgSeqNum:
                    type: string
                    format: int64
                    title: >-
                      Is a field in the FIX protocol message header that is used
                      to assign a

                      unique sequence number to each message
                  sendingTime:
                    type: string
                    title: This field specifies the time that the message was sent
                title: >-
                  This message header contains fields that identify the message
                  being sent and

                  its sender and recipient
                description: Standard FIX message header.
              refSeqNum:
                type: string
                title: "(45)\tReference id of the rejected request message"
              refMsgType:
                type: string
                title: "(372)\tMessage type of the rejected request"
              sessionRejectReason:
                type: integer
                format: int32
                title: "(373)\tCode indicating the reason for rejecting the trading session\nstatus request"
              text:
                type: string
                title: "58\tFree-form text providing additional information about the rejection"
              trailer:
                type: object
                properties:
                  checkSum:
                    type: string
                    format: int64
                    description: >-
                      The checksum value is calculated by summing the ASCII
                      values of all

                      characters in the message (excluding the SOH (start of
                      header) and ETX (end

                      of text) characters), taking the sum modulo 256, and
                      converting the result

                      to a two-character hexadecimal string.
                title: >-
                  This message trailer contains a checksum field that is used to
                  ensure message

                  integrity
                description: Standard FIX message trailer.
            description: >-
              Trading Session Status Request Reject with fields, tags and
              descriptions.
  jim380.re.fix.QueryParamsResponse:
    type: object
    properties:
      params:
        description: params holds all the parameters of this module.
        type: object
    description: QueryParamsResponse is response type for the Query/Params RPC method.
  jim380.re.fix.QuerySessionByIDQuoteResponse:
    type: object
    properties:
      Quote:
        type: array
        items:
          type: object
          properties:
            sessionID:
              type: string
            quoteRequest:
              type: object
              properties:
                header:
                  title: Standard header for the message
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                quoteReqID:
                  type: string
                  title: Unique identifier for the Quote Request message
                symbol:
                  type: string
                  title: >-
                    Ticker symbol or instrument code for the security being
                    quoted
                securityID:
                  type: string
                  title: Identifier for the security being quoted
                securityIDSource:
                  type: string
                  title: Specifies the source of the security identifier
                side:
                  type: string
                  title: Indicates whether the quote is for a buy or sell order
                orderQty:
                  type: string
                  title: Quantity of the security being quoted
                futSettDate:
                  type: string
                  title: Date of the future settlement
                settlDate2:
                  type: string
                  title: Secondary settlement date for the security
                account:
                  type: string
                  title: Account number for the order
                bidPx:
                  type: string
                  title: Price at which the buyer is willing to buy the security
                offerPx:
                  type: string
                  title: Price at which the seller is willing to sell the security
                currency:
                  type: string
                  title: Currency of the quoted price
                validUntilTime:
                  type: string
                  title: Time after which the quote is no longer valid
                expireTime:
                  type: string
                  title: Time at which the quote will expire
                quoteType:
                  type: string
                  title: Type of quote being requested (e.g. Indicative, Firm)
                bidSize:
                  type: string
                  title: Quantity of securities offered at the bid price
                offerSize:
                  type: string
                  title: Quantity of securities offered at the offer price
                mic:
                  type: string
                  title: Market identification code
                text:
                  type: string
                  description: Additional information or comments about the quote request.
                trailer:
                  title: Standard trailer for the message
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
            quoteAcknowledgement:
              type: object
              properties:
                header:
                  title: standard Header
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                quoteReqID:
                  type: string
                  title: Unique identifier for the original Quote Request message
                quoteID:
                  type: string
                  title: Unique identifier for the Quote
                quoteStatus:
                  type: string
                  title: Status of the Quote (e.g. Accepted, Rejected, Expired)
                quoteType:
                  type: string
                  title: Type of Quote (e.g. Indicative, Firm)
                securityID:
                  type: string
                  title: dentifier for the security being quoted
                securityIDSource:
                  type: string
                  title: Specifies the source of the security identifier
                symbol:
                  type: string
                  title: >-
                    Ticker symbol or instrument code for the security being
                    quoted
                side:
                  type: string
                  title: indicates whether the quote is for a buy or sell order
                orderQty:
                  type: string
                  title: Quantity of the security being quoted
                lastQty:
                  type: string
                  title: Quantity of the last trade
                lastPx:
                  type: string
                  title: Price of the last trade
                bidPx:
                  type: string
                  title: Price at which the buyer is willing to buy the security
                offerPx:
                  type: string
                  title: Price at which the seller is willing to sell the security
                currency:
                  type: string
                  title: Currency of the quoted price
                settlDate:
                  type: string
                  title: Settlement date for the security
                validUntilTime:
                  type: string
                  title: Time after which the quote is no longer valid
                expireTime:
                  type: string
                  title: Time at which the quote will expire
                text:
                  type: string
                  title: Additional information or comments about the quote
                noQuoteQualifiers:
                  type: string
                  title: Number of Quote Qualifiers
                quoteQualifier:
                  type: string
                  title: Additional information about the quote (e.g. Yield, Size)
                noLegs:
                  type: string
                  title: Number of legs in the security (for multi-legged securities)
                legSymbol:
                  type: string
                  title: >-
                    Ticker symbol or instrument code for each leg of the
                    security
                legSecurityID:
                  type: string
                  title: Identifier for each leg of the security
                legSecurityIDSource:
                  type: string
                  title: >-
                    Specifies the source of the identifier for each leg of the
                    security
                legRatioQty:
                  type: string
                  title: Ratio of one leg to the other in a multi-legged security
                trailer:
                  title: standard Trailer
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
            quoteRequestReject:
              type: object
              properties:
                header:
                  type: object
                  properties:
                    beginString:
                      type: string
                      description: >-
                        This field specifies the version of the FIX protocol
                        being used. For

                        example, "FIX.4.4" indicates version 4.4 of the
                        protocol.
                    bodyLength:
                      type: string
                      format: int64
                      description: >-
                        This field specifies the length of the message body in
                        bytes.
                    msgType:
                      type: string
                      title: >-
                        This field identifies the type of message being sent.
                        For example, "D"

                        indicates a New Order Single message
                    senderCompID:
                      type: string
                      title: >-
                        This field identifies the sender of the message. This is
                        typically a unique

                        identifier assigned to each party that uses the FIX
                        protocol
                    targetCompID:
                      type: string
                      description: This field identifies the recipient of the message.
                    msgSeqNum:
                      type: string
                      format: int64
                      title: >-
                        Is a field in the FIX protocol message header that is
                        used to assign a

                        unique sequence number to each message
                    sendingTime:
                      type: string
                      title: This field specifies the time that the message was sent
                  title: >-
                    This message header contains fields that identify the
                    message being sent and

                    its sender and recipient
                quoteReqID:
                  type: string
                  title: >-
                    The ID of the original Quote Request message that is being
                    rejected
                quoteRequestRejectReason:
                  type: string
                  description: >-
                    A code indicating the reason for rejecting the Quote
                    Request, Examples

                    include "Invalid instrument requested", "Unknown
                    instrument", "Unsupported

                    request type", etc.
                text:
                  type: string
                  title: >-
                    A human-readable description of the reason for rejecting the
                    Quote Request
                trailer:
                  type: object
                  properties:
                    checkSum:
                      type: string
                      format: int64
                      description: >-
                        The checksum value is calculated by summing the ASCII
                        values of all

                        characters in the message (excluding the SOH (start of
                        header) and ETX (end

                        of text) characters), taking the sum modulo 256, and
                        converting the result

                        to a two-character hexadecimal string.
                  title: >-
                    This message trailer contains a checksum field that is used
                    to ensure message

                    integrity
    title: get Quotes Response by sessionID
  jim380.re.fix.Quote:
    type: object
    properties:
      sessionID:
        type: string
      quoteRequest:
        type: object
        properties:
          header:
            title: Standard header for the message
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          quoteReqID:
            type: string
            title: Unique identifier for the Quote Request message
          symbol:
            type: string
            title: Ticker symbol or instrument code for the security being quoted
          securityID:
            type: string
            title: Identifier for the security being quoted
          securityIDSource:
            type: string
            title: Specifies the source of the security identifier
          side:
            type: string
            title: Indicates whether the quote is for a buy or sell order
          orderQty:
            type: string
            title: Quantity of the security being quoted
          futSettDate:
            type: string
            title: Date of the future settlement
          settlDate2:
            type: string
            title: Secondary settlement date for the security
          account:
            type: string
            title: Account number for the order
          bidPx:
            type: string
            title: Price at which the buyer is willing to buy the security
          offerPx:
            type: string
            title: Price at which the seller is willing to sell the security
          currency:
            type: string
            title: Currency of the quoted price
          validUntilTime:
            type: string
            title: Time after which the quote is no longer valid
          expireTime:
            type: string
            title: Time at which the quote will expire
          quoteType:
            type: string
            title: Type of quote being requested (e.g. Indicative, Firm)
          bidSize:
            type: string
            title: Quantity of securities offered at the bid price
          offerSize:
            type: string
            title: Quantity of securities offered at the offer price
          mic:
            type: string
            title: Market identification code
          text:
            type: string
            description: Additional information or comments about the quote request.
          trailer:
            title: Standard trailer for the message
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
      quoteAcknowledgement:
        type: object
        properties:
          header:
            title: standard Header
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
          quoteReqID:
            type: string
            title: Unique identifier for the original Quote Request message
          quoteID:
            type: string
            title: Unique identifier for the Quote
          quoteStatus:
            type: string
            title: Status of the Quote (e.g. Accepted, Rejected, Expired)
          quoteType:
            type: string
            title: Type of Quote (e.g. Indicative, Firm)
          securityID:
            type: string
            title: dentifier for the security being quoted
          securityIDSource:
            type: string
            title: Specifies the source of the security identifier
          symbol:
            type: string
            title: Ticker symbol or instrument code for the security being quoted
          side:
            type: string
            title: indicates whether the quote is for a buy or sell order
          orderQty:
            type: string
            title: Quantity of the security being quoted
          lastQty:
            type: string
            title: Quantity of the last trade
          lastPx:
            type: string
            title: Price of the last trade
          bidPx:
            type: string
            title: Price at which the buyer is willing to buy the security
          offerPx:
            type: string
            title: Price at which the seller is willing to sell the security
          currency:
            type: string
            title: Currency of the quoted price
          settlDate:
            type: string
            title: Settlement date for the security
          validUntilTime:
            type: string
            title: Time after which the quote is no longer valid
          expireTime:
            type: string
            title: Time at which the quote will expire
          text:
            type: string
            title: Additional information or comments about the quote
          noQuoteQualifiers:
            type: string
            title: Number of Quote Qualifiers
          quoteQualifier:
            type: string
            title: Additional information about the quote (e.g. Yield, Size)
          noLegs:
            type: string
            title: Number of legs in the security (for multi-legged securities)
          legSymbol:
            type: string
            title: Ticker symbol or instrument code for each leg of the security
          legSecurityID:
            type: string
            title: Identifier for each leg of the security
          legSecurityIDSource:
            type: string
            title: >-
              Specifies the source of the identifier for each leg of the
              security
          legRatioQty:
            type: string
            title: Ratio of one leg to the other in a multi-legged security
          trailer:
            title: standard Trailer
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
      quoteRequestReject:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          quoteReqID:
            type: string
            title: >-
              The ID of the original Quote Request message that is being
              rejected
          quoteRequestRejectReason:
            type: string
            description: >-
              A code indicating the reason for rejecting the Quote Request,
              Examples

              include "Invalid instrument requested", "Unknown instrument",
              "Unsupported

              request type", etc.
          text:
            type: string
            title: >-
              A human-readable description of the reason for rejecting the Quote
              Request
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
  jim380.re.fix.QuoteAcknowledgement:
    type: object
    properties:
      header:
        title: standard Header
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      quoteReqID:
        type: string
        title: Unique identifier for the original Quote Request message
      quoteID:
        type: string
        title: Unique identifier for the Quote
      quoteStatus:
        type: string
        title: Status of the Quote (e.g. Accepted, Rejected, Expired)
      quoteType:
        type: string
        title: Type of Quote (e.g. Indicative, Firm)
      securityID:
        type: string
        title: dentifier for the security being quoted
      securityIDSource:
        type: string
        title: Specifies the source of the security identifier
      symbol:
        type: string
        title: Ticker symbol or instrument code for the security being quoted
      side:
        type: string
        title: indicates whether the quote is for a buy or sell order
      orderQty:
        type: string
        title: Quantity of the security being quoted
      lastQty:
        type: string
        title: Quantity of the last trade
      lastPx:
        type: string
        title: Price of the last trade
      bidPx:
        type: string
        title: Price at which the buyer is willing to buy the security
      offerPx:
        type: string
        title: Price at which the seller is willing to sell the security
      currency:
        type: string
        title: Currency of the quoted price
      settlDate:
        type: string
        title: Settlement date for the security
      validUntilTime:
        type: string
        title: Time after which the quote is no longer valid
      expireTime:
        type: string
        title: Time at which the quote will expire
      text:
        type: string
        title: Additional information or comments about the quote
      noQuoteQualifiers:
        type: string
        title: Number of Quote Qualifiers
      quoteQualifier:
        type: string
        title: Additional information about the quote (e.g. Yield, Size)
      noLegs:
        type: string
        title: Number of legs in the security (for multi-legged securities)
      legSymbol:
        type: string
        title: Ticker symbol or instrument code for each leg of the security
      legSecurityID:
        type: string
        title: Identifier for each leg of the security
      legSecurityIDSource:
        type: string
        title: Specifies the source of the identifier for each leg of the security
      legRatioQty:
        type: string
        title: Ratio of one leg to the other in a multi-legged security
      trailer:
        title: standard Trailer
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
  jim380.re.fix.QuoteRequest:
    type: object
    properties:
      header:
        title: Standard header for the message
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
      quoteReqID:
        type: string
        title: Unique identifier for the Quote Request message
      symbol:
        type: string
        title: Ticker symbol or instrument code for the security being quoted
      securityID:
        type: string
        title: Identifier for the security being quoted
      securityIDSource:
        type: string
        title: Specifies the source of the security identifier
      side:
        type: string
        title: Indicates whether the quote is for a buy or sell order
      orderQty:
        type: string
        title: Quantity of the security being quoted
      futSettDate:
        type: string
        title: Date of the future settlement
      settlDate2:
        type: string
        title: Secondary settlement date for the security
      account:
        type: string
        title: Account number for the order
      bidPx:
        type: string
        title: Price at which the buyer is willing to buy the security
      offerPx:
        type: string
        title: Price at which the seller is willing to sell the security
      currency:
        type: string
        title: Currency of the quoted price
      validUntilTime:
        type: string
        title: Time after which the quote is no longer valid
      expireTime:
        type: string
        title: Time at which the quote will expire
      quoteType:
        type: string
        title: Type of quote being requested (e.g. Indicative, Firm)
      bidSize:
        type: string
        title: Quantity of securities offered at the bid price
      offerSize:
        type: string
        title: Quantity of securities offered at the offer price
      mic:
        type: string
        title: Market identification code
      text:
        type: string
        description: Additional information or comments about the quote request.
      trailer:
        title: Standard trailer for the message
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
  jim380.re.fix.QuoteRequestReject:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      quoteReqID:
        type: string
        title: The ID of the original Quote Request message that is being rejected
      quoteRequestRejectReason:
        type: string
        description: >-
          A code indicating the reason for rejecting the Quote Request, Examples

          include "Invalid instrument requested", "Unknown instrument",
          "Unsupported

          request type", etc.
      text:
        type: string
        title: >-
          A human-readable description of the reason for rejecting the Quote
          Request
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
  jim380.re.fix.Security:
    type: object
    properties:
      sessionID:
        type: string
      securityDefinitionRequest:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: >-
              (Tag 320): Unique identifier assigned by the requester to the
              security

              definition request message
          securityRequestType:
            type: string
            title: >-
              (Tag 321): Specifies the type of security definition being
              requested (e.g.,

              requesting all securities, by symbol, by security type, etc.)
          symbol:
            type: string
            description: '(Tag 55): Unique identifier for the security being requested.'
          securityExchange:
            type: string
            description: >-
              (Tag 207): Code or identifier representing the exchange where the
              security

              is listed.
          issuer:
            type: string
            description: >-
              (Tag 106): Identifier of the issuer or issuer-specific identifier
              for the

              security.
          securityDesc:
            type: string
            title: '(Tag 107): Description or name of the security'
          securityType:
            type: string
            title: >-
              (Tag 167): Type of the security (e.g., stock, bond, option,
              future)
          currency:
            type: string
            title: '(Tag 15): Currency in which the security is denominated'
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Security Definition Request with fields, tags and descriptions.
      securityDefinition:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            description: >-
              (Tag 320): Unique identifier of the original security definition
              request.
          securityResponseID:
            type: string
            title: >-
              (Tag 322): Unique identifier assigned by the responder to the
              security

              definition message
          securityResponseType:
            type: string
            description: >-
              (Tag 323): Type of response to the security definition request
              (e.g.,

              acceptance, rejection, etc.).
          symbol:
            type: string
            description: '(Tag 55): Unique identifier for the security.'
          securityExchange:
            type: string
            description: >-
              (Tag 207): Code or identifier representing the exchange where the
              security

              is listed.
          issuer:
            type: string
            description: >-
              (Tag 106): Identifier of the issuer or issuer-specific identifier
              for the

              security.
          SecurityDesc:
            type: string
            description: '(Tag 107): Description or name of the security.'
          SecurityType:
            type: string
            description: >-
              (Tag 167): Type of the security (e.g., stock, bond, option,
              future).
          currency:
            type: string
            description: '(Tag 15): Currency in which the security is denominated.'
          contractMultiplier:
            type: string
            description: >-
              (Tag 231): Multiplier applied to the contract size to calculate
              the actual

              quantity.
          minPriceIncrement:
            type: string
            description: '(Tag 969): Minimum price increment for the security.'
          minPriceIncrementAmount:
            type: string
            description: >-
              (Tag 1146): Minimum price increment expressed as a monetary
              amount.
          unitOfMeasure:
            type: string
            description: '(Tag 996): Unit of measure for the contract size.'
          priceUnitOfMeasure:
            type: string
            description: '(Tag 1191): Unit of measure for the price.'
          settlType:
            type: string
            description: '(Tag 63): Type of settlement for the security.'
          settlDate:
            type: string
            description: '(Tag 64): Date of settlement for the security.'
          maturityMonthYear:
            type: string
            description: '(Tag 200): Month and year of maturity for the security.'
          couponRate:
            type: string
            description: '(Tag 223): Coupon rate or interest rate for the security.'
          factor:
            type: string
            description: >-
              (Tag 228): Factor applied to the price to calculate the actual
              value.
          creditRating:
            type: string
            description: '(Tag 255): Credit rating assigned to the security.'
          securityExchangeID:
            type: string
            description: '(Tag 2076): Unique identifier for the security exchange.'
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Security Definition with fields, tags and descriptions.
      securityDefinitionRequestReject:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: >-
              (Tag 320): Unique identifier of the rejected security definition
              request
          securityRequestResult:
            type: string
            title: >-
              (Tag 560): Result of the security definition request (e.g.,
              successful,

              invalid security, etc.)
          securityRequestError:
            type: string
            description: >-
              (Tag 561): Description of the error or reason for rejecting the
              security

              definition request.
          securityRequestErrorCode:
            type: string
            description: >-
              (Tag 562): Code indicating the specific error or reason for
              rejecting the

              request.
          text:
            type: string
            title: >-
              (Tag 58): Additional free-text description or information related
              to the

              rejection
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: >-
          Security Definition Request Rejeect with fields, tags and
          descriptions.
  jim380.re.fix.SecurityDefinition:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        description: >-
          (Tag 320): Unique identifier of the original security definition
          request.
      securityResponseID:
        type: string
        title: |-
          (Tag 322): Unique identifier assigned by the responder to the security
          definition message
      securityResponseType:
        type: string
        description: |-
          (Tag 323): Type of response to the security definition request (e.g.,
          acceptance, rejection, etc.).
      symbol:
        type: string
        description: '(Tag 55): Unique identifier for the security.'
      securityExchange:
        type: string
        description: >-
          (Tag 207): Code or identifier representing the exchange where the
          security

          is listed.
      issuer:
        type: string
        description: >-
          (Tag 106): Identifier of the issuer or issuer-specific identifier for
          the

          security.
      SecurityDesc:
        type: string
        description: '(Tag 107): Description or name of the security.'
      SecurityType:
        type: string
        description: '(Tag 167): Type of the security (e.g., stock, bond, option, future).'
      currency:
        type: string
        description: '(Tag 15): Currency in which the security is denominated.'
      contractMultiplier:
        type: string
        description: >-
          (Tag 231): Multiplier applied to the contract size to calculate the
          actual

          quantity.
      minPriceIncrement:
        type: string
        description: '(Tag 969): Minimum price increment for the security.'
      minPriceIncrementAmount:
        type: string
        description: '(Tag 1146): Minimum price increment expressed as a monetary amount.'
      unitOfMeasure:
        type: string
        description: '(Tag 996): Unit of measure for the contract size.'
      priceUnitOfMeasure:
        type: string
        description: '(Tag 1191): Unit of measure for the price.'
      settlType:
        type: string
        description: '(Tag 63): Type of settlement for the security.'
      settlDate:
        type: string
        description: '(Tag 64): Date of settlement for the security.'
      maturityMonthYear:
        type: string
        description: '(Tag 200): Month and year of maturity for the security.'
      couponRate:
        type: string
        description: '(Tag 223): Coupon rate or interest rate for the security.'
      factor:
        type: string
        description: '(Tag 228): Factor applied to the price to calculate the actual value.'
      creditRating:
        type: string
        description: '(Tag 255): Credit rating assigned to the security.'
      securityExchangeID:
        type: string
        description: '(Tag 2076): Unique identifier for the security exchange.'
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Security Definition with fields, tags and descriptions.
  jim380.re.fix.SecurityDefinitionRequest:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: |-
          (Tag 320): Unique identifier assigned by the requester to the security
          definition request message
      securityRequestType:
        type: string
        title: >-
          (Tag 321): Specifies the type of security definition being requested
          (e.g.,

          requesting all securities, by symbol, by security type, etc.)
      symbol:
        type: string
        description: '(Tag 55): Unique identifier for the security being requested.'
      securityExchange:
        type: string
        description: >-
          (Tag 207): Code or identifier representing the exchange where the
          security

          is listed.
      issuer:
        type: string
        description: >-
          (Tag 106): Identifier of the issuer or issuer-specific identifier for
          the

          security.
      securityDesc:
        type: string
        title: '(Tag 107): Description or name of the security'
      securityType:
        type: string
        title: '(Tag 167): Type of the security (e.g., stock, bond, option, future)'
      currency:
        type: string
        title: '(Tag 15): Currency in which the security is denominated'
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Security Definition Request with fields, tags and descriptions.
  jim380.re.fix.SecurityDefinitionRequestReject:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: >-
          (Tag 320): Unique identifier of the rejected security definition
          request
      securityRequestResult:
        type: string
        title: >-
          (Tag 560): Result of the security definition request (e.g.,
          successful,

          invalid security, etc.)
      securityRequestError:
        type: string
        description: >-
          (Tag 561): Description of the error or reason for rejecting the
          security

          definition request.
      securityRequestErrorCode:
        type: string
        description: >-
          (Tag 562): Code indicating the specific error or reason for rejecting
          the

          request.
      text:
        type: string
        title: >-
          (Tag 58): Additional free-text description or information related to
          the

          rejection
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Security Definition Request Rejeect with fields, tags and descriptions.
  jim380.re.fix.SecurityList:
    type: object
    properties:
      sessionID:
        type: string
      securityListRequest:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: >-
              (Tag 320): Unique identifier assigned by the requester to the
              security

              List Request message
          securityListRequestType:
            type: string
            title: (559) Type of Security List Request (x) being made
          noUnderlyings:
            type: string
            title: "(711) Undly\tN\tNumber of underlyings"
          noLegs:
            type: string
            title: (555) Number of legs that make up the Security
          currency:
            type: string
            title: (15)
          text:
            type: string
            description: "(58)\tComment, instructions, or other identifying information."
          encodedTextLen:
            type: string
            description: |-
              (354) Must be set if EncodedText (355) field is specified and must
              immediately precede it.
          encodedText:
            type: string
            description: >-
              (355) Encoded (non-ASCII characters) representation of the Text
              (58) field

              in the encoded format specified via the MessageEncoding (347)
              field.
          tradingSessionID:
            type: string
            description: >-
              (336) Optional Trading Session Identifier to specify a particular
              trading

              session for which you want to obtain a list of securities that are

              tradeable.
          tradingSessionSubID:
            type: string
            title: (625)
          subscriptionRequestType:
            type: string
            description: >-
              (263) Subscribe or unsubscribe for security status to security
              specified in

              request.
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Security List Request with fields, tags and descriptions and MsgType =
          x
      SecurityListResponse:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: >-
              (Tag 320): Unique identifier assigned by the requester to the
              security

              List Request message
          securityResponseID:
            type: string
            title: (322) Identifier for the Security List (y) message
          securityRequestResult:
            type: string
            title: >-
              (560) Result of the Security Request identified by the
              SecurityReqID (320)
          totNoRelatedSym:
            type: string
            description: >-
              (393) Used to indicate if the total number of securities being
              returned for

              this request. Used in the event that message fragmentation is
              required.
          lastFragment:
            type: string
            title: string (893) Indicates if this message in a fragmented response
          noRelatedSym:
            type: string
            title: >-
              (146) Specifies the number of repeating symbols (instruments)
              specified
          noUnderlyings:
            type: string
            title: (711) Number of underlyings
          currency:
            type: string
            title: (15)
          noLegs:
            type: string
            title: (555) Number of legs that make up the Security
          roundLot:
            type: string
            title: (561)
          minTradeVol:
            type: string
            title: (562)
          tradingSessionID:
            type: string
            title: (336)
          tradingSessionSubID:
            type: string
            title: (625)
          expirationCycle:
            type: string
            title: (827)
          text:
            type: string
            description: (58) Comment, instructions, or other identifying information.
          encodedTextLen:
            type: string
            description: |-
              (354) Must be set if EncodedText (355) field is specified and must
              immediately precede it.
          encodedText:
            type: string
            title: >-
              (355) Encoded (non-ASCII characters) representation of the Text
              (58) field

              in the encoded format specified via the MessageEncoding (347)
              field
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Security List Response  with fields, tags and descriptions and MsgType
          = y
      securityListRequestReject:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: >-
              (Tag 320): Unique identifier assigned by the requester to the
              security

              List Request message
          securityListRequestType:
            type: string
            title: (559) Type of security list request being made
          securityRequestResult:
            type: string
            title: "(560)\tResult of the security list request"
          text:
            type: string
            title: "(58)\tComment, instructions, or other identifying information"
          encodedTextLen:
            type: string
            title: >-
              (354)  Must be set if EncodedText (355) field is specified and
              must

              immediately precede it
          encodedText:
            type: string
            title: "(355)\tEncoded (non-ASCII characters) representation of the Text (58)\nfield"
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Security List Request Reject with fields, tags and descriptions and
          MsgType =

          y
  jim380.re.fix.SecurityListRequest:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: |-
          (Tag 320): Unique identifier assigned by the requester to the security
          List Request message
      securityListRequestType:
        type: string
        title: (559) Type of Security List Request (x) being made
      noUnderlyings:
        type: string
        title: "(711) Undly\tN\tNumber of underlyings"
      noLegs:
        type: string
        title: (555) Number of legs that make up the Security
      currency:
        type: string
        title: (15)
      text:
        type: string
        description: "(58)\tComment, instructions, or other identifying information."
      encodedTextLen:
        type: string
        description: |-
          (354) Must be set if EncodedText (355) field is specified and must
          immediately precede it.
      encodedText:
        type: string
        description: >-
          (355) Encoded (non-ASCII characters) representation of the Text (58)
          field

          in the encoded format specified via the MessageEncoding (347) field.
      tradingSessionID:
        type: string
        description: >-
          (336) Optional Trading Session Identifier to specify a particular
          trading

          session for which you want to obtain a list of securities that are

          tradeable.
      tradingSessionSubID:
        type: string
        title: (625)
      subscriptionRequestType:
        type: string
        description: >-
          (263) Subscribe or unsubscribe for security status to security
          specified in

          request.
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: Security List Request with fields, tags and descriptions and MsgType = x
  jim380.re.fix.SecurityListRequestReject:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: |-
          (Tag 320): Unique identifier assigned by the requester to the security
          List Request message
      securityListRequestType:
        type: string
        title: (559) Type of security list request being made
      securityRequestResult:
        type: string
        title: "(560)\tResult of the security list request"
      text:
        type: string
        title: "(58)\tComment, instructions, or other identifying information"
      encodedTextLen:
        type: string
        title: |-
          (354)  Must be set if EncodedText (355) field is specified and must
          immediately precede it
      encodedText:
        type: string
        title: "(355)\tEncoded (non-ASCII characters) representation of the Text (58)\nfield"
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: >-
      Security List Request Reject with fields, tags and descriptions and
      MsgType =

      y
  jim380.re.fix.SecurityListResponse:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: |-
          (Tag 320): Unique identifier assigned by the requester to the security
          List Request message
      securityResponseID:
        type: string
        title: (322) Identifier for the Security List (y) message
      securityRequestResult:
        type: string
        title: >-
          (560) Result of the Security Request identified by the SecurityReqID
          (320)
      totNoRelatedSym:
        type: string
        description: >-
          (393) Used to indicate if the total number of securities being
          returned for

          this request. Used in the event that message fragmentation is
          required.
      lastFragment:
        type: string
        title: string (893) Indicates if this message in a fragmented response
      noRelatedSym:
        type: string
        title: >-
          (146) Specifies the number of repeating symbols (instruments)
          specified
      noUnderlyings:
        type: string
        title: (711) Number of underlyings
      currency:
        type: string
        title: (15)
      noLegs:
        type: string
        title: (555) Number of legs that make up the Security
      roundLot:
        type: string
        title: (561)
      minTradeVol:
        type: string
        title: (562)
      tradingSessionID:
        type: string
        title: (336)
      tradingSessionSubID:
        type: string
        title: (625)
      expirationCycle:
        type: string
        title: (827)
      text:
        type: string
        description: (58) Comment, instructions, or other identifying information.
      encodedTextLen:
        type: string
        description: |-
          (354) Must be set if EncodedText (355) field is specified and must
          immediately precede it.
      encodedText:
        type: string
        title: >-
          (355) Encoded (non-ASCII characters) representation of the Text (58)
          field

          in the encoded format specified via the MessageEncoding (347) field
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: Security List Response  with fields, tags and descriptions and MsgType = y
  jim380.re.fix.SecurityStatus:
    type: object
    properties:
      sessionID:
        type: string
      securityStatusRequest:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          SecurityStatusReqID:
            type: string
            description: >-
              (324) Must be unique, or the ID of previous Security Status
              Request (e) to

              disable if SubscriptionRequestType (263) = Disable previous
              Snapshot +

              Updates Request (2).
          instrument:
            type: string
          noUnderlyings:
            type: string
            title: (711) Number of underlyings
          underlyingInstrument:
            type: string
            title: Must be provided if Number of underlyings > 0
          noLegs:
            type: string
            title: (555) Number of legs that make up the Security
          instrumentLeg:
            type: string
            title: Required if NoLegs (555) > 0
          currency:
            type: string
            title: (15)
          subscriptionRequestType:
            type: string
            title: >-
              (263) SubscriptionRequestType indicates to the other party what
              type of

              response is expected. A snapshot request only asks for current
              information.

              A subscribe request asks for updates as the status changes.
              Unsubscribe

              will cancel any future update messages from the counter party.)
          tradingSessionID:
            type: string
            title: (336)
          tradingSessionSubID:
            type: string
            title: (625)
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Security Status Request with fields, tags and descriptions and MsgType
          = e
      securityStatusResponse:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityStatusReqID:
            type: string
            title: (324)
          noUnderlyings:
            type: string
            title: (711) Number of underlyings
          underlyingInstrument:
            type: string
            title: Must be provided if Number of underlyings > 0
          noLegs:
            type: string
            title: (555) Required for multileg quotes
          instrumentLeg:
            type: string
            title: Required if NoLegs (555) > 0
          currency:
            type: string
            title: (15)
          tradingSessionID:
            type: string
            title: (336)
          tradingSessionSubID:
            type: string
            title: (625)
          unsolicitedIndicator:
            type: string
            title: >-
              (325) Set to 'Y' if message is sent as a result of a subscription
              request

              not a snapshot request
          securityTradingStatus:
            type: string
            description: (326) Identifies the trading status applicable to the transaction.
          financialStatus:
            type: string
            title: (291)
          corporateAction:
            type: string
            title: (292)
          haltReason:
            type: string
            description: (327) Denotes the reason for the Opening Delay or Trading Halt.
          inViewOfCommon:
            type: string
            title: (328)
          dueToRelated:
            type: string
            title: (329)
          buyVolume:
            type: string
            title: (330)
          sellVolume:
            type: string
            title: (331)
          highPx:
            type: string
            title: (332)
          lowPx:
            type: string
            title: (333)
          lastPx:
            type: string
            description: >-
              (31) Represents the last price for that security either on a
              Consolidated

              or an individual participant basis at the time it is disseminated.
          transactTime:
            type: string
            title: (60) Trade Dissemination Time
          adjustment:
            type: string
            title: (334)
          text:
            type: string
            description: (58) Comment, instructions, or other identifying information.
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Security Status Response with fields, tags and descriptions and
          MsgType = f
      securityStatusRequestReject:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityStatusReqID:
            type: string
            title: (324)
          securityRejectReason:
            type: string
            title: >-
              (560) Reason for rejecting the Security Status Request, The

              SecurityRejectReason field (Tag 560) in the Security Status
              Request Reject

              message (MsgType = AJ) indicates the reason for rejecting the
              Security

              Status Request. The values for the SecurityRejectReason field can
              vary

              depending on the implementation and version of the FIX protocol.
              Here are

              some common values that may be used: 0: Unknown symbol 1: Exchange
              closed

              2: Order exceeded limit

              3: Invalid request

              4: Unsupported request

              5: Unauthorized request

              6: Duplicate request

              7: System unavailable

              8: Security not found

              9: Other
          text:
            type: string
            title: (58) Additional text or comment regarding the rejection
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Security Status Request Reject with fields, tags and descriptions and
          MsgType

          = AJ
  jim380.re.fix.SecurityStatusRequest:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      SecurityStatusReqID:
        type: string
        description: >-
          (324) Must be unique, or the ID of previous Security Status Request
          (e) to

          disable if SubscriptionRequestType (263) = Disable previous Snapshot +

          Updates Request (2).
      instrument:
        type: string
      noUnderlyings:
        type: string
        title: (711) Number of underlyings
      underlyingInstrument:
        type: string
        title: Must be provided if Number of underlyings > 0
      noLegs:
        type: string
        title: (555) Number of legs that make up the Security
      instrumentLeg:
        type: string
        title: Required if NoLegs (555) > 0
      currency:
        type: string
        title: (15)
      subscriptionRequestType:
        type: string
        title: >-
          (263) SubscriptionRequestType indicates to the other party what type
          of

          response is expected. A snapshot request only asks for current
          information.

          A subscribe request asks for updates as the status changes.
          Unsubscribe

          will cancel any future update messages from the counter party.)
      tradingSessionID:
        type: string
        title: (336)
      tradingSessionSubID:
        type: string
        title: (625)
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: Security Status Request with fields, tags and descriptions and MsgType = e
  jim380.re.fix.SecurityStatusRequestReject:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityStatusReqID:
        type: string
        title: (324)
      securityRejectReason:
        type: string
        title: >-
          (560) Reason for rejecting the Security Status Request, The

          SecurityRejectReason field (Tag 560) in the Security Status Request
          Reject

          message (MsgType = AJ) indicates the reason for rejecting the Security

          Status Request. The values for the SecurityRejectReason field can vary

          depending on the implementation and version of the FIX protocol. Here
          are

          some common values that may be used: 0: Unknown symbol 1: Exchange
          closed

          2: Order exceeded limit

          3: Invalid request

          4: Unsupported request

          5: Unauthorized request

          6: Duplicate request

          7: System unavailable

          8: Security not found

          9: Other
      text:
        type: string
        title: (58) Additional text or comment regarding the rejection
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: >-
      Security Status Request Reject with fields, tags and descriptions and
      MsgType

      = AJ
  jim380.re.fix.SecurityStatusResponse:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityStatusReqID:
        type: string
        title: (324)
      noUnderlyings:
        type: string
        title: (711) Number of underlyings
      underlyingInstrument:
        type: string
        title: Must be provided if Number of underlyings > 0
      noLegs:
        type: string
        title: (555) Required for multileg quotes
      instrumentLeg:
        type: string
        title: Required if NoLegs (555) > 0
      currency:
        type: string
        title: (15)
      tradingSessionID:
        type: string
        title: (336)
      tradingSessionSubID:
        type: string
        title: (625)
      unsolicitedIndicator:
        type: string
        title: >-
          (325) Set to 'Y' if message is sent as a result of a subscription
          request

          not a snapshot request
      securityTradingStatus:
        type: string
        description: (326) Identifies the trading status applicable to the transaction.
      financialStatus:
        type: string
        title: (291)
      corporateAction:
        type: string
        title: (292)
      haltReason:
        type: string
        description: (327) Denotes the reason for the Opening Delay or Trading Halt.
      inViewOfCommon:
        type: string
        title: (328)
      dueToRelated:
        type: string
        title: (329)
      buyVolume:
        type: string
        title: (330)
      sellVolume:
        type: string
        title: (331)
      highPx:
        type: string
        title: (332)
      lowPx:
        type: string
        title: (333)
      lastPx:
        type: string
        description: >-
          (31) Represents the last price for that security either on a
          Consolidated

          or an individual participant basis at the time it is disseminated.
      transactTime:
        type: string
        title: (60) Trade Dissemination Time
      adjustment:
        type: string
        title: (334)
      text:
        type: string
        description: (58) Comment, instructions, or other identifying information.
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: >-
      Security Status Response with fields, tags and descriptions and MsgType =
      f
  jim380.re.fix.SecurityTypes:
    type: object
    properties:
      sessionID:
        type: string
      securityTypesRequest:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: (320)
          text:
            type: string
            description: (58) Comment, instructions, or other identifying information.
          tradingSessionID:
            type: string
            description: >-
              (336) Optional Trading Session Identifier to specify a particular
              trading

              session for which you want to obtain a list of securities that are

              tradeable.
          tradingSessionSubID:
            type: string
            title: (625)
          product:
            type: string
            title: (460) Used to qualify which security types are returned
          securityType:
            type: string
            title: (167) Used to qualify which security type is returned
          securitySubType:
            type: string
            title: (762) Used to qualify which security types are returned
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Security Types Request with fields, tags and descriptions.
      SecurityTypesResponse:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: (320)
          securityResponseID:
            type: string
            title: (322) Identifier for the security response message
          securityResponseType:
            type: string
            title: >-
              (323) The result of the security request identified by
              SecurityReqID (320)
          totNoSecurityTypes:
            type: string
            title: >-
              (557) Indicates total number of security types in the event that
              multiple

              Security Type messages are used to return results
          lastFragment:
            type: string
            title: (893) Indicates if this message in a fragmented response
          noSecurityTypes:
            type: string
            title: (558)
          securityType:
            type: string
            title: (167) Required if NoSecurityTypes (558) > 0
          securitySubType:
            type: string
            title: (762)
          product:
            type: string
            title: (460)
          cFICode:
            type: string
            title: >-
              (461) Indicates the type of security using ISO 10962 standard,

              Classification of Financial Instruments (CFI code) values. ISO
              10962 is

              maintained by ANNA (Association of National Numbering Agencies)
              acting as

              Registration Authority
          text:
            type: string
            description: (58) Comment, instructions, or other identifying information.
          tradingSessionID:
            type: string
            description: >-
              (336) Optional Trading Session Identifier to specify a particular
              trading

              session for which you want to obtain a list of securities that are

              tradeable.
          tradingSessionSubID:
            type: string
            title: (625)
          subscriptionRequestType:
            type: string
            description: >-
              (263) Subscribe or unsubscribe for security status to security
              specified in

              request.
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Security Types Response with fields, tags and descriptions.
      SecurityTypesRequestReject:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          securityReqID:
            type: string
            title: >-
              (320) Identifier for the security request message that was
              rejected
          rejectReason:
            type: string
            title: (350) Reason for rejecting the security request
          text:
            type: string
            title: (58) Comment, instructions, or other identifying information
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Security Types Request Reject with fields, tags and descriptions.
  jim380.re.fix.SecurityTypesRequest:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: (320)
      text:
        type: string
        description: (58) Comment, instructions, or other identifying information.
      tradingSessionID:
        type: string
        description: >-
          (336) Optional Trading Session Identifier to specify a particular
          trading

          session for which you want to obtain a list of securities that are

          tradeable.
      tradingSessionSubID:
        type: string
        title: (625)
      product:
        type: string
        title: (460) Used to qualify which security types are returned
      securityType:
        type: string
        title: (167) Used to qualify which security type is returned
      securitySubType:
        type: string
        title: (762) Used to qualify which security types are returned
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Security Types Request with fields, tags and descriptions.
  jim380.re.fix.SecurityTypesRequestReject:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: (320) Identifier for the security request message that was rejected
      rejectReason:
        type: string
        title: (350) Reason for rejecting the security request
      text:
        type: string
        title: (58) Comment, instructions, or other identifying information
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Security Types Request Reject with fields, tags and descriptions.
  jim380.re.fix.SecurityTypesResponse:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      securityReqID:
        type: string
        title: (320)
      securityResponseID:
        type: string
        title: (322) Identifier for the security response message
      securityResponseType:
        type: string
        title: >-
          (323) The result of the security request identified by SecurityReqID
          (320)
      totNoSecurityTypes:
        type: string
        title: >-
          (557) Indicates total number of security types in the event that
          multiple

          Security Type messages are used to return results
      lastFragment:
        type: string
        title: (893) Indicates if this message in a fragmented response
      noSecurityTypes:
        type: string
        title: (558)
      securityType:
        type: string
        title: (167) Required if NoSecurityTypes (558) > 0
      securitySubType:
        type: string
        title: (762)
      product:
        type: string
        title: (460)
      cFICode:
        type: string
        title: >-
          (461) Indicates the type of security using ISO 10962 standard,

          Classification of Financial Instruments (CFI code) values. ISO 10962
          is

          maintained by ANNA (Association of National Numbering Agencies) acting
          as

          Registration Authority
      text:
        type: string
        description: (58) Comment, instructions, or other identifying information.
      tradingSessionID:
        type: string
        description: >-
          (336) Optional Trading Session Identifier to specify a particular
          trading

          session for which you want to obtain a list of securities that are

          tradeable.
      tradingSessionSubID:
        type: string
        title: (625)
      subscriptionRequestType:
        type: string
        description: >-
          (263) Subscribe or unsubscribe for security status to security
          specified in

          request.
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Security Types Response with fields, tags and descriptions.
  jim380.re.fix.SessionLogout:
    type: object
    properties:
      sessionID:
        type: string
        title: A string that identifies the session being logged out of
      sessionLogoutInitiator:
        title: The message sent by the party that initiates the logout
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          text:
            type: string
            title: >-
              A free-form text field that can be used to provide additional
              information

              about the logout
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
      sessionLogoutAcceptor:
        title: The message sent by the party that confirms the logout
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          text:
            type: string
            title: >-
              A free-form text field that can be used to provide additional
              information

              about the logout
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
    title: This message is used to initiate a logout session between two parties
  jim380.re.fix.SessionLogoutAcceptor:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      text:
        type: string
        title: >-
          A free-form text field that can be used to provide additional
          information

          about the logout
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
    title: This message is sent by the party that confirms the logout
  jim380.re.fix.SessionLogoutInitiator:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      text:
        type: string
        title: >-
          A free-form text field that can be used to provide additional
          information

          about the logout
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
    title: This message is sent by the party that initiates the logout
  jim380.re.fix.SessionReject:
    type: object
    properties:
      sessionID:
        type: string
        description: >-
          A string that identifies the session to which the rejected message
          belongs.
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
      text:
        type: string
        title: >-
          A free-form text field that provides information about the rejection,
          such

          as the reason for the rejection or a description of the error
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
    title: This message is used to reject a FIX session
  jim380.re.fix.Sessions:
    type: object
    properties:
      sessionID:
        type: string
      logonInitiator:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          encryptMethod:
            type: string
            format: int64
            title: >-
              An integer value indicating the encryption method to be used for
              the

              session
          heartBtInt:
            type: string
            format: int64
            title: >-
              An integer value indicating the number of seconds between
              heartbeats that

              will be sent during the session. This is used to monitor the
              connection

              between the two parties
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
        title: |-
          This message is used by the initiator of a FIX session to initiate a
          connection with the acceptor
      logonAcceptor:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
          encryptMethod:
            type: string
            format: int64
            title: >-
              An integer value indicating the encryption method to be used for
              the

              session
          heartBtInt:
            type: string
            format: int64
            title: >-
              An integer value indicating the number of seconds between
              heartbeats that

              will be sent during the session. This is used to monitor the
              connection

              between the two parties
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
        title: >-
          This message is used by the acceptor of a FIX session to acknowledge
          the

          initiation of the connection by the initiator
      status:
        type: string
      IsAccepted:
        type: boolean
  jim380.re.fix.TradeCapture:
    type: object
    properties:
      sessionID:
        type: string
      tradeCaptureReport:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradeReportID:
            type: string
            description: (571) Unique identifier for the trade report.
          tradeReportTransType:
            type: string
            description: (487) Type of trade report (new, cancel, correction).
          tradeReportType:
            type: string
            description: (856) Type of trade report (real-time, end-of-day).
          trdType:
            type: string
            description: |-
              Trade details
              (828) Type of the trade (Block Trade, Exchange for Physical).
          trdSubType:
            type: string
            description: (829) Further information about the trade type.
          side:
            type: string
            description: (54) Buy or sell.
          orderQty:
            type: string
            description: (38) Quantity of the order involved in the trade.
          lastQty:
            type: string
            description: (32) Quantity of the last execution in the trade.
          lastPx:
            type: string
            description: (31) Price of the last execution in the trade.
          grossTradeAmt:
            type: string
            description: >-
              (381) Total amount of the trade, including any commissions and
              fees.
          execID:
            type: string
            description: |-
              Trade identifiers
              (17) Identifier for the execution of the trade.
          orderID:
            type: string
            description: (37) Identifier for the order associated with the trade.
          tradeID:
            type: string
            description: (1003) Unique identifier for the trade.
          origTradeID:
            type: string
            description: |-
              (1126) Identifier for the original trade, in the case of a trade
              correction.
          symbol:
            type: string
            description: |-
              Instrument details
              (55) Symbol or code for the financial instrument traded.
          securityID:
            type: string
            description: (48) Identifier for the security traded.
          securityIDSource:
            type: string
            description: (22) Source of the security identifier.
          tradeDate:
            type: string
            description: |-
              Trade dates and settlement
              (75) Date of the trade.
          transactTime:
            type: string
            description: (60) Time at which the trade occurred.
          settlType:
            type: string
            description: (63) Settlement type of the trade.
          settlDate:
            type: string
            description: (64) Settlement date of the trade.
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Trade Capture Report with fields, tags and descriptions.
      tradeCaptureReportAcknowledgement:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradeReportID:
            type: string
            description: |-
              Trade report details
              (571) Identifier for the trade report being acknowledged.
          tradeID:
            type: string
            description: (1003) Unique identifier for the trade.
          secondaryTradeID:
            type: string
            description: (1040) Alternative identifier for the trade.
          tradeReportType:
            type: string
            description: (856) Type of trade report (real-time, end-of-day).
          trdType:
            type: string
            description: (828) Type of the trade (Block Trade, Exchange for Physical).
          trdSubType:
            type: string
            description: (829) Further information about the trade type.
          execType:
            type: string
            description: >-
              (150) Status of the trade report (new, cancelled, corrected,
              etc.).
          tradeReportRefID:
            type: string
            description: (572) Identifier for the previous trade report being referred to.
          secondaryTradeReportID:
            type: string
            description: (818) Alternative identifier for the trade report.
          tradeReportStatus:
            type: string
            description: (939) Status of the trade report (accepted, rejected, etc.).
          tradeTransType:
            type: string
            description: (487) Type of trade transaction (new, cancel, correction).
          tradeReportRejectReason:
            type: string
            format: int64
            description: (751) Reason why the trade report was rejected.
          text:
            type: string
            description: >-
              Additional information

              (58) Additional information about the trade report or
              acknowledgement.
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: >-
          Trade Capture Report Acknowledgement with fields, tags and
          descriptions.
      tradeCaptureReportRejection:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradeReportID:
            type: string
            description: (571) The identifier for the trade report being rejected.
          tradeReportRejectReason:
            type: string
            format: int64
            description: (751) A code indicating why the trade report was rejected.
          tradeReportRejectRefID:
            type: string
            description: >-
              (754) The identifier of the previous message (e.g., Trade Capture
              Report)

              to which this message refers.
          text:
            type: string
            description: (58) A description of the reason for the trade report rejection.
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Trade Capture Report Rejection with fields, tags and descriptions.
  jim380.re.fix.TradeCaptureReport:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradeReportID:
        type: string
        description: (571) Unique identifier for the trade report.
      tradeReportTransType:
        type: string
        description: (487) Type of trade report (new, cancel, correction).
      tradeReportType:
        type: string
        description: (856) Type of trade report (real-time, end-of-day).
      trdType:
        type: string
        description: |-
          Trade details
          (828) Type of the trade (Block Trade, Exchange for Physical).
      trdSubType:
        type: string
        description: (829) Further information about the trade type.
      side:
        type: string
        description: (54) Buy or sell.
      orderQty:
        type: string
        description: (38) Quantity of the order involved in the trade.
      lastQty:
        type: string
        description: (32) Quantity of the last execution in the trade.
      lastPx:
        type: string
        description: (31) Price of the last execution in the trade.
      grossTradeAmt:
        type: string
        description: (381) Total amount of the trade, including any commissions and fees.
      execID:
        type: string
        description: |-
          Trade identifiers
          (17) Identifier for the execution of the trade.
      orderID:
        type: string
        description: (37) Identifier for the order associated with the trade.
      tradeID:
        type: string
        description: (1003) Unique identifier for the trade.
      origTradeID:
        type: string
        description: |-
          (1126) Identifier for the original trade, in the case of a trade
          correction.
      symbol:
        type: string
        description: |-
          Instrument details
          (55) Symbol or code for the financial instrument traded.
      securityID:
        type: string
        description: (48) Identifier for the security traded.
      securityIDSource:
        type: string
        description: (22) Source of the security identifier.
      tradeDate:
        type: string
        description: |-
          Trade dates and settlement
          (75) Date of the trade.
      transactTime:
        type: string
        description: (60) Time at which the trade occurred.
      settlType:
        type: string
        description: (63) Settlement type of the trade.
      settlDate:
        type: string
        description: (64) Settlement date of the trade.
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Trade Capture Report with fields, tags and descriptions.
  jim380.re.fix.TradeCaptureReportAcknowledgement:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradeReportID:
        type: string
        description: |-
          Trade report details
          (571) Identifier for the trade report being acknowledged.
      tradeID:
        type: string
        description: (1003) Unique identifier for the trade.
      secondaryTradeID:
        type: string
        description: (1040) Alternative identifier for the trade.
      tradeReportType:
        type: string
        description: (856) Type of trade report (real-time, end-of-day).
      trdType:
        type: string
        description: (828) Type of the trade (Block Trade, Exchange for Physical).
      trdSubType:
        type: string
        description: (829) Further information about the trade type.
      execType:
        type: string
        description: (150) Status of the trade report (new, cancelled, corrected, etc.).
      tradeReportRefID:
        type: string
        description: (572) Identifier for the previous trade report being referred to.
      secondaryTradeReportID:
        type: string
        description: (818) Alternative identifier for the trade report.
      tradeReportStatus:
        type: string
        description: (939) Status of the trade report (accepted, rejected, etc.).
      tradeTransType:
        type: string
        description: (487) Type of trade transaction (new, cancel, correction).
      tradeReportRejectReason:
        type: string
        format: int64
        description: (751) Reason why the trade report was rejected.
      text:
        type: string
        description: |-
          Additional information
          (58) Additional information about the trade report or acknowledgement.
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Trade Capture Report Acknowledgement with fields, tags and descriptions.
  jim380.re.fix.TradeCaptureReportRejection:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradeReportID:
        type: string
        description: (571) The identifier for the trade report being rejected.
      tradeReportRejectReason:
        type: string
        format: int64
        description: (751) A code indicating why the trade report was rejected.
      tradeReportRejectRefID:
        type: string
        description: >-
          (754) The identifier of the previous message (e.g., Trade Capture
          Report)

          to which this message refers.
      text:
        type: string
        description: (58) A description of the reason for the trade report rejection.
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Trade Capture Report Rejection with fields, tags and descriptions.
  jim380.re.fix.TradingSession:
    type: object
    properties:
      sessionID:
        type: string
      tradingSessionStatusRequest:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradingSessionID:
            type: string
            title: "(336)\tIdentifies the specific trading session for which status is\nrequested"
          tradingSessionSubID:
            type: string
            title: "(625)\tIdentifies a specific sub-session or sub-segment within a\ntrading session"
          tradSesReqID:
            type: string
            title: "(335)\tUnique identifier assigned by the party generating the request"
          marketID:
            type: string
            title: "(1301)\tIdentifies the market or exchange for which the trading session\nstatus is requested"
          subscriptionRequest:
            type: string
            title: |-
              (263) Indicates whether the request is for a one-time snapshot or
              subscription for updates
          securityID:
            type: string
            title: "(48)\tIdentifier for the security being traded in the session"
          securityIDSource:
            type: string
            title: "(22)\tIdentifies the source of the security identifier"
          symbol:
            type: string
            title: "(55)\tSymbol representing the security being traded in the session"
          securityExchange:
            type: string
            title: "207\tExchange where the security is listed"
          marketSegmentID:
            type: string
            title: "(1300)\tIdentifies the specific market segment or sector within the\ntrading session"
          tradSesReqType:
            type: integer
            format: int32
            title: (263) Type of trading session status request
          tradSesSubReqType:
            type: integer
            format: int32
            title: "(123)\tSub-type of trading session status request"
          tradSesMode:
            type: integer
            format: int32
            title: "(338)\tMethod used to determine the trading session"
          tradingSessionDate:
            type: string
            title: (336) Date of the trading session for which status is requested
          tradingSessionTime:
            type: string
            title: (338)Time of the trading session for which status is requested
          tradingSessionSubTime:
            type: string
            title: >-
              (1147) Time of the sub-session or sub-segment within a trading
              session
          expirationDate:
            type: string
            title: >-
              (432) Date and time when the trading session status request is no
              longer

              valid and should be disregarded
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Trading Session Status Request with fields, tags and descriptions.
      tradingSessionStatus:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradSesReqID:
            type: string
            title: "(335)\tUnique identifier assigned by the party generating the request"
          tradingSessionID:
            type: string
            title: (336) Identifies the specific trading session
          tradSesStatus:
            type: integer
            format: int32
            title: (340) Indicates the current status of the trading session
          tradSesStatusRejReason:
            type: integer
            format: int32
            title: >-
              (567) Provides a reason for rejecting or invalidating a trading
              session

              status
          tradSesStartTime:
            type: string
            title: (341) Time at which the trading session is scheduled to start
          tradSesOpenTime:
            type: string
            title: (342) Time at which the trading session opens
          tradSesPreCloseTime:
            type: string
            title: "(343)\tTime at which the trading session pre-closes"
          tradSesCloseTime:
            type: string
            title: "(344)\tTime at which the trading session closes"
          tradSesEndTime:
            type: string
            title: (345) Time at which the trading session is scheduled to end
          totalVolumeTraded:
            type: integer
            format: int32
            title: >-
              (387) Total quantity of contracts or shares traded during the
              trading

              session
          tradSesHighPx:
            type: string
            title: "(1149)\tHighest price traded during the trading session"
          tradSesLowPx:
            type: string
            title: "(1148)\tLowest price traded during the trading session"
          securityID:
            type: string
            title: "(48)\tIdentifier for the security being traded in the session"
          securityIDSource:
            type: string
            title: "(22)\tIdentifies the source of the security identifier"
          symbol:
            type: string
            title: (55) Symbol representing the security being traded in the session
          securityExchange:
            type: string
            title: "(207)\tExchange where the security is listed"
          marketSegmentID:
            type: string
            title: "1300\tIdentifies the specific market segment or sector within the\ntrading session"
          marketID:
            type: string
            title: "1301\tIdentifies the market or exchange for the trading session"
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: Trading Session Status with fields, tags and descriptions.
      tradingSessionStatusRequestReject:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          refSeqNum:
            type: string
            title: "(45)\tReference id of the rejected request message"
          refMsgType:
            type: string
            title: "(372)\tMessage type of the rejected request"
          sessionRejectReason:
            type: integer
            format: int32
            title: "(373)\tCode indicating the reason for rejecting the trading session\nstatus request"
          text:
            type: string
            title: "58\tFree-form text providing additional information about the rejection"
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        description: >-
          Trading Session Status Request Reject with fields, tags and
          descriptions.
  jim380.re.fix.TradingSessionList:
    type: object
    properties:
      sessionID:
        type: string
      tradingSessionListRequest:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradSesReqID:
            type: string
            description: "(335)\tMust be unique, or the ID of previous Trading Session Status\nRequest (g) to disable if SubscriptionRequestType (263) = Disable previous\nSnapshot + Update Request (2)."
          tradingSessionID:
            type: string
            title: (336) Trading Session for which status is being requested
          tradingSessionSubID:
            type: string
            title: (625)
          securityExchange:
            type: string
            title: (207)
          tradSesMethod:
            type: string
            title: "(338) \tMethod of Trading"
          tradSesMode:
            type: string
            title: (339) Trading Session Mode
          subscriptionRequestType:
            type: string
            title: (263)
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Trading Session List Request with fields, tags and descriptions.
          MsgType = BI
      tradingSessionListResponse:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradSesReqID:
            type: string
            title: "(335)\tProvided for a response to a specific Trading Session List\nRequest (BI) message (snapshot)"
          noTradingSessions:
            type: string
            title: (386)
          tradingSessionID:
            type: string
            title: (336) Identifier for Trading Session
          tradingSessionSubID:
            type: string
            title: (625)
          securityExchange:
            type: string
            title: (207)
          tradSesMethod:
            type: string
            title: (338) Method of Trading
          tradSesMode:
            type: string
            title: "(339) \tTrading Session Mode"
          unsolicitedIndicator:
            type: string
            title: |-
              (325) "Y" if message is sent unsolicited as a result of a previous
              subscription request
          tradSesStatus:
            type: string
            description: (340) State of trading session.
          tradSesStatusRejReason:
            type: string
            description: (567) Used with TradSesStatus (340) = "Request Rejected".
          tradSesStartTime:
            type: string
            title: (341) Starting time of trading session
          tradSesOpenTime:
            type: string
            title: (342) Time of the opening of the trading session
          tradSesPreCloseTime:
            type: string
            title: (343) Time of pre-close of trading session
          tradSesCloseTime:
            type: string
            title: (344) Closing time of trading session
          tradSesEndTime:
            type: string
            title: (345)
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Trading Session List Response with fields, tags and descriptions.
          MsgType =

          BJ
      tradingSessionListRequestReject:
        type: object
        properties:
          header:
            type: object
            properties:
              beginString:
                type: string
                description: >-
                  This field specifies the version of the FIX protocol being
                  used. For

                  example, "FIX.4.4" indicates version 4.4 of the protocol.
              bodyLength:
                type: string
                format: int64
                description: This field specifies the length of the message body in bytes.
              msgType:
                type: string
                title: >-
                  This field identifies the type of message being sent. For
                  example, "D"

                  indicates a New Order Single message
              senderCompID:
                type: string
                title: >-
                  This field identifies the sender of the message. This is
                  typically a unique

                  identifier assigned to each party that uses the FIX protocol
              targetCompID:
                type: string
                description: This field identifies the recipient of the message.
              msgSeqNum:
                type: string
                format: int64
                title: >-
                  Is a field in the FIX protocol message header that is used to
                  assign a

                  unique sequence number to each message
              sendingTime:
                type: string
                title: This field specifies the time that the message was sent
            title: >-
              This message header contains fields that identify the message
              being sent and

              its sender and recipient
            description: Standard FIX message header.
          tradSesReqID:
            type: string
            description: "(335)\tMatches the ID of the rejected Trading Session List Request (BI)\nmessage."
          tradSesStatus:
            type: string
            description: "(340)\tIndicates the status of the trading session request. Set to \"0\"\n(Rejected) for a request reject message."
          tradSesStatusRejReason:
            type: string
            description: (567) Reason for rejecting the trading session request.
          text:
            type: string
            description: |-
              (58) Optional additional text providing further details about the
              rejection.
          trailer:
            type: object
            properties:
              checkSum:
                type: string
                format: int64
                description: >-
                  The checksum value is calculated by summing the ASCII values
                  of all

                  characters in the message (excluding the SOH (start of header)
                  and ETX (end

                  of text) characters), taking the sum modulo 256, and
                  converting the result

                  to a two-character hexadecimal string.
            title: >-
              This message trailer contains a checksum field that is used to
              ensure message

              integrity
            description: Standard FIX message trailer.
        title: >-
          Trading Session List Request Reject with fields, tags and
          descriptions.

          MsgType = BK
  jim380.re.fix.TradingSessionListRequest:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradSesReqID:
        type: string
        description: "(335)\tMust be unique, or the ID of previous Trading Session Status\nRequest (g) to disable if SubscriptionRequestType (263) = Disable previous\nSnapshot + Update Request (2)."
      tradingSessionID:
        type: string
        title: (336) Trading Session for which status is being requested
      tradingSessionSubID:
        type: string
        title: (625)
      securityExchange:
        type: string
        title: (207)
      tradSesMethod:
        type: string
        title: "(338) \tMethod of Trading"
      tradSesMode:
        type: string
        title: (339) Trading Session Mode
      subscriptionRequestType:
        type: string
        title: (263)
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: >-
      Trading Session List Request with fields, tags and descriptions. MsgType =
      BI
  jim380.re.fix.TradingSessionListRequestReject:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradSesReqID:
        type: string
        description: "(335)\tMatches the ID of the rejected Trading Session List Request (BI)\nmessage."
      tradSesStatus:
        type: string
        description: "(340)\tIndicates the status of the trading session request. Set to \"0\"\n(Rejected) for a request reject message."
      tradSesStatusRejReason:
        type: string
        description: (567) Reason for rejecting the trading session request.
      text:
        type: string
        description: |-
          (58) Optional additional text providing further details about the
          rejection.
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: |-
      Trading Session List Request Reject with fields, tags and descriptions.
      MsgType = BK
  jim380.re.fix.TradingSessionListResponse:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradSesReqID:
        type: string
        title: "(335)\tProvided for a response to a specific Trading Session List\nRequest (BI) message (snapshot)"
      noTradingSessions:
        type: string
        title: (386)
      tradingSessionID:
        type: string
        title: (336) Identifier for Trading Session
      tradingSessionSubID:
        type: string
        title: (625)
      securityExchange:
        type: string
        title: (207)
      tradSesMethod:
        type: string
        title: (338) Method of Trading
      tradSesMode:
        type: string
        title: "(339) \tTrading Session Mode"
      unsolicitedIndicator:
        type: string
        title: |-
          (325) "Y" if message is sent unsolicited as a result of a previous
          subscription request
      tradSesStatus:
        type: string
        description: (340) State of trading session.
      tradSesStatusRejReason:
        type: string
        description: (567) Used with TradSesStatus (340) = "Request Rejected".
      tradSesStartTime:
        type: string
        title: (341) Starting time of trading session
      tradSesOpenTime:
        type: string
        title: (342) Time of the opening of the trading session
      tradSesPreCloseTime:
        type: string
        title: (343) Time of pre-close of trading session
      tradSesCloseTime:
        type: string
        title: (344) Closing time of trading session
      tradSesEndTime:
        type: string
        title: (345)
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    title: >-
      Trading Session List Response with fields, tags and descriptions. MsgType
      =

      BJ
  jim380.re.fix.TradingSessionStatus:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradSesReqID:
        type: string
        title: "(335)\tUnique identifier assigned by the party generating the request"
      tradingSessionID:
        type: string
        title: (336) Identifies the specific trading session
      tradSesStatus:
        type: integer
        format: int32
        title: (340) Indicates the current status of the trading session
      tradSesStatusRejReason:
        type: integer
        format: int32
        title: >-
          (567) Provides a reason for rejecting or invalidating a trading
          session

          status
      tradSesStartTime:
        type: string
        title: (341) Time at which the trading session is scheduled to start
      tradSesOpenTime:
        type: string
        title: (342) Time at which the trading session opens
      tradSesPreCloseTime:
        type: string
        title: "(343)\tTime at which the trading session pre-closes"
      tradSesCloseTime:
        type: string
        title: "(344)\tTime at which the trading session closes"
      tradSesEndTime:
        type: string
        title: (345) Time at which the trading session is scheduled to end
      totalVolumeTraded:
        type: integer
        format: int32
        title: |-
          (387) Total quantity of contracts or shares traded during the trading
          session
      tradSesHighPx:
        type: string
        title: "(1149)\tHighest price traded during the trading session"
      tradSesLowPx:
        type: string
        title: "(1148)\tLowest price traded during the trading session"
      securityID:
        type: string
        title: "(48)\tIdentifier for the security being traded in the session"
      securityIDSource:
        type: string
        title: "(22)\tIdentifies the source of the security identifier"
      symbol:
        type: string
        title: (55) Symbol representing the security being traded in the session
      securityExchange:
        type: string
        title: "(207)\tExchange where the security is listed"
      marketSegmentID:
        type: string
        title: "1300\tIdentifies the specific market segment or sector within the\ntrading session"
      marketID:
        type: string
        title: "1301\tIdentifies the market or exchange for the trading session"
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Trading Session Status with fields, tags and descriptions.
  jim380.re.fix.TradingSessionStatusRequest:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      tradingSessionID:
        type: string
        title: "(336)\tIdentifies the specific trading session for which status is\nrequested"
      tradingSessionSubID:
        type: string
        title: "(625)\tIdentifies a specific sub-session or sub-segment within a\ntrading session"
      tradSesReqID:
        type: string
        title: "(335)\tUnique identifier assigned by the party generating the request"
      marketID:
        type: string
        title: "(1301)\tIdentifies the market or exchange for which the trading session\nstatus is requested"
      subscriptionRequest:
        type: string
        title: |-
          (263) Indicates whether the request is for a one-time snapshot or
          subscription for updates
      securityID:
        type: string
        title: "(48)\tIdentifier for the security being traded in the session"
      securityIDSource:
        type: string
        title: "(22)\tIdentifies the source of the security identifier"
      symbol:
        type: string
        title: "(55)\tSymbol representing the security being traded in the session"
      securityExchange:
        type: string
        title: "207\tExchange where the security is listed"
      marketSegmentID:
        type: string
        title: "(1300)\tIdentifies the specific market segment or sector within the\ntrading session"
      tradSesReqType:
        type: integer
        format: int32
        title: (263) Type of trading session status request
      tradSesSubReqType:
        type: integer
        format: int32
        title: "(123)\tSub-type of trading session status request"
      tradSesMode:
        type: integer
        format: int32
        title: "(338)\tMethod used to determine the trading session"
      tradingSessionDate:
        type: string
        title: (336) Date of the trading session for which status is requested
      tradingSessionTime:
        type: string
        title: (338)Time of the trading session for which status is requested
      tradingSessionSubTime:
        type: string
        title: (1147) Time of the sub-session or sub-segment within a trading session
      expirationDate:
        type: string
        title: >-
          (432) Date and time when the trading session status request is no
          longer

          valid and should be disregarded
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Trading Session Status Request with fields, tags and descriptions.
  jim380.re.fix.TradingSessionStatusRequestReject:
    type: object
    properties:
      header:
        type: object
        properties:
          beginString:
            type: string
            description: >-
              This field specifies the version of the FIX protocol being used.
              For

              example, "FIX.4.4" indicates version 4.4 of the protocol.
          bodyLength:
            type: string
            format: int64
            description: This field specifies the length of the message body in bytes.
          msgType:
            type: string
            title: >-
              This field identifies the type of message being sent. For example,
              "D"

              indicates a New Order Single message
          senderCompID:
            type: string
            title: >-
              This field identifies the sender of the message. This is typically
              a unique

              identifier assigned to each party that uses the FIX protocol
          targetCompID:
            type: string
            description: This field identifies the recipient of the message.
          msgSeqNum:
            type: string
            format: int64
            title: >-
              Is a field in the FIX protocol message header that is used to
              assign a

              unique sequence number to each message
          sendingTime:
            type: string
            title: This field specifies the time that the message was sent
        title: >-
          This message header contains fields that identify the message being
          sent and

          its sender and recipient
        description: Standard FIX message header.
      refSeqNum:
        type: string
        title: "(45)\tReference id of the rejected request message"
      refMsgType:
        type: string
        title: "(372)\tMessage type of the rejected request"
      sessionRejectReason:
        type: integer
        format: int32
        title: "(373)\tCode indicating the reason for rejecting the trading session\nstatus request"
      text:
        type: string
        title: "58\tFree-form text providing additional information about the rejection"
      trailer:
        type: object
        properties:
          checkSum:
            type: string
            format: int64
            description: >-
              The checksum value is calculated by summing the ASCII values of
              all

              characters in the message (excluding the SOH (start of header) and
              ETX (end

              of text) characters), taking the sum modulo 256, and converting
              the result

              to a two-character hexadecimal string.
        title: >-
          This message trailer contains a checksum field that is used to ensure
          message

          integrity
        description: Standard FIX message trailer.
    description: Trading Session Status Request Reject with fields, tags and descriptions.
  jim380.re.fix.Trailer:
    type: object
    properties:
      checkSum:
        type: string
        format: int64
        description: >-
          The checksum value is calculated by summing the ASCII values of all

          characters in the message (excluding the SOH (start of header) and ETX
          (end

          of text) characters), taking the sum modulo 256, and converting the
          result

          to a two-character hexadecimal string.
    title: >-
      This message trailer contains a checksum field that is used to ensure
      message

      integrity
  jim380.re.mic.MarketIdentificationCode:
    type: object
    properties:
      MIC:
        type: string
        description: |-
          Market Identifier Code allocated to the market named in ‘Market
          Name-Institution Description’.
      operating_MIC:
        type: string
        description: >-
          Entity operating an exchange/market/trade reporting facility in a
          specific

          market/country.
      OPRT_SGMT:
        type: string
        description: Indicates whether the MIC is an operating MIC or a market segment MIC.
      market_name:
        type: string
        description: 'Institution Description: name of the market.'
      legal_entity_name:
        type: string
        description: Legal name of the entity owning the market.
      legal_entity_identifier:
        type: string
        description: Legal Entity Identifier (LEI) see ISO 17442-1.
      market_category:
        type: string
        description: >-
          Specifies the type of market. The list of market types is predefined
          (1).

          The list can be updated upon request to the RA, which will validate
          the

          request.
      acronym:
        type: string
        description: Known acronym of the market.
      ISO_country_code:
        type: string
        description: Alpha-2 code of the country where the market is registered.
      city:
        type: string
        description: City where the market is located.
      website:
        type: string
        description: Website of the market.
      status:
        type: string
        description: Active, updated (since last publication), expired (= deactivated).
      creation_date:
        type: string
        description: Date indicating when the MIC was originally created.
      last_update_date:
        type: string
        description: Date indicating when the MIC was last modified.
      last_validation_date:
        type: string
        description: Date indicating when the MIC was last reviewed for correctness.
      expiry_date:
        type: string
        description: >-
          The expiry date is populated when the MIC is deactivated; upon request
          from

          the MIC owner; following market research (user request) or
          maintenance. The

          expiry date field is left blank when a MIC is created.
      comments:
        type: string
        description: >-
          Any additional information worth mentioning to help users with
          identifying

          the exchange or understanding a modification.
      creator:
        type: string
        description: Address for MIC creator.
    title: Definition of MarketIdentificationCode message
  jim380.re.mic.MsgDeleteMarketIdentificationCodeResponse:
    type: object
  jim380.re.mic.MsgRegisterMarketIdentificationCodeResponse:
    type: object
  jim380.re.mic.MsgUpdateMarketIdentificationCodeResponse:
    type: object
  jim380.re.mic.QueryAllMarketIdentificationCodeResponse:
    type: object
    properties:
      MarketIdentificationCode:
        type: array
        items:
          type: object
          properties:
            MIC:
              type: string
              description: |-
                Market Identifier Code allocated to the market named in ‘Market
                Name-Institution Description’.
            operating_MIC:
              type: string
              description: >-
                Entity operating an exchange/market/trade reporting facility in
                a specific

                market/country.
            OPRT_SGMT:
              type: string
              description: >-
                Indicates whether the MIC is an operating MIC or a market
                segment MIC.
            market_name:
              type: string
              description: 'Institution Description: name of the market.'
            legal_entity_name:
              type: string
              description: Legal name of the entity owning the market.
            legal_entity_identifier:
              type: string
              description: Legal Entity Identifier (LEI) see ISO 17442-1.
            market_category:
              type: string
              description: >-
                Specifies the type of market. The list of market types is
                predefined (1).

                The list can be updated upon request to the RA, which will
                validate the

                request.
            acronym:
              type: string
              description: Known acronym of the market.
            ISO_country_code:
              type: string
              description: Alpha-2 code of the country where the market is registered.
            city:
              type: string
              description: City where the market is located.
            website:
              type: string
              description: Website of the market.
            status:
              type: string
              description: >-
                Active, updated (since last publication), expired (=
                deactivated).
            creation_date:
              type: string
              description: Date indicating when the MIC was originally created.
            last_update_date:
              type: string
              description: Date indicating when the MIC was last modified.
            last_validation_date:
              type: string
              description: Date indicating when the MIC was last reviewed for correctness.
            expiry_date:
              type: string
              description: >-
                The expiry date is populated when the MIC is deactivated; upon
                request from

                the MIC owner; following market research (user request) or
                maintenance. The

                expiry date field is left blank when a MIC is created.
            comments:
              type: string
              description: >-
                Any additional information worth mentioning to help users with
                identifying

                the exchange or understanding a modification.
            creator:
              type: string
              description: Address for MIC creator.
          title: Definition of MarketIdentificationCode message
      pagination:
        type: object
        properties:
          next_key:
            type: string
            format: byte
            title: |-
              next_key is the key to be passed to PageRequest.key to
              query the next page most efficiently
          total:
            type: string
            format: uint64
            title: >-
              total is total number of results available if
              PageRequest.count_total

              was set, its value is undefined otherwise
        description: |-
          PageResponse is to be embedded in gRPC response messages where the
          corresponding request message has used PageRequest.

           message SomeResponse {
                   repeated Bar results = 1;
                   PageResponse page = 2;
           }
  jim380.re.mic.QueryGetMarketIdentificationCodeResponse:
    type: object
    properties:
      MarketIdentificationCode:
        type: object
        properties:
          MIC:
            type: string
            description: |-
              Market Identifier Code allocated to the market named in ‘Market
              Name-Institution Description’.
          operating_MIC:
            type: string
            description: >-
              Entity operating an exchange/market/trade reporting facility in a
              specific

              market/country.
          OPRT_SGMT:
            type: string
            description: >-
              Indicates whether the MIC is an operating MIC or a market segment
              MIC.
          market_name:
            type: string
            description: 'Institution Description: name of the market.'
          legal_entity_name:
            type: string
            description: Legal name of the entity owning the market.
          legal_entity_identifier:
            type: string
            description: Legal Entity Identifier (LEI) see ISO 17442-1.
          market_category:
            type: string
            description: >-
              Specifies the type of market. The list of market types is
              predefined (1).

              The list can be updated upon request to the RA, which will
              validate the

              request.
          acronym:
            type: string
            description: Known acronym of the market.
          ISO_country_code:
            type: string
            description: Alpha-2 code of the country where the market is registered.
          city:
            type: string
            description: City where the market is located.
          website:
            type: string
            description: Website of the market.
          status:
            type: string
            description: Active, updated (since last publication), expired (= deactivated).
          creation_date:
            type: string
            description: Date indicating when the MIC was originally created.
          last_update_date:
            type: string
            description: Date indicating when the MIC was last modified.
          last_validation_date:
            type: string
            description: Date indicating when the MIC was last reviewed for correctness.
          expiry_date:
            type: string
            description: >-
              The expiry date is populated when the MIC is deactivated; upon
              request from

              the MIC owner; following market research (user request) or
              maintenance. The

              expiry date field is left blank when a MIC is created.
          comments:
            type: string
            description: >-
              Any additional information worth mentioning to help users with
              identifying

              the exchange or understanding a modification.
          creator:
            type: string
            description: Address for MIC creator.
        title: Definition of MarketIdentificationCode message
  re.did.DIDDocument:
    type: object
    properties:
      contexts:
        type: object
        properties:
          values:
            type: array
            items:
              type: string
        description: >-
          Strings defines a JSON-LD string array format which is marshalled to a
          single

          string if the array length is 1.
      id:
        type: string
      controller:
        type: object
        properties:
          values:
            type: array
            items:
              type: string
        description: >-
          Strings defines a JSON-LD string array format which is marshalled to a
          single

          string if the array length is 1.
      verification_methods:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            controller:
              type: string
            public_key_base58:
              type: string
          title: VerificationMethod defines a W3C verification method
      authentications:
        type: array
        items:
          type: object
          properties:
            verification_method_id:
              type: string
            verification_method:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                controller:
                  type: string
                public_key_base58:
                  type: string
              title: VerificationMethod defines a W3C verification method
          title: VerificationRelationship defines a W3C verification relationship
        title: |-
          TODO: the repeated gogoproto.customtype has an issue:
          https://github.com/gogo/protobuf/issues/478
      assertion_methods:
        type: array
        items:
          type: object
          properties:
            verification_method_id:
              type: string
            verification_method:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                controller:
                  type: string
                public_key_base58:
                  type: string
              title: VerificationMethod defines a W3C verification method
          title: VerificationRelationship defines a W3C verification relationship
      key_agreements:
        type: array
        items:
          type: object
          properties:
            verification_method_id:
              type: string
            verification_method:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                controller:
                  type: string
                public_key_base58:
                  type: string
              title: VerificationMethod defines a W3C verification method
          title: VerificationRelationship defines a W3C verification relationship
      capability_invocations:
        type: array
        items:
          type: object
          properties:
            verification_method_id:
              type: string
            verification_method:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                controller:
                  type: string
                public_key_base58:
                  type: string
              title: VerificationMethod defines a W3C verification method
          title: VerificationRelationship defines a W3C verification relationship
      capability_delegations:
        type: array
        items:
          type: object
          properties:
            verification_method_id:
              type: string
            verification_method:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                controller:
                  type: string
                public_key_base58:
                  type: string
              title: VerificationMethod defines a W3C verification method
          title: VerificationRelationship defines a W3C verification relationship
      services:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            type:
              type: string
            service_endpoint:
              type: string
          description: Service defines a service in the W3C DID Document.
    description: >-
      NOTE: All 'json_name' and 'gogoproto.customtype' tags are for Re to
      unmarshal

      the v1.3 genesis which is in the W3C JSON-LD format.
            On the other hand, the Re and cosmos-sdk don't use those tags to
            marshal result to JSON (via grpc-gateway).
    title: DIDDocument defines a W3C DID Document
  re.did.DIDDocumentWithSeq:
    type: object
    properties:
      document:
        type: object
        properties:
          contexts:
            type: object
            properties:
              values:
                type: array
                items:
                  type: string
            description: >-
              Strings defines a JSON-LD string array format which is marshalled
              to a single

              string if the array length is 1.
          id:
            type: string
          controller:
            type: object
            properties:
              values:
                type: array
                items:
                  type: string
            description: >-
              Strings defines a JSON-LD string array format which is marshalled
              to a single

              string if the array length is 1.
          verification_methods:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                controller:
                  type: string
                public_key_base58:
                  type: string
              title: VerificationMethod defines a W3C verification method
          authentications:
            type: array
            items:
              type: object
              properties:
                verification_method_id:
                  type: string
                verification_method:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    controller:
                      type: string
                    public_key_base58:
                      type: string
                  title: VerificationMethod defines a W3C verification method
              title: VerificationRelationship defines a W3C verification relationship
            title: |-
              TODO: the repeated gogoproto.customtype has an issue:
              https://github.com/gogo/protobuf/issues/478
          assertion_methods:
            type: array
            items:
              type: object
              properties:
                verification_method_id:
                  type: string
                verification_method:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    controller:
                      type: string
                    public_key_base58:
                      type: string
                  title: VerificationMethod defines a W3C verification method
              title: VerificationRelationship defines a W3C verification relationship
          key_agreements:
            type: array
            items:
              type: object
              properties:
                verification_method_id:
                  type: string
                verification_method:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    controller:
                      type: string
                    public_key_base58:
                      type: string
                  title: VerificationMethod defines a W3C verification method
              title: VerificationRelationship defines a W3C verification relationship
          capability_invocations:
            type: array
            items:
              type: object
              properties:
                verification_method_id:
                  type: string
                verification_method:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    controller:
                      type: string
                    public_key_base58:
                      type: string
                  title: VerificationMethod defines a W3C verification method
              title: VerificationRelationship defines a W3C verification relationship
          capability_delegations:
            type: array
            items:
              type: object
              properties:
                verification_method_id:
                  type: string
                verification_method:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    controller:
                      type: string
                    public_key_base58:
                      type: string
                  title: VerificationMethod defines a W3C verification method
              title: VerificationRelationship defines a W3C verification relationship
          services:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                type:
                  type: string
                service_endpoint:
                  type: string
              description: Service defines a service in the W3C DID Document.
        description: >-
          NOTE: All 'json_name' and 'gogoproto.customtype' tags are for Re to
          unmarshal

          the v1.3 genesis which is in the W3C JSON-LD format.
                On the other hand, the Re and cosmos-sdk don't use those tags to
                marshal result to JSON (via grpc-gateway).
        title: DIDDocument defines a W3C DID Document
      sequence:
        type: string
        format: uint64
      creator:
        type: string
    description: >-
      DIDDocumentWithSeq defines a message for DID Document with a sequence
      number

      for preventing replay attacks.
  re.did.MsgCreateDIDResponse:
    type: object
    description: MsgCreateDIDResponse defines the Msg/CreateDID response type.
  re.did.MsgDeactivateDIDResponse:
    type: object
    description: MsgDeactivateDIDResponse defines the Msg/DeactivateDID response type.
  re.did.MsgReActivateDIDResponse:
    type: object
    description: MsgActivateDIDResponse defines the Msg/MsgActivateDID response type.
  re.did.MsgUpdateDIDResponse:
    type: object
    description: MsgUpdateDIDResponse defines the Msg/UpdateDID response type.
  re.did.QueryDIDResponse:
    type: object
    properties:
      did_document_with_seq:
        type: object
        properties:
          document:
            type: object
            properties:
              contexts:
                type: object
                properties:
                  values:
                    type: array
                    items:
                      type: string
                description: >-
                  Strings defines a JSON-LD string array format which is
                  marshalled to a single

                  string if the array length is 1.
              id:
                type: string
              controller:
                type: object
                properties:
                  values:
                    type: array
                    items:
                      type: string
                description: >-
                  Strings defines a JSON-LD string array format which is
                  marshalled to a single

                  string if the array length is 1.
              verification_methods:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    controller:
                      type: string
                    public_key_base58:
                      type: string
                  title: VerificationMethod defines a W3C verification method
              authentications:
                type: array
                items:
                  type: object
                  properties:
                    verification_method_id:
                      type: string
                    verification_method:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        controller:
                          type: string
                        public_key_base58:
                          type: string
                      title: VerificationMethod defines a W3C verification method
                  title: >-
                    VerificationRelationship defines a W3C verification
                    relationship
                title: |-
                  TODO: the repeated gogoproto.customtype has an issue:
                  https://github.com/gogo/protobuf/issues/478
              assertion_methods:
                type: array
                items:
                  type: object
                  properties:
                    verification_method_id:
                      type: string
                    verification_method:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        controller:
                          type: string
                        public_key_base58:
                          type: string
                      title: VerificationMethod defines a W3C verification method
                  title: >-
                    VerificationRelationship defines a W3C verification
                    relationship
              key_agreements:
                type: array
                items:
                  type: object
                  properties:
                    verification_method_id:
                      type: string
                    verification_method:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        controller:
                          type: string
                        public_key_base58:
                          type: string
                      title: VerificationMethod defines a W3C verification method
                  title: >-
                    VerificationRelationship defines a W3C verification
                    relationship
              capability_invocations:
                type: array
                items:
                  type: object
                  properties:
                    verification_method_id:
                      type: string
                    verification_method:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        controller:
                          type: string
                        public_key_base58:
                          type: string
                      title: VerificationMethod defines a W3C verification method
                  title: >-
                    VerificationRelationship defines a W3C verification
                    relationship
              capability_delegations:
                type: array
                items:
                  type: object
                  properties:
                    verification_method_id:
                      type: string
                    verification_method:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        controller:
                          type: string
                        public_key_base58:
                          type: string
                      title: VerificationMethod defines a W3C verification method
                  title: >-
                    VerificationRelationship defines a W3C verification
                    relationship
              services:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    type:
                      type: string
                    service_endpoint:
                      type: string
                  description: Service defines a service in the W3C DID Document.
            description: >-
              NOTE: All 'json_name' and 'gogoproto.customtype' tags are for Re
              to unmarshal

              the v1.3 genesis which is in the W3C JSON-LD format.
                    On the other hand, the Re and cosmos-sdk don't use those tags to
                    marshal result to JSON (via grpc-gateway).
            title: DIDDocument defines a W3C DID Document
          sequence:
            type: string
            format: uint64
          creator:
            type: string
        description: >-
          DIDDocumentWithSeq defines a message for DID Document with a sequence
          number

          for preventing replay attacks.
    description: |-
      QueryDIDResponse is the response type for the Query/DIDDocumentWithSeq RPC
      method.
  re.did.Service:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      service_endpoint:
        type: string
    description: Service defines a service in the W3C DID Document.
  re.did.Strings:
    type: object
    properties:
      values:
        type: array
        items:
          type: string
    description: >-
      Strings defines a JSON-LD string array format which is marshalled to a
      single

      string if the array length is 1.
  re.did.VerificationMethod:
    type: object
    properties:
      id:
        type: string
      type:
        type: string
      controller:
        type: string
      public_key_base58:
        type: string
    title: VerificationMethod defines a W3C verification method
  re.did.VerificationRelationship:
    type: object
    properties:
      verification_method_id:
        type: string
      verification_method:
        type: object
        properties:
          id:
            type: string
          type:
            type: string
          controller:
            type: string
          public_key_base58:
            type: string
        title: VerificationMethod defines a W3C verification method
    title: VerificationRelationship defines a W3C verification relationship
