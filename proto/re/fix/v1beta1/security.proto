syntax = "proto3";
package re.fix;

option go_package = "github.com/jim380/Re/x/fix/types";

import "re/fix/v1beta1/standard_message.proto";

message Security {
  string sessionID = 1;
  SecurityDefinitionRequest securityDefinitionRequest = 2;
  SecurityDefinition securityDefinition = 3;
  SecurityDefinitionRequestReject securityDefinitionRequestReject = 4;
}

// Security Definition Request with fields, tags and descriptions.
message SecurityDefinitionRequest {

  // Standard FIX message header.
  Header header = 1;

  // (Tag 320): Unique identifier assigned by the requester to the security
  // definition request message
  string securityReqID = 2;

  // (Tag 321): Specifies the type of security definition being requested (e.g.,
  // requesting all securities, by symbol, by security type, etc.)
  string securityRequestType = 3;

  // (Tag 55): Unique identifier for the security being requested.
  string symbol = 4;

  // (Tag 207): Code or identifier representing the exchange where the security
  // is listed.
  string securityExchange = 5;

  // (Tag 106): Identifier of the issuer or issuer-specific identifier for the
  // security.
  string issuer = 6;

  // (Tag 107): Description or name of the security
  string securityDesc = 7;

  // (Tag 167): Type of the security (e.g., stock, bond, option, future)
  string securityType = 8;

  // (Tag 15): Currency in which the security is denominated
  string currency = 9;

  // Standard FIX message trailer.
  Trailer trailer = 10;
}

// Security Definition with fields, tags and descriptions.
message SecurityDefinition {

  // Standard FIX message header.
  Header header = 1;

  //(Tag 320): Unique identifier of the original security definition request.
  string securityReqID = 2;

  // (Tag 322): Unique identifier assigned by the responder to the security
  // definition message
  string securityResponseID = 3;

  // (Tag 323): Type of response to the security definition request (e.g.,
  // acceptance, rejection, etc.).
  string securityResponseType = 4;

  // (Tag 55): Unique identifier for the security.
  string symbol = 5;

  // (Tag 207): Code or identifier representing the exchange where the security
  // is listed.
  string securityExchange = 6;

  // (Tag 106): Identifier of the issuer or issuer-specific identifier for the
  // security.
  string issuer = 7;

  // (Tag 107): Description or name of the security.
  string SecurityDesc = 8;

  // (Tag 167): Type of the security (e.g., stock, bond, option, future).
  string SecurityType = 9;

  // (Tag 15): Currency in which the security is denominated.
  string currency = 10;

  // (Tag 231): Multiplier applied to the contract size to calculate the actual
  // quantity.
  string contractMultiplier = 11;

  // (Tag 969): Minimum price increment for the security.
  string minPriceIncrement = 12;

  // (Tag 1146): Minimum price increment expressed as a monetary amount.
  string minPriceIncrementAmount = 13;

  // (Tag 996): Unit of measure for the contract size.
  string unitOfMeasure = 14;

  // (Tag 1191): Unit of measure for the price.
  string priceUnitOfMeasure = 15;

  // (Tag 63): Type of settlement for the security.
  string settlType = 16;

  // (Tag 64): Date of settlement for the security.
  string settlDate = 17;

  // (Tag 200): Month and year of maturity for the security.
  string maturityMonthYear = 18;

  // (Tag 223): Coupon rate or interest rate for the security.
  string couponRate = 19;

  // (Tag 228): Factor applied to the price to calculate the actual value.
  string factor = 20;

  // (Tag 255): Credit rating assigned to the security.
  string creditRating = 21;

  // (Tag 2076): Unique identifier for the security exchange.
  string securityExchangeID = 22;

  // Standard FIX message trailer.
  Trailer trailer = 23;
}

// Security Definition Request Rejeect with fields, tags and descriptions.
message SecurityDefinitionRequestReject {

  // Standard FIX message header.
  Header header = 1;

  // (Tag 320): Unique identifier of the rejected security definition request
  string securityReqID = 2;

  // (Tag 560): Result of the security definition request (e.g., successful,
  // invalid security, etc.)
  string securityRequestResult = 3;

  // (Tag 561): Description of the error or reason for rejecting the security
  // definition request.
  string securityRequestError = 4;

  // (Tag 562): Code indicating the specific error or reason for rejecting the
  // request.
  string securityRequestErrorCode = 5;

  // (Tag 58): Additional free-text description or information related to the
  // rejection
  string text = 6;

  // Standard FIX message trailer.
  Trailer trailer = 7;
}