syntax = "proto3";
package jim380.re.fix;

option go_package = "github.com/jim380/Re/x/fix/types";

import "re/fix/standard_message.proto";

message MarketData {
  string sessionID = 1;
  MarketDataRequest marketDataRequest = 2;
  MarketDataSnapShotFullRefresh marketDataSnapShotFullRefresh = 3;
  MarketDataIncremental marketDataIncremental = 4;
  MarketDataRequestReject marketDataRequestReject = 5;
}

// Market Data Request message
message MarketDataRequest {
  // standard Header
  Header header = 1;

  // MDReqID field provides a unique identifier for the market data request
  // message
  string mdReqID = 2;

  // subscriptionRequestType field corresponds to the FIX tag 263, and the
  // values 0 and 1 respectively indicate snapshot and snapshot + incremental
  // updates.
  int64 subscriptionRequestType = 3;

  // MarketDepth field is used to indicate the level of market data depth that
  // is being requested. Specifically, it specifies how many levels of the order
  // book should be included in the response to the request
  int64 marketDepth = 4;

  // The mdUpdateType field specifies the type of updates that the sender wants
  // to receive in response to their request for market data. The possible
  // values are "0" for full refresh, "1" for incremental refresh, and "2" for
  // removing a single price level
  int64 mdUpdateType = 5;

  // The NoRelatedSym field in a Market Data Request message is used to indicate
  // the number of symbols or instruments for which the market data is being
  // requested
  int64 noRelatedSym = 6;

  // In the context of a Market Data Request message in the FIX protocol, the
  // Symbol field refers to the security or financial instrument for which
  // market data is being requested
  string symbol = 7;

  // standard Trailer
  Trailer trailer = 8;
}

// Market Data Snapshot/Full Refresh message
message MarketDataSnapShotFullRefresh {
  // standard Header
  Header header = 1;

  // The identifier of an originating market data request (corresponds to the
  // MDReqID field specified in the Market Data Request message)
  string mdReqID = 2;

  // The ticker symbol that is being quoted (such as BTC/USDT)
  string symbol = 3;

  // The number of market data entries (bids or offers) listed in a request
  int64 noMDEntries = 4;

  // The repeated group of MDEntry fields that provide multiple entries
  repeated MDEntry mdEntries = 5;

  // standard Trailer
  Trailer trailer = 6;
}

// Market Data Incremental message
message MarketDataIncremental {
  // standard Header
  Header header = 1;

  // The identifier of an originating market data request (corresponds to the
  // MDReqID field specified in the Market Data Request message)
  string mdReqID = 2;

  // The number of market data entries (bids or offers) listed in a request
  int64 NoMDEntries = 3;

  // The repeated group of MDEntry fields that provide the incremental updates
  // for the market data.
  repeated MDEntry mdEntries = 4;

  // standard Trailer
  Trailer trailer = 5;
}

// Market Data Entry message
message MDEntry {
  // The type of update action that is being reported for the MDEntry.
  // Possible values are "0" for new, "1" for change, and "2" for delete.
  int64 mdUpdateAction = 1;

  // The side of a quote: 0 — bid , 1 — ask
  int64 mdEntryType = 2;

  // The price for a market data entry
  string mdEntryPx = 3;

  // The quantity (tradeable volume) of a market data entry.
  string mdEntrySize = 4;
}

// Market Data Request Reject message
message MarketDataRequestReject {
  // standard Header
  Header header = 1;

  // The identifier of a Market Data Request that has been rejected
  string mdReqID = 2;

  // Indicates the reason why a request has been rejected
  int64 mdReqRejReason = 3;

  // The detailed information (if available) on why a request has been rejected
  string text = 4;

  // standard Trailer
  Trailer trailer = 5;
}