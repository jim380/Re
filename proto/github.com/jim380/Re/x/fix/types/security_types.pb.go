// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jim380/re/fix/security_types.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SecurityTypes struct {
	SessionID                  string                      `protobuf:"bytes,1,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	SecurityTypesRequest       *SecurityTypesRequest       `protobuf:"bytes,2,opt,name=securityTypesRequest,proto3" json:"securityTypesRequest,omitempty"`
	SecurityTypesResponse      *SecurityTypesResponse      `protobuf:"bytes,3,opt,name=SecurityTypesResponse,proto3" json:"SecurityTypesResponse,omitempty"`
	SecurityTypesRequestReject *SecurityTypesRequestReject `protobuf:"bytes,4,opt,name=SecurityTypesRequestReject,proto3" json:"SecurityTypesRequestReject,omitempty"`
}

func (m *SecurityTypes) Reset()         { *m = SecurityTypes{} }
func (m *SecurityTypes) String() string { return proto.CompactTextString(m) }
func (*SecurityTypes) ProtoMessage()    {}
func (*SecurityTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac831ca6e5768ce3, []int{0}
}
func (m *SecurityTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityTypes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityTypes.Merge(m, src)
}
func (m *SecurityTypes) XXX_Size() int {
	return m.Size()
}
func (m *SecurityTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityTypes.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityTypes proto.InternalMessageInfo

func (m *SecurityTypes) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *SecurityTypes) GetSecurityTypesRequest() *SecurityTypesRequest {
	if m != nil {
		return m.SecurityTypesRequest
	}
	return nil
}

func (m *SecurityTypes) GetSecurityTypesResponse() *SecurityTypesResponse {
	if m != nil {
		return m.SecurityTypesResponse
	}
	return nil
}

func (m *SecurityTypes) GetSecurityTypesRequestReject() *SecurityTypesRequestReject {
	if m != nil {
		return m.SecurityTypesRequestReject
	}
	return nil
}

// Security Types Request with fields, tags and descriptions.
type SecurityTypesRequest struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (320)
	SecurityReqID string `protobuf:"bytes,2,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	// (58) Comment, instructions, or other identifying information.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// (336) Optional Trading Session Identifier to specify a particular trading
	// session for which you want to obtain a list of securities that are
	// tradeable.
	TradingSessionID string `protobuf:"bytes,4,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	// (625)
	TradingSessionSubID string `protobuf:"bytes,5,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	// (460) Used to qualify which security types are returned
	Product string `protobuf:"bytes,6,opt,name=product,proto3" json:"product,omitempty"`
	// (167) Used to qualify which security type is returned
	SecurityType string `protobuf:"bytes,7,opt,name=securityType,proto3" json:"securityType,omitempty"`
	// (762) Used to qualify which security types are returned
	SecuritySubType string `protobuf:"bytes,8,opt,name=securitySubType,proto3" json:"securitySubType,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,9,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *SecurityTypesRequest) Reset()         { *m = SecurityTypesRequest{} }
func (m *SecurityTypesRequest) String() string { return proto.CompactTextString(m) }
func (*SecurityTypesRequest) ProtoMessage()    {}
func (*SecurityTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac831ca6e5768ce3, []int{1}
}
func (m *SecurityTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityTypesRequest.Merge(m, src)
}
func (m *SecurityTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SecurityTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityTypesRequest proto.InternalMessageInfo

func (m *SecurityTypesRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SecurityTypesRequest) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *SecurityTypesRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SecurityTypesRequest) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *SecurityTypesRequest) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *SecurityTypesRequest) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *SecurityTypesRequest) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *SecurityTypesRequest) GetSecuritySubType() string {
	if m != nil {
		return m.SecuritySubType
	}
	return ""
}

func (m *SecurityTypesRequest) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

// Security Types Response with fields, tags and descriptions.
type SecurityTypesResponse struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (320)
	SecurityReqID string `protobuf:"bytes,2,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	// (322) Identifier for the security response message
	SecurityResponseID string `protobuf:"bytes,3,opt,name=securityResponseID,proto3" json:"securityResponseID,omitempty"`
	// (323) The result of the security request identified by SecurityReqID (320)
	SecurityResponseType string `protobuf:"bytes,4,opt,name=securityResponseType,proto3" json:"securityResponseType,omitempty"`
	// (557) Indicates total number of security types in the event that multiple
	// Security Type messages are used to return results
	TotNoSecurityTypes string `protobuf:"bytes,5,opt,name=totNoSecurityTypes,proto3" json:"totNoSecurityTypes,omitempty"`
	// (893) Indicates if this message in a fragmented response
	LastFragment string `protobuf:"bytes,6,opt,name=lastFragment,proto3" json:"lastFragment,omitempty"`
	// (558)
	NoSecurityTypes string `protobuf:"bytes,7,opt,name=noSecurityTypes,proto3" json:"noSecurityTypes,omitempty"`
	// (167) Required if NoSecurityTypes (558) > 0
	SecurityType string `protobuf:"bytes,8,opt,name=securityType,proto3" json:"securityType,omitempty"`
	// (762)
	SecuritySubType string `protobuf:"bytes,9,opt,name=securitySubType,proto3" json:"securitySubType,omitempty"`
	// (460)
	Product string `protobuf:"bytes,10,opt,name=product,proto3" json:"product,omitempty"`
	// (461) Indicates the type of security using ISO 10962 standard,
	// Classification of Financial Instruments (CFI code) values. ISO 10962 is
	// maintained by ANNA (Association of National Numbering Agencies) acting as
	// Registration Authority
	CFICode string `protobuf:"bytes,11,opt,name=cFICode,proto3" json:"cFICode,omitempty"`
	// (58) Comment, instructions, or other identifying information.
	Text string `protobuf:"bytes,12,opt,name=text,proto3" json:"text,omitempty"`
	// (336) Optional Trading Session Identifier to specify a particular trading
	// session for which you want to obtain a list of securities that are
	// tradeable.
	TradingSessionID string `protobuf:"bytes,13,opt,name=tradingSessionID,proto3" json:"tradingSessionID,omitempty"`
	// (625)
	TradingSessionSubID string `protobuf:"bytes,14,opt,name=tradingSessionSubID,proto3" json:"tradingSessionSubID,omitempty"`
	// (263) Subscribe or unsubscribe for security status to security specified in
	// request.
	SubscriptionRequestType string `protobuf:"bytes,15,opt,name=subscriptionRequestType,proto3" json:"subscriptionRequestType,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,16,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *SecurityTypesResponse) Reset()         { *m = SecurityTypesResponse{} }
func (m *SecurityTypesResponse) String() string { return proto.CompactTextString(m) }
func (*SecurityTypesResponse) ProtoMessage()    {}
func (*SecurityTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac831ca6e5768ce3, []int{2}
}
func (m *SecurityTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityTypesResponse.Merge(m, src)
}
func (m *SecurityTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SecurityTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityTypesResponse proto.InternalMessageInfo

func (m *SecurityTypesResponse) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SecurityTypesResponse) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *SecurityTypesResponse) GetSecurityResponseID() string {
	if m != nil {
		return m.SecurityResponseID
	}
	return ""
}

func (m *SecurityTypesResponse) GetSecurityResponseType() string {
	if m != nil {
		return m.SecurityResponseType
	}
	return ""
}

func (m *SecurityTypesResponse) GetTotNoSecurityTypes() string {
	if m != nil {
		return m.TotNoSecurityTypes
	}
	return ""
}

func (m *SecurityTypesResponse) GetLastFragment() string {
	if m != nil {
		return m.LastFragment
	}
	return ""
}

func (m *SecurityTypesResponse) GetNoSecurityTypes() string {
	if m != nil {
		return m.NoSecurityTypes
	}
	return ""
}

func (m *SecurityTypesResponse) GetSecurityType() string {
	if m != nil {
		return m.SecurityType
	}
	return ""
}

func (m *SecurityTypesResponse) GetSecuritySubType() string {
	if m != nil {
		return m.SecuritySubType
	}
	return ""
}

func (m *SecurityTypesResponse) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *SecurityTypesResponse) GetCFICode() string {
	if m != nil {
		return m.CFICode
	}
	return ""
}

func (m *SecurityTypesResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SecurityTypesResponse) GetTradingSessionID() string {
	if m != nil {
		return m.TradingSessionID
	}
	return ""
}

func (m *SecurityTypesResponse) GetTradingSessionSubID() string {
	if m != nil {
		return m.TradingSessionSubID
	}
	return ""
}

func (m *SecurityTypesResponse) GetSubscriptionRequestType() string {
	if m != nil {
		return m.SubscriptionRequestType
	}
	return ""
}

func (m *SecurityTypesResponse) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

// Security Types Request Reject with fields, tags and descriptions.
type SecurityTypesRequestReject struct {
	// Standard FIX message header.
	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// (320) Identifier for the security request message that was rejected
	SecurityReqID string `protobuf:"bytes,2,opt,name=securityReqID,proto3" json:"securityReqID,omitempty"`
	// (350) Reason for rejecting the security request
	RejectReason string `protobuf:"bytes,3,opt,name=rejectReason,proto3" json:"rejectReason,omitempty"`
	// (58) Comment, instructions, or other identifying information
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Standard FIX message trailer.
	Trailer *Trailer `protobuf:"bytes,5,opt,name=trailer,proto3" json:"trailer,omitempty"`
}

func (m *SecurityTypesRequestReject) Reset()         { *m = SecurityTypesRequestReject{} }
func (m *SecurityTypesRequestReject) String() string { return proto.CompactTextString(m) }
func (*SecurityTypesRequestReject) ProtoMessage()    {}
func (*SecurityTypesRequestReject) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac831ca6e5768ce3, []int{3}
}
func (m *SecurityTypesRequestReject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityTypesRequestReject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityTypesRequestReject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityTypesRequestReject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityTypesRequestReject.Merge(m, src)
}
func (m *SecurityTypesRequestReject) XXX_Size() int {
	return m.Size()
}
func (m *SecurityTypesRequestReject) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityTypesRequestReject.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityTypesRequestReject proto.InternalMessageInfo

func (m *SecurityTypesRequestReject) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SecurityTypesRequestReject) GetSecurityReqID() string {
	if m != nil {
		return m.SecurityReqID
	}
	return ""
}

func (m *SecurityTypesRequestReject) GetRejectReason() string {
	if m != nil {
		return m.RejectReason
	}
	return ""
}

func (m *SecurityTypesRequestReject) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *SecurityTypesRequestReject) GetTrailer() *Trailer {
	if m != nil {
		return m.Trailer
	}
	return nil
}

func init() {
	proto.RegisterType((*SecurityTypes)(nil), "jim380.re.fix.SecurityTypes")
	proto.RegisterType((*SecurityTypesRequest)(nil), "jim380.re.fix.SecurityTypesRequest")
	proto.RegisterType((*SecurityTypesResponse)(nil), "jim380.re.fix.SecurityTypesResponse")
	proto.RegisterType((*SecurityTypesRequestReject)(nil), "jim380.re.fix.SecurityTypesRequestReject")
}

func init() {
	proto.RegisterFile("jim380/re/fix/security_types.proto", fileDescriptor_ac831ca6e5768ce3)
}

var fileDescriptor_ac831ca6e5768ce3 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xda, 0x4c,
	0x14, 0xc5, 0x7c, 0xfc, 0xc4, 0x03, 0x7c, 0x89, 0xa6, 0x49, 0x6b, 0x45, 0x95, 0x85, 0x5c, 0x16,
	0xb4, 0x52, 0x0d, 0x22, 0x9b, 0xa8, 0xcb, 0x16, 0x45, 0x65, 0xd3, 0xc5, 0x10, 0xa9, 0x52, 0x36,
	0x91, 0xb1, 0x27, 0x64, 0xa2, 0xe0, 0x21, 0x33, 0x63, 0x89, 0xbc, 0x45, 0x9f, 0xa4, 0xcf, 0xd1,
	0x4d, 0xa5, 0x2c, 0x2b, 0x75, 0x53, 0xc1, 0x43, 0x74, 0x5b, 0x71, 0x6d, 0x83, 0xed, 0x18, 0x4a,
	0x17, 0xd9, 0x31, 0xe7, 0x9c, 0xb9, 0x33, 0xf7, 0x9e, 0x83, 0x07, 0x59, 0x37, 0x6c, 0x72, 0x72,
	0xda, 0xed, 0x08, 0xda, 0xb9, 0x62, 0xb3, 0x8e, 0xa4, 0x6e, 0x20, 0x98, 0xba, 0xbf, 0x54, 0xf7,
	0x53, 0x2a, 0xed, 0xa9, 0xe0, 0x8a, 0xe3, 0x46, 0xa8, 0xb1, 0x05, 0xb5, 0xaf, 0xd8, 0xec, 0xb8,
	0x95, 0xd9, 0xa2, 0x1c, 0xdf, 0x73, 0x84, 0x77, 0x39, 0xa1, 0x52, 0x3a, 0x63, 0x1a, 0x6e, 0xb2,
	0xbe, 0x17, 0x51, 0x63, 0x18, 0x55, 0x3b, 0x5f, 0x16, 0xc3, 0x2f, 0x91, 0x2e, 0xa9, 0x94, 0x8c,
	0xfb, 0x83, 0xbe, 0xa1, 0x35, 0xb5, 0xb6, 0x4e, 0xd6, 0x00, 0xfe, 0x8c, 0x0e, 0x65, 0x52, 0x4e,
	0xe8, 0x5d, 0x40, 0xa5, 0x32, 0x8a, 0x4d, 0xad, 0x5d, 0xeb, 0xbd, 0xb2, 0x53, 0x77, 0xb0, 0x87,
	0x39, 0x52, 0x92, 0x5b, 0x00, 0x5f, 0xa0, 0xa3, 0x8c, 0x5a, 0x4e, 0xb9, 0x2f, 0xa9, 0xf1, 0x1f,
	0x54, 0x6e, 0x6d, 0xaf, 0x1c, 0x6a, 0x49, 0x7e, 0x09, 0xcc, 0xd0, 0x71, 0xee, 0x4d, 0xe8, 0x0d,
	0x75, 0x95, 0x51, 0x82, 0x03, 0x5e, 0xef, 0x72, 0x75, 0xd8, 0x40, 0xb6, 0x14, 0xb3, 0x7e, 0x17,
	0xd1, 0x61, 0x1e, 0x8d, 0xdf, 0xa2, 0xca, 0x35, 0x75, 0x3c, 0x2a, 0x60, 0xa6, 0xb5, 0xde, 0x51,
	0xe6, 0xbc, 0x8f, 0x40, 0x92, 0x48, 0x84, 0x5b, 0xa8, 0x11, 0x8f, 0x89, 0xd0, 0xbb, 0x41, 0x1f,
	0x06, 0xac, 0x93, 0x34, 0x88, 0x31, 0x2a, 0x29, 0x3a, 0x53, 0x30, 0x23, 0x9d, 0xc0, 0x6f, 0xfc,
	0x06, 0x1d, 0x28, 0xe1, 0x78, 0xcc, 0x1f, 0x0f, 0x57, 0x36, 0x96, 0x80, 0x7f, 0x84, 0xe3, 0x2e,
	0x7a, 0x96, 0xc6, 0x86, 0xc1, 0x68, 0xd0, 0x37, 0xca, 0x20, 0xcf, 0xa3, 0xb0, 0x81, 0xaa, 0x53,
	0xc1, 0xbd, 0xc0, 0x55, 0x46, 0x05, 0x54, 0xf1, 0x12, 0x5b, 0xa8, 0x9e, 0x34, 0xd6, 0xa8, 0x02,
	0x9d, 0xc2, 0x70, 0x1b, 0xed, 0xc7, 0xeb, 0x61, 0x30, 0x02, 0xd9, 0x1e, 0xc8, 0xb2, 0x30, 0xee,
	0xa2, 0xaa, 0x12, 0x0e, 0xbb, 0xa5, 0xc2, 0xd0, 0x61, 0x5e, 0xcf, 0x33, 0xf3, 0x3a, 0x0f, 0x59,
	0x12, 0xcb, 0xac, 0xaf, 0xe5, 0x0d, 0x09, 0x7a, 0x9a, 0xd1, 0xdb, 0x08, 0xaf, 0x81, 0xf0, 0xa0,
	0x41, 0x3f, 0x32, 0x22, 0x87, 0xc1, 0xbd, 0xf5, 0x1f, 0x27, 0x46, 0xa1, 0xff, 0xd0, 0x9a, 0x5c,
	0x6e, 0x79, 0x86, 0xe2, 0xea, 0x13, 0x4f, 0xb5, 0x15, 0xb9, 0x93, 0xc3, 0x2c, 0x2d, 0xb8, 0x75,
	0xa4, 0x3a, 0x13, 0xce, 0x78, 0x42, 0xfd, 0xd8, 0xa1, 0x14, 0xb6, 0xb4, 0xc0, 0xcf, 0x14, 0x0c,
	0x9d, 0xca, 0xc2, 0x8f, 0x0c, 0xdd, 0xdb, 0xcd, 0x50, 0x3d, 0xdf, 0xd0, 0x44, 0x70, 0x50, 0x3a,
	0x38, 0x06, 0xaa, 0xba, 0x67, 0x83, 0x0f, 0xdc, 0xa3, 0x46, 0x2d, 0x64, 0xa2, 0xe5, 0x2a, 0xde,
	0xf5, 0xbf, 0xc4, 0xbb, 0xf1, 0x6f, 0xf1, 0xfe, 0x7f, 0x73, 0xbc, 0x4f, 0xd1, 0x0b, 0x19, 0x8c,
	0xa4, 0x2b, 0xd8, 0x54, 0x31, 0xee, 0x47, 0x7f, 0x5e, 0xe8, 0x6b, 0x1f, 0x76, 0x6d, 0xa2, 0x93,
	0x81, 0x3d, 0xd8, 0x2d, 0xb0, 0x3f, 0xb5, 0x6d, 0x9f, 0xa5, 0xa7, 0x49, 0xad, 0x85, 0xea, 0x22,
	0xfc, 0x88, 0x51, 0x47, 0x72, 0x3f, 0xca, 0x6b, 0x0a, 0x5b, 0x4d, 0xbd, 0x94, 0x98, 0x7a, 0xa2,
	0xbb, 0xf2, 0x4e, 0xdd, 0xbd, 0x7f, 0xf7, 0x6d, 0x6e, 0x6a, 0x0f, 0x73, 0x53, 0xfb, 0x35, 0x37,
	0xb5, 0x2f, 0x0b, 0xb3, 0xf0, 0xb0, 0x30, 0x0b, 0x3f, 0x16, 0x66, 0xe1, 0xa2, 0x39, 0x66, 0xea,
	0x3a, 0x18, 0xd9, 0x2e, 0x9f, 0x74, 0xa2, 0x37, 0x8a, 0xd0, 0xce, 0x0c, 0x5e, 0x29, 0x78, 0xcf,
	0x46, 0x15, 0x78, 0x9b, 0x4e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x6e, 0xfa, 0x91, 0xf6,
	0x06, 0x00, 0x00,
}

func (m *SecurityTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecurityTypesRequestReject != nil {
		{
			size, err := m.SecurityTypesRequestReject.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.SecurityTypesResponse != nil {
		{
			size, err := m.SecurityTypesResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.SecurityTypesRequest != nil {
		{
			size, err := m.SecurityTypesRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecuritySubType) > 0 {
		i -= len(m.SecuritySubType)
		copy(dAtA[i:], m.SecuritySubType)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecuritySubType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SecurityType) > 0 {
		i -= len(m.SecurityType)
		copy(dAtA[i:], m.SecurityType)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecurityType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Product) > 0 {
		i -= len(m.Product)
		copy(dAtA[i:], m.Product)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.Product)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.SubscriptionRequestType) > 0 {
		i -= len(m.SubscriptionRequestType)
		copy(dAtA[i:], m.SubscriptionRequestType)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SubscriptionRequestType)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.TradingSessionSubID) > 0 {
		i -= len(m.TradingSessionSubID)
		copy(dAtA[i:], m.TradingSessionSubID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.TradingSessionSubID)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.TradingSessionID) > 0 {
		i -= len(m.TradingSessionID)
		copy(dAtA[i:], m.TradingSessionID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.TradingSessionID)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CFICode) > 0 {
		i -= len(m.CFICode)
		copy(dAtA[i:], m.CFICode)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.CFICode)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Product) > 0 {
		i -= len(m.Product)
		copy(dAtA[i:], m.Product)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.Product)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SecuritySubType) > 0 {
		i -= len(m.SecuritySubType)
		copy(dAtA[i:], m.SecuritySubType)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecuritySubType)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SecurityType) > 0 {
		i -= len(m.SecurityType)
		copy(dAtA[i:], m.SecurityType)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecurityType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.NoSecurityTypes) > 0 {
		i -= len(m.NoSecurityTypes)
		copy(dAtA[i:], m.NoSecurityTypes)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.NoSecurityTypes)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LastFragment) > 0 {
		i -= len(m.LastFragment)
		copy(dAtA[i:], m.LastFragment)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.LastFragment)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TotNoSecurityTypes) > 0 {
		i -= len(m.TotNoSecurityTypes)
		copy(dAtA[i:], m.TotNoSecurityTypes)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.TotNoSecurityTypes)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityResponseType) > 0 {
		i -= len(m.SecurityResponseType)
		copy(dAtA[i:], m.SecurityResponseType)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecurityResponseType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SecurityResponseID) > 0 {
		i -= len(m.SecurityResponseID)
		copy(dAtA[i:], m.SecurityResponseID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecurityResponseID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SecurityTypesRequestReject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityTypesRequestReject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityTypesRequestReject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Trailer != nil {
		{
			size, err := m.Trailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RejectReason) > 0 {
		i -= len(m.RejectReason)
		copy(dAtA[i:], m.RejectReason)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.RejectReason)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SecurityReqID) > 0 {
		i -= len(m.SecurityReqID)
		copy(dAtA[i:], m.SecurityReqID)
		i = encodeVarintSecurityTypes(dAtA, i, uint64(len(m.SecurityReqID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSecurityTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecurityTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecurityTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecurityTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.SecurityTypesRequest != nil {
		l = m.SecurityTypesRequest.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.SecurityTypesResponse != nil {
		l = m.SecurityTypesResponse.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.SecurityTypesRequestReject != nil {
		l = m.SecurityTypesRequestReject.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *SecurityTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecurityType)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecuritySubType)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *SecurityTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecurityResponseID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecurityResponseType)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.TotNoSecurityTypes)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.LastFragment)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.NoSecurityTypes)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecurityType)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecuritySubType)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.Product)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.CFICode)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.TradingSessionID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.TradingSessionSubID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SubscriptionRequestType)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 2 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func (m *SecurityTypesRequestReject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.SecurityReqID)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.RejectReason)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovSecurityTypes(uint64(l))
	}
	return n
}

func sovSecurityTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecurityTypes(x uint64) (n int) {
	return sovSecurityTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecurityTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityTypesRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityTypesRequest == nil {
				m.SecurityTypesRequest = &SecurityTypesRequest{}
			}
			if err := m.SecurityTypesRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityTypesResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityTypesResponse == nil {
				m.SecurityTypesResponse = &SecurityTypesResponse{}
			}
			if err := m.SecurityTypesResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityTypesRequestReject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityTypesRequestReject == nil {
				m.SecurityTypesRequestReject = &SecurityTypesRequestReject{}
			}
			if err := m.SecurityTypesRequestReject.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecuritySubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecuritySubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityResponseID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityResponseID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityResponseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityResponseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotNoSecurityTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotNoSecurityTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastFragment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastFragment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoSecurityTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoSecurityTypes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecuritySubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecuritySubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Product = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CFICode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CFICode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingSessionSubID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingSessionSubID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionRequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionRequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SecurityTypesRequestReject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityTypesRequestReject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityTypesRequestReject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityReqID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityReqID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RejectReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Trailer{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSecurityTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecurityTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecurityTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecurityTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSecurityTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSecurityTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSecurityTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecurityTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSecurityTypes = fmt.Errorf("proto: unexpected end of group")
)
